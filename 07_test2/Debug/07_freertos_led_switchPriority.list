
07_freertos_led_switchPriority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005418  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c4  080056c4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056cc  080056cc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056cc  080056cc  000156cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056d0  080056d0  000156d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080056d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013888  2000001c  080056f0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200138a4  080056f0  000238a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016161  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e36  00000000  00000000  000361ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00038fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  0003a138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018101  00000000  00000000  0003b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bae  00000000  00000000  00053221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098c9d  00000000  00000000  00066dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ffa6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d0  00000000  00000000  000ffac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055a0 	.word	0x080055a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	080055a0 	.word	0x080055a0

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200137fc 	.word	0x200137fc

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b96e 	b.w	8000578 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468c      	mov	ip, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	f040 8083 	bne.w	80003ca <__udivmoddi4+0x116>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4617      	mov	r7, r2
 80002c8:	d947      	bls.n	800035a <__udivmoddi4+0xa6>
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	b142      	cbz	r2, 80002e2 <__udivmoddi4+0x2e>
 80002d0:	f1c2 0020 	rsb	r0, r2, #32
 80002d4:	fa24 f000 	lsr.w	r0, r4, r0
 80002d8:	4091      	lsls	r1, r2
 80002da:	4097      	lsls	r7, r2
 80002dc:	ea40 0c01 	orr.w	ip, r0, r1
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e6:	0c23      	lsrs	r3, r4, #16
 80002e8:	fbbc f6f8 	udiv	r6, ip, r8
 80002ec:	fa1f fe87 	uxth.w	lr, r7
 80002f0:	fb08 c116 	mls	r1, r8, r6, ip
 80002f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f8:	fb06 f10e 	mul.w	r1, r6, lr
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d909      	bls.n	8000314 <__udivmoddi4+0x60>
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 8119 	bcs.w	800053c <__udivmoddi4+0x288>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 8116 	bls.w	800053c <__udivmoddi4+0x288>
 8000310:	3e02      	subs	r6, #2
 8000312:	443b      	add	r3, r7
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 fe0e 	mul.w	lr, r0, lr
 8000328:	45a6      	cmp	lr, r4
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x8c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	f080 8105 	bcs.w	8000540 <__udivmoddi4+0x28c>
 8000336:	45a6      	cmp	lr, r4
 8000338:	f240 8102 	bls.w	8000540 <__udivmoddi4+0x28c>
 800033c:	3802      	subs	r0, #2
 800033e:	443c      	add	r4, r7
 8000340:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa0>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xaa>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f282 	clz	r2, r2
 8000362:	2a00      	cmp	r2, #0
 8000364:	d150      	bne.n	8000408 <__udivmoddi4+0x154>
 8000366:	1bcb      	subs	r3, r1, r7
 8000368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	2601      	movs	r6, #1
 8000372:	fbb3 fcfe 	udiv	ip, r3, lr
 8000376:	0c21      	lsrs	r1, r4, #16
 8000378:	fb0e 331c 	mls	r3, lr, ip, r3
 800037c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000380:	fb08 f30c 	mul.w	r3, r8, ip
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xe4>
 8000388:	1879      	adds	r1, r7, r1
 800038a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0xe2>
 8000390:	428b      	cmp	r3, r1
 8000392:	f200 80e9 	bhi.w	8000568 <__udivmoddi4+0x2b4>
 8000396:	4684      	mov	ip, r0
 8000398:	1ac9      	subs	r1, r1, r3
 800039a:	b2a3      	uxth	r3, r4
 800039c:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a8:	fb08 f800 	mul.w	r8, r8, r0
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x10c>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x10a>
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	f200 80d9 	bhi.w	8000570 <__udivmoddi4+0x2bc>
 80003be:	4618      	mov	r0, r3
 80003c0:	eba4 0408 	sub.w	r4, r4, r8
 80003c4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c8:	e7bf      	b.n	800034a <__udivmoddi4+0x96>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x12e>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80b1 	beq.w	8000536 <__udivmoddi4+0x282>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x1cc>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0x140>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80b8 	bhi.w	8000564 <__udivmoddi4+0x2b0>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0103 	sbc.w	r1, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	468c      	mov	ip, r1
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0a8      	beq.n	8000354 <__udivmoddi4+0xa0>
 8000402:	e9c5 4c00 	strd	r4, ip, [r5]
 8000406:	e7a5      	b.n	8000354 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f603 	lsr.w	r6, r0, r3
 8000410:	4097      	lsls	r7, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800041a:	40d9      	lsrs	r1, r3
 800041c:	4330      	orrs	r0, r6
 800041e:	0c03      	lsrs	r3, r0, #16
 8000420:	fbb1 f6fe 	udiv	r6, r1, lr
 8000424:	fa1f f887 	uxth.w	r8, r7
 8000428:	fb0e 1116 	mls	r1, lr, r6, r1
 800042c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000430:	fb06 f108 	mul.w	r1, r6, r8
 8000434:	4299      	cmp	r1, r3
 8000436:	fa04 f402 	lsl.w	r4, r4, r2
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x19c>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000442:	f080 808d 	bcs.w	8000560 <__udivmoddi4+0x2ac>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 808a 	bls.w	8000560 <__udivmoddi4+0x2ac>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b281      	uxth	r1, r0
 8000454:	fbb3 f0fe 	udiv	r0, r3, lr
 8000458:	fb0e 3310 	mls	r3, lr, r0, r3
 800045c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000460:	fb00 f308 	mul.w	r3, r0, r8
 8000464:	428b      	cmp	r3, r1
 8000466:	d907      	bls.n	8000478 <__udivmoddi4+0x1c4>
 8000468:	1879      	adds	r1, r7, r1
 800046a:	f100 3cff 	add.w	ip, r0, #4294967295
 800046e:	d273      	bcs.n	8000558 <__udivmoddi4+0x2a4>
 8000470:	428b      	cmp	r3, r1
 8000472:	d971      	bls.n	8000558 <__udivmoddi4+0x2a4>
 8000474:	3802      	subs	r0, #2
 8000476:	4439      	add	r1, r7
 8000478:	1acb      	subs	r3, r1, r3
 800047a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047e:	e778      	b.n	8000372 <__udivmoddi4+0xbe>
 8000480:	f1c6 0c20 	rsb	ip, r6, #32
 8000484:	fa03 f406 	lsl.w	r4, r3, r6
 8000488:	fa22 f30c 	lsr.w	r3, r2, ip
 800048c:	431c      	orrs	r4, r3
 800048e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800049a:	fa21 f10c 	lsr.w	r1, r1, ip
 800049e:	431f      	orrs	r7, r3
 80004a0:	0c3b      	lsrs	r3, r7, #16
 80004a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a6:	fa1f f884 	uxth.w	r8, r4
 80004aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ae:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004b2:	fb09 fa08 	mul.w	sl, r9, r8
 80004b6:	458a      	cmp	sl, r1
 80004b8:	fa02 f206 	lsl.w	r2, r2, r6
 80004bc:	fa00 f306 	lsl.w	r3, r0, r6
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x220>
 80004c2:	1861      	adds	r1, r4, r1
 80004c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c8:	d248      	bcs.n	800055c <__udivmoddi4+0x2a8>
 80004ca:	458a      	cmp	sl, r1
 80004cc:	d946      	bls.n	800055c <__udivmoddi4+0x2a8>
 80004ce:	f1a9 0902 	sub.w	r9, r9, #2
 80004d2:	4421      	add	r1, r4
 80004d4:	eba1 010a 	sub.w	r1, r1, sl
 80004d8:	b2bf      	uxth	r7, r7
 80004da:	fbb1 f0fe 	udiv	r0, r1, lr
 80004de:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e6:	fb00 f808 	mul.w	r8, r0, r8
 80004ea:	45b8      	cmp	r8, r7
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x24a>
 80004ee:	19e7      	adds	r7, r4, r7
 80004f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f4:	d22e      	bcs.n	8000554 <__udivmoddi4+0x2a0>
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d92c      	bls.n	8000554 <__udivmoddi4+0x2a0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4427      	add	r7, r4
 80004fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000502:	eba7 0708 	sub.w	r7, r7, r8
 8000506:	fba0 8902 	umull	r8, r9, r0, r2
 800050a:	454f      	cmp	r7, r9
 800050c:	46c6      	mov	lr, r8
 800050e:	4649      	mov	r1, r9
 8000510:	d31a      	bcc.n	8000548 <__udivmoddi4+0x294>
 8000512:	d017      	beq.n	8000544 <__udivmoddi4+0x290>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x27a>
 8000516:	ebb3 020e 	subs.w	r2, r3, lr
 800051a:	eb67 0701 	sbc.w	r7, r7, r1
 800051e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000522:	40f2      	lsrs	r2, r6
 8000524:	ea4c 0202 	orr.w	r2, ip, r2
 8000528:	40f7      	lsrs	r7, r6
 800052a:	e9c5 2700 	strd	r2, r7, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e70b      	b.n	8000354 <__udivmoddi4+0xa0>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e9      	b.n	8000314 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fd      	b.n	8000340 <__udivmoddi4+0x8c>
 8000544:	4543      	cmp	r3, r8
 8000546:	d2e5      	bcs.n	8000514 <__udivmoddi4+0x260>
 8000548:	ebb8 0e02 	subs.w	lr, r8, r2
 800054c:	eb69 0104 	sbc.w	r1, r9, r4
 8000550:	3801      	subs	r0, #1
 8000552:	e7df      	b.n	8000514 <__udivmoddi4+0x260>
 8000554:	4608      	mov	r0, r1
 8000556:	e7d2      	b.n	80004fe <__udivmoddi4+0x24a>
 8000558:	4660      	mov	r0, ip
 800055a:	e78d      	b.n	8000478 <__udivmoddi4+0x1c4>
 800055c:	4681      	mov	r9, r0
 800055e:	e7b9      	b.n	80004d4 <__udivmoddi4+0x220>
 8000560:	4666      	mov	r6, ip
 8000562:	e775      	b.n	8000450 <__udivmoddi4+0x19c>
 8000564:	4630      	mov	r0, r6
 8000566:	e74a      	b.n	80003fe <__udivmoddi4+0x14a>
 8000568:	f1ac 0c02 	sub.w	ip, ip, #2
 800056c:	4439      	add	r1, r7
 800056e:	e713      	b.n	8000398 <__udivmoddi4+0xe4>
 8000570:	3802      	subs	r0, #2
 8000572:	443c      	add	r4, r7
 8000574:	e724      	b.n	80003c0 <__udivmoddi4+0x10c>
 8000576:	bf00      	nop

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000582:	f000 fa97 	bl	8000ab4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000586:	f000 f855 	bl	8000634 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800058a:	f000 f8bd 	bl	8000708 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	//Enable the CYCCNT counter.
	DWT_CTRL |= (1 << 0);
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <main+0x98>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a20      	ldr	r2, [pc, #128]	; (8000614 <main+0x98>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 800059a:	f003 f833 	bl	8003604 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800059e:	f004 fa1b 	bl	80049d8 <SEGGER_SYSVIEW_Start>

  	SEGGER_UART_init(500000);
 80005a2:	481d      	ldr	r0, [pc, #116]	; (8000618 <main+0x9c>)
 80005a4:	f003 fa6c 	bl	8003a80 <SEGGER_UART_init>
	 * 		LED
	 *
	 *
	 *
	 * */
	status = xTaskCreate(task_led_green, "led_green", 200, NULL, 2,
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <main+0xa0>)
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	2302      	movs	r3, #2
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	22c8      	movs	r2, #200	; 0xc8
 80005b4:	491a      	ldr	r1, [pc, #104]	; (8000620 <main+0xa4>)
 80005b6:	481b      	ldr	r0, [pc, #108]	; (8000624 <main+0xa8>)
 80005b8:	f001 fd2d 	bl	8002016 <xTaskCreate>
 80005bc:	60f8      	str	r0, [r7, #12]
			&taskHandle_led_green);

	configASSERT(status == pdPASS);
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d00a      	beq.n	80005da <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c8:	f383 8811 	msr	BASEPRI, r3
 80005cc:	f3bf 8f6f 	isb	sy
 80005d0:	f3bf 8f4f 	dsb	sy
 80005d4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d6:	bf00      	nop
 80005d8:	e7fe      	b.n	80005d8 <main+0x5c>

	status = xTaskCreate(task_led_orange, "led_orange", 200, NULL, 3,
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <main+0xac>)
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2303      	movs	r3, #3
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	22c8      	movs	r2, #200	; 0xc8
 80005e6:	4911      	ldr	r1, [pc, #68]	; (800062c <main+0xb0>)
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <main+0xb4>)
 80005ea:	f001 fd14 	bl	8002016 <xTaskCreate>
 80005ee:	60f8      	str	r0, [r7, #12]
			&taskHandle_led_orange);

	configASSERT(status == pdPASS);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d00a      	beq.n	800060c <main+0x90>
        __asm volatile
 80005f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fa:	f383 8811 	msr	BASEPRI, r3
 80005fe:	f3bf 8f6f 	isb	sy
 8000602:	f3bf 8f4f 	dsb	sy
 8000606:	607b      	str	r3, [r7, #4]
    }
 8000608:	bf00      	nop
 800060a:	e7fe      	b.n	800060a <main+0x8e>

	vTaskStartScheduler();
 800060c:	f001 ff40 	bl	8002490 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000610:	e7fe      	b.n	8000610 <main+0x94>
 8000612:	bf00      	nop
 8000614:	e0001000 	.word	0xe0001000
 8000618:	0007a120 	.word	0x0007a120
 800061c:	200137a8 	.word	0x200137a8
 8000620:	080055b8 	.word	0x080055b8
 8000624:	080007c1 	.word	0x080007c1
 8000628:	200137ac 	.word	0x200137ac
 800062c:	080055c4 	.word	0x080055c4
 8000630:	080007e5 	.word	0x080007e5

08000634 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 ffa4 	bl	8005590 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 200;
 80006a8:	23c8      	movs	r3, #200	; 0xc8
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fd1f 	bl	80010fc <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
		Error_Handler();
 80006c4:	f000 f908 	bl	80008d8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2103      	movs	r1, #3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 ff80 	bl	80015ec <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc2>
		Error_Handler();
 80006f2:	f000 f8f1 	bl	80008d8 <Error_Handler>
	}
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <MX_GPIO_Init+0xac>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a23      	ldr	r2, [pc, #140]	; (80007b4 <MX_GPIO_Init+0xac>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MX_GPIO_Init+0xac>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_GPIO_Init+0xac>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_GPIO_Init+0xac>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_GPIO_Init+0xac>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, led_green_Pin | led_orange_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800075c:	4816      	ldr	r0, [pc, #88]	; (80007b8 <MX_GPIO_Init+0xb0>)
 800075e:	f000 fc75 	bl	800104c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : btn_user_Pin */
	GPIO_InitStruct.Pin = btn_user_Pin;
 8000762:	2301      	movs	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000766:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(btn_user_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4619      	mov	r1, r3
 8000776:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_GPIO_Init+0xb4>)
 8000778:	f000 fae4 	bl	8000d44 <HAL_GPIO_Init>

	/*Configure GPIO pins : led_green_Pin led_orange_Pin */
	GPIO_InitStruct.Pin = led_green_Pin | led_orange_Pin;
 800077c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000780:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <MX_GPIO_Init+0xb0>)
 8000796:	f000 fad5 	bl	8000d44 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2006      	movs	r0, #6
 80007a0:	f000 faa6 	bl	8000cf0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007a4:	2006      	movs	r0, #6
 80007a6:	f000 fabf 	bl	8000d28 <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3720      	adds	r7, #32
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	40020000 	.word	0x40020000

080007c0 <task_led_green>:

/* USER CODE BEGIN 4 */
static void task_led_green(void *parameter) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, led_green_Pin);
 80007c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <task_led_green+0x20>)
 80007ce:	f000 fc56 	bl	800107e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80007d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d6:	f000 f9af 	bl	8000b38 <HAL_Delay>
		switch_priority();
 80007da:	f000 f823 	bl	8000824 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, led_green_Pin);
 80007de:	e7f3      	b.n	80007c8 <task_led_green+0x8>
 80007e0:	40020c00 	.word	0x40020c00

080007e4 <task_led_orange>:
	}
}

static void task_led_orange(void *parameter) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	while (1) {
		HAL_GPIO_TogglePin(GPIOD, led_orange_Pin);
 80007ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <task_led_orange+0x20>)
 80007f2:	f000 fc44 	bl	800107e <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80007f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007fa:	f000 f99d 	bl	8000b38 <HAL_Delay>
		switch_priority();
 80007fe:	f000 f811 	bl	8000824 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, led_orange_Pin);
 8000802:	e7f3      	b.n	80007ec <task_led_orange+0x8>
 8000804:	40020c00 	.word	0x40020c00

08000808 <btn_isr_handle>:
	}
}

void btn_isr_handle(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

	traceISR_ENTER();
 800080c:	f004 fbae 	bl	8004f6c <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <btn_isr_handle+0x18>)
 8000812:	2201      	movs	r2, #1
 8000814:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 8000816:	f004 fbeb 	bl	8004ff0 <SEGGER_SYSVIEW_RecordExitISR>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000038 	.word	0x20000038

08000824 <switch_priority>:

void switch_priority(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
	UBaseType_t p1, p2;
	xTaskHandle t1, t2, curr;

	BaseType_t switch_priority = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 800082e:	f002 fbb1 	bl	8002f94 <vPortEnterCritical>
	if (status_button) {
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <switch_priority+0x84>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d004      	beq.n	8000844 <switch_priority+0x20>
		status_button = 0;
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <switch_priority+0x84>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8000840:	2301      	movs	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8000844:	f002 fbd6 	bl	8002ff4 <vPortExitCritical>

	if (switch_priority) {
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d027      	beq.n	800089e <switch_priority+0x7a>
		t1 = xTaskGetHandle("led_green");
 800084e:	4817      	ldr	r0, [pc, #92]	; (80008ac <switch_priority+0x88>)
 8000850:	f001 ffa8 	bl	80027a4 <xTaskGetHandle>
 8000854:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("led_orange");
 8000856:	4816      	ldr	r0, [pc, #88]	; (80008b0 <switch_priority+0x8c>)
 8000858:	f001 ffa4 	bl	80027a4 <xTaskGetHandle>
 800085c:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 800085e:	6938      	ldr	r0, [r7, #16]
 8000860:	f001 fd3c 	bl	80022dc <uxTaskPriorityGet>
 8000864:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f001 fd38 	bl	80022dc <uxTaskPriorityGet>
 800086c:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 800086e:	f002 f9d7 	bl	8002c20 <xTaskGetCurrentTaskHandle>
 8000872:	6038      	str	r0, [r7, #0]

		if (curr == t1) {
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	429a      	cmp	r2, r3
 800087a:	d108      	bne.n	800088e <switch_priority+0x6a>
			vTaskPrioritySet(t1, p2);
 800087c:	6879      	ldr	r1, [r7, #4]
 800087e:	6938      	ldr	r0, [r7, #16]
 8000880:	f001 fd46 	bl	8002310 <vTaskPrioritySet>
			vTaskPrioritySet(t2, p1);
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f001 fd42 	bl	8002310 <vTaskPrioritySet>
			vTaskPrioritySet(t2, p1);
			vTaskPrioritySet(t1, p2);
		}
	}

}
 800088c:	e007      	b.n	800089e <switch_priority+0x7a>
			vTaskPrioritySet(t2, p1);
 800088e:	68b9      	ldr	r1, [r7, #8]
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	f001 fd3d 	bl	8002310 <vTaskPrioritySet>
			vTaskPrioritySet(t1, p2);
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	6938      	ldr	r0, [r7, #16]
 800089a:	f001 fd39 	bl	8002310 <vTaskPrioritySet>
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000038 	.word	0x20000038
 80008ac:	080055b8 	.word	0x080055b8
 80008b0:	080055c4 	.word	0x080055c4

080008b4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80008c6:	f000 f917 	bl	8000af8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40000c00 	.word	0x40000c00

080008d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000922:	f002 fab9 	bl	8002e98 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000944:	2200      	movs	r2, #0
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	2032      	movs	r0, #50	; 0x32
 800094a:	f000 f9d1 	bl	8000cf0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800094e:	2032      	movs	r0, #50	; 0x32
 8000950:	f000 f9ea 	bl	8000d28 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <HAL_InitTick+0xa4>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <HAL_InitTick+0xa4>)
 800095e:	f043 0308 	orr.w	r3, r3, #8
 8000962:	6413      	str	r3, [r2, #64]	; 0x40
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_InitTick+0xa4>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	f003 0308 	and.w	r3, r3, #8
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000970:	f107 0210 	add.w	r2, r7, #16
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f001 f81e 	bl	80019bc <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000980:	f001 f808 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 8000984:	4603      	mov	r3, r0
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800098a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098c:	4a13      	ldr	r2, [pc, #76]	; (80009dc <HAL_InitTick+0xa8>)
 800098e:	fba2 2303 	umull	r2, r3, r2, r3
 8000992:	0c9b      	lsrs	r3, r3, #18
 8000994:	3b01      	subs	r3, #1
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_InitTick+0xac>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <HAL_InitTick+0xb0>)
 800099c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_InitTick+0xac>)
 80009a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_InitTick+0xac>)
 80009a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009aa:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_InitTick+0xac>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_InitTick+0xac>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <HAL_InitTick+0xac>)
 80009ba:	f001 f831 	bl	8001a20 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d104      	bne.n	80009ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80009c4:	4806      	ldr	r0, [pc, #24]	; (80009e0 <HAL_InitTick+0xac>)
 80009c6:	f001 f885 	bl	8001ad4 <HAL_TIM_Base_Start_IT>
 80009ca:	4603      	mov	r3, r0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3730      	adds	r7, #48	; 0x30
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	431bde83 	.word	0x431bde83
 80009e0:	200137b0 	.word	0x200137b0
 80009e4:	40000c00 	.word	0x40000c00

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	btn_isr_handle();
 8000a18:	f7ff fef6 	bl	8000808 <btn_isr_handle>
  /* USER CODE END EXTI0_IRQn 0 */
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	  HAL_GPIO_EXTI_IRQHandler(btn_user_Pin);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 fb49 	bl	80010b4 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END TIM5_IRQn 0 */



  HAL_TIM_IRQHandler(&htim5);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM5_IRQHandler+0x10>)
 8000a2e:	f001 f8b3 	bl	8001b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200137b0 	.word	0x200137b0

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a66:	490e      	ldr	r1, [pc, #56]	; (8000aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a7c:	4c0b      	ldr	r4, [pc, #44]	; (8000aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a8a:	f7ff ffd7 	bl	8000a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f004 fd3f 	bl	8005510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a92:	f7ff fd73 	bl	800057c <main>
  bx  lr    
 8000a96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000aa4:	080056d4 	.word	0x080056d4
  ldr r2, =_sbss
 8000aa8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000aac:	200138a4 	.word	0x200138a4

08000ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <HAL_Init+0x40>)
 8000abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_Init+0x40>)
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_Init+0x40>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f8fc 	bl	8000cda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff ff26 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff fefc 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023c00 	.word	0x40023c00

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	200137f8 	.word	0x200137f8

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200137f8 	.word	0x200137f8

08000b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff ffee 	bl	8000b20 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Delay+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffde 	bl	8000b20 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ff4c 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d02:	f7ff ff61 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	68b9      	ldr	r1, [r7, #8]
 8000d0c:	6978      	ldr	r0, [r7, #20]
 8000d0e:	f7ff ffb1 	bl	8000c74 <NVIC_EncodePriority>
 8000d12:	4602      	mov	r2, r0
 8000d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff80 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff54 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
 8000d5e:	e159      	b.n	8001014 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d60:	2201      	movs	r2, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f040 8148 	bne.w	800100e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d005      	beq.n	8000d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d130      	bne.n	8000df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	f003 0201 	and.w	r2, r3, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d017      	beq.n	8000e34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d123      	bne.n	8000e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	220f      	movs	r2, #15
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3208      	adds	r2, #8
 8000e82:	69b9      	ldr	r1, [r7, #24]
 8000e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0203 	and.w	r2, r3, #3
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80a2 	beq.w	800100e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b57      	ldr	r3, [pc, #348]	; (800102c <HAL_GPIO_Init+0x2e8>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a56      	ldr	r2, [pc, #344]	; (800102c <HAL_GPIO_Init+0x2e8>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b54      	ldr	r3, [pc, #336]	; (800102c <HAL_GPIO_Init+0x2e8>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee6:	4a52      	ldr	r2, [pc, #328]	; (8001030 <HAL_GPIO_Init+0x2ec>)
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a49      	ldr	r2, [pc, #292]	; (8001034 <HAL_GPIO_Init+0x2f0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d019      	beq.n	8000f46 <HAL_GPIO_Init+0x202>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a48      	ldr	r2, [pc, #288]	; (8001038 <HAL_GPIO_Init+0x2f4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x1fe>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a47      	ldr	r2, [pc, #284]	; (800103c <HAL_GPIO_Init+0x2f8>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x1fa>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a46      	ldr	r2, [pc, #280]	; (8001040 <HAL_GPIO_Init+0x2fc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x1f6>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a45      	ldr	r2, [pc, #276]	; (8001044 <HAL_GPIO_Init+0x300>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x1f2>
 8000f32:	2304      	movs	r3, #4
 8000f34:	e008      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f36:	2307      	movs	r3, #7
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e004      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f46:	2300      	movs	r3, #0
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	f002 0203 	and.w	r2, r2, #3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4093      	lsls	r3, r2
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f58:	4935      	ldr	r1, [pc, #212]	; (8001030 <HAL_GPIO_Init+0x2ec>)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f66:	4b38      	ldr	r3, [pc, #224]	; (8001048 <HAL_GPIO_Init+0x304>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8a:	4a2f      	ldr	r2, [pc, #188]	; (8001048 <HAL_GPIO_Init+0x304>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <HAL_GPIO_Init+0x304>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb4:	4a24      	ldr	r2, [pc, #144]	; (8001048 <HAL_GPIO_Init+0x304>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <HAL_GPIO_Init+0x304>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fde:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <HAL_GPIO_Init+0x304>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_GPIO_Init+0x304>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001008:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <HAL_GPIO_Init+0x304>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3301      	adds	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	f67f aea2 	bls.w	8000d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40013800 	.word	0x40013800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40013c00 	.word	0x40013c00

0800104c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001068:	e003      	b.n	8001072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	041a      	lsls	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800107e:	b480      	push	{r7}
 8001080:	b085      	sub	sp, #20
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001090:	887a      	ldrh	r2, [r7, #2]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4013      	ands	r3, r2
 8001096:	041a      	lsls	r2, r3, #16
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43d9      	mvns	r1, r3
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	400b      	ands	r3, r1
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d006      	beq.n	80010d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f806 	bl	80010e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40013c00 	.word	0x40013c00

080010e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e264      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d075      	beq.n	8001206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111a:	4ba3      	ldr	r3, [pc, #652]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b04      	cmp	r3, #4
 8001124:	d00c      	beq.n	8001140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4ba0      	ldr	r3, [pc, #640]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112e:	2b08      	cmp	r3, #8
 8001130:	d112      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001132:	4b9d      	ldr	r3, [pc, #628]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800113e:	d10b      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	4b99      	ldr	r3, [pc, #612]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d05b      	beq.n	8001204 <HAL_RCC_OscConfig+0x108>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d157      	bne.n	8001204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e23f      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001160:	d106      	bne.n	8001170 <HAL_RCC_OscConfig+0x74>
 8001162:	4b91      	ldr	r3, [pc, #580]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a90      	ldr	r2, [pc, #576]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e01d      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x98>
 800117a:	4b8b      	ldr	r3, [pc, #556]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a8a      	ldr	r2, [pc, #552]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b88      	ldr	r3, [pc, #544]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a87      	ldr	r2, [pc, #540]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001194:	4b84      	ldr	r3, [pc, #528]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a83      	ldr	r2, [pc, #524]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a80      	ldr	r2, [pc, #512]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcb4 	bl	8000b20 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcb0 	bl	8000b20 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e204      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b76      	ldr	r3, [pc, #472]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0xc0>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fca0 	bl	8000b20 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fc9c 	bl	8000b20 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1f0      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b6c      	ldr	r3, [pc, #432]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0xe8>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d063      	beq.n	80012da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001212:	4b65      	ldr	r3, [pc, #404]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b62      	ldr	r3, [pc, #392]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001226:	2b08      	cmp	r3, #8
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122a:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b5c      	ldr	r3, [pc, #368]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1c4      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b56      	ldr	r3, [pc, #344]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4952      	ldr	r1, [pc, #328]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e03a      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <HAL_RCC_OscConfig+0x2b0>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fc55 	bl	8000b20 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fc51 	bl	8000b20 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1a5      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	4b46      	ldr	r3, [pc, #280]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4940      	ldr	r1, [pc, #256]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <HAL_RCC_OscConfig+0x2b0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc34 	bl	8000b20 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc30 	bl	8000b20 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e184      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d030      	beq.n	8001348 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d016      	beq.n	800131c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <HAL_RCC_OscConfig+0x2b4>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f4:	f7ff fc14 	bl	8000b20 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fc10 	bl	8000b20 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e164      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x200>
 800131a:	e015      	b.n	8001348 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <HAL_RCC_OscConfig+0x2b4>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001322:	f7ff fbfd 	bl	8000b20 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132a:	f7ff fbf9 	bl	8000b20 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e14d      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80a0 	beq.w	8001496 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10f      	bne.n	8001386 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_RCC_OscConfig+0x2b8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d121      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_RCC_OscConfig+0x2b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_RCC_OscConfig+0x2b8>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139e:	f7ff fbbf 	bl	8000b20 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	e011      	b.n	80013ca <HAL_RCC_OscConfig+0x2ce>
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	42470000 	.word	0x42470000
 80013b0:	42470e80 	.word	0x42470e80
 80013b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b8:	f7ff fbb2 	bl	8000b20 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e106      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b85      	ldr	r3, [pc, #532]	; (80015e0 <HAL_RCC_OscConfig+0x4e4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d106      	bne.n	80013ec <HAL_RCC_OscConfig+0x2f0>
 80013de:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e2:	4a80      	ldr	r2, [pc, #512]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ea:	e01c      	b.n	8001426 <HAL_RCC_OscConfig+0x32a>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d10c      	bne.n	800140e <HAL_RCC_OscConfig+0x312>
 80013f4:	4b7b      	ldr	r3, [pc, #492]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	4a7a      	ldr	r2, [pc, #488]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 80013fa:	f043 0304 	orr.w	r3, r3, #4
 80013fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001400:	4b78      	ldr	r3, [pc, #480]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	4a77      	ldr	r2, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6713      	str	r3, [r2, #112]	; 0x70
 800140c:	e00b      	b.n	8001426 <HAL_RCC_OscConfig+0x32a>
 800140e:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	4a74      	ldr	r2, [pc, #464]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	6713      	str	r3, [r2, #112]	; 0x70
 800141a:	4b72      	ldr	r3, [pc, #456]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 800141c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141e:	4a71      	ldr	r2, [pc, #452]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001420:	f023 0304 	bic.w	r3, r3, #4
 8001424:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d015      	beq.n	800145a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142e:	f7ff fb77 	bl	8000b20 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001434:	e00a      	b.n	800144c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001436:	f7ff fb73 	bl	8000b20 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f241 3288 	movw	r2, #5000	; 0x1388
 8001444:	4293      	cmp	r3, r2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e0c5      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144c:	4b65      	ldr	r3, [pc, #404]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0ee      	beq.n	8001436 <HAL_RCC_OscConfig+0x33a>
 8001458:	e014      	b.n	8001484 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fb61 	bl	8000b20 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f7ff fb5d 	bl	8000b20 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e0af      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001478:	4b5a      	ldr	r3, [pc, #360]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1ee      	bne.n	8001462 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d105      	bne.n	8001496 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800148a:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a55      	ldr	r2, [pc, #340]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 809b 	beq.w	80015d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014a0:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d05c      	beq.n	8001566 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d141      	bne.n	8001538 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b4:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <HAL_RCC_OscConfig+0x4ec>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb31 	bl	8000b20 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fb2d 	bl	8000b20 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e081      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d4:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69da      	ldr	r2, [r3, #28]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	019b      	lsls	r3, r3, #6
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	085b      	lsrs	r3, r3, #1
 80014f8:	3b01      	subs	r3, #1
 80014fa:	041b      	lsls	r3, r3, #16
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	061b      	lsls	r3, r3, #24
 8001504:	4937      	ldr	r1, [pc, #220]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_RCC_OscConfig+0x4ec>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb06 	bl	8000b20 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff fb02 	bl	8000b20 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e056      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x41c>
 8001536:	e04e      	b.n	80015d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_RCC_OscConfig+0x4ec>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff faef 	bl	8000b20 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff faeb 	bl	8000b20 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e03f      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f0      	bne.n	8001546 <HAL_RCC_OscConfig+0x44a>
 8001564:	e037      	b.n	80015d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e032      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d028      	beq.n	80015d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d121      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d11a      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015a2:	4013      	ands	r3, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d111      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	3b01      	subs	r3, #1
 80015bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015be:	429a      	cmp	r2, r3
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40007000 	.word	0x40007000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	42470060 	.word	0x42470060

080015ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0cc      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d90c      	bls.n	8001628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b8      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001640:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a52      	ldr	r2, [pc, #328]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	494d      	ldr	r1, [pc, #308]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d044      	beq.n	800170c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d119      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e067      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f023 0203 	bic.w	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4934      	ldr	r1, [pc, #208]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016dc:	f7ff fa20 	bl	8000b20 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff fa1c 	bl	8000b20 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e04f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d20c      	bcs.n	8001734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e032      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4916      	ldr	r1, [pc, #88]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	490e      	ldr	r1, [pc, #56]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001772:	f000 f821 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001776:	4602      	mov	r2, r0
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	490a      	ldr	r1, [pc, #40]	; (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	5ccb      	ldrb	r3, [r1, r3]
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f8ce 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00
 80017a8:	40023800 	.word	0x40023800
 80017ac:	08005694 	.word	0x08005694
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004

080017b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	2300      	movs	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d0:	4b67      	ldr	r3, [pc, #412]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d00d      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x40>
 80017dc:	2b08      	cmp	r3, #8
 80017de:	f200 80bd 	bhi.w	800195c <HAL_RCC_GetSysClockFreq+0x1a4>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x34>
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ea:	e0b7      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b61      	ldr	r3, [pc, #388]	; (8001974 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017ee:	60bb      	str	r3, [r7, #8]
       break;
 80017f0:	e0b7      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f2:	4b61      	ldr	r3, [pc, #388]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80017f4:	60bb      	str	r3, [r7, #8]
      break;
 80017f6:	e0b4      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f8:	4b5d      	ldr	r3, [pc, #372]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001800:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001802:	4b5b      	ldr	r3, [pc, #364]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d04d      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180e:	4b58      	ldr	r3, [pc, #352]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	099b      	lsrs	r3, r3, #6
 8001814:	461a      	mov	r2, r3
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	ea02 0800 	and.w	r8, r2, r0
 8001826:	ea03 0901 	and.w	r9, r3, r1
 800182a:	4640      	mov	r0, r8
 800182c:	4649      	mov	r1, r9
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	014b      	lsls	r3, r1, #5
 8001838:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800183c:	0142      	lsls	r2, r0, #5
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	ebb0 0008 	subs.w	r0, r0, r8
 8001846:	eb61 0109 	sbc.w	r1, r1, r9
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	018b      	lsls	r3, r1, #6
 8001854:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001858:	0182      	lsls	r2, r0, #6
 800185a:	1a12      	subs	r2, r2, r0
 800185c:	eb63 0301 	sbc.w	r3, r3, r1
 8001860:	f04f 0000 	mov.w	r0, #0
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	00d9      	lsls	r1, r3, #3
 800186a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800186e:	00d0      	lsls	r0, r2, #3
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	eb12 0208 	adds.w	r2, r2, r8
 8001878:	eb43 0309 	adc.w	r3, r3, r9
 800187c:	f04f 0000 	mov.w	r0, #0
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	0259      	lsls	r1, r3, #9
 8001886:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800188a:	0250      	lsls	r0, r2, #9
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	461a      	mov	r2, r3
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	f7fe fcf2 	bl	8000284 <__aeabi_uldivmod>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4613      	mov	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e04a      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018aa:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	099b      	lsrs	r3, r3, #6
 80018b0:	461a      	mov	r2, r3
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	ea02 0400 	and.w	r4, r2, r0
 80018c2:	ea03 0501 	and.w	r5, r3, r1
 80018c6:	4620      	mov	r0, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	014b      	lsls	r3, r1, #5
 80018d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018d8:	0142      	lsls	r2, r0, #5
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	1b00      	subs	r0, r0, r4
 80018e0:	eb61 0105 	sbc.w	r1, r1, r5
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	018b      	lsls	r3, r1, #6
 80018ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018f2:	0182      	lsls	r2, r0, #6
 80018f4:	1a12      	subs	r2, r2, r0
 80018f6:	eb63 0301 	sbc.w	r3, r3, r1
 80018fa:	f04f 0000 	mov.w	r0, #0
 80018fe:	f04f 0100 	mov.w	r1, #0
 8001902:	00d9      	lsls	r1, r3, #3
 8001904:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001908:	00d0      	lsls	r0, r2, #3
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	1912      	adds	r2, r2, r4
 8001910:	eb45 0303 	adc.w	r3, r5, r3
 8001914:	f04f 0000 	mov.w	r0, #0
 8001918:	f04f 0100 	mov.w	r1, #0
 800191c:	0299      	lsls	r1, r3, #10
 800191e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001922:	0290      	lsls	r0, r2, #10
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	461a      	mov	r2, r3
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	f7fe fca6 	bl	8000284 <__aeabi_uldivmod>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4613      	mov	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	0c1b      	lsrs	r3, r3, #16
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	3301      	adds	r3, #1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
 8001958:	60bb      	str	r3, [r7, #8]
      break;
 800195a:	e002      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800195e:	60bb      	str	r3, [r7, #8]
      break;
 8001960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001962:	68bb      	ldr	r3, [r7, #8]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	00f42400 	.word	0x00f42400
 8001978:	007a1200 	.word	0x007a1200

0800197c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_RCC_GetHCLKFreq+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000000 	.word	0x20000000

08001994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001998:	f7ff fff0 	bl	800197c <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	0a9b      	lsrs	r3, r3, #10
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	4903      	ldr	r1, [pc, #12]	; (80019b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	080056a4 	.word	0x080056a4

080019bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	220f      	movs	r2, #15
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	08db      	lsrs	r3, r3, #3
 80019f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_RCC_GetClockConfig+0x60>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0207 	and.w	r2, r3, #7
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	601a      	str	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40023c00 	.word	0x40023c00

08001a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e041      	b.n	8001ab6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f839 	bl	8001abe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f000 f9ca 	bl	8001df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d001      	beq.n	8001aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e044      	b.n	8001b76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d018      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b16:	d013      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1a      	ldr	r2, [pc, #104]	; (8001b88 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00e      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_TIM_Base_Start_IT+0xb8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d009      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a16      	ldr	r2, [pc, #88]	; (8001b94 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d111      	bne.n	8001b64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d010      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b62:	e007      	b.n	8001b74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40010000 	.word	0x40010000
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	40000800 	.word	0x40000800
 8001b90:	40000c00 	.word	0x40000c00
 8001b94:	40014000 	.word	0x40014000

08001b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d122      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d11b      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0202 	mvn.w	r2, #2
 8001bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f8ee 	bl	8001dbc <HAL_TIM_IC_CaptureCallback>
 8001be0:	e005      	b.n	8001bee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8e0 	bl	8001da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f8f1 	bl	8001dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d122      	bne.n	8001c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d11b      	bne.n	8001c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0204 	mvn.w	r2, #4
 8001c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8c4 	bl	8001dbc <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8b6 	bl	8001da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f8c7 	bl	8001dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d122      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d11b      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0208 	mvn.w	r2, #8
 8001c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2204      	movs	r2, #4
 8001c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f89a 	bl	8001dbc <HAL_TIM_IC_CaptureCallback>
 8001c88:	e005      	b.n	8001c96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f88c 	bl	8001da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f89d 	bl	8001dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d122      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0210 	mvn.w	r2, #16
 8001cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f870 	bl	8001dbc <HAL_TIM_IC_CaptureCallback>
 8001cdc:	e005      	b.n	8001cea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f862 	bl	8001da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f873 	bl	8001dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d10e      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0201 	mvn.w	r2, #1
 8001d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7fe fdcc 	bl	80008b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	2b80      	cmp	r3, #128	; 0x80
 8001d28:	d10e      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d34:	2b80      	cmp	r3, #128	; 0x80
 8001d36:	d107      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8e2 	bl	8001f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d52:	2b40      	cmp	r3, #64	; 0x40
 8001d54:	d10e      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d60:	2b40      	cmp	r3, #64	; 0x40
 8001d62:	d107      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f838 	bl	8001de4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b20      	cmp	r3, #32
 8001d80:	d10e      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d107      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0220 	mvn.w	r2, #32
 8001d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8ac 	bl	8001ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a34      	ldr	r2, [pc, #208]	; (8001edc <TIM_Base_SetConfig+0xe4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00f      	beq.n	8001e30 <TIM_Base_SetConfig+0x38>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e16:	d00b      	beq.n	8001e30 <TIM_Base_SetConfig+0x38>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a31      	ldr	r2, [pc, #196]	; (8001ee0 <TIM_Base_SetConfig+0xe8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <TIM_Base_SetConfig+0x38>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a30      	ldr	r2, [pc, #192]	; (8001ee4 <TIM_Base_SetConfig+0xec>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <TIM_Base_SetConfig+0x38>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a2f      	ldr	r2, [pc, #188]	; (8001ee8 <TIM_Base_SetConfig+0xf0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d108      	bne.n	8001e42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a25      	ldr	r2, [pc, #148]	; (8001edc <TIM_Base_SetConfig+0xe4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01b      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d017      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <TIM_Base_SetConfig+0xe8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <TIM_Base_SetConfig+0xec>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00f      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a20      	ldr	r2, [pc, #128]	; (8001ee8 <TIM_Base_SetConfig+0xf0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00b      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <TIM_Base_SetConfig+0xf4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <TIM_Base_SetConfig+0xf8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d003      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ef4 <TIM_Base_SetConfig+0xfc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <TIM_Base_SetConfig+0xe4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d103      	bne.n	8001ec8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	615a      	str	r2, [r3, #20]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40014000 	.word	0x40014000
 8001ef0:	40014400 	.word	0x40014400
 8001ef4:	40014800 	.word	0x40014800

08001ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f103 0208 	add.w	r2, r3, #8
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f04f 32ff 	mov.w	r2, #4294967295
 8001f38:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f103 0208 	add.w	r2, r3, #8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f103 0208 	add.w	r2, r3, #8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	601a      	str	r2, [r3, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6892      	ldr	r2, [r2, #8]
 8001fd8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6852      	ldr	r2, [r2, #4]
 8001fe2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d103      	bne.n	8001ff6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	1e5a      	subs	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002016:	b580      	push	{r7, lr}
 8002018:	b08c      	sub	sp, #48	; 0x30
 800201a:	af04      	add	r7, sp, #16
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4618      	mov	r0, r3
 800202c:	f001 f8de 	bl	80031ec <pvPortMalloc>
 8002030:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00e      	beq.n	8002056 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002038:	205c      	movs	r0, #92	; 0x5c
 800203a:	f001 f8d7 	bl	80031ec <pvPortMalloc>
 800203e:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
 800204c:	e005      	b.n	800205a <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f001 f9ac 	bl	80033ac <vPortFree>
 8002054:	e001      	b.n	800205a <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d013      	beq.n	8002088 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002060:	88fa      	ldrh	r2, [r7, #6]
 8002062:	2300      	movs	r3, #0
 8002064:	9303      	str	r3, [sp, #12]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	9302      	str	r3, [sp, #8]
 800206a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f80e 	bl	8002098 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800207c:	69f8      	ldr	r0, [r7, #28]
 800207e:	f000 f8a1 	bl	80021c4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002082:	2301      	movs	r3, #1
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	e002      	b.n	800208e <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
 800208c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800208e:	69bb      	ldr	r3, [r7, #24]
    }
 8002090:	4618      	mov	r0, r3
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	461a      	mov	r2, r3
 80020b0:	21a5      	movs	r1, #165	; 0xa5
 80020b2:	f003 fa6d 	bl	8005590 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80020b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020c0:	3b01      	subs	r3, #1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	f023 0307 	bic.w	r3, r3, #7
 80020ce:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <prvInitialiseNewTask+0x58>
        __asm volatile
 80020da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020de:	f383 8811 	msr	BASEPRI, r3
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	617b      	str	r3, [r7, #20]
    }
 80020ec:	bf00      	nop
 80020ee:	e7fe      	b.n	80020ee <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01f      	beq.n	8002136 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	e012      	b.n	8002122 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	4413      	add	r3, r2
 8002102:	7819      	ldrb	r1, [r3, #0]
 8002104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	3334      	adds	r3, #52	; 0x34
 800210c:	460a      	mov	r2, r1
 800210e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	4413      	add	r3, r2
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	3301      	adds	r3, #1
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	2b0e      	cmp	r3, #14
 8002126:	d9e9      	bls.n	80020fc <prvInitialiseNewTask+0x64>
 8002128:	e000      	b.n	800212c <prvInitialiseNewTask+0x94>
            {
                break;
 800212a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002134:	e003      	b.n	800213e <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	2b09      	cmp	r3, #9
 8002142:	d901      	bls.n	8002148 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002144:	2309      	movs	r3, #9
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002152:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	2200      	movs	r2, #0
 8002158:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800215a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215c:	3304      	adds	r3, #4
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fefe 	bl	8001f60 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	3318      	adds	r3, #24
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fef9 	bl	8001f60 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002172:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	f1c3 020a 	rsb	r2, r3, #10
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002182:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	3354      	adds	r3, #84	; 0x54
 8002188:	2204      	movs	r2, #4
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f003 f9ff 	bl	8005590 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002194:	3358      	adds	r3, #88	; 0x58
 8002196:	2201      	movs	r2, #1
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f003 f9f8 	bl	8005590 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	68f9      	ldr	r1, [r7, #12]
 80021a4:	69b8      	ldr	r0, [r7, #24]
 80021a6:	f000 fd4b 	bl	8002c40 <pxPortInitialiseStack>
 80021aa:	4602      	mov	r2, r0
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80021b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80021bc:	bf00      	nop
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80021c4:	b5b0      	push	{r4, r5, r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80021cc:	f000 fee2 	bl	8002f94 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80021d0:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <prvAddNewTaskToReadyList+0xfc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3301      	adds	r3, #1
 80021d6:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <prvAddNewTaskToReadyList+0xfc>)
 80021d8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <prvAddNewTaskToReadyList+0x100>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80021e2:	4a38      	ldr	r2, [pc, #224]	; (80022c4 <prvAddNewTaskToReadyList+0x100>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80021e8:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <prvAddNewTaskToReadyList+0xfc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d110      	bne.n	8002212 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80021f0:	f000 fc7c 	bl	8002aec <prvInitialiseTaskLists>
 80021f4:	e00d      	b.n	8002212 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80021f6:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <prvAddNewTaskToReadyList+0x104>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80021fe:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <prvAddNewTaskToReadyList+0x100>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	429a      	cmp	r2, r3
 800220a:	d802      	bhi.n	8002212 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800220c:	4a2d      	ldr	r2, [pc, #180]	; (80022c4 <prvAddNewTaskToReadyList+0x100>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002212:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <prvAddNewTaskToReadyList+0x108>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	4a2c      	ldr	r2, [pc, #176]	; (80022cc <prvAddNewTaskToReadyList+0x108>)
 800221a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <prvAddNewTaskToReadyList+0x108>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <prvAddNewTaskToReadyList+0x94>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	f002 ff33 	bl	8005098 <SEGGER_SYSVIEW_OnTaskCreate>
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	461d      	mov	r5, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	461c      	mov	r4, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	1ae3      	subs	r3, r4, r3
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	462b      	mov	r3, r5
 8002254:	f001 fa70 	bl	8003738 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4618      	mov	r0, r3
 800225c:	f002 ffa0 	bl	80051a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	2201      	movs	r2, #1
 8002266:	409a      	lsls	r2, r3
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <prvAddNewTaskToReadyList+0x10c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4313      	orrs	r3, r2
 800226e:	4a18      	ldr	r2, [pc, #96]	; (80022d0 <prvAddNewTaskToReadyList+0x10c>)
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <prvAddNewTaskToReadyList+0x110>)
 8002280:	441a      	add	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3304      	adds	r3, #4
 8002286:	4619      	mov	r1, r3
 8002288:	4610      	mov	r0, r2
 800228a:	f7ff fe76 	bl	8001f7a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800228e:	f000 feb1 	bl	8002ff4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <prvAddNewTaskToReadyList+0x104>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00e      	beq.n	80022b8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <prvAddNewTaskToReadyList+0x100>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d207      	bcs.n	80022b8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <prvAddNewTaskToReadyList+0x114>)
 80022aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bdb0      	pop	{r4, r5, r7, pc}
 80022c0:	20000178 	.word	0x20000178
 80022c4:	2000003c 	.word	0x2000003c
 80022c8:	20000184 	.word	0x20000184
 80022cc:	20000194 	.word	0x20000194
 80022d0:	20000180 	.word	0x20000180
 80022d4:	20000040 	.word	0x20000040
 80022d8:	e000ed04 	.word	0xe000ed04

080022dc <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 80022e4:	f000 fe56 	bl	8002f94 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <uxTaskPriorityGet+0x18>
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <uxTaskPriorityGet+0x30>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	e000      	b.n	80022f6 <uxTaskPriorityGet+0x1a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 80022fe:	f000 fe79 	bl	8002ff4 <vPortExitCritical>

        return uxReturn;
 8002302:	68bb      	ldr	r3, [r7, #8]
    }
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	2000003c 	.word	0x2000003c

08002310 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af02      	add	r7, sp, #8
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b09      	cmp	r3, #9
 8002322:	d90a      	bls.n	800233a <vTaskPrioritySet+0x2a>
        __asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	60fb      	str	r3, [r7, #12]
    }
 8002336:	bf00      	nop
 8002338:	e7fe      	b.n	8002338 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b09      	cmp	r3, #9
 800233e:	d901      	bls.n	8002344 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002340:	2309      	movs	r3, #9
 8002342:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002344:	f000 fe26 	bl	8002f94 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <vTaskPrioritySet+0x44>
 800234e:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <vTaskPrioritySet+0x170>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	e000      	b.n	8002356 <vTaskPrioritySet+0x46>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	4618      	mov	r0, r3
 800235c:	f002 ff62 	bl	8005224 <SEGGER_SYSVIEW_ShrinkId>
 8002360:	4603      	mov	r3, r0
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	2028      	movs	r0, #40	; 0x28
 8002368:	f002 fadc 	bl	8004924 <SEGGER_SYSVIEW_RecordU32x2>
 800236c:	69b8      	ldr	r0, [r7, #24]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	461a      	mov	r2, r3
 800237a:	2300      	movs	r3, #0
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	4613      	mov	r3, r2
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	f001 fa41 	bl	8003808 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d06f      	beq.n	8002474 <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	d90d      	bls.n	80023b8 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 800239c:	4b38      	ldr	r3, [pc, #224]	; (8002480 <vTaskPrioritySet+0x170>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d00f      	beq.n	80023c6 <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80023a6:	4b36      	ldr	r3, [pc, #216]	; (8002480 <vTaskPrioritySet+0x170>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d309      	bcc.n	80023c6 <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 80023b2:	2301      	movs	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e006      	b.n	80023c6 <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 80023b8:	4b31      	ldr	r3, [pc, #196]	; (8002480 <vTaskPrioritySet+0x170>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d101      	bne.n	80023c6 <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 80023c2:	2301      	movs	r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d102      	bne.n	80023de <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	64da      	str	r2, [r3, #76]	; 0x4c
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db04      	blt.n	80023f6 <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f1c3 020a 	rsb	r2, r3, #10
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6959      	ldr	r1, [r3, #20]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <vTaskPrioritySet+0x174>)
 8002406:	4413      	add	r3, r2
 8002408:	4299      	cmp	r1, r3
 800240a:	d128      	bne.n	800245e <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	3304      	adds	r3, #4
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fdd6 	bl	8001fc2 <uxListRemove>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800241c:	2201      	movs	r2, #1
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43da      	mvns	r2, r3
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <vTaskPrioritySet+0x178>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4013      	ands	r3, r2
 800242c:	4a16      	ldr	r2, [pc, #88]	; (8002488 <vTaskPrioritySet+0x178>)
 800242e:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	2201      	movs	r2, #1
 8002436:	409a      	lsls	r2, r3
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <vTaskPrioritySet+0x178>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <vTaskPrioritySet+0x178>)
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <vTaskPrioritySet+0x174>)
 8002450:	441a      	add	r2, r3
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3304      	adds	r3, #4
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f7ff fd8e 	bl	8001f7a <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <vTaskPrioritySet+0x17c>)
 8002466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002474:	f000 fdbe 	bl	8002ff4 <vPortExitCritical>
    }
 8002478:	bf00      	nop
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	2000003c 	.word	0x2000003c
 8002484:	20000040 	.word	0x20000040
 8002488:	20000180 	.word	0x20000180
 800248c:	e000ed04 	.word	0xe000ed04

08002490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <vTaskStartScheduler+0x98>)
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	2300      	movs	r3, #0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	2282      	movs	r2, #130	; 0x82
 80024a2:	4922      	ldr	r1, [pc, #136]	; (800252c <vTaskStartScheduler+0x9c>)
 80024a4:	4822      	ldr	r0, [pc, #136]	; (8002530 <vTaskStartScheduler+0xa0>)
 80024a6:	f7ff fdb6 	bl	8002016 <xTaskCreate>
 80024aa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d124      	bne.n	80024fc <vTaskStartScheduler+0x6c>
        __asm volatile
 80024b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	60bb      	str	r3, [r7, #8]
    }
 80024c4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <vTaskStartScheduler+0xa4>)
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <vTaskStartScheduler+0xa8>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <vTaskStartScheduler+0xac>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <vTaskStartScheduler+0xb0>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <vTaskStartScheduler+0x98>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d102      	bne.n	80024ec <vTaskStartScheduler+0x5c>
 80024e6:	f002 fdbb 	bl	8005060 <SEGGER_SYSVIEW_OnIdle>
 80024ea:	e004      	b.n	80024f6 <vTaskStartScheduler+0x66>
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <vTaskStartScheduler+0xb0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 fe13 	bl	800511c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80024f6:	f000 fc2d 	bl	8002d54 <xPortStartScheduler>
 80024fa:	e00e      	b.n	800251a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002502:	d10a      	bne.n	800251a <vTaskStartScheduler+0x8a>
        __asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	607b      	str	r3, [r7, #4]
    }
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <vTaskStartScheduler+0xb4>)
 800251c:	681b      	ldr	r3, [r3, #0]
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	2000019c 	.word	0x2000019c
 800252c:	080055d0 	.word	0x080055d0
 8002530:	08002abd 	.word	0x08002abd
 8002534:	20000198 	.word	0x20000198
 8002538:	20000184 	.word	0x20000184
 800253c:	2000017c 	.word	0x2000017c
 8002540:	2000003c 	.word	0x2000003c
 8002544:	2000000c 	.word	0x2000000c

08002548 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <vTaskSuspendAll+0x18>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	4a03      	ldr	r2, [pc, #12]	; (8002560 <vTaskSuspendAll+0x18>)
 8002554:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	200001a0 	.word	0x200001a0

08002564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002572:	4b43      	ldr	r3, [pc, #268]	; (8002680 <xTaskResumeAll+0x11c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <xTaskResumeAll+0x2c>
        __asm volatile
 800257a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	603b      	str	r3, [r7, #0]
    }
 800258c:	bf00      	nop
 800258e:	e7fe      	b.n	800258e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002590:	f000 fd00 	bl	8002f94 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002594:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <xTaskResumeAll+0x11c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3b01      	subs	r3, #1
 800259a:	4a39      	ldr	r2, [pc, #228]	; (8002680 <xTaskResumeAll+0x11c>)
 800259c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800259e:	4b38      	ldr	r3, [pc, #224]	; (8002680 <xTaskResumeAll+0x11c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d165      	bne.n	8002672 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025a6:	4b37      	ldr	r3, [pc, #220]	; (8002684 <xTaskResumeAll+0x120>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d061      	beq.n	8002672 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025ae:	e032      	b.n	8002616 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025b0:	4b35      	ldr	r3, [pc, #212]	; (8002688 <xTaskResumeAll+0x124>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3318      	adds	r3, #24
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fd00 	bl	8001fc2 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3304      	adds	r3, #4
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fcfb 	bl	8001fc2 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 fde6 	bl	80051a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	2201      	movs	r2, #1
 80025da:	409a      	lsls	r2, r3
 80025dc:	4b2b      	ldr	r3, [pc, #172]	; (800268c <xTaskResumeAll+0x128>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	4a2a      	ldr	r2, [pc, #168]	; (800268c <xTaskResumeAll+0x128>)
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4a27      	ldr	r2, [pc, #156]	; (8002690 <xTaskResumeAll+0x12c>)
 80025f4:	441a      	add	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3304      	adds	r3, #4
 80025fa:	4619      	mov	r1, r3
 80025fc:	4610      	mov	r0, r2
 80025fe:	f7ff fcbc 	bl	8001f7a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <xTaskResumeAll+0x130>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	429a      	cmp	r2, r3
 800260e:	d302      	bcc.n	8002616 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <xTaskResumeAll+0x134>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002616:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <xTaskResumeAll+0x124>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1c8      	bne.n	80025b0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002624:	f000 fae0 	bl	8002be8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002628:	4b1c      	ldr	r3, [pc, #112]	; (800269c <xTaskResumeAll+0x138>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d010      	beq.n	8002656 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002634:	f000 f91c 	bl	8002870 <xTaskIncrementTick>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <xTaskResumeAll+0x134>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f1      	bne.n	8002634 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <xTaskResumeAll+0x138>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <xTaskResumeAll+0x134>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800265e:	2301      	movs	r3, #1
 8002660:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <xTaskResumeAll+0x13c>)
 8002664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002672:	f000 fcbf 	bl	8002ff4 <vPortExitCritical>

    return xAlreadyYielded;
 8002676:	68bb      	ldr	r3, [r7, #8]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	200001a0 	.word	0x200001a0
 8002684:	20000178 	.word	0x20000178
 8002688:	20000138 	.word	0x20000138
 800268c:	20000180 	.word	0x20000180
 8002690:	20000040 	.word	0x20000040
 8002694:	2000003c 	.word	0x2000003c
 8002698:	2000018c 	.word	0x2000018c
 800269c:	20000188 	.word	0x20000188
 80026a0:	e000ed04 	.word	0xe000ed04

080026a4 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026aa:	f000 fd5f 	bl	800316c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <xTaskGetTickCountFromISR+0x20>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80026b8:	683b      	ldr	r3, [r7, #0]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000017c 	.word	0x2000017c

080026c8 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 80026c8:	b480      	push	{r7}
 80026ca:	b08b      	sub	sp, #44	; 0x2c
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d05b      	beq.n	8002796 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	3308      	adds	r3, #8
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d104      	bne.n	8002702 <prvSearchForNameWithinSingleList+0x3a>
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	3308      	adds	r3, #8
 8002720:	429a      	cmp	r2, r3
 8002722:	d104      	bne.n	800272e <prvSearchForNameWithinSingleList+0x66>
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
 800273e:	e01c      	b.n	800277a <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	4413      	add	r3, r2
 8002746:	3334      	adds	r3, #52	; 0x34
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	4413      	add	r3, r2
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	7afa      	ldrb	r2, [r7, #11]
 8002756:	429a      	cmp	r2, r3
 8002758:	d002      	beq.n	8002760 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 800275a:	2301      	movs	r3, #1
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	e006      	b.n	800276e <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8002760:	7afb      	ldrb	r3, [r7, #11]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d103      	bne.n	800276e <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 800276a:	2301      	movs	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d106      	bne.n	8002782 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	3301      	adds	r3, #1
 8002778:	623b      	str	r3, [r7, #32]
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	2b0e      	cmp	r3, #14
 800277e:	d9df      	bls.n	8002740 <prvSearchForNameWithinSingleList+0x78>
 8002780:	e000      	b.n	8002784 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8002782:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	2b00      	cmp	r3, #0
 8002788:	d104      	bne.n	8002794 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	429a      	cmp	r2, r3
 8002790:	d1bb      	bne.n	800270a <prvSearchForNameWithinSingleList+0x42>
 8002792:	e000      	b.n	8002796 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8002794:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002798:	4618      	mov	r0, r3
 800279a:	372c      	adds	r7, #44	; 0x2c
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 80027ac:	230a      	movs	r3, #10
 80027ae:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7fd fd5f 	bl	8000274 <strlen>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b0e      	cmp	r3, #14
 80027ba:	d90a      	bls.n	80027d2 <xTaskGetHandle+0x2e>
        __asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	60fb      	str	r3, [r7, #12]
    }
 80027ce:	bf00      	nop
 80027d0:	e7fe      	b.n	80027d0 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 80027d2:	f7ff feb9 	bl	8002548 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3b01      	subs	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4a1d      	ldr	r2, [pc, #116]	; (800285c <xTaskGetHandle+0xb8>)
 80027e8:	4413      	add	r3, r2
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff6b 	bl	80026c8 <prvSearchForNameWithinSingleList>
 80027f2:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1ea      	bne.n	80027d6 <xTaskGetHandle+0x32>
 8002800:	e000      	b.n	8002804 <xTaskGetHandle+0x60>
                    break;
 8002802:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <xTaskGetHandle+0xbc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff59 	bl	80026c8 <prvSearchForNameWithinSingleList>
 8002816:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <xTaskGetHandle+0xc0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff4f 	bl	80026c8 <prvSearchForNameWithinSingleList>
 800282a:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d104      	bne.n	800283c <xTaskGetHandle+0x98>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	480c      	ldr	r0, [pc, #48]	; (8002868 <xTaskGetHandle+0xc4>)
 8002836:	f7ff ff47 	bl	80026c8 <prvSearchForNameWithinSingleList>
 800283a:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d104      	bne.n	800284c <xTaskGetHandle+0xa8>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4809      	ldr	r0, [pc, #36]	; (800286c <xTaskGetHandle+0xc8>)
 8002846:	f7ff ff3f 	bl	80026c8 <prvSearchForNameWithinSingleList>
 800284a:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 800284c:	f7ff fe8a 	bl	8002564 <xTaskResumeAll>

        return pxTCB;
 8002850:	693b      	ldr	r3, [r7, #16]
    }
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000040 	.word	0x20000040
 8002860:	20000130 	.word	0x20000130
 8002864:	20000134 	.word	0x20000134
 8002868:	20000164 	.word	0x20000164
 800286c:	2000014c 	.word	0x2000014c

08002870 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800287a:	4b50      	ldr	r3, [pc, #320]	; (80029bc <xTaskIncrementTick+0x14c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f040 8092 	bne.w	80029a8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002884:	4b4e      	ldr	r3, [pc, #312]	; (80029c0 <xTaskIncrementTick+0x150>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800288c:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <xTaskIncrementTick+0x150>)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d120      	bne.n	80028da <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002898:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <xTaskIncrementTick+0x154>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <xTaskIncrementTick+0x48>
        __asm volatile
 80028a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	603b      	str	r3, [r7, #0]
    }
 80028b4:	bf00      	nop
 80028b6:	e7fe      	b.n	80028b6 <xTaskIncrementTick+0x46>
 80028b8:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <xTaskIncrementTick+0x154>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b42      	ldr	r3, [pc, #264]	; (80029c8 <xTaskIncrementTick+0x158>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a40      	ldr	r2, [pc, #256]	; (80029c4 <xTaskIncrementTick+0x154>)
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4a40      	ldr	r2, [pc, #256]	; (80029c8 <xTaskIncrementTick+0x158>)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b3f      	ldr	r3, [pc, #252]	; (80029cc <xTaskIncrementTick+0x15c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	4a3e      	ldr	r2, [pc, #248]	; (80029cc <xTaskIncrementTick+0x15c>)
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	f000 f987 	bl	8002be8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <xTaskIncrementTick+0x160>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d34c      	bcc.n	800297e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028e4:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <xTaskIncrementTick+0x154>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d104      	bne.n	80028f8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ee:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <xTaskIncrementTick+0x160>)
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	601a      	str	r2, [r3, #0]
                    break;
 80028f6:	e042      	b.n	800297e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028f8:	4b32      	ldr	r3, [pc, #200]	; (80029c4 <xTaskIncrementTick+0x154>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	d203      	bcs.n	8002918 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002910:	4a2f      	ldr	r2, [pc, #188]	; (80029d0 <xTaskIncrementTick+0x160>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002916:	e032      	b.n	800297e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	3304      	adds	r3, #4
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fb50 	bl	8001fc2 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	3318      	adds	r3, #24
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fb47 	bl	8001fc2 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4618      	mov	r0, r3
 8002938:	f002 fc32 	bl	80051a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	2201      	movs	r2, #1
 8002942:	409a      	lsls	r2, r3
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <xTaskIncrementTick+0x164>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4313      	orrs	r3, r2
 800294a:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <xTaskIncrementTick+0x164>)
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <xTaskIncrementTick+0x168>)
 800295c:	441a      	add	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	3304      	adds	r3, #4
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f7ff fb08 	bl	8001f7a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <xTaskIncrementTick+0x16c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	429a      	cmp	r2, r3
 8002976:	d3b5      	bcc.n	80028e4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002978:	2301      	movs	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800297c:	e7b2      	b.n	80028e4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <xTaskIncrementTick+0x16c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002984:	4914      	ldr	r1, [pc, #80]	; (80029d8 <xTaskIncrementTick+0x168>)
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d901      	bls.n	800299a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002996:	2301      	movs	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <xTaskIncrementTick+0x170>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80029a2:	2301      	movs	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	e004      	b.n	80029b2 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <xTaskIncrementTick+0x174>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <xTaskIncrementTick+0x174>)
 80029b0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80029b2:	697b      	ldr	r3, [r7, #20]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	200001a0 	.word	0x200001a0
 80029c0:	2000017c 	.word	0x2000017c
 80029c4:	20000130 	.word	0x20000130
 80029c8:	20000134 	.word	0x20000134
 80029cc:	20000190 	.word	0x20000190
 80029d0:	20000198 	.word	0x20000198
 80029d4:	20000180 	.word	0x20000180
 80029d8:	20000040 	.word	0x20000040
 80029dc:	2000003c 	.word	0x2000003c
 80029e0:	2000018c 	.word	0x2000018c
 80029e4:	20000188 	.word	0x20000188

080029e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029ee:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <vTaskSwitchContext+0xbc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <vTaskSwitchContext+0xc0>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80029fc:	e04d      	b.n	8002a9a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80029fe:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <vTaskSwitchContext+0xc0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <vTaskSwitchContext+0xc4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002a12:	7afb      	ldrb	r3, [r7, #11]
 8002a14:	f1c3 031f 	rsb	r3, r3, #31
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	4925      	ldr	r1, [pc, #148]	; (8002ab0 <vTaskSwitchContext+0xc8>)
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	607b      	str	r3, [r7, #4]
    }
 8002a40:	bf00      	nop
 8002a42:	e7fe      	b.n	8002a42 <vTaskSwitchContext+0x5a>
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <vTaskSwitchContext+0xc8>)
 8002a50:	4413      	add	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	3308      	adds	r3, #8
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d104      	bne.n	8002a74 <vTaskSwitchContext+0x8c>
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <vTaskSwitchContext+0xcc>)
 8002a7c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <vTaskSwitchContext+0xcc>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <vTaskSwitchContext+0xd0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d102      	bne.n	8002a90 <vTaskSwitchContext+0xa8>
 8002a8a:	f002 fae9 	bl	8005060 <SEGGER_SYSVIEW_OnIdle>
}
 8002a8e:	e004      	b.n	8002a9a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <vTaskSwitchContext+0xcc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f002 fb41 	bl	800511c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200001a0 	.word	0x200001a0
 8002aa8:	2000018c 	.word	0x2000018c
 8002aac:	20000180 	.word	0x20000180
 8002ab0:	20000040 	.word	0x20000040
 8002ab4:	2000003c 	.word	0x2000003c
 8002ab8:	2000019c 	.word	0x2000019c

08002abc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ac4:	f000 f852 	bl	8002b6c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <prvIdleTask+0x28>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d9f9      	bls.n	8002ac4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <prvIdleTask+0x2c>)
 8002ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ae0:	e7f0      	b.n	8002ac4 <prvIdleTask+0x8>
 8002ae2:	bf00      	nop
 8002ae4:	20000040 	.word	0x20000040
 8002ae8:	e000ed04 	.word	0xe000ed04

08002aec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	e00c      	b.n	8002b12 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <prvInitialiseTaskLists+0x60>)
 8002b04:	4413      	add	r3, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fa0a 	bl	8001f20 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	d9ef      	bls.n	8002af8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b18:	480d      	ldr	r0, [pc, #52]	; (8002b50 <prvInitialiseTaskLists+0x64>)
 8002b1a:	f7ff fa01 	bl	8001f20 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b1e:	480d      	ldr	r0, [pc, #52]	; (8002b54 <prvInitialiseTaskLists+0x68>)
 8002b20:	f7ff f9fe 	bl	8001f20 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b24:	480c      	ldr	r0, [pc, #48]	; (8002b58 <prvInitialiseTaskLists+0x6c>)
 8002b26:	f7ff f9fb 	bl	8001f20 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002b2a:	480c      	ldr	r0, [pc, #48]	; (8002b5c <prvInitialiseTaskLists+0x70>)
 8002b2c:	f7ff f9f8 	bl	8001f20 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b30:	480b      	ldr	r0, [pc, #44]	; (8002b60 <prvInitialiseTaskLists+0x74>)
 8002b32:	f7ff f9f5 	bl	8001f20 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <prvInitialiseTaskLists+0x78>)
 8002b38:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <prvInitialiseTaskLists+0x64>)
 8002b3a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <prvInitialiseTaskLists+0x7c>)
 8002b3e:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <prvInitialiseTaskLists+0x68>)
 8002b40:	601a      	str	r2, [r3, #0]
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000040 	.word	0x20000040
 8002b50:	20000108 	.word	0x20000108
 8002b54:	2000011c 	.word	0x2000011c
 8002b58:	20000138 	.word	0x20000138
 8002b5c:	2000014c 	.word	0x2000014c
 8002b60:	20000164 	.word	0x20000164
 8002b64:	20000130 	.word	0x20000130
 8002b68:	20000134 	.word	0x20000134

08002b6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b72:	e019      	b.n	8002ba8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002b74:	f000 fa0e 	bl	8002f94 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <prvCheckTasksWaitingTermination+0x50>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fa1c 	bl	8001fc2 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <prvCheckTasksWaitingTermination+0x54>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <prvCheckTasksWaitingTermination+0x54>)
 8002b92:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <prvCheckTasksWaitingTermination+0x58>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <prvCheckTasksWaitingTermination+0x58>)
 8002b9c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002b9e:	f000 fa29 	bl	8002ff4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f810 	bl	8002bc8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <prvCheckTasksWaitingTermination+0x58>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e1      	bne.n	8002b74 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	2000014c 	.word	0x2000014c
 8002bc0:	20000178 	.word	0x20000178
 8002bc4:	20000160 	.word	0x20000160

08002bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fbe9 	bl	80033ac <vPortFree>
                vPortFree( pxTCB );
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fbe6 	bl	80033ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bec:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <prvResetNextTaskUnblockTime+0x30>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d104      	bne.n	8002c00 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <prvResetNextTaskUnblockTime+0x34>)
 8002bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002bfe:	e005      	b.n	8002c0c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <prvResetNextTaskUnblockTime+0x30>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <prvResetNextTaskUnblockTime+0x34>)
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000130 	.word	0x20000130
 8002c1c:	20000198 	.word	0x20000198

08002c20 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <xTaskGetCurrentTaskHandle+0x1c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002c2c:	687b      	ldr	r3, [r7, #4]
    }
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	2000003c 	.word	0x2000003c

08002c40 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3b04      	subs	r3, #4
 8002c5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f023 0201 	bic.w	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3b04      	subs	r3, #4
 8002c6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002c70:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <pxPortInitialiseStack+0x64>)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3b14      	subs	r3, #20
 8002c7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3b04      	subs	r3, #4
 8002c86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f06f 0202 	mvn.w	r2, #2
 8002c8e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3b20      	subs	r3, #32
 8002c94:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	08002ca9 	.word	0x08002ca9

08002ca8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <prvTaskExitError+0x54>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cba:	d00a      	beq.n	8002cd2 <prvTaskExitError+0x2a>
        __asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	60fb      	str	r3, [r7, #12]
    }
 8002cce:	bf00      	nop
 8002cd0:	e7fe      	b.n	8002cd0 <prvTaskExitError+0x28>
        __asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	60bb      	str	r3, [r7, #8]
    }
 8002ce4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002ce6:	bf00      	nop
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0fc      	beq.n	8002ce8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002cee:	bf00      	nop
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	20000010 	.word	0x20000010

08002d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002d00:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <pxCurrentTCBConst2>)
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	6808      	ldr	r0, [r1, #0]
 8002d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d0a:	f380 8809 	msr	PSP, r0
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f04f 0000 	mov.w	r0, #0
 8002d16:	f380 8811 	msr	BASEPRI, r0
 8002d1a:	4770      	bx	lr
 8002d1c:	f3af 8000 	nop.w

08002d20 <pxCurrentTCBConst2>:
 8002d20:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop

08002d28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d28:	4808      	ldr	r0, [pc, #32]	; (8002d4c <prvPortStartFirstTask+0x24>)
 8002d2a:	6800      	ldr	r0, [r0, #0]
 8002d2c:	6800      	ldr	r0, [r0, #0]
 8002d2e:	f380 8808 	msr	MSP, r0
 8002d32:	f04f 0000 	mov.w	r0, #0
 8002d36:	f380 8814 	msr	CONTROL, r0
 8002d3a:	b662      	cpsie	i
 8002d3c:	b661      	cpsie	f
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	df00      	svc	0
 8002d48:	bf00      	nop
 8002d4a:	0000      	.short	0x0000
 8002d4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop

08002d54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d5a:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <xPortStartScheduler+0x120>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a46      	ldr	r2, [pc, #280]	; (8002e78 <xPortStartScheduler+0x124>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d10a      	bne.n	8002d7a <xPortStartScheduler+0x26>
        __asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	613b      	str	r3, [r7, #16]
    }
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d7a:	4b3e      	ldr	r3, [pc, #248]	; (8002e74 <xPortStartScheduler+0x120>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a3f      	ldr	r2, [pc, #252]	; (8002e7c <xPortStartScheduler+0x128>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10a      	bne.n	8002d9a <xPortStartScheduler+0x46>
        __asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	60fb      	str	r3, [r7, #12]
    }
 8002d96:	bf00      	nop
 8002d98:	e7fe      	b.n	8002d98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d9a:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <xPortStartScheduler+0x12c>)
 8002d9c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	22ff      	movs	r2, #255	; 0xff
 8002daa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <xPortStartScheduler+0x130>)
 8002dc0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002dc2:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <xPortStartScheduler+0x134>)
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dc8:	e009      	b.n	8002dde <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002dca:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <xPortStartScheduler+0x134>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	4a2d      	ldr	r2, [pc, #180]	; (8002e88 <xPortStartScheduler+0x134>)
 8002dd2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de6:	2b80      	cmp	r3, #128	; 0x80
 8002de8:	d0ef      	beq.n	8002dca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002dea:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <xPortStartScheduler+0x134>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1c3 0307 	rsb	r3, r3, #7
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d00a      	beq.n	8002e0c <xPortStartScheduler+0xb8>
        __asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	60bb      	str	r3, [r7, #8]
    }
 8002e08:	bf00      	nop
 8002e0a:	e7fe      	b.n	8002e0a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <xPortStartScheduler+0x134>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <xPortStartScheduler+0x134>)
 8002e14:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e16:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <xPortStartScheduler+0x134>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e1e:	4a1a      	ldr	r2, [pc, #104]	; (8002e88 <xPortStartScheduler+0x134>)
 8002e20:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e2a:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <xPortStartScheduler+0x138>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <xPortStartScheduler+0x138>)
 8002e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e34:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <xPortStartScheduler+0x138>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a14      	ldr	r2, [pc, #80]	; (8002e8c <xPortStartScheduler+0x138>)
 8002e3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e40:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e42:	f000 f963 	bl	800310c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <xPortStartScheduler+0x13c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e4c:	f000 f982 	bl	8003154 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e50:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <xPortStartScheduler+0x140>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0f      	ldr	r2, [pc, #60]	; (8002e94 <xPortStartScheduler+0x140>)
 8002e56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e5a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e5c:	f7ff ff64 	bl	8002d28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e60:	f7ff fdc2 	bl	80029e8 <vTaskSwitchContext>
    prvTaskExitError();
 8002e64:	f7ff ff20 	bl	8002ca8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	e000ed00 	.word	0xe000ed00
 8002e78:	410fc271 	.word	0x410fc271
 8002e7c:	410fc270 	.word	0x410fc270
 8002e80:	e000e400 	.word	0xe000e400
 8002e84:	200001a4 	.word	0x200001a4
 8002e88:	200001a8 	.word	0x200001a8
 8002e8c:	e000ed20 	.word	0xe000ed20
 8002e90:	20000010 	.word	0x20000010
 8002e94:	e000ef34 	.word	0xe000ef34

08002e98 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e9e:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <vInitPrioGroupValue+0xe4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a37      	ldr	r2, [pc, #220]	; (8002f80 <vInitPrioGroupValue+0xe8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d10a      	bne.n	8002ebe <vInitPrioGroupValue+0x26>
        __asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	613b      	str	r3, [r7, #16]
    }
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ebe:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <vInitPrioGroupValue+0xe4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a30      	ldr	r2, [pc, #192]	; (8002f84 <vInitPrioGroupValue+0xec>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d10a      	bne.n	8002ede <vInitPrioGroupValue+0x46>
        __asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	60fb      	str	r3, [r7, #12]
    }
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002ede:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <vInitPrioGroupValue+0xf0>)
 8002ee0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	22ff      	movs	r2, #255	; 0xff
 8002eee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <vInitPrioGroupValue+0xf4>)
 8002f04:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <vInitPrioGroupValue+0xf8>)
 8002f08:	2207      	movs	r2, #7
 8002f0a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f0c:	e009      	b.n	8002f22 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <vInitPrioGroupValue+0xf8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <vInitPrioGroupValue+0xf8>)
 8002f16:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b80      	cmp	r3, #128	; 0x80
 8002f2c:	d0ef      	beq.n	8002f0e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f2e:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <vInitPrioGroupValue+0xf8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f1c3 0307 	rsb	r3, r3, #7
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d00a      	beq.n	8002f50 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	60bb      	str	r3, [r7, #8]
    }
 8002f4c:	bf00      	nop
 8002f4e:	e7fe      	b.n	8002f4e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <vInitPrioGroupValue+0xf8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <vInitPrioGroupValue+0xf8>)
 8002f58:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <vInitPrioGroupValue+0xf8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f62:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <vInitPrioGroupValue+0xf8>)
 8002f64:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000ed00 	.word	0xe000ed00
 8002f80:	410fc271 	.word	0x410fc271
 8002f84:	410fc270 	.word	0x410fc270
 8002f88:	e000e400 	.word	0xe000e400
 8002f8c:	200001a4 	.word	0x200001a4
 8002f90:	200001a8 	.word	0x200001a8

08002f94 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
        __asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	607b      	str	r3, [r7, #4]
    }
 8002fac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002fae:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <vPortEnterCritical+0x58>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	; (8002fec <vPortEnterCritical+0x58>)
 8002fb6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <vPortEnterCritical+0x58>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d10f      	bne.n	8002fe0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <vPortEnterCritical+0x5c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	603b      	str	r3, [r7, #0]
    }
 8002fdc:	bf00      	nop
 8002fde:	e7fe      	b.n	8002fde <vPortEnterCritical+0x4a>
    }
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	20000010 	.word	0x20000010
 8002ff0:	e000ed04 	.word	0xe000ed04

08002ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <vPortExitCritical+0x50>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <vPortExitCritical+0x24>
        __asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	607b      	str	r3, [r7, #4]
    }
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003018:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <vPortExitCritical+0x50>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3b01      	subs	r3, #1
 800301e:	4a09      	ldr	r2, [pc, #36]	; (8003044 <vPortExitCritical+0x50>)
 8003020:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <vPortExitCritical+0x50>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d105      	bne.n	8003036 <vPortExitCritical+0x42>
 800302a:	2300      	movs	r3, #0
 800302c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003034:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000010 	.word	0x20000010
	...

08003050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003050:	f3ef 8009 	mrs	r0, PSP
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <pxCurrentTCBConst>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f01e 0f10 	tst.w	lr, #16
 8003060:	bf08      	it	eq
 8003062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306a:	6010      	str	r0, [r2, #0]
 800306c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003074:	f380 8811 	msr	BASEPRI, r0
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f7ff fcb2 	bl	80029e8 <vTaskSwitchContext>
 8003084:	f04f 0000 	mov.w	r0, #0
 8003088:	f380 8811 	msr	BASEPRI, r0
 800308c:	bc09      	pop	{r0, r3}
 800308e:	6819      	ldr	r1, [r3, #0]
 8003090:	6808      	ldr	r0, [r1, #0]
 8003092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003096:	f01e 0f10 	tst.w	lr, #16
 800309a:	bf08      	it	eq
 800309c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80030a0:	f380 8809 	msr	PSP, r0
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	f3af 8000 	nop.w

080030b0 <pxCurrentTCBConst>:
 80030b0:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop

080030b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
        __asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	607b      	str	r3, [r7, #4]
    }
 80030d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80030d2:	f001 ff4b 	bl	8004f6c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80030d6:	f7ff fbcb 	bl	8002870 <xTaskIncrementTick>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80030e0:	f001 ffa2 	bl	8005028 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030e4:	4b08      	ldr	r3, [pc, #32]	; (8003108 <SysTick_Handler+0x50>)
 80030e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e001      	b.n	80030f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80030ee:	f001 ff7f 	bl	8004ff0 <SEGGER_SYSVIEW_RecordExitISR>
 80030f2:	2300      	movs	r3, #0
 80030f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f383 8811 	msr	BASEPRI, r3
    }
 80030fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	e000ed04 	.word	0xe000ed04

0800310c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <vPortSetupTimerInterrupt+0x34>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <vPortSetupTimerInterrupt+0x38>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800311c:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <vPortSetupTimerInterrupt+0x3c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a0a      	ldr	r2, [pc, #40]	; (800314c <vPortSetupTimerInterrupt+0x40>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	4a09      	ldr	r2, [pc, #36]	; (8003150 <vPortSetupTimerInterrupt+0x44>)
 800312a:	3b01      	subs	r3, #1
 800312c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <vPortSetupTimerInterrupt+0x34>)
 8003130:	2207      	movs	r2, #7
 8003132:	601a      	str	r2, [r3, #0]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000e010 	.word	0xe000e010
 8003144:	e000e018 	.word	0xe000e018
 8003148:	20000000 	.word	0x20000000
 800314c:	10624dd3 	.word	0x10624dd3
 8003150:	e000e014 	.word	0xe000e014

08003154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003164 <vPortEnableVFP+0x10>
 8003158:	6801      	ldr	r1, [r0, #0]
 800315a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800315e:	6001      	str	r1, [r0, #0]
 8003160:	4770      	bx	lr
 8003162:	0000      	.short	0x0000
 8003164:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop

0800316c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003172:	f3ef 8305 	mrs	r3, IPSR
 8003176:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b0f      	cmp	r3, #15
 800317c:	d914      	bls.n	80031a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800317e:	4a17      	ldr	r2, [pc, #92]	; (80031dc <vPortValidateInterruptPriority+0x70>)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <vPortValidateInterruptPriority+0x74>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	7afa      	ldrb	r2, [r7, #11]
 800318e:	429a      	cmp	r2, r3
 8003190:	d20a      	bcs.n	80031a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	607b      	str	r3, [r7, #4]
    }
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <vPortValidateInterruptPriority+0x78>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031b0:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <vPortValidateInterruptPriority+0x7c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d90a      	bls.n	80031ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	603b      	str	r3, [r7, #0]
    }
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <vPortValidateInterruptPriority+0x60>
    }
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000e3f0 	.word	0xe000e3f0
 80031e0:	200001a4 	.word	0x200001a4
 80031e4:	e000ed0c 	.word	0xe000ed0c
 80031e8:	200001a8 	.word	0x200001a8

080031ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80031f8:	f7ff f9a6 	bl	8002548 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80031fc:	4b65      	ldr	r3, [pc, #404]	; (8003394 <pvPortMalloc+0x1a8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003204:	f000 f934 	bl	8003470 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003208:	4b63      	ldr	r3, [pc, #396]	; (8003398 <pvPortMalloc+0x1ac>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	f040 80a7 	bne.w	8003364 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d02d      	beq.n	8003278 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800321c:	2208      	movs	r2, #8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	d227      	bcs.n	8003278 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003228:	2208      	movs	r2, #8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	2b00      	cmp	r3, #0
 8003238:	d021      	beq.n	800327e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f023 0307 	bic.w	r3, r3, #7
 8003240:	3308      	adds	r3, #8
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	d214      	bcs.n	8003272 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f023 0307 	bic.w	r3, r3, #7
 800324e:	3308      	adds	r3, #8
 8003250:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	2b00      	cmp	r3, #0
 800325a:	d010      	beq.n	800327e <pvPortMalloc+0x92>
        __asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	617b      	str	r3, [r7, #20]
    }
 800326e:	bf00      	nop
 8003270:	e7fe      	b.n	8003270 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003276:	e002      	b.n	800327e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	e000      	b.n	8003280 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800327e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d06e      	beq.n	8003364 <pvPortMalloc+0x178>
 8003286:	4b45      	ldr	r3, [pc, #276]	; (800339c <pvPortMalloc+0x1b0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	d869      	bhi.n	8003364 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003290:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <pvPortMalloc+0x1b4>)
 8003292:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003294:	4b42      	ldr	r3, [pc, #264]	; (80033a0 <pvPortMalloc+0x1b4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800329a:	e004      	b.n	80032a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d903      	bls.n	80032b8 <pvPortMalloc+0xcc>
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f1      	bne.n	800329c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80032b8:	4b36      	ldr	r3, [pc, #216]	; (8003394 <pvPortMalloc+0x1a8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	429a      	cmp	r2, r3
 80032c0:	d050      	beq.n	8003364 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2208      	movs	r2, #8
 80032c8:	4413      	add	r3, r2
 80032ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	1ad2      	subs	r2, r2, r3
 80032dc:	2308      	movs	r3, #8
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d91f      	bls.n	8003324 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <pvPortMalloc+0x120>
        __asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	613b      	str	r3, [r7, #16]
    }
 8003308:	bf00      	nop
 800330a:	e7fe      	b.n	800330a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	1ad2      	subs	r2, r2, r3
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800331e:	69b8      	ldr	r0, [r7, #24]
 8003320:	f000 f908 	bl	8003534 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <pvPortMalloc+0x1b0>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	4a1b      	ldr	r2, [pc, #108]	; (800339c <pvPortMalloc+0x1b0>)
 8003330:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003332:	4b1a      	ldr	r3, [pc, #104]	; (800339c <pvPortMalloc+0x1b0>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <pvPortMalloc+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d203      	bcs.n	8003346 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800333e:	4b17      	ldr	r3, [pc, #92]	; (800339c <pvPortMalloc+0x1b0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <pvPortMalloc+0x1b8>)
 8003344:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <pvPortMalloc+0x1ac>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	431a      	orrs	r2, r3
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800335a:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <pvPortMalloc+0x1bc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3301      	adds	r3, #1
 8003360:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <pvPortMalloc+0x1bc>)
 8003362:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003364:	f7ff f8fe 	bl	8002564 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <pvPortMalloc+0x19c>
        __asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	60fb      	str	r3, [r7, #12]
    }
 8003384:	bf00      	nop
 8003386:	e7fe      	b.n	8003386 <pvPortMalloc+0x19a>
    return pvReturn;
 8003388:	69fb      	ldr	r3, [r7, #28]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3728      	adds	r7, #40	; 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20012db4 	.word	0x20012db4
 8003398:	20012dc8 	.word	0x20012dc8
 800339c:	20012db8 	.word	0x20012db8
 80033a0:	20012dac 	.word	0x20012dac
 80033a4:	20012dbc 	.word	0x20012dbc
 80033a8:	20012dc0 	.word	0x20012dc0

080033ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d04d      	beq.n	800345a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80033be:	2308      	movs	r3, #8
 80033c0:	425b      	negs	r3, r3
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4413      	add	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	4b24      	ldr	r3, [pc, #144]	; (8003464 <vPortFree+0xb8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <vPortFree+0x44>
        __asm volatile
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	60fb      	str	r3, [r7, #12]
    }
 80033ec:	bf00      	nop
 80033ee:	e7fe      	b.n	80033ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <vPortFree+0x62>
        __asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	60bb      	str	r3, [r7, #8]
    }
 800340a:	bf00      	nop
 800340c:	e7fe      	b.n	800340c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <vPortFree+0xb8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01e      	beq.n	800345a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d11a      	bne.n	800345a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <vPortFree+0xb8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	43db      	mvns	r3, r3
 800342e:	401a      	ands	r2, r3
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003434:	f7ff f888 	bl	8002548 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <vPortFree+0xbc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4413      	add	r3, r2
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <vPortFree+0xbc>)
 8003444:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003446:	6938      	ldr	r0, [r7, #16]
 8003448:	f000 f874 	bl	8003534 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800344c:	4b07      	ldr	r3, [pc, #28]	; (800346c <vPortFree+0xc0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3301      	adds	r3, #1
 8003452:	4a06      	ldr	r2, [pc, #24]	; (800346c <vPortFree+0xc0>)
 8003454:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003456:	f7ff f885 	bl	8002564 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20012dc8 	.word	0x20012dc8
 8003468:	20012db8 	.word	0x20012db8
 800346c:	20012dc4 	.word	0x20012dc4

08003470 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003476:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800347a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800347c:	4b27      	ldr	r3, [pc, #156]	; (800351c <prvHeapInit+0xac>)
 800347e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00c      	beq.n	80034a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3307      	adds	r3, #7
 800348e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0307 	bic.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	4a1f      	ldr	r2, [pc, #124]	; (800351c <prvHeapInit+0xac>)
 80034a0:	4413      	add	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034a8:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <prvHeapInit+0xb0>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80034ae:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <prvHeapInit+0xb0>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	4413      	add	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80034bc:	2208      	movs	r2, #8
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0307 	bic.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a15      	ldr	r2, [pc, #84]	; (8003524 <prvHeapInit+0xb4>)
 80034d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80034d2:	4b14      	ldr	r3, [pc, #80]	; (8003524 <prvHeapInit+0xb4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80034da:	4b12      	ldr	r3, [pc, #72]	; (8003524 <prvHeapInit+0xb4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	1ad2      	subs	r2, r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <prvHeapInit+0xb4>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <prvHeapInit+0xb8>)
 80034fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a09      	ldr	r2, [pc, #36]	; (800352c <prvHeapInit+0xbc>)
 8003506:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <prvHeapInit+0xc0>)
 800350a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800350e:	601a      	str	r2, [r3, #0]
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	200001ac 	.word	0x200001ac
 8003520:	20012dac 	.word	0x20012dac
 8003524:	20012db4 	.word	0x20012db4
 8003528:	20012dbc 	.word	0x20012dbc
 800352c:	20012db8 	.word	0x20012db8
 8003530:	20012dc8 	.word	0x20012dc8

08003534 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800353c:	4b28      	ldr	r3, [pc, #160]	; (80035e0 <prvInsertBlockIntoFreeList+0xac>)
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e002      	b.n	8003548 <prvInsertBlockIntoFreeList+0x14>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	429a      	cmp	r2, r3
 8003550:	d8f7      	bhi.n	8003542 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	4413      	add	r3, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d108      	bne.n	8003576 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	441a      	add	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	441a      	add	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d118      	bne.n	80035bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <prvInsertBlockIntoFreeList+0xb0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d00d      	beq.n	80035b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	441a      	add	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e008      	b.n	80035c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035b2:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <prvInsertBlockIntoFreeList+0xb0>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e003      	b.n	80035c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d002      	beq.n	80035d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20012dac 	.word	0x20012dac
 80035e4:	20012db4 	.word	0x20012db4

080035e8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80035ec:	4803      	ldr	r0, [pc, #12]	; (80035fc <_cbSendSystemDesc+0x14>)
 80035ee:	f001 fc67 	bl	8004ec0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80035f2:	4803      	ldr	r0, [pc, #12]	; (8003600 <_cbSendSystemDesc+0x18>)
 80035f4:	f001 fc64 	bl	8004ec0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	080055d8 	.word	0x080055d8
 8003600:	0800560c 	.word	0x0800560c

08003604 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <SEGGER_SYSVIEW_Conf+0x20>)
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <SEGGER_SYSVIEW_Conf+0x20>)
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <SEGGER_SYSVIEW_Conf+0x24>)
 8003612:	4a06      	ldr	r2, [pc, #24]	; (800362c <SEGGER_SYSVIEW_Conf+0x28>)
 8003614:	f001 f8d8 	bl	80047c8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003618:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800361c:	f001 f918 	bl	8004850 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003620:	bf00      	nop
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20000000 	.word	0x20000000
 8003628:	080035e9 	.word	0x080035e9
 800362c:	080056ac 	.word	0x080056ac

08003630 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003632:	b085      	sub	sp, #20
 8003634:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	e033      	b.n	80036a4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800363c:	491e      	ldr	r1, [pc, #120]	; (80036b8 <_cbSendTaskList+0x88>)
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	491a      	ldr	r1, [pc, #104]	; (80036b8 <_cbSendTaskList+0x88>)
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	3304      	adds	r3, #4
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	4c16      	ldr	r4, [pc, #88]	; (80036b8 <_cbSendTaskList+0x88>)
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4423      	add	r3, r4
 800366c:	3308      	adds	r3, #8
 800366e:	681c      	ldr	r4, [r3, #0]
 8003670:	4d11      	ldr	r5, [pc, #68]	; (80036b8 <_cbSendTaskList+0x88>)
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	442b      	add	r3, r5
 800367e:	330c      	adds	r3, #12
 8003680:	681d      	ldr	r5, [r3, #0]
 8003682:	4e0d      	ldr	r6, [pc, #52]	; (80036b8 <_cbSendTaskList+0x88>)
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4433      	add	r3, r6
 8003690:	3310      	adds	r3, #16
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	462b      	mov	r3, r5
 8003698:	4622      	mov	r2, r4
 800369a:	f000 f925 	bl	80038e8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3301      	adds	r3, #1
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <_cbSendTaskList+0x8c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d3c6      	bcc.n	800363c <_cbSendTaskList+0xc>
  }
}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b8:	20012dcc 	.word	0x20012dcc
 80036bc:	20012e6c 	.word	0x20012e6c

080036c0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80036c6:	f7fe ffed 	bl	80026a4 <xTaskGetTickCountFromISR>
 80036ca:	4603      	mov	r3, r0
 80036cc:	461a      	mov	r2, r3
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80036d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	f04f 0400 	mov.w	r4, #0
 80036e2:	f04f 0500 	mov.w	r5, #0
 80036e6:	015d      	lsls	r5, r3, #5
 80036e8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80036ec:	0154      	lsls	r4, r2, #5
 80036ee:	4622      	mov	r2, r4
 80036f0:	462b      	mov	r3, r5
 80036f2:	1a12      	subs	r2, r2, r0
 80036f4:	eb63 0301 	sbc.w	r3, r3, r1
 80036f8:	f04f 0400 	mov.w	r4, #0
 80036fc:	f04f 0500 	mov.w	r5, #0
 8003700:	009d      	lsls	r5, r3, #2
 8003702:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003706:	0094      	lsls	r4, r2, #2
 8003708:	4622      	mov	r2, r4
 800370a:	462b      	mov	r3, r5
 800370c:	1812      	adds	r2, r2, r0
 800370e:	eb41 0303 	adc.w	r3, r1, r3
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	00d9      	lsls	r1, r3, #3
 800371c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003720:	00d0      	lsls	r0, r2, #3
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800372a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800372e:	4610      	mov	r0, r2
 8003730:	4619      	mov	r1, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bdb0      	pop	{r4, r5, r7, pc}

08003738 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003746:	2205      	movs	r2, #5
 8003748:	492b      	ldr	r1, [pc, #172]	; (80037f8 <SYSVIEW_AddTask+0xc0>)
 800374a:	68b8      	ldr	r0, [r7, #8]
 800374c:	f001 ff04 	bl	8005558 <memcmp>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d04b      	beq.n	80037ee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003756:	4b29      	ldr	r3, [pc, #164]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b07      	cmp	r3, #7
 800375c:	d903      	bls.n	8003766 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800375e:	4828      	ldr	r0, [pc, #160]	; (8003800 <SYSVIEW_AddTask+0xc8>)
 8003760:	f001 fe4c 	bl	80053fc <SEGGER_SYSVIEW_Warn>
    return;
 8003764:	e044      	b.n	80037f0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003766:	4b25      	ldr	r3, [pc, #148]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4926      	ldr	r1, [pc, #152]	; (8003804 <SYSVIEW_AddTask+0xcc>)
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4921      	ldr	r1, [pc, #132]	; (8003804 <SYSVIEW_AddTask+0xcc>)
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3304      	adds	r3, #4
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	491b      	ldr	r1, [pc, #108]	; (8003804 <SYSVIEW_AddTask+0xcc>)
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	3308      	adds	r3, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80037a6:	4b15      	ldr	r3, [pc, #84]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4916      	ldr	r1, [pc, #88]	; (8003804 <SYSVIEW_AddTask+0xcc>)
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	330c      	adds	r3, #12
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80037bc:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4910      	ldr	r1, [pc, #64]	; (8003804 <SYSVIEW_AddTask+0xcc>)
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	3310      	adds	r3, #16
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	4a08      	ldr	r2, [pc, #32]	; (80037fc <SYSVIEW_AddTask+0xc4>)
 80037da:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f87e 	bl	80038e8 <SYSVIEW_SendTaskInfo>
 80037ec:	e000      	b.n	80037f0 <SYSVIEW_AddTask+0xb8>
    return;
 80037ee:	bf00      	nop

}
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	0800561c 	.word	0x0800561c
 80037fc:	20012e6c 	.word	0x20012e6c
 8003800:	08005624 	.word	0x08005624
 8003804:	20012dcc 	.word	0x20012dcc

08003808 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003816:	2205      	movs	r2, #5
 8003818:	4930      	ldr	r1, [pc, #192]	; (80038dc <SYSVIEW_UpdateTask+0xd4>)
 800381a:	68b8      	ldr	r0, [r7, #8]
 800381c:	f001 fe9c 	bl	8005558 <memcmp>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d056      	beq.n	80038d4 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e00d      	b.n	8003848 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 800382c:	492c      	ldr	r1, [pc, #176]	; (80038e0 <SYSVIEW_UpdateTask+0xd8>)
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	429a      	cmp	r2, r3
 8003840:	d008      	beq.n	8003854 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	3301      	adds	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	4b26      	ldr	r3, [pc, #152]	; (80038e4 <SYSVIEW_UpdateTask+0xdc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	429a      	cmp	r2, r3
 8003850:	d3ec      	bcc.n	800382c <SYSVIEW_UpdateTask+0x24>
 8003852:	e000      	b.n	8003856 <SYSVIEW_UpdateTask+0x4e>
      break;
 8003854:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8003856:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <SYSVIEW_UpdateTask+0xdc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	429a      	cmp	r2, r3
 800385e:	d230      	bcs.n	80038c2 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8003860:	491f      	ldr	r1, [pc, #124]	; (80038e0 <SYSVIEW_UpdateTask+0xd8>)
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	3304      	adds	r3, #4
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8003874:	491a      	ldr	r1, [pc, #104]	; (80038e0 <SYSVIEW_UpdateTask+0xd8>)
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	3308      	adds	r3, #8
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8003888:	4915      	ldr	r1, [pc, #84]	; (80038e0 <SYSVIEW_UpdateTask+0xd8>)
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	330c      	adds	r3, #12
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 800389c:	4910      	ldr	r1, [pc, #64]	; (80038e0 <SYSVIEW_UpdateTask+0xd8>)
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	3310      	adds	r3, #16
 80038ac:	6a3a      	ldr	r2, [r7, #32]
 80038ae:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f814 	bl	80038e8 <SYSVIEW_SendTaskInfo>
 80038c0:	e009      	b.n	80038d6 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff ff33 	bl	8003738 <SYSVIEW_AddTask>
 80038d2:	e000      	b.n	80038d6 <SYSVIEW_UpdateTask+0xce>
    return;
 80038d4:	bf00      	nop
  }
}
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	0800561c 	.word	0x0800561c
 80038e0:	20012dcc 	.word	0x20012dcc
 80038e4:	20012e6c 	.word	0x20012e6c

080038e8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80038f6:	f107 0314 	add.w	r3, r7, #20
 80038fa:	2214      	movs	r2, #20
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 fe46 	bl	8005590 <memset>
  TaskInfo.TaskID     = TaskID;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	4618      	mov	r0, r3
 800391e:	f001 f9d7 	bl	8004cd0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003922:	bf00      	nop
 8003924:	3728      	adds	r7, #40	; 0x28
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <__NVIC_EnableIRQ>:
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	db0b      	blt.n	8003956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4907      	ldr	r1, [pc, #28]	; (8003964 <__NVIC_EnableIRQ+0x38>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	2b00      	cmp	r3, #0
 800397a:	db0a      	blt.n	8003992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	490c      	ldr	r1, [pc, #48]	; (80039b4 <__NVIC_SetPriority+0x4c>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	0112      	lsls	r2, r2, #4
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	440b      	add	r3, r1
 800398c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003990:	e00a      	b.n	80039a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4908      	ldr	r1, [pc, #32]	; (80039b8 <__NVIC_SetPriority+0x50>)
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	3b04      	subs	r3, #4
 80039a0:	0112      	lsls	r2, r2, #4
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	440b      	add	r3, r1
 80039a6:	761a      	strb	r2, [r3, #24]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000e100 	.word	0xe000e100
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80039c2:	f001 fd77 	bl	80054b4 <SEGGER_SYSVIEW_IsStarted>
 80039c6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80039ce:	f001 f803 	bl	80049d8 <SEGGER_SYSVIEW_Start>
  }
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80039e6:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <_cbOnUARTRx+0x3c>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d806      	bhi.n	80039fc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <_cbOnUARTRx+0x3c>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	3301      	adds	r3, #1
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <_cbOnUARTRx+0x3c>)
 80039f8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80039fa:	e009      	b.n	8003a10 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80039fc:	f7ff ffde 	bl	80039bc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <_cbOnUARTRx+0x3c>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4618      	mov	r0, r3
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	2201      	movs	r2, #1
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f000 fb9a 	bl	8004144 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003a10:	bf00      	nop
}
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000014 	.word	0x20000014

08003a1c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <_cbOnUARTTx+0x5c>)
 8003a26:	785b      	ldrb	r3, [r3, #1]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d80f      	bhi.n	8003a4c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003a2c:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <_cbOnUARTTx+0x5c>)
 8003a2e:	785b      	ldrb	r3, [r3, #1]
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <_cbOnUARTTx+0x60>)
 8003a34:	5c9a      	ldrb	r2, [r3, r2]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <_cbOnUARTTx+0x5c>)
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <_cbOnUARTTx+0x5c>)
 8003a44:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003a46:	2301      	movs	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003a4a:	e00f      	b.n	8003a6c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <_cbOnUARTTx+0x5c>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fa19 	bl	8003e8c <SEGGER_RTT_ReadUpBufferNoLock>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	da02      	bge.n	8003a6a <_cbOnUARTTx+0x4e>
    r = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e000      	b.n	8003a6c <_cbOnUARTTx+0x50>
  }
Done:
 8003a6a:	bf00      	nop
  return r;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000014 	.word	0x20000014
 8003a7c:	080056b4 	.word	0x080056b4

08003a80 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003a88:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <SEGGER_UART_init+0x1c>)
 8003a8a:	4905      	ldr	r1, [pc, #20]	; (8003aa0 <SEGGER_UART_init+0x20>)
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f863 	bl	8003b58 <HIF_UART_Init>
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	080039dd 	.word	0x080039dd
 8003aa0:	08003a1d 	.word	0x08003a1d

08003aa4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	; (8003b24 <USART2_IRQHandler+0x80>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d011      	beq.n	8003ade <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003aba:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <USART2_IRQHandler+0x84>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 030b 	and.w	r3, r3, #11
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d108      	bne.n	8003ade <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003acc:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <USART2_IRQHandler+0x88>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003ad4:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <USART2_IRQHandler+0x88>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	79fa      	ldrb	r2, [r7, #7]
 8003ada:	4610      	mov	r0, r2
 8003adc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01a      	beq.n	8003b1e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <USART2_IRQHandler+0x8c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d015      	beq.n	8003b1c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003af0:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <USART2_IRQHandler+0x8c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	1dfa      	adds	r2, r7, #7
 8003af6:	4610      	mov	r0, r2
 8003af8:	4798      	blx	r3
 8003afa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003b02:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <USART2_IRQHandler+0x90>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a0b      	ldr	r2, [pc, #44]	; (8003b34 <USART2_IRQHandler+0x90>)
 8003b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e006      	b.n	8003b1e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <USART2_IRQHandler+0x80>)
 8003b12:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003b14:	79fa      	ldrb	r2, [r7, #7]
 8003b16:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <USART2_IRQHandler+0x84>)
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e000      	b.n	8003b1e <USART2_IRQHandler+0x7a>
      return;
 8003b1c:	bf00      	nop
    }
  }
}
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40004400 	.word	0x40004400
 8003b28:	40004404 	.word	0x40004404
 8003b2c:	20012e70 	.word	0x20012e70
 8003b30:	20012e74 	.word	0x20012e74
 8003b34:	4000440c 	.word	0x4000440c

08003b38 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b46:	6013      	str	r3, [r2, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	4000440c 	.word	0x4000440c

08003b58 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003b64:	4b2e      	ldr	r3, [pc, #184]	; (8003c20 <HIF_UART_Init+0xc8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2d      	ldr	r2, [pc, #180]	; (8003c20 <HIF_UART_Init+0xc8>)
 8003b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b6e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003b70:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <HIF_UART_Init+0xcc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <HIF_UART_Init+0xcc>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003b7c:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <HIF_UART_Init+0xd0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b88:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003b90:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003b92:	4a25      	ldr	r2, [pc, #148]	; (8003c28 <HIF_UART_Init+0xd0>)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003b98:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <HIF_UART_Init+0xd4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003bac:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003bae:	4a1f      	ldr	r2, [pc, #124]	; (8003c2c <HIF_UART_Init+0xd4>)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003bb4:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <HIF_UART_Init+0xd8>)
 8003bb6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003bba:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <HIF_UART_Init+0xdc>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HIF_UART_Init+0xe0>)
 8003bc4:	2280      	movs	r2, #128	; 0x80
 8003bc6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003bce:	4a1b      	ldr	r2, [pc, #108]	; (8003c3c <HIF_UART_Init+0xe4>)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be6:	d302      	bcc.n	8003bee <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003be8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003bec:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	4a11      	ldr	r2, [pc, #68]	; (8003c40 <HIF_UART_Init+0xe8>)
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003bfe:	4a11      	ldr	r2, [pc, #68]	; (8003c44 <HIF_UART_Init+0xec>)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003c04:	4a10      	ldr	r2, [pc, #64]	; (8003c48 <HIF_UART_Init+0xf0>)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003c0a:	2106      	movs	r1, #6
 8003c0c:	2026      	movs	r0, #38	; 0x26
 8003c0e:	f7ff feab 	bl	8003968 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003c12:	2026      	movs	r0, #38	; 0x26
 8003c14:	f7ff fe8a 	bl	800392c <__NVIC_EnableIRQ>
}
 8003c18:	bf00      	nop
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023840 	.word	0x40023840
 8003c24:	40023830 	.word	0x40023830
 8003c28:	40020020 	.word	0x40020020
 8003c2c:	40020000 	.word	0x40020000
 8003c30:	4000440c 	.word	0x4000440c
 8003c34:	40004410 	.word	0x40004410
 8003c38:	40004414 	.word	0x40004414
 8003c3c:	05f5e100 	.word	0x05f5e100
 8003c40:	40004408 	.word	0x40004408
 8003c44:	20012e70 	.word	0x20012e70
 8003c48:	20012e74 	.word	0x20012e74

08003c4c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <_DoInit+0x98>)
 8003c54:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2203      	movs	r2, #3
 8003c60:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <_DoInit+0x9c>)
 8003c66:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a20      	ldr	r2, [pc, #128]	; (8003cec <_DoInit+0xa0>)
 8003c6c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c74:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <_DoInit+0x9c>)
 8003c8c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <_DoInit+0xa4>)
 8003c92:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2210      	movs	r2, #16
 8003c98:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3307      	adds	r3, #7
 8003cb0:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <_DoInit+0xa8>)
 8003cb2:	6810      	ldr	r0, [r2, #0]
 8003cb4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003cb6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a0e      	ldr	r2, [pc, #56]	; (8003cf8 <_DoInit+0xac>)
 8003cbe:	6810      	ldr	r0, [r2, #0]
 8003cc0:	6018      	str	r0, [r3, #0]
 8003cc2:	8891      	ldrh	r1, [r2, #4]
 8003cc4:	7992      	ldrb	r2, [r2, #6]
 8003cc6:	8099      	strh	r1, [r3, #4]
 8003cc8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003cca:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003cd4:	f3bf 8f5f 	dmb	sy
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	200137fc 	.word	0x200137fc
 8003ce8:	08005674 	.word	0x08005674
 8003cec:	20012e78 	.word	0x20012e78
 8003cf0:	20013278 	.word	0x20013278
 8003cf4:	08005680 	.word	0x08005680
 8003cf8:	08005684 	.word	0x08005684

08003cfc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	; 0x28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d905      	bls.n	8003d2c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2a:	e007      	b.n	8003d3c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	69b9      	ldr	r1, [r7, #24]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	1acb      	subs	r3, r1, r3
 8003d36:	4413      	add	r3, r2
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d46:	4293      	cmp	r3, r2
 8003d48:	bf28      	it	cs
 8003d4a:	4613      	movcs	r3, r2
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4293      	cmp	r3, r2
 8003d54:	bf28      	it	cs
 8003d56:	4613      	movcs	r3, r2
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	4413      	add	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	6978      	ldr	r0, [r7, #20]
 8003d6a:	f001 fc03 	bl	8005574 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003d6e:	6a3a      	ldr	r2, [r7, #32]
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	4413      	add	r3, r2
 8003d74:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	4413      	add	r3, r2
 8003d8c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d101      	bne.n	8003d9c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d9c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1b2      	bne.n	8003d12 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003dac:	6a3b      	ldr	r3, [r7, #32]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3728      	adds	r7, #40	; 0x28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b088      	sub	sp, #32
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d911      	bls.n	8003dfe <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	4413      	add	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	6938      	ldr	r0, [r7, #16]
 8003dea:	f001 fbc3 	bl	8005574 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003dee:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	441a      	add	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003dfc:	e01f      	b.n	8003e3e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	6938      	ldr	r0, [r7, #16]
 8003e12:	f001 fbaf 	bl	8005574 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4413      	add	r3, r2
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6938      	ldr	r0, [r7, #16]
 8003e30:	f001 fba0 	bl	8005574 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e34:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	60da      	str	r2, [r3, #12]
}
 8003e3e:	bf00      	nop
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003e46:	b480      	push	{r7}
 8003e48:	b087      	sub	sp, #28
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d808      	bhi.n	8003e74 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad2      	subs	r2, r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	e004      	b.n	8003e7e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003e7e:	697b      	ldr	r3, [r7, #20]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08c      	sub	sp, #48	; 0x30
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003e98:	4b3e      	ldr	r3, [pc, #248]	; (8003f94 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e9a:	623b      	str	r3, [r7, #32]
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003ea6:	f7ff fed1 	bl	8003c4c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4a37      	ldr	r2, [pc, #220]	; (8003f94 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003eb8:	4413      	add	r3, r2
 8003eba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d92b      	bls.n	8003f30 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	bf28      	it	cs
 8003eea:	4613      	movcs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	4413      	add	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	6939      	ldr	r1, [r7, #16]
 8003efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003efe:	f001 fb39 	bl	8005574 <memcpy>
    NumBytesRead += NumBytesRem;
 8003f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	4413      	add	r3, r2
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4413      	add	r3, r2
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	4413      	add	r3, r2
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d101      	bne.n	8003f30 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	bf28      	it	cs
 8003f40:	4613      	movcs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d019      	beq.n	8003f7e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	4413      	add	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	6939      	ldr	r1, [r7, #16]
 8003f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f5a:	f001 fb0b 	bl	8005574 <memcpy>
    NumBytesRead += NumBytesRem;
 8003f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	4413      	add	r3, r2
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f88:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3730      	adds	r7, #48	; 0x30
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	200137fc 	.word	0x200137fc

08003f98 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08c      	sub	sp, #48	; 0x30
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003fa4:	4b3e      	ldr	r3, [pc, #248]	; (80040a0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003fa6:	623b      	str	r3, [r7, #32]
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003fb2:	f7ff fe4b 	bl	8003c4c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	4413      	add	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	3360      	adds	r3, #96	; 0x60
 8003fc2:	4a37      	ldr	r2, [pc, #220]	; (80040a0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003fc4:	4413      	add	r3, r2
 8003fc6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d92b      	bls.n	800403c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	bf28      	it	cs
 8003ff6:	4613      	movcs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	4413      	add	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	6939      	ldr	r1, [r7, #16]
 8004008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800400a:	f001 fab3 	bl	8005574 <memcpy>
    NumBytesRead += NumBytesRem;
 800400e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	4413      	add	r3, r2
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	4413      	add	r3, r2
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	4413      	add	r3, r2
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004034:	429a      	cmp	r2, r3
 8004036:	d101      	bne.n	800403c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004038:	2300      	movs	r3, #0
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4293      	cmp	r3, r2
 800404a:	bf28      	it	cs
 800404c:	4613      	movcs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d019      	beq.n	800408a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	4413      	add	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	6939      	ldr	r1, [r7, #16]
 8004064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004066:	f001 fa85 	bl	8005574 <memcpy>
    NumBytesRead += NumBytesRem;
 800406a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	4413      	add	r3, r2
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	4413      	add	r3, r2
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	4413      	add	r3, r2
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004094:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004098:	4618      	mov	r0, r3
 800409a:	3730      	adds	r7, #48	; 0x30
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	200137fc 	.word	0x200137fc

080040a4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	3360      	adds	r3, #96	; 0x60
 80040c0:	4a1f      	ldr	r2, [pc, #124]	; (8004140 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80040c2:	4413      	add	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d029      	beq.n	8004122 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d82e      	bhi.n	8004130 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d013      	beq.n	8004102 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80040da:	e029      	b.n	8004130 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80040dc:	6978      	ldr	r0, [r7, #20]
 80040de:	f7ff feb2 	bl	8003e46 <_GetAvailWriteSpace>
 80040e2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d202      	bcs.n	80040f2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80040f0:	e021      	b.n	8004136 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	6978      	ldr	r0, [r7, #20]
 80040fc:	f7ff fe5b 	bl	8003db6 <_WriteNoCheck>
    break;
 8004100:	e019      	b.n	8004136 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004102:	6978      	ldr	r0, [r7, #20]
 8004104:	f7ff fe9f 	bl	8003e46 <_GetAvailWriteSpace>
 8004108:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4293      	cmp	r3, r2
 8004110:	bf28      	it	cs
 8004112:	4613      	movcs	r3, r2
 8004114:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	69b9      	ldr	r1, [r7, #24]
 800411a:	6978      	ldr	r0, [r7, #20]
 800411c:	f7ff fe4b 	bl	8003db6 <_WriteNoCheck>
    break;
 8004120:	e009      	b.n	8004136 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	69b9      	ldr	r1, [r7, #24]
 8004126:	6978      	ldr	r0, [r7, #20]
 8004128:	f7ff fde8 	bl	8003cfc <_WriteBlocking>
 800412c:	61f8      	str	r0, [r7, #28]
    break;
 800412e:	e002      	b.n	8004136 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004130:	2300      	movs	r3, #0
 8004132:	61fb      	str	r3, [r7, #28]
    break;
 8004134:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004136:	69fb      	ldr	r3, [r7, #28]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	200137fc 	.word	0x200137fc

08004144 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800415e:	f7ff fd75 	bl	8003c4c <_DoInit>
  SEGGER_RTT_LOCK();
 8004162:	f3ef 8311 	mrs	r3, BASEPRI
 8004166:	f04f 0120 	mov.w	r1, #32
 800416a:	f381 8811 	msr	BASEPRI, r1
 800416e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff ff95 	bl	80040a4 <SEGGER_RTT_WriteDownBufferNoLock>
 800417a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004182:	697b      	ldr	r3, [r7, #20]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	200137fc 	.word	0x200137fc

08004190 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800419e:	4b3d      	ldr	r3, [pc, #244]	; (8004294 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80041ac:	f7ff fd4e 	bl	8003c4c <_DoInit>
  SEGGER_RTT_LOCK();
 80041b0:	f3ef 8311 	mrs	r3, BASEPRI
 80041b4:	f04f 0120 	mov.w	r1, #32
 80041b8:	f381 8811 	msr	BASEPRI, r1
 80041bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041be:	4b35      	ldr	r3, [pc, #212]	; (8004294 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80041c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80041c6:	6939      	ldr	r1, [r7, #16]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	4613      	mov	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	440b      	add	r3, r1
 80041d6:	3304      	adds	r3, #4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3301      	adds	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	dbeb      	blt.n	80041c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80041ee:	e000      	b.n	80041f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80041f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	da3f      	bge.n	800427c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80041fc:	6939      	ldr	r1, [r7, #16]
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	4613      	mov	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	440b      	add	r3, r1
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004210:	6939      	ldr	r1, [r7, #16]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	4613      	mov	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4413      	add	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	440b      	add	r3, r1
 8004220:	3304      	adds	r3, #4
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004226:	6939      	ldr	r1, [r7, #16]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	4613      	mov	r3, r2
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	4413      	add	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	440b      	add	r3, r1
 8004234:	3320      	adds	r3, #32
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800423a:	6939      	ldr	r1, [r7, #16]
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	4613      	mov	r3, r2
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4413      	add	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	440b      	add	r3, r1
 8004248:	3328      	adds	r3, #40	; 0x28
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800424e:	6939      	ldr	r1, [r7, #16]
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	4613      	mov	r3, r2
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	3324      	adds	r3, #36	; 0x24
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004262:	6939      	ldr	r1, [r7, #16]
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	440b      	add	r3, r1
 8004270:	332c      	adds	r3, #44	; 0x2c
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004276:	f3bf 8f5f 	dmb	sy
 800427a:	e002      	b.n	8004282 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295
 8004280:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004288:	69fb      	ldr	r3, [r7, #28]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	200137fc 	.word	0x200137fc

08004298 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80042a6:	4b33      	ldr	r3, [pc, #204]	; (8004374 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80042b4:	f7ff fcca 	bl	8003c4c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042b8:	4b2e      	ldr	r3, [pc, #184]	; (8004374 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80042ba:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	461a      	mov	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d24d      	bcs.n	8004364 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80042c8:	f3ef 8311 	mrs	r3, BASEPRI
 80042cc:	f04f 0120 	mov.w	r1, #32
 80042d0:	f381 8811 	msr	BASEPRI, r1
 80042d4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d031      	beq.n	8004340 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80042dc:	6979      	ldr	r1, [r7, #20]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4613      	mov	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	4413      	add	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	440b      	add	r3, r1
 80042ea:	3360      	adds	r3, #96	; 0x60
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80042f0:	6979      	ldr	r1, [r7, #20]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4613      	mov	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4413      	add	r3, r2
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	440b      	add	r3, r1
 80042fe:	3364      	adds	r3, #100	; 0x64
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004304:	6979      	ldr	r1, [r7, #20]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4613      	mov	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	4413      	add	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	440b      	add	r3, r1
 8004312:	3368      	adds	r3, #104	; 0x68
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004318:	6979      	ldr	r1, [r7, #20]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4613      	mov	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	4413      	add	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	440b      	add	r3, r1
 8004326:	3370      	adds	r3, #112	; 0x70
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800432c:	6979      	ldr	r1, [r7, #20]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	440b      	add	r3, r1
 800433a:	336c      	adds	r3, #108	; 0x6c
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004340:	6979      	ldr	r1, [r7, #20]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4613      	mov	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4413      	add	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	440b      	add	r3, r1
 800434e:	3374      	adds	r3, #116	; 0x74
 8004350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004352:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004354:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	e002      	b.n	800436a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004364:	f04f 33ff 	mov.w	r3, #4294967295
 8004368:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800436a:	69fb      	ldr	r3, [r7, #28]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200137fc 	.word	0x200137fc

08004378 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004388:	e002      	b.n	8004390 <_EncodeStr+0x18>
    Len++;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	3301      	adds	r3, #1
 800438e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f6      	bne.n	800438a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d901      	bls.n	80043a8 <_EncodeStr+0x30>
    Len = Limit;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2bfe      	cmp	r3, #254	; 0xfe
 80043ac:	d806      	bhi.n	80043bc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	60fa      	str	r2, [r7, #12]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	e011      	b.n	80043e0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	60fa      	str	r2, [r7, #12]
 80043c2:	22ff      	movs	r2, #255	; 0xff
 80043c4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	60fa      	str	r2, [r7, #12]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	0a19      	lsrs	r1, r3, #8
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	60fa      	str	r2, [r7, #12]
 80043dc:	b2ca      	uxtb	r2, r1
 80043de:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80043e4:	e00a      	b.n	80043fc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	1c53      	adds	r3, r2, #1
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1c59      	adds	r1, r3, #1
 80043f0:	60f9      	str	r1, [r7, #12]
 80043f2:	7812      	ldrb	r2, [r2, #0]
 80043f4:	701a      	strb	r2, [r3, #0]
    n++;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	3301      	adds	r3, #1
 80043fa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	429a      	cmp	r2, r3
 8004402:	d3f0      	bcc.n	80043e6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004404:	68fb      	ldr	r3, [r7, #12]
}
 8004406:	4618      	mov	r0, r3
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3304      	adds	r3, #4
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004432:	4b36      	ldr	r3, [pc, #216]	; (800450c <_HandleIncomingPacket+0xe0>)
 8004434:	7e1b      	ldrb	r3, [r3, #24]
 8004436:	4618      	mov	r0, r3
 8004438:	1cfb      	adds	r3, r7, #3
 800443a:	2201      	movs	r2, #1
 800443c:	4619      	mov	r1, r3
 800443e:	f7ff fdab 	bl	8003f98 <SEGGER_RTT_ReadNoLock>
 8004442:	4603      	mov	r3, r0
 8004444:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	dd54      	ble.n	80044f6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	2b80      	cmp	r3, #128	; 0x80
 8004450:	d032      	beq.n	80044b8 <_HandleIncomingPacket+0x8c>
 8004452:	2b80      	cmp	r3, #128	; 0x80
 8004454:	dc42      	bgt.n	80044dc <_HandleIncomingPacket+0xb0>
 8004456:	2b07      	cmp	r3, #7
 8004458:	dc16      	bgt.n	8004488 <_HandleIncomingPacket+0x5c>
 800445a:	2b00      	cmp	r3, #0
 800445c:	dd3e      	ble.n	80044dc <_HandleIncomingPacket+0xb0>
 800445e:	3b01      	subs	r3, #1
 8004460:	2b06      	cmp	r3, #6
 8004462:	d83b      	bhi.n	80044dc <_HandleIncomingPacket+0xb0>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <_HandleIncomingPacket+0x40>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	0800448f 	.word	0x0800448f
 8004470:	08004495 	.word	0x08004495
 8004474:	0800449b 	.word	0x0800449b
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044a7 	.word	0x080044a7
 8004480:	080044ad 	.word	0x080044ad
 8004484:	080044b3 	.word	0x080044b3
 8004488:	2b7f      	cmp	r3, #127	; 0x7f
 800448a:	d036      	beq.n	80044fa <_HandleIncomingPacket+0xce>
 800448c:	e026      	b.n	80044dc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800448e:	f000 faa3 	bl	80049d8 <SEGGER_SYSVIEW_Start>
      break;
 8004492:	e037      	b.n	8004504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004494:	f000 fb5c 	bl	8004b50 <SEGGER_SYSVIEW_Stop>
      break;
 8004498:	e034      	b.n	8004504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800449a:	f000 fd35 	bl	8004f08 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800449e:	e031      	b.n	8004504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80044a0:	f000 fcfa 	bl	8004e98 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80044a4:	e02e      	b.n	8004504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80044a6:	f000 fb79 	bl	8004b9c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80044aa:	e02b      	b.n	8004504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80044ac:	f000 ff68 	bl	8005380 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80044b0:	e028      	b.n	8004504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80044b2:	f000 ff47 	bl	8005344 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80044b6:	e025      	b.n	8004504 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044b8:	4b14      	ldr	r3, [pc, #80]	; (800450c <_HandleIncomingPacket+0xe0>)
 80044ba:	7e1b      	ldrb	r3, [r3, #24]
 80044bc:	4618      	mov	r0, r3
 80044be:	1cfb      	adds	r3, r7, #3
 80044c0:	2201      	movs	r2, #1
 80044c2:	4619      	mov	r1, r3
 80044c4:	f7ff fd68 	bl	8003f98 <SEGGER_RTT_ReadNoLock>
 80044c8:	4603      	mov	r3, r0
 80044ca:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	dd15      	ble.n	80044fe <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 feb5 	bl	8005244 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80044da:	e010      	b.n	80044fe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	b25b      	sxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	da0e      	bge.n	8004502 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <_HandleIncomingPacket+0xe0>)
 80044e6:	7e1b      	ldrb	r3, [r3, #24]
 80044e8:	4618      	mov	r0, r3
 80044ea:	1cfb      	adds	r3, r7, #3
 80044ec:	2201      	movs	r2, #1
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7ff fd52 	bl	8003f98 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80044f4:	e005      	b.n	8004502 <_HandleIncomingPacket+0xd6>
    }
  }
 80044f6:	bf00      	nop
 80044f8:	e004      	b.n	8004504 <_HandleIncomingPacket+0xd8>
      break;
 80044fa:	bf00      	nop
 80044fc:	e002      	b.n	8004504 <_HandleIncomingPacket+0xd8>
      break;
 80044fe:	bf00      	nop
 8004500:	e000      	b.n	8004504 <_HandleIncomingPacket+0xd8>
      break;
 8004502:	bf00      	nop
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20013690 	.word	0x20013690

08004510 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	; 0x30
 8004514:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004516:	2301      	movs	r3, #1
 8004518:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800451a:	1d3b      	adds	r3, r7, #4
 800451c:	3301      	adds	r3, #1
 800451e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004524:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <_TrySendOverflowPacket+0xe0>)
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
 800452a:	e00b      	b.n	8004544 <_TrySendOverflowPacket+0x34>
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	b2da      	uxtb	r2, r3
 8004530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004532:	1c59      	adds	r1, r3, #1
 8004534:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004536:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	09db      	lsrs	r3, r3, #7
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	2b7f      	cmp	r3, #127	; 0x7f
 8004548:	d8f0      	bhi.n	800452c <_TrySendOverflowPacket+0x1c>
 800454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004558:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800455a:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <_TrySendOverflowPacket+0xe4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004560:	4b23      	ldr	r3, [pc, #140]	; (80045f0 <_TrySendOverflowPacket+0xe0>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	e00b      	b.n	800458c <_TrySendOverflowPacket+0x7c>
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	b2da      	uxtb	r2, r3
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	1c59      	adds	r1, r3, #1
 800457c:	6279      	str	r1, [r7, #36]	; 0x24
 800457e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	09db      	lsrs	r3, r3, #7
 800458a:	623b      	str	r3, [r7, #32]
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	2b7f      	cmp	r3, #127	; 0x7f
 8004590:	d8f0      	bhi.n	8004574 <_TrySendOverflowPacket+0x64>
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	627a      	str	r2, [r7, #36]	; 0x24
 8004598:	6a3a      	ldr	r2, [r7, #32]
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80045a2:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <_TrySendOverflowPacket+0xe0>)
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	4618      	mov	r0, r3
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	1d3b      	adds	r3, r7, #4
 80045b2:	4619      	mov	r1, r3
 80045b4:	f7fb fe14 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80045b8:	4603      	mov	r3, r0
 80045ba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80045bc:	f7ff fabc 	bl	8003b38 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80045c6:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <_TrySendOverflowPacket+0xe0>)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80045cc:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <_TrySendOverflowPacket+0xe0>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <_TrySendOverflowPacket+0xe0>)
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	e004      	b.n	80045e4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <_TrySendOverflowPacket+0xe0>)
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	3301      	adds	r3, #1
 80045e0:	4a03      	ldr	r2, [pc, #12]	; (80045f0 <_TrySendOverflowPacket+0xe0>)
 80045e2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80045e4:	693b      	ldr	r3, [r7, #16]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3730      	adds	r7, #48	; 0x30
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20013690 	.word	0x20013690
 80045f4:	e0001004 	.word	0xe0001004

080045f8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	; 0x28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004604:	4b6d      	ldr	r3, [pc, #436]	; (80047bc <_SendPacket+0x1c4>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d010      	beq.n	800462e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800460c:	4b6b      	ldr	r3, [pc, #428]	; (80047bc <_SendPacket+0x1c4>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80a5 	beq.w	8004760 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004616:	4b69      	ldr	r3, [pc, #420]	; (80047bc <_SendPacket+0x1c4>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d109      	bne.n	8004632 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800461e:	f7ff ff77 	bl	8004510 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004622:	4b66      	ldr	r3, [pc, #408]	; (80047bc <_SendPacket+0x1c4>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b01      	cmp	r3, #1
 8004628:	f040 809c 	bne.w	8004764 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800462c:	e001      	b.n	8004632 <_SendPacket+0x3a>
    goto Send;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <_SendPacket+0x3c>
Send:
 8004632:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b1f      	cmp	r3, #31
 8004638:	d809      	bhi.n	800464e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800463a:	4b60      	ldr	r3, [pc, #384]	; (80047bc <_SendPacket+0x1c4>)
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	f040 808d 	bne.w	8004768 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b17      	cmp	r3, #23
 8004652:	d807      	bhi.n	8004664 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3b01      	subs	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	e03d      	b.n	80046e0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b7f      	cmp	r3, #127	; 0x7f
 8004670:	d912      	bls.n	8004698 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	09da      	lsrs	r2, r3, #7
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3b01      	subs	r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	3a01      	subs	r2, #1
 800468a:	60fa      	str	r2, [r7, #12]
 800468c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004690:	b2da      	uxtb	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e006      	b.n	80046a6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3b01      	subs	r3, #1
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b7f      	cmp	r3, #127	; 0x7f
 80046aa:	d912      	bls.n	80046d2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	09da      	lsrs	r2, r3, #7
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	3a01      	subs	r2, #1
 80046c4:	60fa      	str	r2, [r7, #12]
 80046c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	e006      	b.n	80046e0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80046e0:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <_SendPacket+0x1c8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80046e6:	4b35      	ldr	r3, [pc, #212]	; (80047bc <_SendPacket+0x1c4>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	623b      	str	r3, [r7, #32]
 80046f8:	e00b      	b.n	8004712 <_SendPacket+0x11a>
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	1c59      	adds	r1, r3, #1
 8004702:	6279      	str	r1, [r7, #36]	; 0x24
 8004704:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	09db      	lsrs	r3, r3, #7
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	2b7f      	cmp	r3, #127	; 0x7f
 8004716:	d8f0      	bhi.n	80046fa <_SendPacket+0x102>
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	627a      	str	r2, [r7, #36]	; 0x24
 800471e:	6a3a      	ldr	r2, [r7, #32]
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004728:	4b24      	ldr	r3, [pc, #144]	; (80047bc <_SendPacket+0x1c4>)
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	4618      	mov	r0, r3
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	461a      	mov	r2, r3
 8004736:	68f9      	ldr	r1, [r7, #12]
 8004738:	f7fb fd52 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800473c:	4603      	mov	r3, r0
 800473e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004740:	f7ff f9fa 	bl	8003b38 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800474a:	4a1c      	ldr	r2, [pc, #112]	; (80047bc <_SendPacket+0x1c4>)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	60d3      	str	r3, [r2, #12]
 8004750:	e00b      	b.n	800476a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004752:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <_SendPacket+0x1c4>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	3301      	adds	r3, #1
 8004758:	b2da      	uxtb	r2, r3
 800475a:	4b18      	ldr	r3, [pc, #96]	; (80047bc <_SendPacket+0x1c4>)
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	e004      	b.n	800476a <_SendPacket+0x172>
    goto SendDone;
 8004760:	bf00      	nop
 8004762:	e002      	b.n	800476a <_SendPacket+0x172>
      goto SendDone;
 8004764:	bf00      	nop
 8004766:	e000      	b.n	800476a <_SendPacket+0x172>
      goto SendDone;
 8004768:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800476a:	4b14      	ldr	r3, [pc, #80]	; (80047bc <_SendPacket+0x1c4>)
 800476c:	7e1b      	ldrb	r3, [r3, #24]
 800476e:	4619      	mov	r1, r3
 8004770:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <_SendPacket+0x1cc>)
 8004772:	460b      	mov	r3, r1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	440b      	add	r3, r1
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4413      	add	r3, r2
 800477c:	336c      	adds	r3, #108	; 0x6c
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <_SendPacket+0x1c4>)
 8004782:	7e1b      	ldrb	r3, [r3, #24]
 8004784:	4618      	mov	r0, r3
 8004786:	490f      	ldr	r1, [pc, #60]	; (80047c4 <_SendPacket+0x1cc>)
 8004788:	4603      	mov	r3, r0
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	4403      	add	r3, r0
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	440b      	add	r3, r1
 8004792:	3370      	adds	r3, #112	; 0x70
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d00b      	beq.n	80047b2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800479a:	4b08      	ldr	r3, [pc, #32]	; (80047bc <_SendPacket+0x1c4>)
 800479c:	789b      	ldrb	r3, [r3, #2]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d107      	bne.n	80047b2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80047a2:	4b06      	ldr	r3, [pc, #24]	; (80047bc <_SendPacket+0x1c4>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80047a8:	f7ff fe40 	bl	800442c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <_SendPacket+0x1c4>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80047b2:	bf00      	nop
 80047b4:	3728      	adds	r7, #40	; 0x28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20013690 	.word	0x20013690
 80047c0:	e0001004 	.word	0xe0001004
 80047c4:	200137fc 	.word	0x200137fc

080047c8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80047d6:	2300      	movs	r3, #0
 80047d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047dc:	4917      	ldr	r1, [pc, #92]	; (800483c <SEGGER_SYSVIEW_Init+0x74>)
 80047de:	4818      	ldr	r0, [pc, #96]	; (8004840 <SEGGER_SYSVIEW_Init+0x78>)
 80047e0:	f7ff fcd6 	bl	8004190 <SEGGER_RTT_AllocUpBuffer>
 80047e4:	4603      	mov	r3, r0
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	4b16      	ldr	r3, [pc, #88]	; (8004844 <SEGGER_SYSVIEW_Init+0x7c>)
 80047ea:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80047ec:	4b15      	ldr	r3, [pc, #84]	; (8004844 <SEGGER_SYSVIEW_Init+0x7c>)
 80047ee:	785a      	ldrb	r2, [r3, #1]
 80047f0:	4b14      	ldr	r3, [pc, #80]	; (8004844 <SEGGER_SYSVIEW_Init+0x7c>)
 80047f2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80047f4:	4b13      	ldr	r3, [pc, #76]	; (8004844 <SEGGER_SYSVIEW_Init+0x7c>)
 80047f6:	7e1b      	ldrb	r3, [r3, #24]
 80047f8:	4618      	mov	r0, r3
 80047fa:	2300      	movs	r3, #0
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	2308      	movs	r3, #8
 8004800:	4a11      	ldr	r2, [pc, #68]	; (8004848 <SEGGER_SYSVIEW_Init+0x80>)
 8004802:	490f      	ldr	r1, [pc, #60]	; (8004840 <SEGGER_SYSVIEW_Init+0x78>)
 8004804:	f7ff fd48 	bl	8004298 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004808:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <SEGGER_SYSVIEW_Init+0x7c>)
 800480a:	2200      	movs	r2, #0
 800480c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <SEGGER_SYSVIEW_Init+0x84>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a0c      	ldr	r2, [pc, #48]	; (8004844 <SEGGER_SYSVIEW_Init+0x7c>)
 8004814:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004816:	4a0b      	ldr	r2, [pc, #44]	; (8004844 <SEGGER_SYSVIEW_Init+0x7c>)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800481c:	4a09      	ldr	r2, [pc, #36]	; (8004844 <SEGGER_SYSVIEW_Init+0x7c>)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004822:	4a08      	ldr	r2, [pc, #32]	; (8004844 <SEGGER_SYSVIEW_Init+0x7c>)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004828:	4a06      	ldr	r2, [pc, #24]	; (8004844 <SEGGER_SYSVIEW_Init+0x7c>)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <SEGGER_SYSVIEW_Init+0x7c>)
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004834:	bf00      	nop
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20013288 	.word	0x20013288
 8004840:	0800568c 	.word	0x0800568c
 8004844:	20013690 	.word	0x20013690
 8004848:	20013688 	.word	0x20013688
 800484c:	e0001004 	.word	0xe0001004

08004850 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004858:	4a04      	ldr	r2, [pc, #16]	; (800486c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6113      	str	r3, [r2, #16]
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20013690 	.word	0x20013690

08004870 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004878:	f3ef 8311 	mrs	r3, BASEPRI
 800487c:	f04f 0120 	mov.w	r1, #32
 8004880:	f381 8811 	msr	BASEPRI, r1
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	4808      	ldr	r0, [pc, #32]	; (80048a8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004888:	f7ff fdc3 	bl	8004412 <_PreparePacket>
 800488c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	68b8      	ldr	r0, [r7, #8]
 8004894:	f7ff feb0 	bl	80045f8 <_SendPacket>
  RECORD_END();
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f383 8811 	msr	BASEPRI, r3
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	200136c0 	.word	0x200136c0

080048ac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80048b6:	f3ef 8311 	mrs	r3, BASEPRI
 80048ba:	f04f 0120 	mov.w	r1, #32
 80048be:	f381 8811 	msr	BASEPRI, r1
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	4816      	ldr	r0, [pc, #88]	; (8004920 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80048c6:	f7ff fda4 	bl	8004412 <_PreparePacket>
 80048ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	61bb      	str	r3, [r7, #24]
 80048d8:	e00b      	b.n	80048f2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	1c59      	adds	r1, r3, #1
 80048e2:	61f9      	str	r1, [r7, #28]
 80048e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	09db      	lsrs	r3, r3, #7
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b7f      	cmp	r3, #127	; 0x7f
 80048f6:	d8f0      	bhi.n	80048da <SEGGER_SYSVIEW_RecordU32+0x2e>
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	61fa      	str	r2, [r7, #28]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	6938      	ldr	r0, [r7, #16]
 800490e:	f7ff fe73 	bl	80045f8 <_SendPacket>
  RECORD_END();
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f383 8811 	msr	BASEPRI, r3
}
 8004918:	bf00      	nop
 800491a:	3720      	adds	r7, #32
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	200136c0 	.word	0x200136c0

08004924 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b08c      	sub	sp, #48	; 0x30
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004930:	f3ef 8311 	mrs	r3, BASEPRI
 8004934:	f04f 0120 	mov.w	r1, #32
 8004938:	f381 8811 	msr	BASEPRI, r1
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	4825      	ldr	r0, [pc, #148]	; (80049d4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004940:	f7ff fd67 	bl	8004412 <_PreparePacket>
 8004944:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
 8004952:	e00b      	b.n	800496c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	b2da      	uxtb	r2, r3
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	1c59      	adds	r1, r3, #1
 800495c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800495e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	09db      	lsrs	r3, r3, #7
 800496a:	62bb      	str	r3, [r7, #40]	; 0x28
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	2b7f      	cmp	r3, #127	; 0x7f
 8004970:	d8f0      	bhi.n	8004954 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	623b      	str	r3, [r7, #32]
 800498a:	e00b      	b.n	80049a4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	1c59      	adds	r1, r3, #1
 8004994:	6279      	str	r1, [r7, #36]	; 0x24
 8004996:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	09db      	lsrs	r3, r3, #7
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	2b7f      	cmp	r3, #127	; 0x7f
 80049a8:	d8f0      	bhi.n	800498c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	627a      	str	r2, [r7, #36]	; 0x24
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	6979      	ldr	r1, [r7, #20]
 80049be:	69b8      	ldr	r0, [r7, #24]
 80049c0:	f7ff fe1a 	bl	80045f8 <_SendPacket>
  RECORD_END();
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f383 8811 	msr	BASEPRI, r3
}
 80049ca:	bf00      	nop
 80049cc:	3730      	adds	r7, #48	; 0x30
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	200136c0 	.word	0x200136c0

080049d8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08c      	sub	sp, #48	; 0x30
 80049dc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80049de:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <SEGGER_SYSVIEW_Start+0x16c>)
 80049e0:	2201      	movs	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80049e4:	f3ef 8311 	mrs	r3, BASEPRI
 80049e8:	f04f 0120 	mov.w	r1, #32
 80049ec:	f381 8811 	msr	BASEPRI, r1
 80049f0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80049f2:	4b54      	ldr	r3, [pc, #336]	; (8004b44 <SEGGER_SYSVIEW_Start+0x16c>)
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	220a      	movs	r2, #10
 80049f8:	4953      	ldr	r1, [pc, #332]	; (8004b48 <SEGGER_SYSVIEW_Start+0x170>)
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fb fbf0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004a06:	f7ff f897 	bl	8003b38 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004a0a:	200a      	movs	r0, #10
 8004a0c:	f7ff ff30 	bl	8004870 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a10:	f3ef 8311 	mrs	r3, BASEPRI
 8004a14:	f04f 0120 	mov.w	r1, #32
 8004a18:	f381 8811 	msr	BASEPRI, r1
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	484b      	ldr	r0, [pc, #300]	; (8004b4c <SEGGER_SYSVIEW_Start+0x174>)
 8004a20:	f7ff fcf7 	bl	8004412 <_PreparePacket>
 8004a24:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a2e:	4b45      	ldr	r3, [pc, #276]	; (8004b44 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a34:	e00b      	b.n	8004a4e <SEGGER_SYSVIEW_Start+0x76>
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	1c59      	adds	r1, r3, #1
 8004a3e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	09db      	lsrs	r3, r3, #7
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	2b7f      	cmp	r3, #127	; 0x7f
 8004a52:	d8f0      	bhi.n	8004a36 <SEGGER_SYSVIEW_Start+0x5e>
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
 8004a68:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	623b      	str	r3, [r7, #32]
 8004a6e:	e00b      	b.n	8004a88 <SEGGER_SYSVIEW_Start+0xb0>
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	1c59      	adds	r1, r3, #1
 8004a78:	6279      	str	r1, [r7, #36]	; 0x24
 8004a7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	09db      	lsrs	r3, r3, #7
 8004a86:	623b      	str	r3, [r7, #32]
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a8c:	d8f0      	bhi.n	8004a70 <SEGGER_SYSVIEW_Start+0x98>
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	627a      	str	r2, [r7, #36]	; 0x24
 8004a94:	6a3a      	ldr	r2, [r7, #32]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	4b28      	ldr	r3, [pc, #160]	; (8004b44 <SEGGER_SYSVIEW_Start+0x16c>)
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	e00b      	b.n	8004ac2 <SEGGER_SYSVIEW_Start+0xea>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	1c59      	adds	r1, r3, #1
 8004ab2:	61f9      	str	r1, [r7, #28]
 8004ab4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	09db      	lsrs	r3, r3, #7
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ac6:	d8f0      	bhi.n	8004aaa <SEGGER_SYSVIEW_Start+0xd2>
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	61fa      	str	r2, [r7, #28]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	e00b      	b.n	8004afa <SEGGER_SYSVIEW_Start+0x122>
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	1c59      	adds	r1, r3, #1
 8004aea:	6179      	str	r1, [r7, #20]
 8004aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	09db      	lsrs	r3, r3, #7
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b7f      	cmp	r3, #127	; 0x7f
 8004afe:	d8f0      	bhi.n	8004ae2 <SEGGER_SYSVIEW_Start+0x10a>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	617a      	str	r2, [r7, #20]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004b10:	2218      	movs	r2, #24
 8004b12:	6839      	ldr	r1, [r7, #0]
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff fd6f 	bl	80045f8 <_SendPacket>
      RECORD_END();
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <SEGGER_SYSVIEW_Start+0x16c>)
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <SEGGER_SYSVIEW_Start+0x16c>)
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004b2e:	f000 f9eb 	bl	8004f08 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004b32:	f000 f9b1 	bl	8004e98 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004b36:	f000 fc23 	bl	8005380 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004b3a:	bf00      	nop
 8004b3c:	3730      	adds	r7, #48	; 0x30
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20013690 	.word	0x20013690
 8004b48:	080056b8 	.word	0x080056b8
 8004b4c:	200136c0 	.word	0x200136c0

08004b50 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b56:	f3ef 8311 	mrs	r3, BASEPRI
 8004b5a:	f04f 0120 	mov.w	r1, #32
 8004b5e:	f381 8811 	msr	BASEPRI, r1
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	480b      	ldr	r0, [pc, #44]	; (8004b94 <SEGGER_SYSVIEW_Stop+0x44>)
 8004b66:	f7ff fc54 	bl	8004412 <_PreparePacket>
 8004b6a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <SEGGER_SYSVIEW_Stop+0x48>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004b74:	220b      	movs	r2, #11
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	6838      	ldr	r0, [r7, #0]
 8004b7a:	f7ff fd3d 	bl	80045f8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <SEGGER_SYSVIEW_Stop+0x48>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f383 8811 	msr	BASEPRI, r3
}
 8004b8a:	bf00      	nop
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	200136c0 	.word	0x200136c0
 8004b98:	20013690 	.word	0x20013690

08004b9c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08c      	sub	sp, #48	; 0x30
 8004ba0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ba6:	f04f 0120 	mov.w	r1, #32
 8004baa:	f381 8811 	msr	BASEPRI, r1
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	4845      	ldr	r0, [pc, #276]	; (8004cc8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004bb2:	f7ff fc2e 	bl	8004412 <_PreparePacket>
 8004bb6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc0:	4b42      	ldr	r3, [pc, #264]	; (8004ccc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc6:	e00b      	b.n	8004be0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bce:	1c59      	adds	r1, r3, #1
 8004bd0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	09db      	lsrs	r3, r3, #7
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	2b7f      	cmp	r3, #127	; 0x7f
 8004be4:	d8f0      	bhi.n	8004bc8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfa:	4b34      	ldr	r3, [pc, #208]	; (8004ccc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	623b      	str	r3, [r7, #32]
 8004c00:	e00b      	b.n	8004c1a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	1c59      	adds	r1, r3, #1
 8004c0a:	6279      	str	r1, [r7, #36]	; 0x24
 8004c0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	09db      	lsrs	r3, r3, #7
 8004c18:	623b      	str	r3, [r7, #32]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c1e:	d8f0      	bhi.n	8004c02 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	627a      	str	r2, [r7, #36]	; 0x24
 8004c26:	6a3a      	ldr	r2, [r7, #32]
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	e00b      	b.n	8004c54 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	1c59      	adds	r1, r3, #1
 8004c44:	61f9      	str	r1, [r7, #28]
 8004c46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	09db      	lsrs	r3, r3, #7
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b7f      	cmp	r3, #127	; 0x7f
 8004c58:	d8f0      	bhi.n	8004c3c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	61fa      	str	r2, [r7, #28]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	e00b      	b.n	8004c8c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	6179      	str	r1, [r7, #20]
 8004c7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	09db      	lsrs	r3, r3, #7
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c90:	d8f0      	bhi.n	8004c74 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	617a      	str	r2, [r7, #20]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004ca2:	2218      	movs	r2, #24
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	68b8      	ldr	r0, [r7, #8]
 8004ca8:	f7ff fca6 	bl	80045f8 <_SendPacket>
  RECORD_END();
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004cba:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	4798      	blx	r3
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	3730      	adds	r7, #48	; 0x30
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	200136c0 	.word	0x200136c0
 8004ccc:	20013690 	.word	0x20013690

08004cd0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b092      	sub	sp, #72	; 0x48
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004cd8:	f3ef 8311 	mrs	r3, BASEPRI
 8004cdc:	f04f 0120 	mov.w	r1, #32
 8004ce0:	f381 8811 	msr	BASEPRI, r1
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	486a      	ldr	r0, [pc, #424]	; (8004e90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004ce8:	f7ff fb93 	bl	8004412 <_PreparePacket>
 8004cec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4b66      	ldr	r3, [pc, #408]	; (8004e94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	643b      	str	r3, [r7, #64]	; 0x40
 8004d02:	e00b      	b.n	8004d1c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0a:	1c59      	adds	r1, r3, #1
 8004d0c:	6479      	str	r1, [r7, #68]	; 0x44
 8004d0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d18:	09db      	lsrs	r3, r3, #7
 8004d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d20:	d8f0      	bhi.n	8004d04 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	647a      	str	r2, [r7, #68]	; 0x44
 8004d28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d3c:	e00b      	b.n	8004d56 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d44:	1c59      	adds	r1, r3, #1
 8004d46:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004d48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d52:	09db      	lsrs	r3, r3, #7
 8004d54:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	2b7f      	cmp	r3, #127	; 0x7f
 8004d5a:	d8f0      	bhi.n	8004d3e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	4619      	mov	r1, r3
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff faff 	bl	8004378 <_EncodeStr>
 8004d7a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004d7c:	2209      	movs	r2, #9
 8004d7e:	68f9      	ldr	r1, [r7, #12]
 8004d80:	6938      	ldr	r0, [r7, #16]
 8004d82:	f7ff fc39 	bl	80045f8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b40      	ldr	r3, [pc, #256]	; (8004e94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	633b      	str	r3, [r7, #48]	; 0x30
 8004d9a:	e00b      	b.n	8004db4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	1c59      	adds	r1, r3, #1
 8004da4:	6379      	str	r1, [r7, #52]	; 0x34
 8004da6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	09db      	lsrs	r3, r3, #7
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	2b7f      	cmp	r3, #127	; 0x7f
 8004db8:	d8f0      	bhi.n	8004d9c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	637a      	str	r2, [r7, #52]	; 0x34
 8004dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd4:	e00b      	b.n	8004dee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	1c59      	adds	r1, r3, #1
 8004dde:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004de0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	09db      	lsrs	r3, r3, #7
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df0:	2b7f      	cmp	r3, #127	; 0x7f
 8004df2:	d8f0      	bhi.n	8004dd6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	623b      	str	r3, [r7, #32]
 8004e0e:	e00b      	b.n	8004e28 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	1c59      	adds	r1, r3, #1
 8004e18:	6279      	str	r1, [r7, #36]	; 0x24
 8004e1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	09db      	lsrs	r3, r3, #7
 8004e26:	623b      	str	r3, [r7, #32]
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e2c:	d8f0      	bhi.n	8004e10 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	627a      	str	r2, [r7, #36]	; 0x24
 8004e34:	6a3a      	ldr	r2, [r7, #32]
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e00b      	b.n	8004e60 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	1c59      	adds	r1, r3, #1
 8004e50:	61f9      	str	r1, [r7, #28]
 8004e52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	09db      	lsrs	r3, r3, #7
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b7f      	cmp	r3, #127	; 0x7f
 8004e64:	d8f0      	bhi.n	8004e48 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	61fa      	str	r2, [r7, #28]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004e76:	2215      	movs	r2, #21
 8004e78:	68f9      	ldr	r1, [r7, #12]
 8004e7a:	6938      	ldr	r0, [r7, #16]
 8004e7c:	f7ff fbbc 	bl	80045f8 <_SendPacket>
  RECORD_END();
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f383 8811 	msr	BASEPRI, r3
}
 8004e86:	bf00      	nop
 8004e88:	3748      	adds	r7, #72	; 0x48
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	200136c0 	.word	0x200136c0
 8004e94:	20013690 	.word	0x20013690

08004e98 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004eae:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	4798      	blx	r3
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20013690 	.word	0x20013690

08004ec0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ec8:	f3ef 8311 	mrs	r3, BASEPRI
 8004ecc:	f04f 0120 	mov.w	r1, #32
 8004ed0:	f381 8811 	msr	BASEPRI, r1
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	480b      	ldr	r0, [pc, #44]	; (8004f04 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004ed8:	f7ff fa9b 	bl	8004412 <_PreparePacket>
 8004edc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ede:	2280      	movs	r2, #128	; 0x80
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	6938      	ldr	r0, [r7, #16]
 8004ee4:	f7ff fa48 	bl	8004378 <_EncodeStr>
 8004ee8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004eea:	220e      	movs	r2, #14
 8004eec:	68f9      	ldr	r1, [r7, #12]
 8004eee:	6938      	ldr	r0, [r7, #16]
 8004ef0:	f7ff fb82 	bl	80045f8 <_SendPacket>
  RECORD_END();
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f383 8811 	msr	BASEPRI, r3
}
 8004efa:	bf00      	nop
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200136c0 	.word	0x200136c0

08004f08 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004f08:	b590      	push	{r4, r7, lr}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004f0e:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01a      	beq.n	8004f4c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004f16:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d015      	beq.n	8004f4c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004f20:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4798      	blx	r3
 8004f28:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f2c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004f2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	000a      	movs	r2, r1
 8004f3c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f3e:	4613      	mov	r3, r2
 8004f40:	461a      	mov	r2, r3
 8004f42:	4621      	mov	r1, r4
 8004f44:	200d      	movs	r0, #13
 8004f46:	f7ff fced 	bl	8004924 <SEGGER_SYSVIEW_RecordU32x2>
 8004f4a:	e006      	b.n	8004f5a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4619      	mov	r1, r3
 8004f52:	200c      	movs	r0, #12
 8004f54:	f7ff fcaa 	bl	80048ac <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd90      	pop	{r4, r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20013690 	.word	0x20013690
 8004f68:	e0001004 	.word	0xe0001004

08004f6c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f72:	f3ef 8311 	mrs	r3, BASEPRI
 8004f76:	f04f 0120 	mov.w	r1, #32
 8004f7a:	f381 8811 	msr	BASEPRI, r1
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	4819      	ldr	r0, [pc, #100]	; (8004fe8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004f82:	f7ff fa46 	bl	8004412 <_PreparePacket>
 8004f86:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004f8c:	4b17      	ldr	r3, [pc, #92]	; (8004fec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f94:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	e00b      	b.n	8004fb8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	1c59      	adds	r1, r3, #1
 8004fa8:	6179      	str	r1, [r7, #20]
 8004faa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	09db      	lsrs	r3, r3, #7
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b7f      	cmp	r3, #127	; 0x7f
 8004fbc:	d8f0      	bhi.n	8004fa0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	617a      	str	r2, [r7, #20]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004fce:	2202      	movs	r2, #2
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	68b8      	ldr	r0, [r7, #8]
 8004fd4:	f7ff fb10 	bl	80045f8 <_SendPacket>
  RECORD_END();
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f383 8811 	msr	BASEPRI, r3
}
 8004fde:	bf00      	nop
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	200136c0 	.word	0x200136c0
 8004fec:	e000ed04 	.word	0xe000ed04

08004ff0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8004ffa:	f04f 0120 	mov.w	r1, #32
 8004ffe:	f381 8811 	msr	BASEPRI, r1
 8005002:	607b      	str	r3, [r7, #4]
 8005004:	4807      	ldr	r0, [pc, #28]	; (8005024 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005006:	f7ff fa04 	bl	8004412 <_PreparePacket>
 800500a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800500c:	2203      	movs	r2, #3
 800500e:	6839      	ldr	r1, [r7, #0]
 8005010:	6838      	ldr	r0, [r7, #0]
 8005012:	f7ff faf1 	bl	80045f8 <_SendPacket>
  RECORD_END();
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f383 8811 	msr	BASEPRI, r3
}
 800501c:	bf00      	nop
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	200136c0 	.word	0x200136c0

08005028 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800502e:	f3ef 8311 	mrs	r3, BASEPRI
 8005032:	f04f 0120 	mov.w	r1, #32
 8005036:	f381 8811 	msr	BASEPRI, r1
 800503a:	607b      	str	r3, [r7, #4]
 800503c:	4807      	ldr	r0, [pc, #28]	; (800505c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800503e:	f7ff f9e8 	bl	8004412 <_PreparePacket>
 8005042:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005044:	2212      	movs	r2, #18
 8005046:	6839      	ldr	r1, [r7, #0]
 8005048:	6838      	ldr	r0, [r7, #0]
 800504a:	f7ff fad5 	bl	80045f8 <_SendPacket>
  RECORD_END();
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f383 8811 	msr	BASEPRI, r3
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	200136c0 	.word	0x200136c0

08005060 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005066:	f3ef 8311 	mrs	r3, BASEPRI
 800506a:	f04f 0120 	mov.w	r1, #32
 800506e:	f381 8811 	msr	BASEPRI, r1
 8005072:	607b      	str	r3, [r7, #4]
 8005074:	4807      	ldr	r0, [pc, #28]	; (8005094 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005076:	f7ff f9cc 	bl	8004412 <_PreparePacket>
 800507a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800507c:	2211      	movs	r2, #17
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	6838      	ldr	r0, [r7, #0]
 8005082:	f7ff fab9 	bl	80045f8 <_SendPacket>
  RECORD_END();
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f383 8811 	msr	BASEPRI, r3
}
 800508c:	bf00      	nop
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	200136c0 	.word	0x200136c0

08005098 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050a0:	f3ef 8311 	mrs	r3, BASEPRI
 80050a4:	f04f 0120 	mov.w	r1, #32
 80050a8:	f381 8811 	msr	BASEPRI, r1
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	4819      	ldr	r0, [pc, #100]	; (8005114 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80050b0:	f7ff f9af 	bl	8004412 <_PreparePacket>
 80050b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80050ba:	4b17      	ldr	r3, [pc, #92]	; (8005118 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	e00b      	b.n	80050e6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	1c59      	adds	r1, r3, #1
 80050d6:	61f9      	str	r1, [r7, #28]
 80050d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	09db      	lsrs	r3, r3, #7
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b7f      	cmp	r3, #127	; 0x7f
 80050ea:	d8f0      	bhi.n	80050ce <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	61fa      	str	r2, [r7, #28]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80050fc:	2208      	movs	r2, #8
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	6938      	ldr	r0, [r7, #16]
 8005102:	f7ff fa79 	bl	80045f8 <_SendPacket>
  RECORD_END();
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f383 8811 	msr	BASEPRI, r3
}
 800510c:	bf00      	nop
 800510e:	3720      	adds	r7, #32
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	200136c0 	.word	0x200136c0
 8005118:	20013690 	.word	0x20013690

0800511c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005124:	f3ef 8311 	mrs	r3, BASEPRI
 8005128:	f04f 0120 	mov.w	r1, #32
 800512c:	f381 8811 	msr	BASEPRI, r1
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	4819      	ldr	r0, [pc, #100]	; (8005198 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005134:	f7ff f96d 	bl	8004412 <_PreparePacket>
 8005138:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800513e:	4b17      	ldr	r3, [pc, #92]	; (800519c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	e00b      	b.n	800516a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	1c59      	adds	r1, r3, #1
 800515a:	61f9      	str	r1, [r7, #28]
 800515c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	09db      	lsrs	r3, r3, #7
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b7f      	cmp	r3, #127	; 0x7f
 800516e:	d8f0      	bhi.n	8005152 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	61fa      	str	r2, [r7, #28]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005180:	2204      	movs	r2, #4
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	6938      	ldr	r0, [r7, #16]
 8005186:	f7ff fa37 	bl	80045f8 <_SendPacket>
  RECORD_END();
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f383 8811 	msr	BASEPRI, r3
}
 8005190:	bf00      	nop
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	200136c0 	.word	0x200136c0
 800519c:	20013690 	.word	0x20013690

080051a0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051a8:	f3ef 8311 	mrs	r3, BASEPRI
 80051ac:	f04f 0120 	mov.w	r1, #32
 80051b0:	f381 8811 	msr	BASEPRI, r1
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	4819      	ldr	r0, [pc, #100]	; (800521c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80051b8:	f7ff f92b 	bl	8004412 <_PreparePacket>
 80051bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80051c2:	4b17      	ldr	r3, [pc, #92]	; (8005220 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	e00b      	b.n	80051ee <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	1c59      	adds	r1, r3, #1
 80051de:	61f9      	str	r1, [r7, #28]
 80051e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	09db      	lsrs	r3, r3, #7
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b7f      	cmp	r3, #127	; 0x7f
 80051f2:	d8f0      	bhi.n	80051d6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	61fa      	str	r2, [r7, #28]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005204:	2206      	movs	r2, #6
 8005206:	68f9      	ldr	r1, [r7, #12]
 8005208:	6938      	ldr	r0, [r7, #16]
 800520a:	f7ff f9f5 	bl	80045f8 <_SendPacket>
  RECORD_END();
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f383 8811 	msr	BASEPRI, r3
}
 8005214:	bf00      	nop
 8005216:	3720      	adds	r7, #32
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	200136c0 	.word	0x200136c0
 8005220:	20013690 	.word	0x20013690

08005224 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800522c:	4b04      	ldr	r3, [pc, #16]	; (8005240 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	1ad3      	subs	r3, r2, r3
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	20013690 	.word	0x20013690

08005244 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b08c      	sub	sp, #48	; 0x30
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800524e:	4b3b      	ldr	r3, [pc, #236]	; (800533c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d06d      	beq.n	8005332 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005256:	4b39      	ldr	r3, [pc, #228]	; (800533c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800525c:	2300      	movs	r3, #0
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005260:	e008      	b.n	8005274 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	3301      	adds	r3, #1
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005278:	429a      	cmp	r2, r3
 800527a:	d3f2      	bcc.n	8005262 <SEGGER_SYSVIEW_SendModule+0x1e>
 800527c:	e000      	b.n	8005280 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800527e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d055      	beq.n	8005332 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005286:	f3ef 8311 	mrs	r3, BASEPRI
 800528a:	f04f 0120 	mov.w	r1, #32
 800528e:	f381 8811 	msr	BASEPRI, r1
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	482a      	ldr	r0, [pc, #168]	; (8005340 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005296:	f7ff f8bc 	bl	8004412 <_PreparePacket>
 800529a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	e00b      	b.n	80052c2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	1c59      	adds	r1, r3, #1
 80052b2:	6279      	str	r1, [r7, #36]	; 0x24
 80052b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	09db      	lsrs	r3, r3, #7
 80052c0:	623b      	str	r3, [r7, #32]
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	2b7f      	cmp	r3, #127	; 0x7f
 80052c6:	d8f0      	bhi.n	80052aa <SEGGER_SYSVIEW_SendModule+0x66>
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	627a      	str	r2, [r7, #36]	; 0x24
 80052ce:	6a3a      	ldr	r2, [r7, #32]
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	e00b      	b.n	80052fc <SEGGER_SYSVIEW_SendModule+0xb8>
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	1c59      	adds	r1, r3, #1
 80052ec:	61f9      	str	r1, [r7, #28]
 80052ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	09db      	lsrs	r3, r3, #7
 80052fa:	61bb      	str	r3, [r7, #24]
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005300:	d8f0      	bhi.n	80052e4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	61fa      	str	r2, [r7, #28]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2280      	movs	r2, #128	; 0x80
 8005318:	4619      	mov	r1, r3
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff f82c 	bl	8004378 <_EncodeStr>
 8005320:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005322:	2216      	movs	r2, #22
 8005324:	68f9      	ldr	r1, [r7, #12]
 8005326:	6938      	ldr	r0, [r7, #16]
 8005328:	f7ff f966 	bl	80045f8 <_SendPacket>
      RECORD_END();
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005332:	bf00      	nop
 8005334:	3730      	adds	r7, #48	; 0x30
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	200136b8 	.word	0x200136b8
 8005340:	200136c0 	.word	0x200136c0

08005344 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800534a:	4b0c      	ldr	r3, [pc, #48]	; (800537c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00f      	beq.n	8005372 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005352:	4b0a      	ldr	r3, [pc, #40]	; (800537c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f2      	bne.n	8005358 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	200136b8 	.word	0x200136b8

08005380 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005386:	f3ef 8311 	mrs	r3, BASEPRI
 800538a:	f04f 0120 	mov.w	r1, #32
 800538e:	f381 8811 	msr	BASEPRI, r1
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	4817      	ldr	r0, [pc, #92]	; (80053f4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005396:	f7ff f83c 	bl	8004412 <_PreparePacket>
 800539a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	e00b      	b.n	80053c4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	1c59      	adds	r1, r3, #1
 80053b4:	6179      	str	r1, [r7, #20]
 80053b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	09db      	lsrs	r3, r3, #7
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	2b7f      	cmp	r3, #127	; 0x7f
 80053c8:	d8f0      	bhi.n	80053ac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	617a      	str	r2, [r7, #20]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80053da:	221b      	movs	r2, #27
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	68b8      	ldr	r0, [r7, #8]
 80053e0:	f7ff f90a 	bl	80045f8 <_SendPacket>
  RECORD_END();
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f383 8811 	msr	BASEPRI, r3
}
 80053ea:	bf00      	nop
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	200136c0 	.word	0x200136c0
 80053f8:	200136bc 	.word	0x200136bc

080053fc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005404:	f3ef 8311 	mrs	r3, BASEPRI
 8005408:	f04f 0120 	mov.w	r1, #32
 800540c:	f381 8811 	msr	BASEPRI, r1
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	4827      	ldr	r0, [pc, #156]	; (80054b0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005414:	f7fe fffd 	bl	8004412 <_PreparePacket>
 8005418:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800541a:	2280      	movs	r2, #128	; 0x80
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	6938      	ldr	r0, [r7, #16]
 8005420:	f7fe ffaa 	bl	8004378 <_EncodeStr>
 8005424:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
 800542a:	2301      	movs	r3, #1
 800542c:	623b      	str	r3, [r7, #32]
 800542e:	e00b      	b.n	8005448 <SEGGER_SYSVIEW_Warn+0x4c>
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	b2da      	uxtb	r2, r3
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	1c59      	adds	r1, r3, #1
 8005438:	6279      	str	r1, [r7, #36]	; 0x24
 800543a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	09db      	lsrs	r3, r3, #7
 8005446:	623b      	str	r3, [r7, #32]
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	2b7f      	cmp	r3, #127	; 0x7f
 800544c:	d8f0      	bhi.n	8005430 <SEGGER_SYSVIEW_Warn+0x34>
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	627a      	str	r2, [r7, #36]	; 0x24
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	e00b      	b.n	8005480 <SEGGER_SYSVIEW_Warn+0x84>
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	b2da      	uxtb	r2, r3
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	1c59      	adds	r1, r3, #1
 8005470:	61f9      	str	r1, [r7, #28]
 8005472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	09db      	lsrs	r3, r3, #7
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b7f      	cmp	r3, #127	; 0x7f
 8005484:	d8f0      	bhi.n	8005468 <SEGGER_SYSVIEW_Warn+0x6c>
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	61fa      	str	r2, [r7, #28]
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005496:	221a      	movs	r2, #26
 8005498:	68f9      	ldr	r1, [r7, #12]
 800549a:	6938      	ldr	r0, [r7, #16]
 800549c:	f7ff f8ac 	bl	80045f8 <_SendPacket>
  RECORD_END();
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f383 8811 	msr	BASEPRI, r3
}
 80054a6:	bf00      	nop
 80054a8:	3728      	adds	r7, #40	; 0x28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	200136c0 	.word	0x200136c0

080054b4 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80054b8:	4b13      	ldr	r3, [pc, #76]	; (8005508 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054ba:	7e1b      	ldrb	r3, [r3, #24]
 80054bc:	4619      	mov	r1, r3
 80054be:	4a13      	ldr	r2, [pc, #76]	; (800550c <SEGGER_SYSVIEW_IsStarted+0x58>)
 80054c0:	460b      	mov	r3, r1
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	440b      	add	r3, r1
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	4413      	add	r3, r2
 80054ca:	336c      	adds	r3, #108	; 0x6c
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054d0:	7e1b      	ldrb	r3, [r3, #24]
 80054d2:	4618      	mov	r0, r3
 80054d4:	490d      	ldr	r1, [pc, #52]	; (800550c <SEGGER_SYSVIEW_IsStarted+0x58>)
 80054d6:	4603      	mov	r3, r0
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	4403      	add	r3, r0
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	440b      	add	r3, r1
 80054e0:	3370      	adds	r3, #112	; 0x70
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d00b      	beq.n	8005500 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80054e8:	4b07      	ldr	r3, [pc, #28]	; (8005508 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054ea:	789b      	ldrb	r3, [r3, #2]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d107      	bne.n	8005500 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80054f6:	f7fe ff99 	bl	800442c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80054fa:	4b03      	ldr	r3, [pc, #12]	; (8005508 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005500:	4b01      	ldr	r3, [pc, #4]	; (8005508 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005502:	781b      	ldrb	r3, [r3, #0]
}
 8005504:	4618      	mov	r0, r3
 8005506:	bd80      	pop	{r7, pc}
 8005508:	20013690 	.word	0x20013690
 800550c:	200137fc 	.word	0x200137fc

08005510 <__libc_init_array>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	4d0d      	ldr	r5, [pc, #52]	; (8005548 <__libc_init_array+0x38>)
 8005514:	4c0d      	ldr	r4, [pc, #52]	; (800554c <__libc_init_array+0x3c>)
 8005516:	1b64      	subs	r4, r4, r5
 8005518:	10a4      	asrs	r4, r4, #2
 800551a:	2600      	movs	r6, #0
 800551c:	42a6      	cmp	r6, r4
 800551e:	d109      	bne.n	8005534 <__libc_init_array+0x24>
 8005520:	4d0b      	ldr	r5, [pc, #44]	; (8005550 <__libc_init_array+0x40>)
 8005522:	4c0c      	ldr	r4, [pc, #48]	; (8005554 <__libc_init_array+0x44>)
 8005524:	f000 f83c 	bl	80055a0 <_init>
 8005528:	1b64      	subs	r4, r4, r5
 800552a:	10a4      	asrs	r4, r4, #2
 800552c:	2600      	movs	r6, #0
 800552e:	42a6      	cmp	r6, r4
 8005530:	d105      	bne.n	800553e <__libc_init_array+0x2e>
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	f855 3b04 	ldr.w	r3, [r5], #4
 8005538:	4798      	blx	r3
 800553a:	3601      	adds	r6, #1
 800553c:	e7ee      	b.n	800551c <__libc_init_array+0xc>
 800553e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005542:	4798      	blx	r3
 8005544:	3601      	adds	r6, #1
 8005546:	e7f2      	b.n	800552e <__libc_init_array+0x1e>
 8005548:	080056cc 	.word	0x080056cc
 800554c:	080056cc 	.word	0x080056cc
 8005550:	080056cc 	.word	0x080056cc
 8005554:	080056d0 	.word	0x080056d0

08005558 <memcmp>:
 8005558:	b530      	push	{r4, r5, lr}
 800555a:	3901      	subs	r1, #1
 800555c:	2400      	movs	r4, #0
 800555e:	42a2      	cmp	r2, r4
 8005560:	d101      	bne.n	8005566 <memcmp+0xe>
 8005562:	2000      	movs	r0, #0
 8005564:	e005      	b.n	8005572 <memcmp+0x1a>
 8005566:	5d03      	ldrb	r3, [r0, r4]
 8005568:	3401      	adds	r4, #1
 800556a:	5d0d      	ldrb	r5, [r1, r4]
 800556c:	42ab      	cmp	r3, r5
 800556e:	d0f6      	beq.n	800555e <memcmp+0x6>
 8005570:	1b58      	subs	r0, r3, r5
 8005572:	bd30      	pop	{r4, r5, pc}

08005574 <memcpy>:
 8005574:	440a      	add	r2, r1
 8005576:	4291      	cmp	r1, r2
 8005578:	f100 33ff 	add.w	r3, r0, #4294967295
 800557c:	d100      	bne.n	8005580 <memcpy+0xc>
 800557e:	4770      	bx	lr
 8005580:	b510      	push	{r4, lr}
 8005582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800558a:	4291      	cmp	r1, r2
 800558c:	d1f9      	bne.n	8005582 <memcpy+0xe>
 800558e:	bd10      	pop	{r4, pc}

08005590 <memset>:
 8005590:	4402      	add	r2, r0
 8005592:	4603      	mov	r3, r0
 8005594:	4293      	cmp	r3, r2
 8005596:	d100      	bne.n	800559a <memset+0xa>
 8005598:	4770      	bx	lr
 800559a:	f803 1b01 	strb.w	r1, [r3], #1
 800559e:	e7f9      	b.n	8005594 <memset+0x4>

080055a0 <_init>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	bf00      	nop
 80055a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a6:	bc08      	pop	{r3}
 80055a8:	469e      	mov	lr, r3
 80055aa:	4770      	bx	lr

080055ac <_fini>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr
