
05_freertos_led_vTaskDelete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000641c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  080065bc  080065bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067c8  080067c8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d0  080067d0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d0  080067d0  000167d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067d4  080067d4  000167d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080067d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001448c  2000001c  080067f4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144a8  080067f4  000244a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b4b  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e31  00000000  00000000  00036b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  000399c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  0003ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018024  00000000  00000000  0003bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c1c  00000000  00000000  00053bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099665  00000000  00000000  000677f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100e55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004964  00000000  00000000  00100ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065a4 	.word	0x080065a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	080065a4 	.word	0x080065a4

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20014400 	.word	0x20014400

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000572:	f000 fb7f 	bl	8000c74 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000576:	f000 f8b7 	bl	80006e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800057a:	f000 f91f 	bl	80007bc <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	//Enable the CYCCNT counter.
	DWT_CTRL |= (1 << 0);
 800057e:	4b48      	ldr	r3, [pc, #288]	; (80006a0 <main+0x134>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a47      	ldr	r2, [pc, #284]	; (80006a0 <main+0x134>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 800058a:	f003 fb39 	bl	8003c00 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800058e:	f005 fa07 	bl	80059a0 <SEGGER_SYSVIEW_Start>

	SEGGER_UART_init(500000);
 8000592:	4844      	ldr	r0, [pc, #272]	; (80006a4 <main+0x138>)
 8000594:	f003 fdbe 	bl	8004114 <SEGGER_UART_init>
	 * 		LED
	 *
	 *
	 *
	 * */
	status = xTaskCreate(task_led_green, "led_green", 200, NULL, 4,
 8000598:	4b43      	ldr	r3, [pc, #268]	; (80006a8 <main+0x13c>)
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2304      	movs	r3, #4
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2300      	movs	r3, #0
 80005a2:	22c8      	movs	r2, #200	; 0xc8
 80005a4:	4941      	ldr	r1, [pc, #260]	; (80006ac <main+0x140>)
 80005a6:	4842      	ldr	r0, [pc, #264]	; (80006b0 <main+0x144>)
 80005a8:	f001 fe1e 	bl	80021e8 <xTaskCreate>
 80005ac:	6178      	str	r0, [r7, #20]
			&taskHandle_led_green);

	configASSERT(status == pdPASS);
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d00a      	beq.n	80005ca <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b8:	f383 8811 	msr	BASEPRI, r3
 80005bc:	f3bf 8f6f 	isb	sy
 80005c0:	f3bf 8f4f 	dsb	sy
 80005c4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c6:	bf00      	nop
 80005c8:	e7fe      	b.n	80005c8 <main+0x5c>
	next_task_handle = taskHandle_led_green;
 80005ca:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <main+0x13c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a39      	ldr	r2, [pc, #228]	; (80006b4 <main+0x148>)
 80005d0:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(task_led_orange, "led_orange", 200, NULL, 3,
 80005d2:	4b39      	ldr	r3, [pc, #228]	; (80006b8 <main+0x14c>)
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2303      	movs	r3, #3
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	22c8      	movs	r2, #200	; 0xc8
 80005de:	4937      	ldr	r1, [pc, #220]	; (80006bc <main+0x150>)
 80005e0:	4837      	ldr	r0, [pc, #220]	; (80006c0 <main+0x154>)
 80005e2:	f001 fe01 	bl	80021e8 <xTaskCreate>
 80005e6:	6178      	str	r0, [r7, #20]
			&taskHandle_led_orange);

	configASSERT(status == pdPASS);
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00a      	beq.n	8000604 <main+0x98>
        __asm volatile
 80005ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f2:	f383 8811 	msr	BASEPRI, r3
 80005f6:	f3bf 8f6f 	isb	sy
 80005fa:	f3bf 8f4f 	dsb	sy
 80005fe:	60fb      	str	r3, [r7, #12]
    }
 8000600:	bf00      	nop
 8000602:	e7fe      	b.n	8000602 <main+0x96>

	status = xTaskCreate(task_led_red, "led_red", 200, NULL, 2,
 8000604:	4b2f      	ldr	r3, [pc, #188]	; (80006c4 <main+0x158>)
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2302      	movs	r3, #2
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2300      	movs	r3, #0
 800060e:	22c8      	movs	r2, #200	; 0xc8
 8000610:	492d      	ldr	r1, [pc, #180]	; (80006c8 <main+0x15c>)
 8000612:	482e      	ldr	r0, [pc, #184]	; (80006cc <main+0x160>)
 8000614:	f001 fde8 	bl	80021e8 <xTaskCreate>
 8000618:	6178      	str	r0, [r7, #20]
			&taskHandle_led_red);

	configASSERT(status == pdPASS);
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d00a      	beq.n	8000636 <main+0xca>
        __asm volatile
 8000620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000624:	f383 8811 	msr	BASEPRI, r3
 8000628:	f3bf 8f6f 	isb	sy
 800062c:	f3bf 8f4f 	dsb	sy
 8000630:	60bb      	str	r3, [r7, #8]
    }
 8000632:	bf00      	nop
 8000634:	e7fe      	b.n	8000634 <main+0xc8>
	status = xTaskCreate(task_led_blue, "led_blue", 200, NULL, 1,
 8000636:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <main+0x164>)
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2301      	movs	r3, #1
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	22c8      	movs	r2, #200	; 0xc8
 8000642:	4924      	ldr	r1, [pc, #144]	; (80006d4 <main+0x168>)
 8000644:	4824      	ldr	r0, [pc, #144]	; (80006d8 <main+0x16c>)
 8000646:	f001 fdcf 	bl	80021e8 <xTaskCreate>
 800064a:	6178      	str	r0, [r7, #20]
			&taskHandle_led_blue);

	configASSERT(status == pdPASS);
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d00a      	beq.n	8000668 <main+0xfc>
        __asm volatile
 8000652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000656:	f383 8811 	msr	BASEPRI, r3
 800065a:	f3bf 8f6f 	isb	sy
 800065e:	f3bf 8f4f 	dsb	sy
 8000662:	607b      	str	r3, [r7, #4]
    }
 8000664:	bf00      	nop
 8000666:	e7fe      	b.n	8000666 <main+0xfa>
	 *
	 *
	 *
	 * */

	status = xTaskCreate(task_btn, "btn", 200, NULL, 6, &taskHandle_btn);
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <main+0x170>)
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2306      	movs	r3, #6
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2300      	movs	r3, #0
 8000672:	22c8      	movs	r2, #200	; 0xc8
 8000674:	491a      	ldr	r1, [pc, #104]	; (80006e0 <main+0x174>)
 8000676:	481b      	ldr	r0, [pc, #108]	; (80006e4 <main+0x178>)
 8000678:	f001 fdb6 	bl	80021e8 <xTaskCreate>
 800067c:	6178      	str	r0, [r7, #20]

	configASSERT(status == pdPASS);
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d00a      	beq.n	800069a <main+0x12e>
        __asm volatile
 8000684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000688:	f383 8811 	msr	BASEPRI, r3
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	603b      	str	r3, [r7, #0]
    }
 8000696:	bf00      	nop
 8000698:	e7fe      	b.n	8000698 <main+0x12c>

	vTaskStartScheduler();
 800069a:	f002 f813 	bl	80026c4 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800069e:	e7fe      	b.n	800069e <main+0x132>
 80006a0:	e0001000 	.word	0xe0001000
 80006a4:	0007a120 	.word	0x0007a120
 80006a8:	200143a4 	.word	0x200143a4
 80006ac:	080065bc 	.word	0x080065bc
 80006b0:	08000861 	.word	0x08000861
 80006b4:	20000038 	.word	0x20000038
 80006b8:	200143a8 	.word	0x200143a8
 80006bc:	080065c8 	.word	0x080065c8
 80006c0:	080008d1 	.word	0x080008d1
 80006c4:	200143b0 	.word	0x200143b0
 80006c8:	080065d4 	.word	0x080065d4
 80006cc:	08000941 	.word	0x08000941
 80006d0:	200143ac 	.word	0x200143ac
 80006d4:	080065dc 	.word	0x080065dc
 80006d8:	080009b1 	.word	0x080009b1
 80006dc:	200143a0 	.word	0x200143a0
 80006e0:	080065e8 	.word	0x080065e8
 80006e4:	08000a31 	.word	0x08000a31

080006e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	; 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 ff4c 	bl	8006594 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <SystemClock_Config+0xcc>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <SystemClock_Config+0xd0>)
 8000732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000758:	2308      	movs	r3, #8
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 200;
 800075c:	23c8      	movs	r3, #200	; 0xc8
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000760:	2304      	movs	r3, #4
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8000764:	2308      	movs	r3, #8
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fd75 	bl	800125c <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x94>
		Error_Handler();
 8000778:	f000 f998 	bl	8000aac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2103      	movs	r1, #3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 ffd6 	bl	800174c <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xc2>
		Error_Handler();
 80007a6:	f000 f981 	bl	8000aac <Error_Handler>
	}
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	; 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_GPIO_Init+0x98>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <MX_GPIO_Init+0x98>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_GPIO_Init+0x98>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_GPIO_Init+0x98>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <MX_GPIO_Init+0x98>)
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_GPIO_Init+0x98>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000810:	4811      	ldr	r0, [pc, #68]	; (8000858 <MX_GPIO_Init+0x9c>)
 8000812:	f000 fcef 	bl	80011f4 <HAL_GPIO_WritePin>
	led_green_Pin | led_orange_Pin | led_red_Pin | led_blue_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : button_Pin */
	GPIO_InitStruct.Pin = button_Pin;
 8000816:	2301      	movs	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_GPIO_Init+0xa0>)
 800082a:	f000 fb47 	bl	8000ebc <HAL_GPIO_Init>

	/*Configure GPIO pins : led_green_Pin led_orange_Pin led_red_Pin led_blue_Pin */
	GPIO_InitStruct.Pin = led_green_Pin | led_orange_Pin | led_red_Pin
 800082e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000832:	60fb      	str	r3, [r7, #12]
			| led_blue_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_GPIO_Init+0x9c>)
 8000848:	f000 fb38 	bl	8000ebc <HAL_GPIO_Init>

}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40020c00 	.word	0x40020c00
 800085c:	40020000 	.word	0x40020000

08000860 <task_led_green>:

/* USER CODE BEGIN 4 */

static void task_led_green(void *parameter) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af02      	add	r7, sp, #8
 8000866:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000868:	4814      	ldr	r0, [pc, #80]	; (80008bc <task_led_green+0x5c>)
 800086a:	f005 fdb5 	bl	80063d8 <SEGGER_SYSVIEW_PrintfTarget>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800086e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000872:	4813      	ldr	r0, [pc, #76]	; (80008c0 <task_led_green+0x60>)
 8000874:	f000 fcd7 	bl	8001226 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2300      	movs	r3, #0
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2000      	movs	r0, #0
 8000886:	f002 facf 	bl	8002e28 <xTaskGenericNotifyWait>
 800088a:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d1ea      	bne.n	8000868 <task_led_green+0x8>
			vTaskSuspendAll();
 8000892:	f001 ff73 	bl	800277c <vTaskSuspendAll>
			next_task_handle = taskHandle_led_orange;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <task_led_green+0x64>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <task_led_green+0x68>)
 800089c:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800089e:	f001 ff7b 	bl	8002798 <xTaskResumeAll>

			HAL_GPIO_WritePin(GPIOD, led_green_Pin, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <task_led_green+0x60>)
 80008aa:	f000 fca3 	bl	80011f4 <HAL_GPIO_WritePin>

			SEGGER_SYSVIEW_PrintfTarget("delete green LED");
 80008ae:	4807      	ldr	r0, [pc, #28]	; (80008cc <task_led_green+0x6c>)
 80008b0:	f005 fd92 	bl	80063d8 <SEGGER_SYSVIEW_PrintfTarget>

			vTaskDelete(NULL);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f001 fe1f 	bl	80024f8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80008ba:	e7d5      	b.n	8000868 <task_led_green+0x8>
 80008bc:	080065ec 	.word	0x080065ec
 80008c0:	40020c00 	.word	0x40020c00
 80008c4:	200143a8 	.word	0x200143a8
 80008c8:	20000038 	.word	0x20000038
 80008cc:	08006600 	.word	0x08006600

080008d0 <task_led_orange>:
		}
	}
}

static void task_led_orange(void *parameter) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80008d8:	4814      	ldr	r0, [pc, #80]	; (800092c <task_led_orange+0x5c>)
 80008da:	f005 fd7d 	bl	80063d8 <SEGGER_SYSVIEW_PrintfTarget>

		HAL_GPIO_TogglePin(GPIOD, led_orange_Pin);
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	4813      	ldr	r0, [pc, #76]	; (8000930 <task_led_orange+0x60>)
 80008e4:	f000 fc9f 	bl	8001226 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(500));
 80008e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2300      	movs	r3, #0
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2000      	movs	r0, #0
 80008f6:	f002 fa97 	bl	8002e28 <xTaskGenericNotifyWait>
 80008fa:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d1ea      	bne.n	80008d8 <task_led_orange+0x8>
			vTaskSuspendAll();
 8000902:	f001 ff3b 	bl	800277c <vTaskSuspendAll>

			next_task_handle = taskHandle_led_red;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <task_led_orange+0x64>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <task_led_orange+0x68>)
 800090c:	6013      	str	r3, [r2, #0]

			xTaskResumeAll();
 800090e:	f001 ff43 	bl	8002798 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, led_orange_Pin, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <task_led_orange+0x60>)
 800091a:	f000 fc6b 	bl	80011f4 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("delete orange LED");
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <task_led_orange+0x6c>)
 8000920:	f005 fd5a 	bl	80063d8 <SEGGER_SYSVIEW_PrintfTarget>

			vTaskDelete(NULL);
 8000924:	2000      	movs	r0, #0
 8000926:	f001 fde7 	bl	80024f8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800092a:	e7d5      	b.n	80008d8 <task_led_orange+0x8>
 800092c:	08006614 	.word	0x08006614
 8000930:	40020c00 	.word	0x40020c00
 8000934:	200143b0 	.word	0x200143b0
 8000938:	20000038 	.word	0x20000038
 800093c:	08006628 	.word	0x08006628

08000940 <task_led_red>:
		}
	}
}

static void task_led_red(void *parameter) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af02      	add	r7, sp, #8
 8000946:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000948:	4814      	ldr	r0, [pc, #80]	; (800099c <task_led_red+0x5c>)
 800094a:	f005 fd45 	bl	80063d8 <SEGGER_SYSVIEW_PrintfTarget>

		HAL_GPIO_TogglePin(GPIOD, led_red_Pin);
 800094e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000952:	4813      	ldr	r0, [pc, #76]	; (80009a0 <task_led_red+0x60>)
 8000954:	f000 fc67 	bl	8001226 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(250));
 8000958:	23fa      	movs	r3, #250	; 0xfa
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2300      	movs	r3, #0
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2000      	movs	r0, #0
 8000964:	f002 fa60 	bl	8002e28 <xTaskGenericNotifyWait>
 8000968:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d1eb      	bne.n	8000948 <task_led_red+0x8>
			vTaskSuspendAll();
 8000970:	f001 ff04 	bl	800277c <vTaskSuspendAll>
			next_task_handle = taskHandle_led_blue;
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <task_led_red+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <task_led_red+0x68>)
 800097a:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800097c:	f001 ff0c 	bl	8002798 <xTaskResumeAll>

			HAL_GPIO_WritePin(GPIOD, led_red_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <task_led_red+0x60>)
 8000988:	f000 fc34 	bl	80011f4 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("delete red LED");
 800098c:	4807      	ldr	r0, [pc, #28]	; (80009ac <task_led_red+0x6c>)
 800098e:	f005 fd23 	bl	80063d8 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000992:	2000      	movs	r0, #0
 8000994:	f001 fdb0 	bl	80024f8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000998:	e7d6      	b.n	8000948 <task_led_red+0x8>
 800099a:	bf00      	nop
 800099c:	0800663c 	.word	0x0800663c
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	200143ac 	.word	0x200143ac
 80009a8:	20000038 	.word	0x20000038
 80009ac:	08006650 	.word	0x08006650

080009b0 <task_led_blue>:
		}
	}
}

static void task_led_blue(void *parameter) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 80009b8:	4817      	ldr	r0, [pc, #92]	; (8000a18 <task_led_blue+0x68>)
 80009ba:	f005 fd0d 	bl	80063d8 <SEGGER_SYSVIEW_PrintfTarget>

		HAL_GPIO_TogglePin(GPIOD, led_blue_Pin);
 80009be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c2:	4816      	ldr	r0, [pc, #88]	; (8000a1c <task_led_blue+0x6c>)
 80009c4:	f000 fc2f 	bl	8001226 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(125));
 80009c8:	237d      	movs	r3, #125	; 0x7d
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2300      	movs	r3, #0
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2000      	movs	r0, #0
 80009d4:	f002 fa28 	bl	8002e28 <xTaskGenericNotifyWait>
 80009d8:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d1eb      	bne.n	80009b8 <task_led_blue+0x8>
			vTaskSuspendAll();
 80009e0:	f001 fecc 	bl	800277c <vTaskSuspendAll>
			next_task_handle = NULL;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <task_led_blue+0x70>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80009ea:	f001 fed5 	bl	8002798 <xTaskResumeAll>

			HAL_GPIO_WritePin(GPIOD, led_blue_Pin, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <task_led_blue+0x6c>)
 80009f6:	f000 fbfd 	bl	80011f4 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("delete blue LED");
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <task_led_blue+0x74>)
 80009fc:	f005 fcec 	bl	80063d8 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f001 fd79 	bl	80024f8 <vTaskDelete>
			SEGGER_SYSVIEW_PrintfTarget("delete button");
 8000a06:	4808      	ldr	r0, [pc, #32]	; (8000a28 <task_led_blue+0x78>)
 8000a08:	f005 fce6 	bl	80063d8 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(taskHandle_btn);
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <task_led_blue+0x7c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fd71 	bl	80024f8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000a16:	e7cf      	b.n	80009b8 <task_led_blue+0x8>
 8000a18:	08006660 	.word	0x08006660
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	20000038 	.word	0x20000038
 8000a24:	08006674 	.word	0x08006674
 8000a28:	08006684 	.word	0x08006684
 8000a2c:	200143a0 	.word	0x200143a0

08000a30 <task_btn>:

		}
	}
}

static void task_btn(void *parameter) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	6078      	str	r0, [r7, #4]

	uint8_t btn_read = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73bb      	strb	r3, [r7, #14]
	uint8_t btn_read_prev = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]

	while (1) {

		btn_read = HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 8000a40:	2101      	movs	r1, #1
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <task_btn+0x4c>)
 8000a44:	f000 fbbe 	bl	80011c4 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	73bb      	strb	r3, [r7, #14]
		if (btn_read) {
 8000a4c:	7bbb      	ldrb	r3, [r7, #14]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d00e      	beq.n	8000a70 <task_btn+0x40>

			SEGGER_SYSVIEW_PrintfTarget("button task");
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <task_btn+0x50>)
 8000a54:	f005 fcc0 	bl	80063d8 <SEGGER_SYSVIEW_PrintfTarget>
			if (!btn_read_prev) {
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d108      	bne.n	8000a70 <task_btn+0x40>
				xTaskNotify(next_task_handle, 0, eNoAction);
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <task_btn+0x54>)
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	2300      	movs	r3, #0
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2300      	movs	r3, #0
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f002 fa64 	bl	8002f38 <xTaskGenericNotify>
			}
		}
		btn_read_prev = btn_read;
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000a74:	200a      	movs	r0, #10
 8000a76:	f001 fded 	bl	8002654 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin);
 8000a7a:	e7e1      	b.n	8000a40 <task_btn+0x10>
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	08006694 	.word	0x08006694
 8000a84:	20000038 	.word	0x20000038

08000a88 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a9a:	f000 f90d 	bl	8000cb8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40000c00 	.word	0x40000c00

08000aac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000af6:	f002 fcff 	bl	80034f8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	2032      	movs	r0, #50	; 0x32
 8000b1e:	f000 f9a3 	bl	8000e68 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b22:	2032      	movs	r0, #50	; 0x32
 8000b24:	f000 f9bc 	bl	8000ea0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <HAL_InitTick+0xa4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	4a1e      	ldr	r2, [pc, #120]	; (8000bac <HAL_InitTick+0xa4>)
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	6413      	str	r3, [r2, #64]	; 0x40
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_InitTick+0xa4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b44:	f107 0210 	add.w	r2, r7, #16
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 ffe4 	bl	8001b1c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b54:	f000 ffce 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b60:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <HAL_InitTick+0xa8>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	0c9b      	lsrs	r3, r3, #18
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_InitTick+0xac>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <HAL_InitTick+0xb0>)
 8000b70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_InitTick+0xac>)
 8000b74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b78:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_InitTick+0xac>)
 8000b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_InitTick+0xac>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_InitTick+0xac>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <HAL_InitTick+0xac>)
 8000b8e:	f000 fff7 	bl	8001b80 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d104      	bne.n	8000ba2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000b98:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <HAL_InitTick+0xac>)
 8000b9a:	f001 f84b 	bl	8001c34 <HAL_TIM_Base_Start_IT>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3730      	adds	r7, #48	; 0x30
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	431bde83 	.word	0x431bde83
 8000bb4:	200143b4 	.word	0x200143b4
 8000bb8:	40000c00 	.word	0x40000c00

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM5_IRQHandler+0x10>)
 8000bee:	f001 f883 	bl	8001cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200143b4 	.word	0x200143b4

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f005 fc61 	bl	8006514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fc8b 	bl	800056c <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c64:	080067d8 	.word	0x080067d8
  ldr r2, =_sbss
 8000c68:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c6c:	200144a8 	.word	0x200144a8

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f8d8 	bl	8000e52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f7ff ff30 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff ff06 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	200143fc 	.word	0x200143fc

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200143fc 	.word	0x200143fc

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	; (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ff4c 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7a:	f7ff ff61 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	6978      	ldr	r0, [r7, #20]
 8000e86:	f7ff ffb1 	bl	8000dec <NVIC_EncodePriority>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff80 	bl	8000d98 <__NVIC_SetPriority>
}
 8000e98:	bf00      	nop
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff54 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	e159      	b.n	800118c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	f040 8148 	bne.w	8001186 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d005      	beq.n	8000f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d130      	bne.n	8000f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f44:	2201      	movs	r2, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	091b      	lsrs	r3, r3, #4
 8000f5a:	f003 0201 	and.w	r2, r3, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d017      	beq.n	8000fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d123      	bne.n	8001000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	08da      	lsrs	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3208      	adds	r2, #8
 8000fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	69b9      	ldr	r1, [r7, #24]
 8000ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0203 	and.w	r2, r3, #3
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80a2 	beq.w	8001186 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b57      	ldr	r3, [pc, #348]	; (80011a4 <HAL_GPIO_Init+0x2e8>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a56      	ldr	r2, [pc, #344]	; (80011a4 <HAL_GPIO_Init+0x2e8>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b54      	ldr	r3, [pc, #336]	; (80011a4 <HAL_GPIO_Init+0x2e8>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800105e:	4a52      	ldr	r2, [pc, #328]	; (80011a8 <HAL_GPIO_Init+0x2ec>)
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a49      	ldr	r2, [pc, #292]	; (80011ac <HAL_GPIO_Init+0x2f0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d019      	beq.n	80010be <HAL_GPIO_Init+0x202>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <HAL_GPIO_Init+0x2f4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x1fe>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <HAL_GPIO_Init+0x2f8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x1fa>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a46      	ldr	r2, [pc, #280]	; (80011b8 <HAL_GPIO_Init+0x2fc>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x1f6>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a45      	ldr	r2, [pc, #276]	; (80011bc <HAL_GPIO_Init+0x300>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x1f2>
 80010aa:	2304      	movs	r3, #4
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010ae:	2307      	movs	r3, #7
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010be:	2300      	movs	r3, #0
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d0:	4935      	ldr	r1, [pc, #212]	; (80011a8 <HAL_GPIO_Init+0x2ec>)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010de:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <HAL_GPIO_Init+0x304>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001102:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <HAL_GPIO_Init+0x304>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_GPIO_Init+0x304>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112c:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <HAL_GPIO_Init+0x304>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_GPIO_Init+0x304>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <HAL_GPIO_Init+0x304>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_GPIO_Init+0x304>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_GPIO_Init+0x304>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3301      	adds	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	f67f aea2 	bls.w	8000ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40013c00 	.word	0x40013c00

080011c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	887b      	ldrh	r3, [r7, #2]
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e001      	b.n	80011e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
 8001200:	4613      	mov	r3, r2
 8001202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001204:	787b      	ldrb	r3, [r7, #1]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001210:	e003      	b.n	800121a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	041a      	lsls	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	619a      	str	r2, [r3, #24]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001226:	b480      	push	{r7}
 8001228:	b085      	sub	sp, #20
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001238:	887a      	ldrh	r2, [r7, #2]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4013      	ands	r3, r2
 800123e:	041a      	lsls	r2, r3, #16
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43d9      	mvns	r1, r3
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	400b      	ands	r3, r1
 8001248:	431a      	orrs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	619a      	str	r2, [r3, #24]
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e264      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d075      	beq.n	8001366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127a:	4ba3      	ldr	r3, [pc, #652]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b04      	cmp	r3, #4
 8001284:	d00c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001286:	4ba0      	ldr	r3, [pc, #640]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128e:	2b08      	cmp	r3, #8
 8001290:	d112      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001292:	4b9d      	ldr	r3, [pc, #628]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800129e:	d10b      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	4b99      	ldr	r3, [pc, #612]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d05b      	beq.n	8001364 <HAL_RCC_OscConfig+0x108>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d157      	bne.n	8001364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e23f      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c0:	d106      	bne.n	80012d0 <HAL_RCC_OscConfig+0x74>
 80012c2:	4b91      	ldr	r3, [pc, #580]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a90      	ldr	r2, [pc, #576]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e01d      	b.n	800130c <HAL_RCC_OscConfig+0xb0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d8:	d10c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x98>
 80012da:	4b8b      	ldr	r3, [pc, #556]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a8a      	ldr	r2, [pc, #552]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a87      	ldr	r2, [pc, #540]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e00b      	b.n	800130c <HAL_RCC_OscConfig+0xb0>
 80012f4:	4b84      	ldr	r3, [pc, #528]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a83      	ldr	r2, [pc, #524]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b81      	ldr	r3, [pc, #516]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a80      	ldr	r2, [pc, #512]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d013      	beq.n	800133c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fce4 	bl	8000ce0 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fce0 	bl	8000ce0 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e204      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0xc0>
 800133a:	e014      	b.n	8001366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fcd0 	bl	8000ce0 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fccc 	bl	8000ce0 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e1f0      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001356:	4b6c      	ldr	r3, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0xe8>
 8001362:	e000      	b.n	8001366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d063      	beq.n	800143a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001372:	4b65      	ldr	r3, [pc, #404]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00b      	beq.n	8001396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137e:	4b62      	ldr	r3, [pc, #392]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001386:	2b08      	cmp	r3, #8
 8001388:	d11c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138a:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d116      	bne.n	80013c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <HAL_RCC_OscConfig+0x152>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e1c4      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	4b56      	ldr	r3, [pc, #344]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4952      	ldr	r1, [pc, #328]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	e03a      	b.n	800143a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d020      	beq.n	800140e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013cc:	4b4f      	ldr	r3, [pc, #316]	; (800150c <HAL_RCC_OscConfig+0x2b0>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7ff fc85 	bl	8000ce0 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fc81 	bl	8000ce0 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e1a5      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ec:	4b46      	ldr	r3, [pc, #280]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f8:	4b43      	ldr	r3, [pc, #268]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	4940      	ldr	r1, [pc, #256]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
 800140c:	e015      	b.n	800143a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140e:	4b3f      	ldr	r3, [pc, #252]	; (800150c <HAL_RCC_OscConfig+0x2b0>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fc64 	bl	8000ce0 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141c:	f7ff fc60 	bl	8000ce0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e184      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142e:	4b36      	ldr	r3, [pc, #216]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d030      	beq.n	80014a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d016      	beq.n	800147c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_OscConfig+0x2b4>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001454:	f7ff fc44 	bl	8000ce0 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff fc40 	bl	8000ce0 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e164      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x200>
 800147a:	e015      	b.n	80014a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <HAL_RCC_OscConfig+0x2b4>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7ff fc2d 	bl	8000ce0 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148a:	f7ff fc29 	bl	8000ce0 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e14d      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 800149e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f0      	bne.n	800148a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80a0 	beq.w	80015f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_OscConfig+0x2b8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d121      	bne.n	8001536 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_RCC_OscConfig+0x2b8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_RCC_OscConfig+0x2b8>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fbef 	bl	8000ce0 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	e011      	b.n	800152a <HAL_RCC_OscConfig+0x2ce>
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	42470000 	.word	0x42470000
 8001510:	42470e80 	.word	0x42470e80
 8001514:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001518:	f7ff fbe2 	bl	8000ce0 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e106      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b85      	ldr	r3, [pc, #532]	; (8001740 <HAL_RCC_OscConfig+0x4e4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d106      	bne.n	800154c <HAL_RCC_OscConfig+0x2f0>
 800153e:	4b81      	ldr	r3, [pc, #516]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a80      	ldr	r2, [pc, #512]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
 800154a:	e01c      	b.n	8001586 <HAL_RCC_OscConfig+0x32a>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b05      	cmp	r3, #5
 8001552:	d10c      	bne.n	800156e <HAL_RCC_OscConfig+0x312>
 8001554:	4b7b      	ldr	r3, [pc, #492]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a7a      	ldr	r2, [pc, #488]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
 8001560:	4b78      	ldr	r3, [pc, #480]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	4a77      	ldr	r2, [pc, #476]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	; 0x70
 800156c:	e00b      	b.n	8001586 <HAL_RCC_OscConfig+0x32a>
 800156e:	4b75      	ldr	r3, [pc, #468]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a74      	ldr	r2, [pc, #464]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
 800157a:	4b72      	ldr	r3, [pc, #456]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a71      	ldr	r2, [pc, #452]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001580:	f023 0304 	bic.w	r3, r3, #4
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d015      	beq.n	80015ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158e:	f7ff fba7 	bl	8000ce0 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fba3 	bl	8000ce0 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0c5      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	4b65      	ldr	r3, [pc, #404]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0ee      	beq.n	8001596 <HAL_RCC_OscConfig+0x33a>
 80015b8:	e014      	b.n	80015e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fb91 	bl	8000ce0 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff fb8d 	bl	8000ce0 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0af      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d8:	4b5a      	ldr	r3, [pc, #360]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ee      	bne.n	80015c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d105      	bne.n	80015f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ea:	4b56      	ldr	r3, [pc, #344]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a55      	ldr	r2, [pc, #340]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 80015f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 809b 	beq.w	8001736 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001600:	4b50      	ldr	r3, [pc, #320]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	d05c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d141      	bne.n	8001698 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <HAL_RCC_OscConfig+0x4ec>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fb61 	bl	8000ce0 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001622:	f7ff fb5d 	bl	8000ce0 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e081      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001634:	4b43      	ldr	r3, [pc, #268]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69da      	ldr	r2, [r3, #28]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	019b      	lsls	r3, r3, #6
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	3b01      	subs	r3, #1
 800165a:	041b      	lsls	r3, r3, #16
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	061b      	lsls	r3, r3, #24
 8001664:	4937      	ldr	r1, [pc, #220]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <HAL_RCC_OscConfig+0x4ec>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fb36 	bl	8000ce0 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fb32 	bl	8000ce0 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e056      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168a:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x41c>
 8001696:	e04e      	b.n	8001736 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_RCC_OscConfig+0x4ec>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff fb1f 	bl	8000ce0 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff fb1b 	bl	8000ce0 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e03f      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x44a>
 80016c4:	e037      	b.n	8001736 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e032      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d028      	beq.n	8001732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d121      	bne.n	8001732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d11a      	bne.n	8001732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001702:	4013      	ands	r3, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001708:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800170a:	4293      	cmp	r3, r2
 800170c:	d111      	bne.n	8001732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	3b01      	subs	r3, #1
 800171c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d107      	bne.n	8001732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40007000 	.word	0x40007000
 8001744:	40023800 	.word	0x40023800
 8001748:	42470060 	.word	0x42470060

0800174c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0cc      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d90c      	bls.n	8001788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b65      	ldr	r3, [pc, #404]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b8      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a0:	4b59      	ldr	r3, [pc, #356]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	494d      	ldr	r1, [pc, #308]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d044      	beq.n	800186c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d119      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e07f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d003      	beq.n	800180a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001806:	2b03      	cmp	r3, #3
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e067      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182a:	4b37      	ldr	r3, [pc, #220]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 0203 	bic.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4934      	ldr	r1, [pc, #208]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff fa50 	bl	8000ce0 <HAL_GetTick>
 8001840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	e00a      	b.n	800185a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001844:	f7ff fa4c 	bl	8000ce0 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e04f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 020c 	and.w	r2, r3, #12
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d1eb      	bne.n	8001844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d20c      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e032      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	490e      	ldr	r1, [pc, #56]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d2:	f000 f821 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	490a      	ldr	r1, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	5ccb      	ldrb	r3, [r1, r3]
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f908 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00
 8001908:	40023800 	.word	0x40023800
 800190c:	08006774 	.word	0x08006774
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	2300      	movs	r3, #0
 800192a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001930:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b08      	cmp	r3, #8
 800193a:	d00d      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x40>
 800193c:	2b08      	cmp	r3, #8
 800193e:	f200 80bd 	bhi.w	8001abc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x34>
 8001946:	2b04      	cmp	r3, #4
 8001948:	d003      	beq.n	8001952 <HAL_RCC_GetSysClockFreq+0x3a>
 800194a:	e0b7      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b61      	ldr	r3, [pc, #388]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800194e:	60bb      	str	r3, [r7, #8]
       break;
 8001950:	e0b7      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001952:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001954:	60bb      	str	r3, [r7, #8]
      break;
 8001956:	e0b4      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001958:	4b5d      	ldr	r3, [pc, #372]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001960:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001962:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d04d      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196e:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	099b      	lsrs	r3, r3, #6
 8001974:	461a      	mov	r2, r3
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	ea02 0800 	and.w	r8, r2, r0
 8001986:	ea03 0901 	and.w	r9, r3, r1
 800198a:	4640      	mov	r0, r8
 800198c:	4649      	mov	r1, r9
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	014b      	lsls	r3, r1, #5
 8001998:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800199c:	0142      	lsls	r2, r0, #5
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	ebb0 0008 	subs.w	r0, r0, r8
 80019a6:	eb61 0109 	sbc.w	r1, r1, r9
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	018b      	lsls	r3, r1, #6
 80019b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019b8:	0182      	lsls	r2, r0, #6
 80019ba:	1a12      	subs	r2, r2, r0
 80019bc:	eb63 0301 	sbc.w	r3, r3, r1
 80019c0:	f04f 0000 	mov.w	r0, #0
 80019c4:	f04f 0100 	mov.w	r1, #0
 80019c8:	00d9      	lsls	r1, r3, #3
 80019ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019ce:	00d0      	lsls	r0, r2, #3
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	eb12 0208 	adds.w	r2, r2, r8
 80019d8:	eb43 0309 	adc.w	r3, r3, r9
 80019dc:	f04f 0000 	mov.w	r0, #0
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	0259      	lsls	r1, r3, #9
 80019e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019ea:	0250      	lsls	r0, r2, #9
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	461a      	mov	r2, r3
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	f7fe fc3a 	bl	8000274 <__aeabi_uldivmod>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4613      	mov	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e04a      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	461a      	mov	r2, r3
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	ea02 0400 	and.w	r4, r2, r0
 8001a22:	ea03 0501 	and.w	r5, r3, r1
 8001a26:	4620      	mov	r0, r4
 8001a28:	4629      	mov	r1, r5
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	014b      	lsls	r3, r1, #5
 8001a34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a38:	0142      	lsls	r2, r0, #5
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	1b00      	subs	r0, r0, r4
 8001a40:	eb61 0105 	sbc.w	r1, r1, r5
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	018b      	lsls	r3, r1, #6
 8001a4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a52:	0182      	lsls	r2, r0, #6
 8001a54:	1a12      	subs	r2, r2, r0
 8001a56:	eb63 0301 	sbc.w	r3, r3, r1
 8001a5a:	f04f 0000 	mov.w	r0, #0
 8001a5e:	f04f 0100 	mov.w	r1, #0
 8001a62:	00d9      	lsls	r1, r3, #3
 8001a64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a68:	00d0      	lsls	r0, r2, #3
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	1912      	adds	r2, r2, r4
 8001a70:	eb45 0303 	adc.w	r3, r5, r3
 8001a74:	f04f 0000 	mov.w	r0, #0
 8001a78:	f04f 0100 	mov.w	r1, #0
 8001a7c:	0299      	lsls	r1, r3, #10
 8001a7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a82:	0290      	lsls	r0, r2, #10
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	f7fe fbee 	bl	8000274 <__aeabi_uldivmod>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	0c1b      	lsrs	r3, r3, #16
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab8:	60bb      	str	r3, [r7, #8]
      break;
 8001aba:	e002      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001abe:	60bb      	str	r3, [r7, #8]
      break;
 8001ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	00f42400 	.word	0x00f42400
 8001ad8:	007a1200 	.word	0x007a1200

08001adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000000 	.word	0x20000000

08001af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001af8:	f7ff fff0 	bl	8001adc <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	0a9b      	lsrs	r3, r3, #10
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4903      	ldr	r1, [pc, #12]	; (8001b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40023800 	.word	0x40023800
 8001b18:	08006784 	.word	0x08006784

08001b1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	220f      	movs	r2, #15
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_RCC_GetClockConfig+0x5c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	08db      	lsrs	r3, r3, #3
 8001b56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_RCC_GetClockConfig+0x60>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0207 	and.w	r2, r3, #7
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	601a      	str	r2, [r3, #0]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40023c00 	.word	0x40023c00

08001b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e041      	b.n	8001c16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f839 	bl	8001c1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	f000 f9ca 	bl	8001f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d001      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e044      	b.n	8001cd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a1e      	ldr	r2, [pc, #120]	; (8001ce4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d018      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c76:	d013      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00e      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_TIM_Base_Start_IT+0xb8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d009      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d004      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d111      	bne.n	8001cc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d010      	beq.n	8001cd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc2:	e007      	b.n	8001cd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	40000800 	.word	0x40000800
 8001cf0:	40000c00 	.word	0x40000c00
 8001cf4:	40014000 	.word	0x40014000

08001cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d122      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d11b      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0202 	mvn.w	r2, #2
 8001d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8ee 	bl	8001f1c <HAL_TIM_IC_CaptureCallback>
 8001d40:	e005      	b.n	8001d4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8e0 	bl	8001f08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f8f1 	bl	8001f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d122      	bne.n	8001da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d11b      	bne.n	8001da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0204 	mvn.w	r2, #4
 8001d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8c4 	bl	8001f1c <HAL_TIM_IC_CaptureCallback>
 8001d94:	e005      	b.n	8001da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8b6 	bl	8001f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f8c7 	bl	8001f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d122      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d11b      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0208 	mvn.w	r2, #8
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f89a 	bl	8001f1c <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f88c 	bl	8001f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f89d 	bl	8001f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d122      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d11b      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0210 	mvn.w	r2, #16
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2208      	movs	r2, #8
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f870 	bl	8001f1c <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f862 	bl	8001f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f873 	bl	8001f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0201 	mvn.w	r2, #1
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fe06 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e86:	2b80      	cmp	r3, #128	; 0x80
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e94:	2b80      	cmp	r3, #128	; 0x80
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8e2 	bl	800206c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb2:	2b40      	cmp	r3, #64	; 0x40
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec0:	2b40      	cmp	r3, #64	; 0x40
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f838 	bl	8001f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0320 	and.w	r3, r3, #32
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0220 	mvn.w	r2, #32
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8ac 	bl	8002058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a34      	ldr	r2, [pc, #208]	; (800203c <TIM_Base_SetConfig+0xe4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00f      	beq.n	8001f90 <TIM_Base_SetConfig+0x38>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f76:	d00b      	beq.n	8001f90 <TIM_Base_SetConfig+0x38>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a31      	ldr	r2, [pc, #196]	; (8002040 <TIM_Base_SetConfig+0xe8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d007      	beq.n	8001f90 <TIM_Base_SetConfig+0x38>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a30      	ldr	r2, [pc, #192]	; (8002044 <TIM_Base_SetConfig+0xec>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d003      	beq.n	8001f90 <TIM_Base_SetConfig+0x38>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a2f      	ldr	r2, [pc, #188]	; (8002048 <TIM_Base_SetConfig+0xf0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d108      	bne.n	8001fa2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a25      	ldr	r2, [pc, #148]	; (800203c <TIM_Base_SetConfig+0xe4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01b      	beq.n	8001fe2 <TIM_Base_SetConfig+0x8a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb0:	d017      	beq.n	8001fe2 <TIM_Base_SetConfig+0x8a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a22      	ldr	r2, [pc, #136]	; (8002040 <TIM_Base_SetConfig+0xe8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <TIM_Base_SetConfig+0x8a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a21      	ldr	r2, [pc, #132]	; (8002044 <TIM_Base_SetConfig+0xec>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00f      	beq.n	8001fe2 <TIM_Base_SetConfig+0x8a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a20      	ldr	r2, [pc, #128]	; (8002048 <TIM_Base_SetConfig+0xf0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00b      	beq.n	8001fe2 <TIM_Base_SetConfig+0x8a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	; (800204c <TIM_Base_SetConfig+0xf4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <TIM_Base_SetConfig+0x8a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <TIM_Base_SetConfig+0xf8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d003      	beq.n	8001fe2 <TIM_Base_SetConfig+0x8a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <TIM_Base_SetConfig+0xfc>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d108      	bne.n	8001ff4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <TIM_Base_SetConfig+0xe4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d103      	bne.n	8002028 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	615a      	str	r2, [r3, #20]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40010000 	.word	0x40010000
 8002040:	40000400 	.word	0x40000400
 8002044:	40000800 	.word	0x40000800
 8002048:	40000c00 	.word	0x40000c00
 800204c:	40014000 	.word	0x40014000
 8002050:	40014400 	.word	0x40014400
 8002054:	40014800 	.word	0x40014800

08002058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f103 0208 	add.w	r2, r3, #8
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f103 0208 	add.w	r2, r3, #8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f103 0208 	add.w	r2, r3, #8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	601a      	str	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d103      	bne.n	8002142 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e00c      	b.n	800215c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3308      	adds	r3, #8
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e002      	b.n	8002150 <vListInsert+0x2e>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	429a      	cmp	r2, r3
 800215a:	d2f6      	bcs.n	800214a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6892      	ldr	r2, [r2, #8]
 80021aa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6852      	ldr	r2, [r2, #4]
 80021b4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d103      	bne.n	80021c8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	1e5a      	subs	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	; 0x30
 80021ec:	af04      	add	r7, sp, #16
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f001 fb25 	bl	800384c <pvPortMalloc>
 8002202:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d013      	beq.n	8002232 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800220a:	2058      	movs	r0, #88	; 0x58
 800220c:	f001 fb1e 	bl	800384c <pvPortMalloc>
 8002210:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002218:	2258      	movs	r2, #88	; 0x58
 800221a:	2100      	movs	r1, #0
 800221c:	69f8      	ldr	r0, [r7, #28]
 800221e:	f004 f9b9 	bl	8006594 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
 8002228:	e005      	b.n	8002236 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800222a:	6978      	ldr	r0, [r7, #20]
 800222c:	f001 fbc8 	bl	80039c0 <vPortFree>
 8002230:	e001      	b.n	8002236 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	2300      	movs	r3, #0
 8002240:	9303      	str	r3, [sp, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	9302      	str	r3, [sp, #8]
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f80e 	bl	8002274 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002258:	69f8      	ldr	r0, [r7, #28]
 800225a:	f000 f899 	bl	8002390 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800225e:	2301      	movs	r3, #1
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e002      	b.n	800226a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800226a:	69bb      	ldr	r3, [r7, #24]
    }
 800226c:	4618      	mov	r0, r3
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	461a      	mov	r2, r3
 800228c:	21a5      	movs	r1, #165	; 0xa5
 800228e:	f004 f981 	bl	8006594 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800229c:	3b01      	subs	r3, #1
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f023 0307 	bic.w	r3, r3, #7
 80022aa:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <prvInitialiseNewTask+0x58>
        __asm volatile
 80022b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	617b      	str	r3, [r7, #20]
    }
 80022c8:	bf00      	nop
 80022ca:	e7fe      	b.n	80022ca <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01e      	beq.n	8002310 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e012      	b.n	80022fe <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	7819      	ldrb	r1, [r3, #0]
 80022e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	4413      	add	r3, r2
 80022e6:	3334      	adds	r3, #52	; 0x34
 80022e8:	460a      	mov	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	3301      	adds	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	2b09      	cmp	r3, #9
 8002302:	d9e9      	bls.n	80022d8 <prvInitialiseNewTask+0x64>
 8002304:	e000      	b.n	8002308 <prvInitialiseNewTask+0x94>
            {
                break;
 8002306:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	2b09      	cmp	r3, #9
 8002314:	d90a      	bls.n	800232c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	613b      	str	r3, [r7, #16]
    }
 8002328:	bf00      	nop
 800232a:	e7fe      	b.n	800232a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232e:	2b09      	cmp	r3, #9
 8002330:	d901      	bls.n	8002336 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002332:	2309      	movs	r3, #9
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002340:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	3304      	adds	r3, #4
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff feba 	bl	80020c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234e:	3318      	adds	r3, #24
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff feb5 	bl	80020c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800235a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	f1c3 020a 	rsb	r2, r3, #10
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002364:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	68f9      	ldr	r1, [r7, #12]
 8002370:	69b8      	ldr	r0, [r7, #24]
 8002372:	f000 ff95 	bl	80032a0 <pxPortInitialiseStack>
 8002376:	4602      	mov	r2, r0
 8002378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002386:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002388:	bf00      	nop
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af02      	add	r7, sp, #8
 8002396:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002398:	f001 f92c 	bl	80035f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800239c:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <prvAddNewTaskToReadyList+0x14c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3301      	adds	r3, #1
 80023a2:	4a4e      	ldr	r2, [pc, #312]	; (80024dc <prvAddNewTaskToReadyList+0x14c>)
 80023a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023a6:	4b4e      	ldr	r3, [pc, #312]	; (80024e0 <prvAddNewTaskToReadyList+0x150>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023ae:	4a4c      	ldr	r2, [pc, #304]	; (80024e0 <prvAddNewTaskToReadyList+0x150>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023b4:	4b49      	ldr	r3, [pc, #292]	; (80024dc <prvAddNewTaskToReadyList+0x14c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d110      	bne.n	80023de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023bc:	f000 fc9a 	bl	8002cf4 <prvInitialiseTaskLists>
 80023c0:	e00d      	b.n	80023de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023c2:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <prvAddNewTaskToReadyList+0x154>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023ca:	4b45      	ldr	r3, [pc, #276]	; (80024e0 <prvAddNewTaskToReadyList+0x150>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d802      	bhi.n	80023de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023d8:	4a41      	ldr	r2, [pc, #260]	; (80024e0 <prvAddNewTaskToReadyList+0x150>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023de:	4b42      	ldr	r3, [pc, #264]	; (80024e8 <prvAddNewTaskToReadyList+0x158>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	4a40      	ldr	r2, [pc, #256]	; (80024e8 <prvAddNewTaskToReadyList+0x158>)
 80023e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023e8:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <prvAddNewTaskToReadyList+0x158>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d016      	beq.n	8002424 <prvAddNewTaskToReadyList+0x94>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 fe31 	bl	8006060 <SEGGER_SYSVIEW_OnTaskCreate>
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	461d      	mov	r5, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	461c      	mov	r4, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	1ae3      	subs	r3, r4, r3
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	462b      	mov	r3, r5
 8002420:	f001 fc88 	bl	8003d34 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fe9e 	bl	8006168 <SEGGER_SYSVIEW_OnTaskStartReady>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	2201      	movs	r2, #1
 8002432:	409a      	lsls	r2, r3
 8002434:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <prvAddNewTaskToReadyList+0x15c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4313      	orrs	r3, r2
 800243a:	4a2c      	ldr	r2, [pc, #176]	; (80024ec <prvAddNewTaskToReadyList+0x15c>)
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002442:	492b      	ldr	r1, [pc, #172]	; (80024f0 <prvAddNewTaskToReadyList+0x160>)
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3304      	adds	r3, #4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	3204      	adds	r2, #4
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1d1a      	adds	r2, r3, #4
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <prvAddNewTaskToReadyList+0x160>)
 8002482:	441a      	add	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	615a      	str	r2, [r3, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248c:	4918      	ldr	r1, [pc, #96]	; (80024f0 <prvAddNewTaskToReadyList+0x160>)
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1c59      	adds	r1, r3, #1
 800249c:	4814      	ldr	r0, [pc, #80]	; (80024f0 <prvAddNewTaskToReadyList+0x160>)
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4403      	add	r3, r0
 80024a8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80024aa:	f001 f8d3 	bl	8003654 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <prvAddNewTaskToReadyList+0x154>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00e      	beq.n	80024d4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <prvAddNewTaskToReadyList+0x150>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d207      	bcs.n	80024d4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <prvAddNewTaskToReadyList+0x164>)
 80024c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bdb0      	pop	{r4, r5, r7, pc}
 80024dc:	20000178 	.word	0x20000178
 80024e0:	2000003c 	.word	0x2000003c
 80024e4:	20000184 	.word	0x20000184
 80024e8:	20000194 	.word	0x20000194
 80024ec:	20000180 	.word	0x20000180
 80024f0:	20000040 	.word	0x20000040
 80024f4:	e000ed04 	.word	0xe000ed04

080024f8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002500:	f001 f878 	bl	80035f4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <vTaskDelete+0x18>
 800250a:	4b48      	ldr	r3, [pc, #288]	; (800262c <vTaskDelete+0x134>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	e000      	b.n	8002512 <vTaskDelete+0x1a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3304      	adds	r3, #4
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fe3b 	bl	8002194 <uxListRemove>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d115      	bne.n	8002550 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002528:	4941      	ldr	r1, [pc, #260]	; (8002630 <vTaskDelete+0x138>)
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <vTaskDelete+0x58>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	2201      	movs	r2, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43da      	mvns	r2, r3
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <vTaskDelete+0x13c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4013      	ands	r3, r2
 800254c:	4a39      	ldr	r2, [pc, #228]	; (8002634 <vTaskDelete+0x13c>)
 800254e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3318      	adds	r3, #24
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fe19 	bl	8002194 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002562:	4b35      	ldr	r3, [pc, #212]	; (8002638 <vTaskDelete+0x140>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	4a33      	ldr	r2, [pc, #204]	; (8002638 <vTaskDelete+0x140>)
 800256a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800256c:	4b2f      	ldr	r3, [pc, #188]	; (800262c <vTaskDelete+0x134>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	429a      	cmp	r2, r3
 8002574:	d118      	bne.n	80025a8 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3304      	adds	r3, #4
 800257a:	4619      	mov	r1, r3
 800257c:	482f      	ldr	r0, [pc, #188]	; (800263c <vTaskDelete+0x144>)
 800257e:	f7ff fdac 	bl	80020da <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002582:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <vTaskDelete+0x148>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	4a2d      	ldr	r2, [pc, #180]	; (8002640 <vTaskDelete+0x148>)
 800258a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4618      	mov	r0, r3
 8002590:	f003 fe2c 	bl	80061ec <SEGGER_SYSVIEW_ShrinkId>
 8002594:	4603      	mov	r3, r0
 8002596:	4619      	mov	r1, r3
 8002598:	2022      	movs	r0, #34	; 0x22
 800259a:	f003 f8d9 	bl	8005750 <SEGGER_SYSVIEW_RecordU32>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 fc2f 	bl	8003e04 <SYSVIEW_DeleteTask>
 80025a6:	e013      	b.n	80025d0 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80025a8:	4b26      	ldr	r3, [pc, #152]	; (8002644 <vTaskDelete+0x14c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	4a25      	ldr	r2, [pc, #148]	; (8002644 <vTaskDelete+0x14c>)
 80025b0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 fe19 	bl	80061ec <SEGGER_SYSVIEW_ShrinkId>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4619      	mov	r1, r3
 80025be:	2022      	movs	r0, #34	; 0x22
 80025c0:	f003 f8c6 	bl	8005750 <SEGGER_SYSVIEW_RecordU32>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f001 fc1c 	bl	8003e04 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80025cc:	f000 fc10 	bl	8002df0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80025d0:	f001 f840 	bl	8003654 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <vTaskDelete+0x134>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d002      	beq.n	80025e4 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fbf6 	bl	8002dd0 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <vTaskDelete+0x150>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01b      	beq.n	8002624 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <vTaskDelete+0x134>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d116      	bne.n	8002624 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <vTaskDelete+0x154>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <vTaskDelete+0x11c>
        __asm volatile
 80025fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002602:	f383 8811 	msr	BASEPRI, r3
 8002606:	f3bf 8f6f 	isb	sy
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	60bb      	str	r3, [r7, #8]
    }
 8002610:	bf00      	nop
 8002612:	e7fe      	b.n	8002612 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <vTaskDelete+0x158>)
 8002616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	2000003c 	.word	0x2000003c
 8002630:	20000040 	.word	0x20000040
 8002634:	20000180 	.word	0x20000180
 8002638:	20000194 	.word	0x20000194
 800263c:	2000014c 	.word	0x2000014c
 8002640:	20000160 	.word	0x20000160
 8002644:	20000178 	.word	0x20000178
 8002648:	20000184 	.word	0x20000184
 800264c:	200001a0 	.word	0x200001a0
 8002650:	e000ed04 	.word	0xe000ed04

08002654 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01b      	beq.n	800269e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <vTaskDelay+0x68>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <vTaskDelay+0x30>
        __asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	60bb      	str	r3, [r7, #8]
    }
 8002680:	bf00      	nop
 8002682:	e7fe      	b.n	8002682 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002684:	f000 f87a 	bl	800277c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	2023      	movs	r0, #35	; 0x23
 800268c:	f003 f860 	bl	8005750 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002690:	2100      	movs	r1, #0
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fd84 	bl	80031a0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002698:	f000 f87e 	bl	8002798 <xTaskResumeAll>
 800269c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <vTaskDelay+0x6c>)
 80026a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200001a0 	.word	0x200001a0
 80026c0:	e000ed04 	.word	0xe000ed04

080026c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80026ca:	4b24      	ldr	r3, [pc, #144]	; (800275c <vTaskStartScheduler+0x98>)
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	2300      	movs	r3, #0
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2300      	movs	r3, #0
 80026d4:	2282      	movs	r2, #130	; 0x82
 80026d6:	4922      	ldr	r1, [pc, #136]	; (8002760 <vTaskStartScheduler+0x9c>)
 80026d8:	4822      	ldr	r0, [pc, #136]	; (8002764 <vTaskStartScheduler+0xa0>)
 80026da:	f7ff fd85 	bl	80021e8 <xTaskCreate>
 80026de:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d124      	bne.n	8002730 <vTaskStartScheduler+0x6c>
        __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	60bb      	str	r3, [r7, #8]
    }
 80026f8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80026fa:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <vTaskStartScheduler+0xa4>)
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002700:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <vTaskStartScheduler+0xa8>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <vTaskStartScheduler+0xac>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <vTaskStartScheduler+0xb0>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <vTaskStartScheduler+0x98>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d102      	bne.n	8002720 <vTaskStartScheduler+0x5c>
 800271a:	f003 fc85 	bl	8006028 <SEGGER_SYSVIEW_OnIdle>
 800271e:	e004      	b.n	800272a <vTaskStartScheduler+0x66>
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <vTaskStartScheduler+0xb0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f003 fcdd 	bl	80060e4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800272a:	f000 fe43 	bl	80033b4 <xPortStartScheduler>
 800272e:	e00e      	b.n	800274e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002736:	d10a      	bne.n	800274e <vTaskStartScheduler+0x8a>
        __asm volatile
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	607b      	str	r3, [r7, #4]
    }
 800274a:	bf00      	nop
 800274c:	e7fe      	b.n	800274c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <vTaskStartScheduler+0xb4>)
 8002750:	681b      	ldr	r3, [r3, #0]
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2000019c 	.word	0x2000019c
 8002760:	080066a0 	.word	0x080066a0
 8002764:	08002cc5 	.word	0x08002cc5
 8002768:	20000198 	.word	0x20000198
 800276c:	20000184 	.word	0x20000184
 8002770:	2000017c 	.word	0x2000017c
 8002774:	2000003c 	.word	0x2000003c
 8002778:	2000000c 	.word	0x2000000c

0800277c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <vTaskSuspendAll+0x18>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	4a03      	ldr	r2, [pc, #12]	; (8002794 <vTaskSuspendAll+0x18>)
 8002788:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	200001a0 	.word	0x200001a0

08002798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80027a6:	4b73      	ldr	r3, [pc, #460]	; (8002974 <xTaskResumeAll+0x1dc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10a      	bne.n	80027c4 <xTaskResumeAll+0x2c>
        __asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	607b      	str	r3, [r7, #4]
    }
 80027c0:	bf00      	nop
 80027c2:	e7fe      	b.n	80027c2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80027c4:	f000 ff16 	bl	80035f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80027c8:	4b6a      	ldr	r3, [pc, #424]	; (8002974 <xTaskResumeAll+0x1dc>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	4a69      	ldr	r2, [pc, #420]	; (8002974 <xTaskResumeAll+0x1dc>)
 80027d0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027d2:	4b68      	ldr	r3, [pc, #416]	; (8002974 <xTaskResumeAll+0x1dc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f040 80c4 	bne.w	8002964 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027dc:	4b66      	ldr	r3, [pc, #408]	; (8002978 <xTaskResumeAll+0x1e0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80bf 	beq.w	8002964 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027e6:	e08e      	b.n	8002906 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027e8:	4b64      	ldr	r3, [pc, #400]	; (800297c <xTaskResumeAll+0x1e4>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	6a12      	ldr	r2, [r2, #32]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	69d2      	ldr	r2, [r2, #28]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3318      	adds	r3, #24
 8002812:	429a      	cmp	r2, r3
 8002814:	d103      	bne.n	800281e <xTaskResumeAll+0x86>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2200      	movs	r2, #0
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	1e5a      	subs	r2, r3, #1
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	68d2      	ldr	r2, [r2, #12]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	6892      	ldr	r2, [r2, #8]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	3304      	adds	r3, #4
 8002850:	429a      	cmp	r2, r3
 8002852:	d103      	bne.n	800285c <xTaskResumeAll+0xc4>
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2200      	movs	r2, #0
 8002860:	615a      	str	r2, [r3, #20]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	1e5a      	subs	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4618      	mov	r0, r3
 8002870:	f003 fc7a 	bl	8006168 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	2201      	movs	r2, #1
 800287a:	409a      	lsls	r2, r3
 800287c:	4b40      	ldr	r3, [pc, #256]	; (8002980 <xTaskResumeAll+0x1e8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4313      	orrs	r3, r2
 8002882:	4a3f      	ldr	r2, [pc, #252]	; (8002980 <xTaskResumeAll+0x1e8>)
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288a:	493e      	ldr	r1, [pc, #248]	; (8002984 <xTaskResumeAll+0x1ec>)
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3304      	adds	r3, #4
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	3204      	adds	r2, #4
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	1d1a      	adds	r2, r3, #4
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4a2e      	ldr	r2, [pc, #184]	; (8002984 <xTaskResumeAll+0x1ec>)
 80028ca:	441a      	add	r2, r3
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	615a      	str	r2, [r3, #20]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	492b      	ldr	r1, [pc, #172]	; (8002984 <xTaskResumeAll+0x1ec>)
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1c59      	adds	r1, r3, #1
 80028e4:	4827      	ldr	r0, [pc, #156]	; (8002984 <xTaskResumeAll+0x1ec>)
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4403      	add	r3, r0
 80028f0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <xTaskResumeAll+0x1f0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d302      	bcc.n	8002906 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002900:	4b22      	ldr	r3, [pc, #136]	; (800298c <xTaskResumeAll+0x1f4>)
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <xTaskResumeAll+0x1e4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f47f af6c 	bne.w	80027e8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002916:	f000 fa6b 	bl	8002df0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <xTaskResumeAll+0x1f8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d010      	beq.n	8002948 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002926:	f000 f849 	bl	80029bc <xTaskIncrementTick>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <xTaskResumeAll+0x1f4>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3b01      	subs	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f1      	bne.n	8002926 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <xTaskResumeAll+0x1f8>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002948:	4b10      	ldr	r3, [pc, #64]	; (800298c <xTaskResumeAll+0x1f4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002950:	2301      	movs	r3, #1
 8002952:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <xTaskResumeAll+0x1fc>)
 8002956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002964:	f000 fe76 	bl	8003654 <vPortExitCritical>

    return xAlreadyYielded;
 8002968:	69bb      	ldr	r3, [r7, #24]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200001a0 	.word	0x200001a0
 8002978:	20000178 	.word	0x20000178
 800297c:	20000138 	.word	0x20000138
 8002980:	20000180 	.word	0x20000180
 8002984:	20000040 	.word	0x20000040
 8002988:	2000003c 	.word	0x2000003c
 800298c:	2000018c 	.word	0x2000018c
 8002990:	20000188 	.word	0x20000188
 8002994:	e000ed04 	.word	0xe000ed04

08002998 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800299e:	f000 ff15 	bl	80037cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <xTaskGetTickCountFromISR+0x20>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029ac:	683b      	ldr	r3, [r7, #0]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	2000017c 	.word	0x2000017c

080029bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029c6:	4b7f      	ldr	r3, [pc, #508]	; (8002bc4 <xTaskIncrementTick+0x208>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 80f0 	bne.w	8002bb0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029d0:	4b7d      	ldr	r3, [pc, #500]	; (8002bc8 <xTaskIncrementTick+0x20c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3301      	adds	r3, #1
 80029d6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80029d8:	4a7b      	ldr	r2, [pc, #492]	; (8002bc8 <xTaskIncrementTick+0x20c>)
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d120      	bne.n	8002a26 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80029e4:	4b79      	ldr	r3, [pc, #484]	; (8002bcc <xTaskIncrementTick+0x210>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <xTaskIncrementTick+0x48>
        __asm volatile
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	607b      	str	r3, [r7, #4]
    }
 8002a00:	bf00      	nop
 8002a02:	e7fe      	b.n	8002a02 <xTaskIncrementTick+0x46>
 8002a04:	4b71      	ldr	r3, [pc, #452]	; (8002bcc <xTaskIncrementTick+0x210>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	4b71      	ldr	r3, [pc, #452]	; (8002bd0 <xTaskIncrementTick+0x214>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6f      	ldr	r2, [pc, #444]	; (8002bcc <xTaskIncrementTick+0x210>)
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4a6f      	ldr	r2, [pc, #444]	; (8002bd0 <xTaskIncrementTick+0x214>)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b6e      	ldr	r3, [pc, #440]	; (8002bd4 <xTaskIncrementTick+0x218>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	4a6d      	ldr	r2, [pc, #436]	; (8002bd4 <xTaskIncrementTick+0x218>)
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	f000 f9e5 	bl	8002df0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a26:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <xTaskIncrementTick+0x21c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a3a      	ldr	r2, [r7, #32]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	f0c0 80aa 	bcc.w	8002b86 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a32:	4b66      	ldr	r3, [pc, #408]	; (8002bcc <xTaskIncrementTick+0x210>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d104      	bne.n	8002a46 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a3c:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <xTaskIncrementTick+0x21c>)
 8002a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a42:	601a      	str	r2, [r3, #0]
                    break;
 8002a44:	e09f      	b.n	8002b86 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a46:	4b61      	ldr	r3, [pc, #388]	; (8002bcc <xTaskIncrementTick+0x210>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002a56:	6a3a      	ldr	r2, [r7, #32]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d203      	bcs.n	8002a66 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a5e:	4a5e      	ldr	r2, [pc, #376]	; (8002bd8 <xTaskIncrementTick+0x21c>)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002a64:	e08f      	b.n	8002b86 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	68d2      	ldr	r2, [r2, #12]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	6892      	ldr	r2, [r2, #8]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	3304      	adds	r3, #4
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d103      	bne.n	8002a94 <xTaskIncrementTick+0xd8>
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2200      	movs	r2, #0
 8002a98:	615a      	str	r2, [r3, #20]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	1e5a      	subs	r2, r3, #1
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01e      	beq.n	8002aea <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	6a12      	ldr	r2, [r2, #32]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	69d2      	ldr	r2, [r2, #28]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	3318      	adds	r3, #24
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d103      	bne.n	8002ada <xTaskIncrementTick+0x11e>
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	6a1a      	ldr	r2, [r3, #32]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2200      	movs	r2, #0
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 fb3b 	bl	8006168 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	2201      	movs	r2, #1
 8002af8:	409a      	lsls	r2, r3
 8002afa:	4b38      	ldr	r3, [pc, #224]	; (8002bdc <xTaskIncrementTick+0x220>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	4a36      	ldr	r2, [pc, #216]	; (8002bdc <xTaskIncrementTick+0x220>)
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	4935      	ldr	r1, [pc, #212]	; (8002be0 <xTaskIncrementTick+0x224>)
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	3304      	adds	r3, #4
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	60da      	str	r2, [r3, #12]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	3204      	adds	r2, #4
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	1d1a      	adds	r2, r3, #4
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4a26      	ldr	r2, [pc, #152]	; (8002be0 <xTaskIncrementTick+0x224>)
 8002b48:	441a      	add	r2, r3
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	615a      	str	r2, [r3, #20]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b52:	4923      	ldr	r1, [pc, #140]	; (8002be0 <xTaskIncrementTick+0x224>)
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	1c59      	adds	r1, r3, #1
 8002b62:	481f      	ldr	r0, [pc, #124]	; (8002be0 <xTaskIncrementTick+0x224>)
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4403      	add	r3, r0
 8002b6e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <xTaskIncrementTick+0x228>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	f67f af59 	bls.w	8002a32 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002b80:	2301      	movs	r3, #1
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b84:	e755      	b.n	8002a32 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b86:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <xTaskIncrementTick+0x228>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8c:	4914      	ldr	r1, [pc, #80]	; (8002be0 <xTaskIncrementTick+0x224>)
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d901      	bls.n	8002ba2 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <xTaskIncrementTick+0x22c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	e004      	b.n	8002bba <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002bb0:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <xTaskIncrementTick+0x230>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <xTaskIncrementTick+0x230>)
 8002bb8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3728      	adds	r7, #40	; 0x28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	200001a0 	.word	0x200001a0
 8002bc8:	2000017c 	.word	0x2000017c
 8002bcc:	20000130 	.word	0x20000130
 8002bd0:	20000134 	.word	0x20000134
 8002bd4:	20000190 	.word	0x20000190
 8002bd8:	20000198 	.word	0x20000198
 8002bdc:	20000180 	.word	0x20000180
 8002be0:	20000040 	.word	0x20000040
 8002be4:	2000003c 	.word	0x2000003c
 8002be8:	2000018c 	.word	0x2000018c
 8002bec:	20000188 	.word	0x20000188

08002bf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002bf6:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <vTaskSwitchContext+0xbc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <vTaskSwitchContext+0xc0>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002c04:	e04d      	b.n	8002ca2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002c06:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <vTaskSwitchContext+0xc0>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c0c:	4b29      	ldr	r3, [pc, #164]	; (8002cb4 <vTaskSwitchContext+0xc4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002c1a:	7afb      	ldrb	r3, [r7, #11]
 8002c1c:	f1c3 031f 	rsb	r3, r3, #31
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	4925      	ldr	r1, [pc, #148]	; (8002cb8 <vTaskSwitchContext+0xc8>)
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	607b      	str	r3, [r7, #4]
    }
 8002c48:	bf00      	nop
 8002c4a:	e7fe      	b.n	8002c4a <vTaskSwitchContext+0x5a>
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <vTaskSwitchContext+0xc8>)
 8002c58:	4413      	add	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d104      	bne.n	8002c7c <vTaskSwitchContext+0x8c>
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	4a0e      	ldr	r2, [pc, #56]	; (8002cbc <vTaskSwitchContext+0xcc>)
 8002c84:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <vTaskSwitchContext+0xcc>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <vTaskSwitchContext+0xd0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d102      	bne.n	8002c98 <vTaskSwitchContext+0xa8>
 8002c92:	f003 f9c9 	bl	8006028 <SEGGER_SYSVIEW_OnIdle>
}
 8002c96:	e004      	b.n	8002ca2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <vTaskSwitchContext+0xcc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 fa21 	bl	80060e4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002ca2:	bf00      	nop
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200001a0 	.word	0x200001a0
 8002cb0:	2000018c 	.word	0x2000018c
 8002cb4:	20000180 	.word	0x20000180
 8002cb8:	20000040 	.word	0x20000040
 8002cbc:	2000003c 	.word	0x2000003c
 8002cc0:	2000019c 	.word	0x2000019c

08002cc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ccc:	f000 f852 	bl	8002d74 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <prvIdleTask+0x28>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d9f9      	bls.n	8002ccc <prvIdleTask+0x8>
            {
                taskYIELD();
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <prvIdleTask+0x2c>)
 8002cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ce8:	e7f0      	b.n	8002ccc <prvIdleTask+0x8>
 8002cea:	bf00      	nop
 8002cec:	20000040 	.word	0x20000040
 8002cf0:	e000ed04 	.word	0xe000ed04

08002cf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	e00c      	b.n	8002d1a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <prvInitialiseTaskLists+0x60>)
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff f9b6 	bl	8002080 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3301      	adds	r3, #1
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b09      	cmp	r3, #9
 8002d1e:	d9ef      	bls.n	8002d00 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d20:	480d      	ldr	r0, [pc, #52]	; (8002d58 <prvInitialiseTaskLists+0x64>)
 8002d22:	f7ff f9ad 	bl	8002080 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d26:	480d      	ldr	r0, [pc, #52]	; (8002d5c <prvInitialiseTaskLists+0x68>)
 8002d28:	f7ff f9aa 	bl	8002080 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d2c:	480c      	ldr	r0, [pc, #48]	; (8002d60 <prvInitialiseTaskLists+0x6c>)
 8002d2e:	f7ff f9a7 	bl	8002080 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002d32:	480c      	ldr	r0, [pc, #48]	; (8002d64 <prvInitialiseTaskLists+0x70>)
 8002d34:	f7ff f9a4 	bl	8002080 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002d38:	480b      	ldr	r0, [pc, #44]	; (8002d68 <prvInitialiseTaskLists+0x74>)
 8002d3a:	f7ff f9a1 	bl	8002080 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <prvInitialiseTaskLists+0x78>)
 8002d40:	4a05      	ldr	r2, [pc, #20]	; (8002d58 <prvInitialiseTaskLists+0x64>)
 8002d42:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <prvInitialiseTaskLists+0x7c>)
 8002d46:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <prvInitialiseTaskLists+0x68>)
 8002d48:	601a      	str	r2, [r3, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000040 	.word	0x20000040
 8002d58:	20000108 	.word	0x20000108
 8002d5c:	2000011c 	.word	0x2000011c
 8002d60:	20000138 	.word	0x20000138
 8002d64:	2000014c 	.word	0x2000014c
 8002d68:	20000164 	.word	0x20000164
 8002d6c:	20000130 	.word	0x20000130
 8002d70:	20000134 	.word	0x20000134

08002d74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d7a:	e019      	b.n	8002db0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002d7c:	f000 fc3a 	bl	80035f4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d80:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <prvCheckTasksWaitingTermination+0x50>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fa01 	bl	8002194 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002d92:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <prvCheckTasksWaitingTermination+0x54>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <prvCheckTasksWaitingTermination+0x54>)
 8002d9a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <prvCheckTasksWaitingTermination+0x58>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <prvCheckTasksWaitingTermination+0x58>)
 8002da4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002da6:	f000 fc55 	bl	8003654 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f810 	bl	8002dd0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <prvCheckTasksWaitingTermination+0x58>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e1      	bne.n	8002d7c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2000014c 	.word	0x2000014c
 8002dc8:	20000178 	.word	0x20000178
 8002dcc:	20000160 	.word	0x20000160

08002dd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fdef 	bl	80039c0 <vPortFree>
            vPortFree( pxTCB );
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fdec 	bl	80039c0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <prvResetNextTaskUnblockTime+0x30>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d104      	bne.n	8002e08 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <prvResetNextTaskUnblockTime+0x34>)
 8002e00:	f04f 32ff 	mov.w	r2, #4294967295
 8002e04:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002e06:	e005      	b.n	8002e14 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <prvResetNextTaskUnblockTime+0x30>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <prvResetNextTaskUnblockTime+0x34>)
 8002e12:	6013      	str	r3, [r2, #0]
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000130 	.word	0x20000130
 8002e24:	20000198 	.word	0x20000198

08002e28 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	613b      	str	r3, [r7, #16]
    }
 8002e4e:	bf00      	nop
 8002e50:	e7fe      	b.n	8002e50 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002e52:	f000 fbcf 	bl	80035f4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <xTaskGenericNotifyWait+0x108>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3354      	adds	r3, #84	; 0x54
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d022      	beq.n	8002eae <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <xTaskGenericNotifyWait+0x108>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	3214      	adds	r2, #20
 8002e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	43d2      	mvns	r2, r2
 8002e78:	4011      	ands	r1, r2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	3214      	adds	r2, #20
 8002e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002e82:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <xTaskGenericNotifyWait+0x108>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4413      	add	r3, r2
 8002e8a:	3354      	adds	r3, #84	; 0x54
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e96:	2101      	movs	r1, #1
 8002e98:	6a38      	ldr	r0, [r7, #32]
 8002e9a:	f000 f981 	bl	80031a0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002e9e:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <xTaskGenericNotifyWait+0x10c>)
 8002ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002eae:	f000 fbd1 	bl	8003654 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002eb2:	f000 fb9f 	bl	80035f4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	2040      	movs	r0, #64	; 0x40
 8002ec4:	f002 fcda 	bl	800587c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002ece:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <xTaskGenericNotifyWait+0x108>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	3214      	adds	r2, #20
 8002ed6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <xTaskGenericNotifyWait+0x108>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3354      	adds	r3, #84	; 0x54
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d002      	beq.n	8002ef6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	e00e      	b.n	8002f14 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <xTaskGenericNotifyWait+0x108>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	3214      	adds	r2, #20
 8002efe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	43d2      	mvns	r2, r2
 8002f06:	4011      	ands	r1, r2
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	3214      	adds	r2, #20
 8002f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <xTaskGenericNotifyWait+0x108>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3354      	adds	r3, #84	; 0x54
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002f22:	f000 fb97 	bl	8003654 <vPortExitCritical>

        return xReturn;
 8002f26:	697b      	ldr	r3, [r7, #20]
    }
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	2000003c 	.word	0x2000003c
 8002f34:	e000ed04 	.word	0xe000ed04

08002f38 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b090      	sub	sp, #64	; 0x40
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002f46:	2301      	movs	r3, #1
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <xTaskGenericNotify+0x2e>
        __asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	623b      	str	r3, [r7, #32]
    }
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10a      	bne.n	8002f82 <xTaskGenericNotify+0x4a>
        __asm volatile
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	61fb      	str	r3, [r7, #28]
    }
 8002f7e:	bf00      	nop
 8002f80:	e7fe      	b.n	8002f80 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8002f86:	f000 fb35 	bl	80035f4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d006      	beq.n	8002f9e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	3214      	adds	r2, #20
 8002f96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3354      	adds	r3, #84	; 0x54
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3354      	adds	r3, #84	; 0x54
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d83b      	bhi.n	8003036 <xTaskGenericNotify+0xfe>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <xTaskGenericNotify+0x8c>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08003055 	.word	0x08003055
 8002fc8:	08002fd9 	.word	0x08002fd9
 8002fcc:	08002ff5 	.word	0x08002ff5
 8002fd0:	0800300d 	.word	0x0800300d
 8002fd4:	0800301b 	.word	0x0800301b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	3214      	adds	r2, #20
 8002fde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	ea42 0103 	orr.w	r1, r2, r3
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	3214      	adds	r2, #20
 8002fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002ff2:	e032      	b.n	800305a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	3214      	adds	r2, #20
 8002ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffe:	1c59      	adds	r1, r3, #1
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	3214      	adds	r2, #20
 8003006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800300a:	e026      	b.n	800305a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	3214      	adds	r2, #20
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003018:	e01f      	b.n	800305a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800301a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800301e:	2b02      	cmp	r3, #2
 8003020:	d006      	beq.n	8003030 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	3214      	adds	r2, #20
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800302e:	e014      	b.n	800305a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003030:	2300      	movs	r3, #0
 8003032:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003034:	e011      	b.n	800305a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003036:	4b55      	ldr	r3, [pc, #340]	; (800318c <xTaskGenericNotify+0x254>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00c      	beq.n	8003058 <xTaskGenericNotify+0x120>
        __asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	61bb      	str	r3, [r7, #24]
    }
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <xTaskGenericNotify+0x11a>
                    break;
 8003054:	bf00      	nop
 8003056:	e000      	b.n	800305a <xTaskGenericNotify+0x122>

                    break;
 8003058:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	4618      	mov	r0, r3
 800305e:	f003 f8c5 	bl	80061ec <SEGGER_SYSVIEW_ShrinkId>
 8003062:	4601      	mov	r1, r0
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	203e      	movs	r0, #62	; 0x3e
 8003070:	f002 fc04 	bl	800587c <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003078:	2b01      	cmp	r3, #1
 800307a:	d17f      	bne.n	800317c <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003088:	68d2      	ldr	r2, [r2, #12]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003092:	6892      	ldr	r2, [r2, #8]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	3304      	adds	r3, #4
 800309e:	429a      	cmp	r2, r3
 80030a0:	d103      	bne.n	80030aa <xTaskGenericNotify+0x172>
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	2200      	movs	r2, #0
 80030ae:	615a      	str	r2, [r3, #20]
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	1e5a      	subs	r2, r3, #1
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	4618      	mov	r0, r3
 80030be:	f003 f853 	bl	8006168 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	2201      	movs	r2, #1
 80030c8:	409a      	lsls	r2, r3
 80030ca:	4b31      	ldr	r3, [pc, #196]	; (8003190 <xTaskGenericNotify+0x258>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	4a2f      	ldr	r2, [pc, #188]	; (8003190 <xTaskGenericNotify+0x258>)
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	492e      	ldr	r1, [pc, #184]	; (8003194 <xTaskGenericNotify+0x25c>)
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3304      	adds	r3, #4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030fe:	3204      	adds	r2, #4
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	1d1a      	adds	r2, r3, #4
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <xTaskGenericNotify+0x25c>)
 8003118:	441a      	add	r2, r3
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	615a      	str	r2, [r3, #20]
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003122:	491c      	ldr	r1, [pc, #112]	; (8003194 <xTaskGenericNotify+0x25c>)
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	1c59      	adds	r1, r3, #1
 8003132:	4818      	ldr	r0, [pc, #96]	; (8003194 <xTaskGenericNotify+0x25c>)
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4403      	add	r3, r0
 800313e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <xTaskGenericNotify+0x226>
        __asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	617b      	str	r3, [r7, #20]
    }
 800315a:	bf00      	nop
 800315c:	e7fe      	b.n	800315c <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <xTaskGenericNotify+0x260>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d907      	bls.n	800317c <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <xTaskGenericNotify+0x264>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800317c:	f000 fa6a 	bl	8003654 <vPortExitCritical>

        return xReturn;
 8003180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003182:	4618      	mov	r0, r3
 8003184:	3738      	adds	r7, #56	; 0x38
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2000017c 	.word	0x2000017c
 8003190:	20000180 	.word	0x20000180
 8003194:	20000040 	.word	0x20000040
 8003198:	2000003c 	.word	0x2000003c
 800319c:	e000ed04 	.word	0xe000ed04

080031a0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80031aa:	4b36      	ldr	r3, [pc, #216]	; (8003284 <prvAddCurrentTaskToDelayedList+0xe4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031b0:	4b35      	ldr	r3, [pc, #212]	; (8003288 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe ffec 	bl	8002194 <uxListRemove>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	2201      	movs	r2, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43da      	mvns	r2, r3
 80031d0:	4b2e      	ldr	r3, [pc, #184]	; (800328c <prvAddCurrentTaskToDelayedList+0xec>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4013      	ands	r3, r2
 80031d6:	4a2d      	ldr	r2, [pc, #180]	; (800328c <prvAddCurrentTaskToDelayedList+0xec>)
 80031d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d124      	bne.n	800322c <prvAddCurrentTaskToDelayedList+0x8c>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d021      	beq.n	800322c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031e8:	4b29      	ldr	r3, [pc, #164]	; (8003290 <prvAddCurrentTaskToDelayedList+0xf0>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	4b26      	ldr	r3, [pc, #152]	; (8003288 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	4b24      	ldr	r3, [pc, #144]	; (8003288 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	6892      	ldr	r2, [r2, #8]
 80031fe:	60da      	str	r2, [r3, #12]
 8003200:	4b21      	ldr	r3, [pc, #132]	; (8003288 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	3204      	adds	r2, #4
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <prvAddCurrentTaskToDelayedList+0xe8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	1d1a      	adds	r2, r3, #4
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <prvAddCurrentTaskToDelayedList+0xf0>)
 800321c:	615a      	str	r2, [r3, #20]
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3301      	adds	r3, #1
 8003224:	4a1a      	ldr	r2, [pc, #104]	; (8003290 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800322a:	e026      	b.n	800327a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003234:	4b14      	ldr	r3, [pc, #80]	; (8003288 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	429a      	cmp	r2, r3
 8003242:	d209      	bcs.n	8003258 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <prvAddCurrentTaskToDelayedList+0xe8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7fe ff66 	bl	8002122 <vListInsert>
}
 8003256:	e010      	b.n	800327a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <prvAddCurrentTaskToDelayedList+0xf8>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <prvAddCurrentTaskToDelayedList+0xe8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3304      	adds	r3, #4
 8003262:	4619      	mov	r1, r3
 8003264:	4610      	mov	r0, r2
 8003266:	f7fe ff5c 	bl	8002122 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <prvAddCurrentTaskToDelayedList+0xfc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d202      	bcs.n	800327a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003274:	4a09      	ldr	r2, [pc, #36]	; (800329c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6013      	str	r3, [r2, #0]
}
 800327a:	bf00      	nop
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	2000017c 	.word	0x2000017c
 8003288:	2000003c 	.word	0x2000003c
 800328c:	20000180 	.word	0x20000180
 8003290:	20000164 	.word	0x20000164
 8003294:	20000134 	.word	0x20000134
 8003298:	20000130 	.word	0x20000130
 800329c:	20000198 	.word	0x20000198

080032a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3b04      	subs	r3, #4
 80032b0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3b04      	subs	r3, #4
 80032be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f023 0201 	bic.w	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3b04      	subs	r3, #4
 80032ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80032d0:	4a0c      	ldr	r2, [pc, #48]	; (8003304 <pxPortInitialiseStack+0x64>)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3b14      	subs	r3, #20
 80032da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3b04      	subs	r3, #4
 80032e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f06f 0202 	mvn.w	r2, #2
 80032ee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3b20      	subs	r3, #32
 80032f4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80032f6:	68fb      	ldr	r3, [r7, #12]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	08003309 	.word	0x08003309

08003308 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003312:	4b12      	ldr	r3, [pc, #72]	; (800335c <prvTaskExitError+0x54>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331a:	d00a      	beq.n	8003332 <prvTaskExitError+0x2a>
        __asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	60fb      	str	r3, [r7, #12]
    }
 800332e:	bf00      	nop
 8003330:	e7fe      	b.n	8003330 <prvTaskExitError+0x28>
        __asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	60bb      	str	r3, [r7, #8]
    }
 8003344:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003346:	bf00      	nop
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0fc      	beq.n	8003348 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800334e:	bf00      	nop
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	20000010 	.word	0x20000010

08003360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <pxCurrentTCBConst2>)
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	6808      	ldr	r0, [r1, #0]
 8003366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336a:	f380 8809 	msr	PSP, r0
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f04f 0000 	mov.w	r0, #0
 8003376:	f380 8811 	msr	BASEPRI, r0
 800337a:	4770      	bx	lr
 800337c:	f3af 8000 	nop.w

08003380 <pxCurrentTCBConst2>:
 8003380:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop

08003388 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003388:	4808      	ldr	r0, [pc, #32]	; (80033ac <prvPortStartFirstTask+0x24>)
 800338a:	6800      	ldr	r0, [r0, #0]
 800338c:	6800      	ldr	r0, [r0, #0]
 800338e:	f380 8808 	msr	MSP, r0
 8003392:	f04f 0000 	mov.w	r0, #0
 8003396:	f380 8814 	msr	CONTROL, r0
 800339a:	b662      	cpsie	i
 800339c:	b661      	cpsie	f
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	df00      	svc	0
 80033a8:	bf00      	nop
 80033aa:	0000      	.short	0x0000
 80033ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop

080033b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80033ba:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <xPortStartScheduler+0x120>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a46      	ldr	r2, [pc, #280]	; (80034d8 <xPortStartScheduler+0x124>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10a      	bne.n	80033da <xPortStartScheduler+0x26>
        __asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	613b      	str	r3, [r7, #16]
    }
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <xPortStartScheduler+0x120>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a3f      	ldr	r2, [pc, #252]	; (80034dc <xPortStartScheduler+0x128>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d10a      	bne.n	80033fa <xPortStartScheduler+0x46>
        __asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	60fb      	str	r3, [r7, #12]
    }
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033fa:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <xPortStartScheduler+0x12c>)
 80033fc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	22ff      	movs	r2, #255	; 0xff
 800340a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <xPortStartScheduler+0x130>)
 8003420:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003422:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <xPortStartScheduler+0x134>)
 8003424:	2207      	movs	r2, #7
 8003426:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003428:	e009      	b.n	800343e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800342a:	4b2f      	ldr	r3, [pc, #188]	; (80034e8 <xPortStartScheduler+0x134>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3b01      	subs	r3, #1
 8003430:	4a2d      	ldr	r2, [pc, #180]	; (80034e8 <xPortStartScheduler+0x134>)
 8003432:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b80      	cmp	r3, #128	; 0x80
 8003448:	d0ef      	beq.n	800342a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800344a:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <xPortStartScheduler+0x134>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	2b04      	cmp	r3, #4
 8003454:	d00a      	beq.n	800346c <xPortStartScheduler+0xb8>
        __asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	60bb      	str	r3, [r7, #8]
    }
 8003468:	bf00      	nop
 800346a:	e7fe      	b.n	800346a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800346c:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <xPortStartScheduler+0x134>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <xPortStartScheduler+0x134>)
 8003474:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <xPortStartScheduler+0x134>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <xPortStartScheduler+0x134>)
 8003480:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <xPortStartScheduler+0x138>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a17      	ldr	r2, [pc, #92]	; (80034ec <xPortStartScheduler+0x138>)
 8003490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003494:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <xPortStartScheduler+0x138>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a14      	ldr	r2, [pc, #80]	; (80034ec <xPortStartScheduler+0x138>)
 800349c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80034a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80034a2:	f000 f963 	bl	800376c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <xPortStartScheduler+0x13c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80034ac:	f000 f982 	bl	80037b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80034b0:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <xPortStartScheduler+0x140>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0f      	ldr	r2, [pc, #60]	; (80034f4 <xPortStartScheduler+0x140>)
 80034b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80034ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80034bc:	f7ff ff64 	bl	8003388 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80034c0:	f7ff fb96 	bl	8002bf0 <vTaskSwitchContext>
    prvTaskExitError();
 80034c4:	f7ff ff20 	bl	8003308 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	e000ed00 	.word	0xe000ed00
 80034d8:	410fc271 	.word	0x410fc271
 80034dc:	410fc270 	.word	0x410fc270
 80034e0:	e000e400 	.word	0xe000e400
 80034e4:	200001a4 	.word	0x200001a4
 80034e8:	200001a8 	.word	0x200001a8
 80034ec:	e000ed20 	.word	0xe000ed20
 80034f0:	20000010 	.word	0x20000010
 80034f4:	e000ef34 	.word	0xe000ef34

080034f8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80034fe:	4b37      	ldr	r3, [pc, #220]	; (80035dc <vInitPrioGroupValue+0xe4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a37      	ldr	r2, [pc, #220]	; (80035e0 <vInitPrioGroupValue+0xe8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d10a      	bne.n	800351e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	613b      	str	r3, [r7, #16]
    }
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800351e:	4b2f      	ldr	r3, [pc, #188]	; (80035dc <vInitPrioGroupValue+0xe4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <vInitPrioGroupValue+0xec>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d10a      	bne.n	800353e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	60fb      	str	r3, [r7, #12]
    }
 800353a:	bf00      	nop
 800353c:	e7fe      	b.n	800353c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800353e:	4b2a      	ldr	r3, [pc, #168]	; (80035e8 <vInitPrioGroupValue+0xf0>)
 8003540:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	22ff      	movs	r2, #255	; 0xff
 800354e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <vInitPrioGroupValue+0xf4>)
 8003564:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <vInitPrioGroupValue+0xf8>)
 8003568:	2207      	movs	r2, #7
 800356a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800356c:	e009      	b.n	8003582 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <vInitPrioGroupValue+0xf8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3b01      	subs	r3, #1
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <vInitPrioGroupValue+0xf8>)
 8003576:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	b2db      	uxtb	r3, r3
 8003580:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b80      	cmp	r3, #128	; 0x80
 800358c:	d0ef      	beq.n	800356e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800358e:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <vInitPrioGroupValue+0xf8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f1c3 0307 	rsb	r3, r3, #7
 8003596:	2b04      	cmp	r3, #4
 8003598:	d00a      	beq.n	80035b0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800359a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359e:	f383 8811 	msr	BASEPRI, r3
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	60bb      	str	r3, [r7, #8]
    }
 80035ac:	bf00      	nop
 80035ae:	e7fe      	b.n	80035ae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <vInitPrioGroupValue+0xf8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <vInitPrioGroupValue+0xf8>)
 80035b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <vInitPrioGroupValue+0xf8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035c2:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <vInitPrioGroupValue+0xf8>)
 80035c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000ed00 	.word	0xe000ed00
 80035e0:	410fc271 	.word	0x410fc271
 80035e4:	410fc270 	.word	0x410fc270
 80035e8:	e000e400 	.word	0xe000e400
 80035ec:	200001a4 	.word	0x200001a4
 80035f0:	200001a8 	.word	0x200001a8

080035f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
        __asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	607b      	str	r3, [r7, #4]
    }
 800360c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800360e:	4b0f      	ldr	r3, [pc, #60]	; (800364c <vPortEnterCritical+0x58>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3301      	adds	r3, #1
 8003614:	4a0d      	ldr	r2, [pc, #52]	; (800364c <vPortEnterCritical+0x58>)
 8003616:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003618:	4b0c      	ldr	r3, [pc, #48]	; (800364c <vPortEnterCritical+0x58>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d10f      	bne.n	8003640 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <vPortEnterCritical+0x5c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <vPortEnterCritical+0x4c>
        __asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	603b      	str	r3, [r7, #0]
    }
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <vPortEnterCritical+0x4a>
    }
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20000010 	.word	0x20000010
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <vPortExitCritical+0x50>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <vPortExitCritical+0x24>
        __asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	607b      	str	r3, [r7, #4]
    }
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <vPortExitCritical+0x50>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3b01      	subs	r3, #1
 800367e:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <vPortExitCritical+0x50>)
 8003680:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003682:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <vPortExitCritical+0x50>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d105      	bne.n	8003696 <vPortExitCritical+0x42>
 800368a:	2300      	movs	r3, #0
 800368c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003694:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000010 	.word	0x20000010
	...

080036b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80036b0:	f3ef 8009 	mrs	r0, PSP
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	4b15      	ldr	r3, [pc, #84]	; (8003710 <pxCurrentTCBConst>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	f01e 0f10 	tst.w	lr, #16
 80036c0:	bf08      	it	eq
 80036c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ca:	6010      	str	r0, [r2, #0]
 80036cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80036d4:	f380 8811 	msr	BASEPRI, r0
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f7ff fa86 	bl	8002bf0 <vTaskSwitchContext>
 80036e4:	f04f 0000 	mov.w	r0, #0
 80036e8:	f380 8811 	msr	BASEPRI, r0
 80036ec:	bc09      	pop	{r0, r3}
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	6808      	ldr	r0, [r1, #0]
 80036f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f6:	f01e 0f10 	tst.w	lr, #16
 80036fa:	bf08      	it	eq
 80036fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003700:	f380 8809 	msr	PSP, r0
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	f3af 8000 	nop.w

08003710 <pxCurrentTCBConst>:
 8003710:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop

08003718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
        __asm volatile
 800371e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	607b      	str	r3, [r7, #4]
    }
 8003730:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003732:	f002 fbff 	bl	8005f34 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003736:	f7ff f941 	bl	80029bc <xTaskIncrementTick>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003740:	f002 fc56 	bl	8005ff0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <SysTick_Handler+0x50>)
 8003746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e001      	b.n	8003752 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800374e:	f002 fc33 	bl	8005fb8 <SEGGER_SYSVIEW_RecordExitISR>
 8003752:	2300      	movs	r3, #0
 8003754:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	f383 8811 	msr	BASEPRI, r3
    }
 800375c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <vPortSetupTimerInterrupt+0x34>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <vPortSetupTimerInterrupt+0x38>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <vPortSetupTimerInterrupt+0x3c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <vPortSetupTimerInterrupt+0x40>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	099b      	lsrs	r3, r3, #6
 8003788:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <vPortSetupTimerInterrupt+0x44>)
 800378a:	3b01      	subs	r3, #1
 800378c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800378e:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <vPortSetupTimerInterrupt+0x34>)
 8003790:	2207      	movs	r2, #7
 8003792:	601a      	str	r2, [r3, #0]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000e010 	.word	0xe000e010
 80037a4:	e000e018 	.word	0xe000e018
 80037a8:	20000000 	.word	0x20000000
 80037ac:	10624dd3 	.word	0x10624dd3
 80037b0:	e000e014 	.word	0xe000e014

080037b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80037b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80037c4 <vPortEnableVFP+0x10>
 80037b8:	6801      	ldr	r1, [r0, #0]
 80037ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037be:	6001      	str	r1, [r0, #0]
 80037c0:	4770      	bx	lr
 80037c2:	0000      	.short	0x0000
 80037c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop

080037cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80037d2:	f3ef 8305 	mrs	r3, IPSR
 80037d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b0f      	cmp	r3, #15
 80037dc:	d914      	bls.n	8003808 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80037de:	4a17      	ldr	r2, [pc, #92]	; (800383c <vPortValidateInterruptPriority+0x70>)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80037e8:	4b15      	ldr	r3, [pc, #84]	; (8003840 <vPortValidateInterruptPriority+0x74>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	7afa      	ldrb	r2, [r7, #11]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d20a      	bcs.n	8003808 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	607b      	str	r3, [r7, #4]
    }
 8003804:	bf00      	nop
 8003806:	e7fe      	b.n	8003806 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003808:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <vPortValidateInterruptPriority+0x78>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003810:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <vPortValidateInterruptPriority+0x7c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d90a      	bls.n	800382e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	603b      	str	r3, [r7, #0]
    }
 800382a:	bf00      	nop
 800382c:	e7fe      	b.n	800382c <vPortValidateInterruptPriority+0x60>
    }
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	e000e3f0 	.word	0xe000e3f0
 8003840:	200001a4 	.word	0x200001a4
 8003844:	e000ed0c 	.word	0xe000ed0c
 8003848:	200001a8 	.word	0x200001a8

0800384c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003858:	f7fe ff90 	bl	800277c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800385c:	4b53      	ldr	r3, [pc, #332]	; (80039ac <pvPortMalloc+0x160>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003864:	f000 f908 	bl	8003a78 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d012      	beq.n	8003894 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800386e:	2208      	movs	r2, #8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	3308      	adds	r3, #8
 800387a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	43db      	mvns	r3, r3
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	d804      	bhi.n	8003890 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	4413      	add	r3, r2
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	e001      	b.n	8003894 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	db70      	blt.n	800397c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d06d      	beq.n	800397c <pvPortMalloc+0x130>
 80038a0:	4b43      	ldr	r3, [pc, #268]	; (80039b0 <pvPortMalloc+0x164>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d868      	bhi.n	800397c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80038aa:	4b42      	ldr	r3, [pc, #264]	; (80039b4 <pvPortMalloc+0x168>)
 80038ac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80038ae:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <pvPortMalloc+0x168>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038b4:	e004      	b.n	80038c0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d903      	bls.n	80038d2 <pvPortMalloc+0x86>
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f1      	bne.n	80038b6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80038d2:	4b36      	ldr	r3, [pc, #216]	; (80039ac <pvPortMalloc+0x160>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d8:	429a      	cmp	r2, r3
 80038da:	d04f      	beq.n	800397c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2208      	movs	r2, #8
 80038e2:	4413      	add	r3, r2
 80038e4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	1ad2      	subs	r2, r2, r3
 80038f6:	2308      	movs	r3, #8
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d91f      	bls.n	800393e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4413      	add	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <pvPortMalloc+0xda>
        __asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	613b      	str	r3, [r7, #16]
    }
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	1ad2      	subs	r2, r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003938:	6978      	ldr	r0, [r7, #20]
 800393a:	f000 f8f9 	bl	8003b30 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800393e:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <pvPortMalloc+0x164>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <pvPortMalloc+0x164>)
 800394a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800394c:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <pvPortMalloc+0x164>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b19      	ldr	r3, [pc, #100]	; (80039b8 <pvPortMalloc+0x16c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d203      	bcs.n	8003960 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <pvPortMalloc+0x164>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <pvPortMalloc+0x16c>)
 800395e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <pvPortMalloc+0x170>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3301      	adds	r3, #1
 8003978:	4a10      	ldr	r2, [pc, #64]	; (80039bc <pvPortMalloc+0x170>)
 800397a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800397c:	f7fe ff0c 	bl	8002798 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <pvPortMalloc+0x154>
        __asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	60fb      	str	r3, [r7, #12]
    }
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <pvPortMalloc+0x152>
    return pvReturn;
 80039a0:	69fb      	ldr	r3, [r7, #28]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3728      	adds	r7, #40	; 0x28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20012db4 	.word	0x20012db4
 80039b0:	20012db8 	.word	0x20012db8
 80039b4:	20012dac 	.word	0x20012dac
 80039b8:	20012dbc 	.word	0x20012dbc
 80039bc:	20012dc0 	.word	0x20012dc0

080039c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d049      	beq.n	8003a66 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80039d2:	2308      	movs	r3, #8
 80039d4:	425b      	negs	r3, r3
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4413      	add	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	db0a      	blt.n	80039fe <vPortFree+0x3e>
        __asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	60fb      	str	r3, [r7, #12]
    }
 80039fa:	bf00      	nop
 80039fc:	e7fe      	b.n	80039fc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <vPortFree+0x5c>
        __asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	60bb      	str	r3, [r7, #8]
    }
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	0fdb      	lsrs	r3, r3, #31
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01c      	beq.n	8003a66 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d118      	bne.n	8003a66 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003a40:	f7fe fe9c 	bl	800277c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <vPortFree+0xb0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <vPortFree+0xb0>)
 8003a50:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a52:	6938      	ldr	r0, [r7, #16]
 8003a54:	f000 f86c 	bl	8003b30 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <vPortFree+0xb4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <vPortFree+0xb4>)
 8003a60:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003a62:	f7fe fe99 	bl	8002798 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003a66:	bf00      	nop
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20012db8 	.word	0x20012db8
 8003a74:	20012dc4 	.word	0x20012dc4

08003a78 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a7e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003a82:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003a84:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <prvHeapInit+0xa4>)
 8003a86:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00c      	beq.n	8003aac <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3307      	adds	r3, #7
 8003a96:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0307 	bic.w	r3, r3, #7
 8003a9e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <prvHeapInit+0xa4>)
 8003aa8:	4413      	add	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ab0:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <prvHeapInit+0xa8>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <prvHeapInit+0xa8>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0307 	bic.w	r3, r3, #7
 8003ad2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <prvHeapInit+0xac>)
 8003ad8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003ada:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <prvHeapInit+0xac>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <prvHeapInit+0xac>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	1ad2      	subs	r2, r2, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <prvHeapInit+0xac>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4a08      	ldr	r2, [pc, #32]	; (8003b28 <prvHeapInit+0xb0>)
 8003b06:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <prvHeapInit+0xb4>)
 8003b0e:	6013      	str	r3, [r2, #0]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	200001ac 	.word	0x200001ac
 8003b20:	20012dac 	.word	0x20012dac
 8003b24:	20012db4 	.word	0x20012db4
 8003b28:	20012dbc 	.word	0x20012dbc
 8003b2c:	20012db8 	.word	0x20012db8

08003b30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b38:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <prvInsertBlockIntoFreeList+0xac>)
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	e002      	b.n	8003b44 <prvInsertBlockIntoFreeList+0x14>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d8f7      	bhi.n	8003b3e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	4413      	add	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d108      	bne.n	8003b72 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	441a      	add	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	441a      	add	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d118      	bne.n	8003bb8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <prvInsertBlockIntoFreeList+0xb0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d00d      	beq.n	8003bae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	441a      	add	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e008      	b.n	8003bc0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bae:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <prvInsertBlockIntoFreeList+0xb0>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e003      	b.n	8003bc0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d002      	beq.n	8003bce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20012dac 	.word	0x20012dac
 8003be0:	20012db4 	.word	0x20012db4

08003be4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003be8:	4803      	ldr	r0, [pc, #12]	; (8003bf8 <_cbSendSystemDesc+0x14>)
 8003bea:	f002 f94d 	bl	8005e88 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003bee:	4803      	ldr	r0, [pc, #12]	; (8003bfc <_cbSendSystemDesc+0x18>)
 8003bf0:	f002 f94a 	bl	8005e88 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003bf4:	bf00      	nop
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	080066a8 	.word	0x080066a8
 8003bfc:	080066f0 	.word	0x080066f0

08003c00 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <SEGGER_SYSVIEW_Conf+0x20>)
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <SEGGER_SYSVIEW_Conf+0x20>)
 8003c0a:	6819      	ldr	r1, [r3, #0]
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <SEGGER_SYSVIEW_Conf+0x24>)
 8003c0e:	4a06      	ldr	r2, [pc, #24]	; (8003c28 <SEGGER_SYSVIEW_Conf+0x28>)
 8003c10:	f001 fd2c 	bl	800566c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003c14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003c18:	f001 fd6c 	bl	80056f4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003c1c:	bf00      	nop
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000000 	.word	0x20000000
 8003c24:	08003be5 	.word	0x08003be5
 8003c28:	0800678c 	.word	0x0800678c

08003c2c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003c32:	2300      	movs	r3, #0
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	e033      	b.n	8003ca0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003c38:	491e      	ldr	r1, [pc, #120]	; (8003cb4 <_cbSendTaskList+0x88>)
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	491a      	ldr	r1, [pc, #104]	; (8003cb4 <_cbSendTaskList+0x88>)
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	3304      	adds	r3, #4
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	4c16      	ldr	r4, [pc, #88]	; (8003cb4 <_cbSendTaskList+0x88>)
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4423      	add	r3, r4
 8003c68:	3308      	adds	r3, #8
 8003c6a:	681c      	ldr	r4, [r3, #0]
 8003c6c:	4d11      	ldr	r5, [pc, #68]	; (8003cb4 <_cbSendTaskList+0x88>)
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	442b      	add	r3, r5
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	681d      	ldr	r5, [r3, #0]
 8003c7e:	4e0d      	ldr	r6, [pc, #52]	; (8003cb4 <_cbSendTaskList+0x88>)
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4433      	add	r3, r6
 8003c8c:	3310      	adds	r3, #16
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	462b      	mov	r3, r5
 8003c94:	4622      	mov	r2, r4
 8003c96:	f000 f971 	bl	8003f7c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	607b      	str	r3, [r7, #4]
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <_cbSendTaskList+0x8c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d3c6      	bcc.n	8003c38 <_cbSendTaskList+0xc>
  }
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb4:	20012dc8 	.word	0x20012dc8
 8003cb8:	20012e68 	.word	0x20012e68

08003cbc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003cbc:	b5b0      	push	{r4, r5, r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003cc2:	f7fe fe69 	bl	8002998 <xTaskGetTickCountFromISR>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	f04f 0400 	mov.w	r4, #0
 8003cde:	f04f 0500 	mov.w	r5, #0
 8003ce2:	015d      	lsls	r5, r3, #5
 8003ce4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003ce8:	0154      	lsls	r4, r2, #5
 8003cea:	4622      	mov	r2, r4
 8003cec:	462b      	mov	r3, r5
 8003cee:	1a12      	subs	r2, r2, r0
 8003cf0:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf4:	f04f 0400 	mov.w	r4, #0
 8003cf8:	f04f 0500 	mov.w	r5, #0
 8003cfc:	009d      	lsls	r5, r3, #2
 8003cfe:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003d02:	0094      	lsls	r4, r2, #2
 8003d04:	4622      	mov	r2, r4
 8003d06:	462b      	mov	r3, r5
 8003d08:	1812      	adds	r2, r2, r0
 8003d0a:	eb41 0303 	adc.w	r3, r1, r3
 8003d0e:	f04f 0000 	mov.w	r0, #0
 8003d12:	f04f 0100 	mov.w	r1, #0
 8003d16:	00d9      	lsls	r1, r3, #3
 8003d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d1c:	00d0      	lsls	r0, r2, #3
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8003d26:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bdb0      	pop	{r4, r5, r7, pc}

08003d34 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003d42:	2205      	movs	r2, #5
 8003d44:	492b      	ldr	r1, [pc, #172]	; (8003df4 <SYSVIEW_AddTask+0xc0>)
 8003d46:	68b8      	ldr	r0, [r7, #8]
 8003d48:	f002 fc08 	bl	800655c <memcmp>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d04b      	beq.n	8003dea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003d52:	4b29      	ldr	r3, [pc, #164]	; (8003df8 <SYSVIEW_AddTask+0xc4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b07      	cmp	r3, #7
 8003d58:	d903      	bls.n	8003d62 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003d5a:	4828      	ldr	r0, [pc, #160]	; (8003dfc <SYSVIEW_AddTask+0xc8>)
 8003d5c:	f002 fb50 	bl	8006400 <SEGGER_SYSVIEW_Warn>
    return;
 8003d60:	e044      	b.n	8003dec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003d62:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <SYSVIEW_AddTask+0xc4>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4926      	ldr	r1, [pc, #152]	; (8003e00 <SYSVIEW_AddTask+0xcc>)
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003d76:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <SYSVIEW_AddTask+0xc4>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4921      	ldr	r1, [pc, #132]	; (8003e00 <SYSVIEW_AddTask+0xcc>)
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	3304      	adds	r3, #4
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003d8c:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <SYSVIEW_AddTask+0xc4>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	491b      	ldr	r1, [pc, #108]	; (8003e00 <SYSVIEW_AddTask+0xcc>)
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <SYSVIEW_AddTask+0xc4>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4916      	ldr	r1, [pc, #88]	; (8003e00 <SYSVIEW_AddTask+0xcc>)
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	330c      	adds	r3, #12
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <SYSVIEW_AddTask+0xc4>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4910      	ldr	r1, [pc, #64]	; (8003e00 <SYSVIEW_AddTask+0xcc>)
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	3310      	adds	r3, #16
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003dce:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <SYSVIEW_AddTask+0xc4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <SYSVIEW_AddTask+0xc4>)
 8003dd6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f8ca 	bl	8003f7c <SYSVIEW_SendTaskInfo>
 8003de8:	e000      	b.n	8003dec <SYSVIEW_AddTask+0xb8>
    return;
 8003dea:	bf00      	nop

}
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	08006700 	.word	0x08006700
 8003df8:	20012e68 	.word	0x20012e68
 8003dfc:	08006708 	.word	0x08006708
 8003e00:	20012dc8 	.word	0x20012dc8

08003e04 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80ab 	beq.w	8003f6c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	e00d      	b.n	8003e38 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003e1c:	4956      	ldr	r1, [pc, #344]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d008      	beq.n	8003e44 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3301      	adds	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	4b4e      	ldr	r3, [pc, #312]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3ec      	bcc.n	8003e1c <SYSVIEW_DeleteTask+0x18>
 8003e42:	e000      	b.n	8003e46 <SYSVIEW_DeleteTask+0x42>
      break;
 8003e44:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003e46:	4b4b      	ldr	r3, [pc, #300]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d111      	bne.n	8003e76 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4a46      	ldr	r2, [pc, #280]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003e5e:	4413      	add	r3, r2
 8003e60:	2214      	movs	r2, #20
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f002 fb95 	bl	8006594 <memset>
    _NumTasks--;
 8003e6a:	4b42      	ldr	r3, [pc, #264]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	4a40      	ldr	r2, [pc, #256]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	e07b      	b.n	8003f6e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003e76:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d276      	bcs.n	8003f6e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003e80:	4b3c      	ldr	r3, [pc, #240]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	1e5a      	subs	r2, r3, #1
 8003e86:	493c      	ldr	r1, [pc, #240]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	4838      	ldr	r0, [pc, #224]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4403      	add	r3, r0
 8003ea2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003ea4:	4b33      	ldr	r3, [pc, #204]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	1e5a      	subs	r2, r3, #1
 8003eaa:	4933      	ldr	r1, [pc, #204]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	6819      	ldr	r1, [r3, #0]
 8003eba:	482f      	ldr	r0, [pc, #188]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4403      	add	r3, r0
 8003ec8:	3304      	adds	r3, #4
 8003eca:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003ecc:	4b29      	ldr	r3, [pc, #164]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	1e5a      	subs	r2, r3, #1
 8003ed2:	4929      	ldr	r1, [pc, #164]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3308      	adds	r3, #8
 8003ee0:	6819      	ldr	r1, [r3, #0]
 8003ee2:	4825      	ldr	r0, [pc, #148]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4403      	add	r3, r0
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003ef4:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	1e5a      	subs	r2, r3, #1
 8003efa:	491f      	ldr	r1, [pc, #124]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	330c      	adds	r3, #12
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	481b      	ldr	r0, [pc, #108]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4403      	add	r3, r0
 8003f18:	330c      	adds	r3, #12
 8003f1a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003f1c:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	1e5a      	subs	r2, r3, #1
 8003f22:	4915      	ldr	r1, [pc, #84]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3310      	adds	r3, #16
 8003f30:	6819      	ldr	r1, [r3, #0]
 8003f32:	4811      	ldr	r0, [pc, #68]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4403      	add	r3, r0
 8003f40:	3310      	adds	r3, #16
 8003f42:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	1e5a      	subs	r2, r3, #1
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <SYSVIEW_DeleteTask+0x174>)
 8003f54:	4413      	add	r3, r2
 8003f56:	2214      	movs	r2, #20
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f002 fb1a 	bl	8006594 <memset>
    _NumTasks--;
 8003f60:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	4a03      	ldr	r2, [pc, #12]	; (8003f74 <SYSVIEW_DeleteTask+0x170>)
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e000      	b.n	8003f6e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003f6c:	bf00      	nop
  }
}
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20012e68 	.word	0x20012e68
 8003f78:	20012dc8 	.word	0x20012dc8

08003f7c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	2214      	movs	r2, #20
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f002 fafe 	bl	8006594 <memset>
  TaskInfo.TaskID     = TaskID;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003fac:	f107 0314 	add.w	r3, r7, #20
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f001 fe71 	bl	8005c98 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003fb6:	bf00      	nop
 8003fb8:	3728      	adds	r7, #40	; 0x28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <__NVIC_EnableIRQ>:
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	db0b      	blt.n	8003fea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	f003 021f 	and.w	r2, r3, #31
 8003fd8:	4907      	ldr	r1, [pc, #28]	; (8003ff8 <__NVIC_EnableIRQ+0x38>)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	e000e100 	.word	0xe000e100

08003ffc <__NVIC_SetPriority>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	6039      	str	r1, [r7, #0]
 8004006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400c:	2b00      	cmp	r3, #0
 800400e:	db0a      	blt.n	8004026 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	b2da      	uxtb	r2, r3
 8004014:	490c      	ldr	r1, [pc, #48]	; (8004048 <__NVIC_SetPriority+0x4c>)
 8004016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401a:	0112      	lsls	r2, r2, #4
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	440b      	add	r3, r1
 8004020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004024:	e00a      	b.n	800403c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	4908      	ldr	r1, [pc, #32]	; (800404c <__NVIC_SetPriority+0x50>)
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	3b04      	subs	r3, #4
 8004034:	0112      	lsls	r2, r2, #4
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	440b      	add	r3, r1
 800403a:	761a      	strb	r2, [r3, #24]
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000e100 	.word	0xe000e100
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004056:	f002 fa2f 	bl	80064b8 <SEGGER_SYSVIEW_IsStarted>
 800405a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004062:	f001 fc9d 	bl	80059a0 <SEGGER_SYSVIEW_Start>
  }
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <_cbOnUARTRx+0x3c>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d806      	bhi.n	8004090 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004082:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <_cbOnUARTRx+0x3c>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	3301      	adds	r3, #1
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <_cbOnUARTRx+0x3c>)
 800408c:	701a      	strb	r2, [r3, #0]
    goto Done;
 800408e:	e009      	b.n	80040a4 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004090:	f7ff ffde 	bl	8004050 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <_cbOnUARTRx+0x3c>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4618      	mov	r0, r3
 800409a:	1dfb      	adds	r3, r7, #7
 800409c:	2201      	movs	r2, #1
 800409e:	4619      	mov	r1, r3
 80040a0:	f000 fb9c 	bl	80047dc <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80040a4:	bf00      	nop
}
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000014 	.word	0x20000014

080040b0 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <_cbOnUARTTx+0x5c>)
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d80f      	bhi.n	80040e0 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80040c0:	4b12      	ldr	r3, [pc, #72]	; (800410c <_cbOnUARTTx+0x5c>)
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b12      	ldr	r3, [pc, #72]	; (8004110 <_cbOnUARTTx+0x60>)
 80040c8:	5c9a      	ldrb	r2, [r3, r2]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80040ce:	4b0f      	ldr	r3, [pc, #60]	; (800410c <_cbOnUARTTx+0x5c>)
 80040d0:	785b      	ldrb	r3, [r3, #1]
 80040d2:	3301      	adds	r3, #1
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <_cbOnUARTTx+0x5c>)
 80040d8:	705a      	strb	r2, [r3, #1]
    r = 1;
 80040da:	2301      	movs	r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
    goto Done;
 80040de:	e00f      	b.n	8004100 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <_cbOnUARTTx+0x5c>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fa1b 	bl	8004524 <SEGGER_RTT_ReadUpBufferNoLock>
 80040ee:	4603      	mov	r3, r0
 80040f0:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	da02      	bge.n	80040fe <_cbOnUARTTx+0x4e>
    r = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	e000      	b.n	8004100 <_cbOnUARTTx+0x50>
  }
Done:
 80040fe:	bf00      	nop
  return r;
 8004100:	68fb      	ldr	r3, [r7, #12]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000014 	.word	0x20000014
 8004110:	08006794 	.word	0x08006794

08004114 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800411c:	4a04      	ldr	r2, [pc, #16]	; (8004130 <SEGGER_UART_init+0x1c>)
 800411e:	4905      	ldr	r1, [pc, #20]	; (8004134 <SEGGER_UART_init+0x20>)
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f863 	bl	80041ec <HIF_UART_Init>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	08004071 	.word	0x08004071
 8004134:	080040b1 	.word	0x080040b1

08004138 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800413e:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <USART2_IRQHandler+0x80>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d011      	beq.n	8004172 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800414e:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <USART2_IRQHandler+0x84>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f003 030b 	and.w	r3, r3, #11
 800415c:	2b00      	cmp	r3, #0
 800415e:	d108      	bne.n	8004172 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004160:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <USART2_IRQHandler+0x88>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <USART2_IRQHandler+0x88>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	79fa      	ldrb	r2, [r7, #7]
 800416e:	4610      	mov	r0, r2
 8004170:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01a      	beq.n	80041b2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800417c:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <USART2_IRQHandler+0x8c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d015      	beq.n	80041b0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <USART2_IRQHandler+0x8c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	1dfa      	adds	r2, r7, #7
 800418a:	4610      	mov	r0, r2
 800418c:	4798      	blx	r3
 800418e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <USART2_IRQHandler+0x90>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a0b      	ldr	r2, [pc, #44]	; (80041c8 <USART2_IRQHandler+0x90>)
 800419c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e006      	b.n	80041b2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <USART2_IRQHandler+0x80>)
 80041a6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80041a8:	79fa      	ldrb	r2, [r7, #7]
 80041aa:	4b04      	ldr	r3, [pc, #16]	; (80041bc <USART2_IRQHandler+0x84>)
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e000      	b.n	80041b2 <USART2_IRQHandler+0x7a>
      return;
 80041b0:	bf00      	nop
    }
  }
}
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40004400 	.word	0x40004400
 80041bc:	40004404 	.word	0x40004404
 80041c0:	20012e6c 	.word	0x20012e6c
 80041c4:	20012e70 	.word	0x20012e70
 80041c8:	4000440c 	.word	0x4000440c

080041cc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80041d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041da:	6013      	str	r3, [r2, #0]
}
 80041dc:	bf00      	nop
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	4000440c 	.word	0x4000440c

080041ec <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80041f8:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <HIF_UART_Init+0xc8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a2d      	ldr	r2, [pc, #180]	; (80042b4 <HIF_UART_Init+0xc8>)
 80041fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004202:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004204:	4b2c      	ldr	r3, [pc, #176]	; (80042b8 <HIF_UART_Init+0xcc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a2b      	ldr	r2, [pc, #172]	; (80042b8 <HIF_UART_Init+0xcc>)
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004210:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <HIF_UART_Init+0xd0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004224:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004226:	4a25      	ldr	r2, [pc, #148]	; (80042bc <HIF_UART_Init+0xd0>)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800422c:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <HIF_UART_Init+0xd4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004238:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004240:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004242:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HIF_UART_Init+0xd4>)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004248:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <HIF_UART_Init+0xd8>)
 800424a:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800424e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004250:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <HIF_UART_Init+0xdc>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HIF_UART_Init+0xe0>)
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004262:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <HIF_UART_Init+0xe4>)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	3301      	adds	r3, #1
 800426c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427a:	d302      	bcc.n	8004282 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800427c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004280:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <HIF_UART_Init+0xe8>)
 800428e:	b29b      	uxth	r3, r3
 8004290:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004292:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <HIF_UART_Init+0xec>)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004298:	4a10      	ldr	r2, [pc, #64]	; (80042dc <HIF_UART_Init+0xf0>)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800429e:	2106      	movs	r1, #6
 80042a0:	2026      	movs	r0, #38	; 0x26
 80042a2:	f7ff feab 	bl	8003ffc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80042a6:	2026      	movs	r0, #38	; 0x26
 80042a8:	f7ff fe8a 	bl	8003fc0 <__NVIC_EnableIRQ>
}
 80042ac:	bf00      	nop
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023840 	.word	0x40023840
 80042b8:	40023830 	.word	0x40023830
 80042bc:	40020020 	.word	0x40020020
 80042c0:	40020000 	.word	0x40020000
 80042c4:	4000440c 	.word	0x4000440c
 80042c8:	40004410 	.word	0x40004410
 80042cc:	40004414 	.word	0x40004414
 80042d0:	05f5e100 	.word	0x05f5e100
 80042d4:	40004408 	.word	0x40004408
 80042d8:	20012e6c 	.word	0x20012e6c
 80042dc:	20012e70 	.word	0x20012e70

080042e0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80042e6:	4b26      	ldr	r3, [pc, #152]	; (8004380 <_DoInit+0xa0>)
 80042e8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80042ea:	22a8      	movs	r2, #168	; 0xa8
 80042ec:	2100      	movs	r1, #0
 80042ee:	6838      	ldr	r0, [r7, #0]
 80042f0:	f002 f950 	bl	8006594 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2203      	movs	r2, #3
 80042f8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2203      	movs	r2, #3
 80042fe:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	4a20      	ldr	r2, [pc, #128]	; (8004384 <_DoInit+0xa4>)
 8004304:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <_DoInit+0xa8>)
 800430a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004312:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2200      	movs	r2, #0
 8004318:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2200      	movs	r2, #0
 800431e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	4a16      	ldr	r2, [pc, #88]	; (8004384 <_DoInit+0xa4>)
 800432a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	4a17      	ldr	r2, [pc, #92]	; (800438c <_DoInit+0xac>)
 8004330:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2210      	movs	r2, #16
 8004336:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2200      	movs	r2, #0
 8004342:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800434a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	e00c      	b.n	800436e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1c3 030f 	rsb	r3, r3, #15
 800435a:	4a0d      	ldr	r2, [pc, #52]	; (8004390 <_DoInit+0xb0>)
 800435c:	5cd1      	ldrb	r1, [r2, r3]
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4413      	add	r3, r2
 8004364:	460a      	mov	r2, r1
 8004366:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3301      	adds	r3, #1
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b0f      	cmp	r3, #15
 8004372:	d9ef      	bls.n	8004354 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004374:	f3bf 8f5f 	dmb	sy
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20014400 	.word	0x20014400
 8004384:	08006758 	.word	0x08006758
 8004388:	20012e74 	.word	0x20012e74
 800438c:	20013274 	.word	0x20013274
 8004390:	08006798 	.word	0x08006798

08004394 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	; 0x28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80043a0:	2300      	movs	r3, #0
 80043a2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d905      	bls.n	80043c4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	e007      	b.n	80043d4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	69b9      	ldr	r1, [r7, #24]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	1acb      	subs	r3, r1, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	3b01      	subs	r3, #1
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043de:	4293      	cmp	r3, r2
 80043e0:	bf28      	it	cs
 80043e2:	4613      	movcs	r3, r2
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80043e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4293      	cmp	r3, r2
 80043ec:	bf28      	it	cs
 80043ee:	4613      	movcs	r3, r2
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	6978      	ldr	r0, [r7, #20]
 8004402:	f002 f8b9 	bl	8006578 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004406:	6a3a      	ldr	r2, [r7, #32]
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	4413      	add	r3, r2
 800440c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	4413      	add	r3, r2
 8004414:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	4413      	add	r3, r2
 8004424:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	429a      	cmp	r2, r3
 800442e:	d101      	bne.n	8004434 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004430:	2300      	movs	r3, #0
 8004432:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004434:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1b2      	bne.n	80043aa <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004444:	6a3b      	ldr	r3, [r7, #32]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3728      	adds	r7, #40	; 0x28
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800444e:	b580      	push	{r7, lr}
 8004450:	b088      	sub	sp, #32
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	d911      	bls.n	8004496 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	6938      	ldr	r0, [r7, #16]
 8004482:	f002 f879 	bl	8006578 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004486:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	441a      	add	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004494:	e01f      	b.n	80044d6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	6938      	ldr	r0, [r7, #16]
 80044aa:	f002 f865 	bl	8006578 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	4413      	add	r3, r2
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4619      	mov	r1, r3
 80044c6:	6938      	ldr	r0, [r7, #16]
 80044c8:	f002 f856 	bl	8006578 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80044cc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	60da      	str	r2, [r3, #12]
}
 80044d6:	bf00      	nop
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80044de:	b480      	push	{r7}
 80044e0:	b087      	sub	sp, #28
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d808      	bhi.n	800450c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1ad2      	subs	r2, r2, r3
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4413      	add	r3, r2
 8004506:	3b01      	subs	r3, #1
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e004      	b.n	8004516 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004516:	697b      	ldr	r3, [r7, #20]
}
 8004518:	4618      	mov	r0, r3
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004524:	b580      	push	{r7, lr}
 8004526:	b08c      	sub	sp, #48	; 0x30
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004530:	4b3e      	ldr	r3, [pc, #248]	; (800462c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004532:	623b      	str	r3, [r7, #32]
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b53      	cmp	r3, #83	; 0x53
 800453c:	d001      	beq.n	8004542 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800453e:	f7ff fecf 	bl	80042e0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	4613      	mov	r3, r2
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4a37      	ldr	r2, [pc, #220]	; (800462c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004550:	4413      	add	r3, r2
 8004552:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004564:	2300      	movs	r3, #0
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	429a      	cmp	r2, r3
 800456e:	d92b      	bls.n	80045c8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4293      	cmp	r3, r2
 8004580:	bf28      	it	cs
 8004582:	4613      	movcs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	4413      	add	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	6939      	ldr	r1, [r7, #16]
 8004594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004596:	f001 ffef 	bl	8006578 <memcpy>
    NumBytesRead += NumBytesRem;
 800459a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4413      	add	r3, r2
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80045a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	4413      	add	r3, r2
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4413      	add	r3, r2
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d101      	bne.n	80045c8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80045c4:	2300      	movs	r3, #0
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4293      	cmp	r3, r2
 80045d6:	bf28      	it	cs
 80045d8:	4613      	movcs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d019      	beq.n	8004616 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	4413      	add	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	6939      	ldr	r1, [r7, #16]
 80045f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045f2:	f001 ffc1 	bl	8006578 <memcpy>
    NumBytesRead += NumBytesRem;
 80045f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	4413      	add	r3, r2
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80045fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	4413      	add	r3, r2
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800460e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	4413      	add	r3, r2
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004620:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004624:	4618      	mov	r0, r3
 8004626:	3730      	adds	r7, #48	; 0x30
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20014400 	.word	0x20014400

08004630 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b08c      	sub	sp, #48	; 0x30
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800463c:	4b3e      	ldr	r3, [pc, #248]	; (8004738 <SEGGER_RTT_ReadNoLock+0x108>)
 800463e:	623b      	str	r3, [r7, #32]
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b53      	cmp	r3, #83	; 0x53
 8004648:	d001      	beq.n	800464e <SEGGER_RTT_ReadNoLock+0x1e>
 800464a:	f7ff fe49 	bl	80042e0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	3360      	adds	r3, #96	; 0x60
 800465a:	4a37      	ldr	r2, [pc, #220]	; (8004738 <SEGGER_RTT_ReadNoLock+0x108>)
 800465c:	4413      	add	r3, r2
 800465e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004670:	2300      	movs	r3, #0
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	429a      	cmp	r2, r3
 800467a:	d92b      	bls.n	80046d4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4293      	cmp	r3, r2
 800468c:	bf28      	it	cs
 800468e:	4613      	movcs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	4413      	add	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	6939      	ldr	r1, [r7, #16]
 80046a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046a2:	f001 ff69 	bl	8006578 <memcpy>
    NumBytesRead += NumBytesRem;
 80046a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	4413      	add	r3, r2
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80046ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	4413      	add	r3, r2
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80046be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	4413      	add	r3, r2
 80046c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d101      	bne.n	80046d4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4293      	cmp	r3, r2
 80046e2:	bf28      	it	cs
 80046e4:	4613      	movcs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d019      	beq.n	8004722 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	4413      	add	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	6939      	ldr	r1, [r7, #16]
 80046fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046fe:	f001 ff3b 	bl	8006578 <memcpy>
    NumBytesRead += NumBytesRem;
 8004702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4413      	add	r3, r2
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800470a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	4413      	add	r3, r2
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800471a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4413      	add	r3, r2
 8004720:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004730:	4618      	mov	r0, r3
 8004732:	3730      	adds	r7, #48	; 0x30
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20014400 	.word	0x20014400

0800473c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4613      	mov	r3, r2
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	4413      	add	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	3360      	adds	r3, #96	; 0x60
 8004758:	4a1f      	ldr	r2, [pc, #124]	; (80047d8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800475a:	4413      	add	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d029      	beq.n	80047ba <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004766:	2b02      	cmp	r3, #2
 8004768:	d82e      	bhi.n	80047c8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800476e:	2b01      	cmp	r3, #1
 8004770:	d013      	beq.n	800479a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004772:	e029      	b.n	80047c8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004774:	6978      	ldr	r0, [r7, #20]
 8004776:	f7ff feb2 	bl	80044de <_GetAvailWriteSpace>
 800477a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d202      	bcs.n	800478a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004788:	e021      	b.n	80047ce <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	6978      	ldr	r0, [r7, #20]
 8004794:	f7ff fe5b 	bl	800444e <_WriteNoCheck>
    break;
 8004798:	e019      	b.n	80047ce <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800479a:	6978      	ldr	r0, [r7, #20]
 800479c:	f7ff fe9f 	bl	80044de <_GetAvailWriteSpace>
 80047a0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4293      	cmp	r3, r2
 80047a8:	bf28      	it	cs
 80047aa:	4613      	movcs	r3, r2
 80047ac:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	69b9      	ldr	r1, [r7, #24]
 80047b2:	6978      	ldr	r0, [r7, #20]
 80047b4:	f7ff fe4b 	bl	800444e <_WriteNoCheck>
    break;
 80047b8:	e009      	b.n	80047ce <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	69b9      	ldr	r1, [r7, #24]
 80047be:	6978      	ldr	r0, [r7, #20]
 80047c0:	f7ff fde8 	bl	8004394 <_WriteBlocking>
 80047c4:	61f8      	str	r0, [r7, #28]
    break;
 80047c6:	e002      	b.n	80047ce <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61fb      	str	r3, [r7, #28]
    break;
 80047cc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80047ce:	69fb      	ldr	r3, [r7, #28]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20014400 	.word	0x20014400

080047dc <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80047e8:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b53      	cmp	r3, #83	; 0x53
 80047f4:	d001      	beq.n	80047fa <SEGGER_RTT_WriteDownBuffer+0x1e>
 80047f6:	f7ff fd73 	bl	80042e0 <_DoInit>
  SEGGER_RTT_LOCK();
 80047fa:	f3ef 8311 	mrs	r3, BASEPRI
 80047fe:	f04f 0120 	mov.w	r1, #32
 8004802:	f381 8811 	msr	BASEPRI, r1
 8004806:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff ff95 	bl	800473c <SEGGER_RTT_WriteDownBufferNoLock>
 8004812:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800481a:	697b      	ldr	r3, [r7, #20]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20014400 	.word	0x20014400

08004828 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004836:	4b3d      	ldr	r3, [pc, #244]	; (800492c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b53      	cmp	r3, #83	; 0x53
 8004842:	d001      	beq.n	8004848 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004844:	f7ff fd4c 	bl	80042e0 <_DoInit>
  SEGGER_RTT_LOCK();
 8004848:	f3ef 8311 	mrs	r3, BASEPRI
 800484c:	f04f 0120 	mov.w	r1, #32
 8004850:	f381 8811 	msr	BASEPRI, r1
 8004854:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004856:	4b35      	ldr	r3, [pc, #212]	; (800492c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004858:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800485e:	6939      	ldr	r1, [r7, #16]
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	4613      	mov	r3, r2
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	4413      	add	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	440b      	add	r3, r1
 800486e:	3304      	adds	r3, #4
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3301      	adds	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	429a      	cmp	r2, r3
 8004884:	dbeb      	blt.n	800485e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004886:	e000      	b.n	800488a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004888:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	429a      	cmp	r2, r3
 8004892:	da3f      	bge.n	8004914 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004894:	6939      	ldr	r1, [r7, #16]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	4613      	mov	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4413      	add	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	440b      	add	r3, r1
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80048a8:	6939      	ldr	r1, [r7, #16]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	4613      	mov	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	440b      	add	r3, r1
 80048b8:	3304      	adds	r3, #4
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80048be:	6939      	ldr	r1, [r7, #16]
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	4613      	mov	r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4413      	add	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	440b      	add	r3, r1
 80048cc:	3320      	adds	r3, #32
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80048d2:	6939      	ldr	r1, [r7, #16]
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	4613      	mov	r3, r2
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	4413      	add	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	440b      	add	r3, r1
 80048e0:	3328      	adds	r3, #40	; 0x28
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80048e6:	6939      	ldr	r1, [r7, #16]
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	4613      	mov	r3, r2
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	440b      	add	r3, r1
 80048f4:	3324      	adds	r3, #36	; 0x24
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80048fa:	6939      	ldr	r1, [r7, #16]
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	4613      	mov	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4413      	add	r3, r2
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	440b      	add	r3, r1
 8004908:	332c      	adds	r3, #44	; 0x2c
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800490e:	f3bf 8f5f 	dmb	sy
 8004912:	e002      	b.n	800491a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004914:	f04f 33ff 	mov.w	r3, #4294967295
 8004918:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004920:	69fb      	ldr	r3, [r7, #28]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20014400 	.word	0x20014400

08004930 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	; 0x28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800493e:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004940:	623b      	str	r3, [r7, #32]
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b53      	cmp	r3, #83	; 0x53
 800494a:	d001      	beq.n	8004950 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800494c:	f7ff fcc8 	bl	80042e0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004950:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004952:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d82c      	bhi.n	80049b4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800495a:	f3ef 8311 	mrs	r3, BASEPRI
 800495e:	f04f 0120 	mov.w	r1, #32
 8004962:	f381 8811 	msr	BASEPRI, r1
 8004966:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4613      	mov	r3, r2
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	4413      	add	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	3360      	adds	r3, #96	; 0x60
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	4413      	add	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00e      	beq.n	800499e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2200      	movs	r2, #0
 8004996:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2200      	movs	r2, #0
 800499c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80049a4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
 80049b2:	e002      	b.n	80049ba <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80049b4:	f04f 33ff 	mov.w	r3, #4294967295
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3728      	adds	r7, #40	; 0x28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	20014400 	.word	0x20014400

080049c8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	60fa      	str	r2, [r7, #12]
 80049de:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b80      	cmp	r3, #128	; 0x80
 80049e4:	d90a      	bls.n	80049fc <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80049ea:	e007      	b.n	80049fc <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	1c53      	adds	r3, r2, #1
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1c59      	adds	r1, r3, #1
 80049f6:	60f9      	str	r1, [r7, #12]
 80049f8:	7812      	ldrb	r2, [r2, #0]
 80049fa:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	1e5a      	subs	r2, r3, #1
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <_EncodeStr+0x46>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1ee      	bne.n	80049ec <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3307      	adds	r3, #7
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a46:	4b35      	ldr	r3, [pc, #212]	; (8004b1c <_HandleIncomingPacket+0xdc>)
 8004a48:	7e1b      	ldrb	r3, [r3, #24]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	1cfb      	adds	r3, r7, #3
 8004a4e:	2201      	movs	r2, #1
 8004a50:	4619      	mov	r1, r3
 8004a52:	f7ff fded 	bl	8004630 <SEGGER_RTT_ReadNoLock>
 8004a56:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d052      	beq.n	8004b04 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	2b80      	cmp	r3, #128	; 0x80
 8004a62:	d031      	beq.n	8004ac8 <_HandleIncomingPacket+0x88>
 8004a64:	2b80      	cmp	r3, #128	; 0x80
 8004a66:	dc40      	bgt.n	8004aea <_HandleIncomingPacket+0xaa>
 8004a68:	2b07      	cmp	r3, #7
 8004a6a:	dc15      	bgt.n	8004a98 <_HandleIncomingPacket+0x58>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	dd3c      	ble.n	8004aea <_HandleIncomingPacket+0xaa>
 8004a70:	3b01      	subs	r3, #1
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d839      	bhi.n	8004aea <_HandleIncomingPacket+0xaa>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <_HandleIncomingPacket+0x3c>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004a9f 	.word	0x08004a9f
 8004a80:	08004aa5 	.word	0x08004aa5
 8004a84:	08004aab 	.word	0x08004aab
 8004a88:	08004ab1 	.word	0x08004ab1
 8004a8c:	08004ab7 	.word	0x08004ab7
 8004a90:	08004abd 	.word	0x08004abd
 8004a94:	08004ac3 	.word	0x08004ac3
 8004a98:	2b7f      	cmp	r3, #127	; 0x7f
 8004a9a:	d035      	beq.n	8004b08 <_HandleIncomingPacket+0xc8>
 8004a9c:	e025      	b.n	8004aea <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004a9e:	f000 ff7f 	bl	80059a0 <SEGGER_SYSVIEW_Start>
      break;
 8004aa2:	e036      	b.n	8004b12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004aa4:	f001 f838 	bl	8005b18 <SEGGER_SYSVIEW_Stop>
      break;
 8004aa8:	e033      	b.n	8004b12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004aaa:	f001 fa11 	bl	8005ed0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004aae:	e030      	b.n	8004b12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004ab0:	f001 f9d6 	bl	8005e60 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004ab4:	e02d      	b.n	8004b12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004ab6:	f001 f855 	bl	8005b64 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004aba:	e02a      	b.n	8004b12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004abc:	f001 fc4e 	bl	800635c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004ac0:	e027      	b.n	8004b12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004ac2:	f001 fc2d 	bl	8006320 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004ac6:	e024      	b.n	8004b12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ac8:	4b14      	ldr	r3, [pc, #80]	; (8004b1c <_HandleIncomingPacket+0xdc>)
 8004aca:	7e1b      	ldrb	r3, [r3, #24]
 8004acc:	4618      	mov	r0, r3
 8004ace:	1cfb      	adds	r3, r7, #3
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f7ff fdac 	bl	8004630 <SEGGER_RTT_ReadNoLock>
 8004ad8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d015      	beq.n	8004b0c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f001 fb92 	bl	800620c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004ae8:	e010      	b.n	8004b0c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	b25b      	sxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	da0e      	bge.n	8004b10 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <_HandleIncomingPacket+0xdc>)
 8004af4:	7e1b      	ldrb	r3, [r3, #24]
 8004af6:	4618      	mov	r0, r3
 8004af8:	1cfb      	adds	r3, r7, #3
 8004afa:	2201      	movs	r2, #1
 8004afc:	4619      	mov	r1, r3
 8004afe:	f7ff fd97 	bl	8004630 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004b02:	e005      	b.n	8004b10 <_HandleIncomingPacket+0xd0>
    }
  }
 8004b04:	bf00      	nop
 8004b06:	e004      	b.n	8004b12 <_HandleIncomingPacket+0xd2>
      break;
 8004b08:	bf00      	nop
 8004b0a:	e002      	b.n	8004b12 <_HandleIncomingPacket+0xd2>
      break;
 8004b0c:	bf00      	nop
 8004b0e:	e000      	b.n	8004b12 <_HandleIncomingPacket+0xd2>
      break;
 8004b10:	bf00      	nop
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	2001428c 	.word	0x2001428c

08004b20 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08c      	sub	sp, #48	; 0x30
 8004b24:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004b26:	2301      	movs	r3, #1
 8004b28:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004b2a:	1d3b      	adds	r3, r7, #4
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b34:	4b32      	ldr	r3, [pc, #200]	; (8004c00 <_TrySendOverflowPacket+0xe0>)
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3a:	e00b      	b.n	8004b54 <_TrySendOverflowPacket+0x34>
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	1c59      	adds	r1, r3, #1
 8004b44:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	09db      	lsrs	r3, r3, #7
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	2b7f      	cmp	r3, #127	; 0x7f
 8004b58:	d8f0      	bhi.n	8004b3c <_TrySendOverflowPacket+0x1c>
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b6a:	4b26      	ldr	r3, [pc, #152]	; (8004c04 <_TrySendOverflowPacket+0xe4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b70:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <_TrySendOverflowPacket+0xe0>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	623b      	str	r3, [r7, #32]
 8004b82:	e00b      	b.n	8004b9c <_TrySendOverflowPacket+0x7c>
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	1c59      	adds	r1, r3, #1
 8004b8c:	6279      	str	r1, [r7, #36]	; 0x24
 8004b8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	09db      	lsrs	r3, r3, #7
 8004b9a:	623b      	str	r3, [r7, #32]
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004ba0:	d8f0      	bhi.n	8004b84 <_TrySendOverflowPacket+0x64>
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	627a      	str	r2, [r7, #36]	; 0x24
 8004ba8:	6a3a      	ldr	r2, [r7, #32]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004bb2:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <_TrySendOverflowPacket+0xe0>)
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	1d3b      	adds	r3, r7, #4
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	1d3b      	adds	r3, r7, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	f7fb fb0c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004bcc:	f7ff fafe 	bl	80041cc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d009      	beq.n	8004bea <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004bd6:	4a0a      	ldr	r2, [pc, #40]	; (8004c00 <_TrySendOverflowPacket+0xe0>)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004bdc:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <_TrySendOverflowPacket+0xe0>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <_TrySendOverflowPacket+0xe0>)
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e004      	b.n	8004bf4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <_TrySendOverflowPacket+0xe0>)
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	4a03      	ldr	r2, [pc, #12]	; (8004c00 <_TrySendOverflowPacket+0xe0>)
 8004bf2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004bf4:	693b      	ldr	r3, [r7, #16]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3730      	adds	r7, #48	; 0x30
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	2001428c 	.word	0x2001428c
 8004c04:	e0001004 	.word	0xe0001004

08004c08 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004c14:	4b9b      	ldr	r3, [pc, #620]	; (8004e84 <_SendPacket+0x27c>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d010      	beq.n	8004c3e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004c1c:	4b99      	ldr	r3, [pc, #612]	; (8004e84 <_SendPacket+0x27c>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 812b 	beq.w	8004e7c <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004c26:	4b97      	ldr	r3, [pc, #604]	; (8004e84 <_SendPacket+0x27c>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d109      	bne.n	8004c42 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004c2e:	f7ff ff77 	bl	8004b20 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004c32:	4b94      	ldr	r3, [pc, #592]	; (8004e84 <_SendPacket+0x27c>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	f040 8122 	bne.w	8004e80 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 8004c3c:	e001      	b.n	8004c42 <_SendPacket+0x3a>
    goto Send;
 8004c3e:	bf00      	nop
 8004c40:	e000      	b.n	8004c44 <_SendPacket+0x3c>
Send:
 8004c42:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b1f      	cmp	r3, #31
 8004c48:	d809      	bhi.n	8004c5e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004c4a:	4b8e      	ldr	r3, [pc, #568]	; (8004e84 <_SendPacket+0x27c>)
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f040 8117 	bne.w	8004e8c <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b17      	cmp	r3, #23
 8004c62:	d807      	bhi.n	8004c74 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	701a      	strb	r2, [r3, #0]
 8004c72:	e0c4      	b.n	8004dfe <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c80:	d912      	bls.n	8004ca8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	09da      	lsrs	r2, r3, #7
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	3a01      	subs	r2, #1
 8004c9a:	60fa      	str	r2, [r7, #12]
 8004c9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	e006      	b.n	8004cb6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b7e      	cmp	r3, #126	; 0x7e
 8004cba:	d807      	bhi.n	8004ccc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e098      	b.n	8004dfe <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cd2:	d212      	bcs.n	8004cfa <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	09da      	lsrs	r2, r3, #7
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	3a01      	subs	r2, #1
 8004cec:	60fa      	str	r2, [r7, #12]
 8004cee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	e081      	b.n	8004dfe <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d00:	d21d      	bcs.n	8004d3e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	0b9a      	lsrs	r2, r3, #14
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	09db      	lsrs	r3, r3, #7
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	3a01      	subs	r2, #1
 8004d1c:	60fa      	str	r2, [r7, #12]
 8004d1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	3a01      	subs	r2, #1
 8004d30:	60fa      	str	r2, [r7, #12]
 8004d32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	e05f      	b.n	8004dfe <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d44:	d228      	bcs.n	8004d98 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	0d5a      	lsrs	r2, r3, #21
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	0b9b      	lsrs	r3, r3, #14
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	3a01      	subs	r2, #1
 8004d60:	60fa      	str	r2, [r7, #12]
 8004d62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	09db      	lsrs	r3, r3, #7
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	3a01      	subs	r2, #1
 8004d76:	60fa      	str	r2, [r7, #12]
 8004d78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	3a01      	subs	r2, #1
 8004d8a:	60fa      	str	r2, [r7, #12]
 8004d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	e032      	b.n	8004dfe <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	0f1a      	lsrs	r2, r3, #28
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	0d5b      	lsrs	r3, r3, #21
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	3a01      	subs	r2, #1
 8004db2:	60fa      	str	r2, [r7, #12]
 8004db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	0b9b      	lsrs	r3, r3, #14
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	3a01      	subs	r2, #1
 8004dc8:	60fa      	str	r2, [r7, #12]
 8004dca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	09db      	lsrs	r3, r3, #7
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	3a01      	subs	r2, #1
 8004dde:	60fa      	str	r2, [r7, #12]
 8004de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	3a01      	subs	r2, #1
 8004df2:	60fa      	str	r2, [r7, #12]
 8004df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004dfe:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <_SendPacket+0x280>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e04:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <_SendPacket+0x27c>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	e00b      	b.n	8004e30 <_SendPacket+0x228>
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	1c59      	adds	r1, r3, #1
 8004e20:	6279      	str	r1, [r7, #36]	; 0x24
 8004e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	09db      	lsrs	r3, r3, #7
 8004e2e:	623b      	str	r3, [r7, #32]
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	2b7f      	cmp	r3, #127	; 0x7f
 8004e34:	d8f0      	bhi.n	8004e18 <_SendPacket+0x210>
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	627a      	str	r2, [r7, #36]	; 0x24
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004e46:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <_SendPacket+0x27c>)
 8004e48:	785b      	ldrb	r3, [r3, #1]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	68f9      	ldr	r1, [r7, #12]
 8004e56:	f7fb f9c3 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e5a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004e5c:	f7ff f9b6 	bl	80041cc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e66:	4a07      	ldr	r2, [pc, #28]	; (8004e84 <_SendPacket+0x27c>)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	60d3      	str	r3, [r2, #12]
 8004e6c:	e00f      	b.n	8004e8e <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <_SendPacket+0x27c>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	3301      	adds	r3, #1
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <_SendPacket+0x27c>)
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	e008      	b.n	8004e8e <_SendPacket+0x286>
    goto SendDone;
 8004e7c:	bf00      	nop
 8004e7e:	e006      	b.n	8004e8e <_SendPacket+0x286>
      goto SendDone;
 8004e80:	bf00      	nop
 8004e82:	e004      	b.n	8004e8e <_SendPacket+0x286>
 8004e84:	2001428c 	.word	0x2001428c
 8004e88:	e0001004 	.word	0xe0001004
      goto SendDone;
 8004e8c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <_SendPacket+0x2d8>)
 8004e90:	7e1b      	ldrb	r3, [r3, #24]
 8004e92:	4619      	mov	r1, r3
 8004e94:	4a13      	ldr	r2, [pc, #76]	; (8004ee4 <_SendPacket+0x2dc>)
 8004e96:	460b      	mov	r3, r1
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	440b      	add	r3, r1
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	336c      	adds	r3, #108	; 0x6c
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <_SendPacket+0x2d8>)
 8004ea6:	7e1b      	ldrb	r3, [r3, #24]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	490e      	ldr	r1, [pc, #56]	; (8004ee4 <_SendPacket+0x2dc>)
 8004eac:	4603      	mov	r3, r0
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4403      	add	r3, r0
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3370      	adds	r3, #112	; 0x70
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d00b      	beq.n	8004ed6 <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004ebe:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <_SendPacket+0x2d8>)
 8004ec0:	789b      	ldrb	r3, [r3, #2]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d107      	bne.n	8004ed6 <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004ec6:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <_SendPacket+0x2d8>)
 8004ec8:	2201      	movs	r2, #1
 8004eca:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004ecc:	f7ff fdb8 	bl	8004a40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <_SendPacket+0x2d8>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004ed6:	bf00      	nop
 8004ed8:	3728      	adds	r7, #40	; 0x28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	2001428c 	.word	0x2001428c
 8004ee4:	20014400 	.word	0x20014400

08004ee8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	3301      	adds	r3, #1
 8004efe:	2b80      	cmp	r3, #128	; 0x80
 8004f00:	d80a      	bhi.n	8004f18 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	1c59      	adds	r1, r3, #1
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6051      	str	r1, [r2, #4]
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b80      	cmp	r3, #128	; 0x80
 8004f1e:	d15a      	bne.n	8004fd6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	623b      	str	r3, [r7, #32]
 8004f40:	e00b      	b.n	8004f5a <_StoreChar+0x72>
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	1c59      	adds	r1, r3, #1
 8004f4a:	6279      	str	r1, [r7, #36]	; 0x24
 8004f4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	09db      	lsrs	r3, r3, #7
 8004f58:	623b      	str	r3, [r7, #32]
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f5e:	d8f0      	bhi.n	8004f42 <_StoreChar+0x5a>
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	627a      	str	r2, [r7, #36]	; 0x24
 8004f66:	6a3a      	ldr	r2, [r7, #32]
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e00b      	b.n	8004f92 <_StoreChar+0xaa>
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	1c59      	adds	r1, r3, #1
 8004f82:	61f9      	str	r1, [r7, #28]
 8004f84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	09db      	lsrs	r3, r3, #7
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b7f      	cmp	r3, #127	; 0x7f
 8004f96:	d8f0      	bhi.n	8004f7a <_StoreChar+0x92>
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	61fa      	str	r2, [r7, #28]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	221a      	movs	r2, #26
 8004fae:	6939      	ldr	r1, [r7, #16]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fe29 	bl	8004c08 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff fd34 	bl	8004a28 <_PreparePacket>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	611a      	str	r2, [r3, #16]
  }
}
 8004fd6:	bf00      	nop
 8004fd8:	3728      	adds	r7, #40	; 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08a      	sub	sp, #40	; 0x28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004ffa:	e007      	b.n	800500c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004ffc:	6a3a      	ldr	r2, [r7, #32]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	fbb2 f3f3 	udiv	r3, r2, r3
 8005004:	623b      	str	r3, [r7, #32]
    Width++;
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3301      	adds	r3, #1
 800500a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800500c:	6a3a      	ldr	r2, [r7, #32]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d2f3      	bcs.n	8004ffc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	429a      	cmp	r2, r3
 800501a:	d901      	bls.n	8005020 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d11f      	bne.n	800506a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01c      	beq.n	800506a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <_PrintUnsigned+0x66>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d102      	bne.n	8005046 <_PrintUnsigned+0x66>
        c = '0';
 8005040:	2330      	movs	r3, #48	; 0x30
 8005042:	76fb      	strb	r3, [r7, #27]
 8005044:	e001      	b.n	800504a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005046:	2320      	movs	r3, #32
 8005048:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800504a:	e007      	b.n	800505c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	3b01      	subs	r3, #1
 8005050:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005052:	7efb      	ldrb	r3, [r7, #27]
 8005054:	4619      	mov	r1, r3
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff ff46 	bl	8004ee8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <_PrintUnsigned+0x8a>
 8005062:	69fa      	ldr	r2, [r7, #28]
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	429a      	cmp	r2, r3
 8005068:	d3f0      	bcc.n	800504c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d903      	bls.n	8005078 <_PrintUnsigned+0x98>
      NumDigits--;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	3b01      	subs	r3, #1
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	e009      	b.n	800508c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d200      	bcs.n	800508c <_PrintUnsigned+0xac>
        break;
 800508a:	e005      	b.n	8005098 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	fb02 f303 	mul.w	r3, r2, r3
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005096:	e7e8      	b.n	800506a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80050b0:	4a15      	ldr	r2, [pc, #84]	; (8005108 <_PrintUnsigned+0x128>)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	4413      	add	r3, r2
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	4619      	mov	r1, r3
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7ff ff14 	bl	8004ee8 <_StoreChar>
    Digit /= Base;
 80050c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e3      	bne.n	8005098 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80050d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d011      	beq.n	80050fe <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00e      	beq.n	80050fe <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80050e0:	e006      	b.n	80050f0 <_PrintUnsigned+0x110>
        FieldWidth--;
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	3b01      	subs	r3, #1
 80050e6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80050e8:	2120      	movs	r1, #32
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff fefc 	bl	8004ee8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <_PrintUnsigned+0x11e>
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3f1      	bcc.n	80050e2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80050fe:	bf00      	nop
 8005100:	3728      	adds	r7, #40	; 0x28
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	080067b8 	.word	0x080067b8

0800510c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	bfb8      	it	lt
 8005120:	425b      	neglt	r3, r3
 8005122:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005124:	2301      	movs	r3, #1
 8005126:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005128:	e007      	b.n	800513a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005132:	613b      	str	r3, [r7, #16]
    Width++;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	3301      	adds	r3, #1
 8005138:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	429a      	cmp	r2, r3
 8005140:	daf3      	bge.n	800512a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	429a      	cmp	r2, r3
 8005148:	d901      	bls.n	800514e <_PrintInt+0x42>
    Width = NumDigits;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <_PrintInt+0x5e>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	db04      	blt.n	8005164 <_PrintInt+0x58>
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <_PrintInt+0x5e>
    FieldWidth--;
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	3b01      	subs	r3, #1
 8005168:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <_PrintInt+0x6e>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d016      	beq.n	80051a8 <_PrintInt+0x9c>
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d111      	bne.n	80051a8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00e      	beq.n	80051a8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800518a:	e006      	b.n	800519a <_PrintInt+0x8e>
        FieldWidth--;
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	3b01      	subs	r3, #1
 8005190:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005192:	2120      	movs	r1, #32
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f7ff fea7 	bl	8004ee8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <_PrintInt+0x9c>
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d3f1      	bcc.n	800518c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	da07      	bge.n	80051be <_PrintInt+0xb2>
    v = -v;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	425b      	negs	r3, r3
 80051b2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80051b4:	212d      	movs	r1, #45	; 0x2d
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff fe96 	bl	8004ee8 <_StoreChar>
 80051bc:	e008      	b.n	80051d0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80051c8:	212b      	movs	r1, #43	; 0x2b
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7ff fe8c 	bl	8004ee8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d019      	beq.n	800520e <_PrintInt+0x102>
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d114      	bne.n	800520e <_PrintInt+0x102>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d111      	bne.n	800520e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051f0:	e006      	b.n	8005200 <_PrintInt+0xf4>
        FieldWidth--;
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80051f8:	2130      	movs	r1, #48	; 0x30
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f7ff fe74 	bl	8004ee8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <_PrintInt+0x102>
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	429a      	cmp	r2, r3
 800520c:	d3f1      	bcc.n	80051f2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f7ff fedf 	bl	8004fe0 <_PrintUnsigned>
}
 8005222:	bf00      	nop
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800522c:	b580      	push	{r7, lr}
 800522e:	b098      	sub	sp, #96	; 0x60
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005238:	f3ef 8311 	mrs	r3, BASEPRI
 800523c:	f04f 0120 	mov.w	r1, #32
 8005240:	f381 8811 	msr	BASEPRI, r1
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005246:	48b7      	ldr	r0, [pc, #732]	; (8005524 <_VPrintTarget+0x2f8>)
 8005248:	f7ff fbee 	bl	8004a28 <_PreparePacket>
 800524c:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800524e:	4bb5      	ldr	r3, [pc, #724]	; (8005524 <_VPrintTarget+0x2f8>)
 8005250:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005252:	2300      	movs	r3, #0
 8005254:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	3301      	adds	r3, #1
 800525e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3301      	adds	r3, #1
 8005270:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005272:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 81a8 	beq.w	80055cc <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 800527c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005280:	2b25      	cmp	r3, #37	; 0x25
 8005282:	f040 8195 	bne.w	80055b0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005286:	2300      	movs	r3, #0
 8005288:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800528a:	2301      	movs	r3, #1
 800528c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005296:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800529a:	3b23      	subs	r3, #35	; 0x23
 800529c:	2b0d      	cmp	r3, #13
 800529e:	d83f      	bhi.n	8005320 <_VPrintTarget+0xf4>
 80052a0:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <_VPrintTarget+0x7c>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	08005311 	.word	0x08005311
 80052ac:	08005321 	.word	0x08005321
 80052b0:	08005321 	.word	0x08005321
 80052b4:	08005321 	.word	0x08005321
 80052b8:	08005321 	.word	0x08005321
 80052bc:	08005321 	.word	0x08005321
 80052c0:	08005321 	.word	0x08005321
 80052c4:	08005321 	.word	0x08005321
 80052c8:	08005301 	.word	0x08005301
 80052cc:	08005321 	.word	0x08005321
 80052d0:	080052e1 	.word	0x080052e1
 80052d4:	08005321 	.word	0x08005321
 80052d8:	08005321 	.word	0x08005321
 80052dc:	080052f1 	.word	0x080052f1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80052e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3301      	adds	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e01a      	b.n	8005326 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80052f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f2:	f043 0302 	orr.w	r3, r3, #2
 80052f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3301      	adds	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e012      	b.n	8005326 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005302:	f043 0304 	orr.w	r3, r3, #4
 8005306:	64bb      	str	r3, [r7, #72]	; 0x48
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e00a      	b.n	8005326 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005312:	f043 0308 	orr.w	r3, r3, #8
 8005316:	64bb      	str	r3, [r7, #72]	; 0x48
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3301      	adds	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e002      	b.n	8005326 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005320:	2300      	movs	r3, #0
 8005322:	653b      	str	r3, [r7, #80]	; 0x50
 8005324:	bf00      	nop
        }
      } while (v);
 8005326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1b0      	bne.n	800528e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800532c:	2300      	movs	r3, #0
 800532e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005338:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800533c:	2b2f      	cmp	r3, #47	; 0x2f
 800533e:	d912      	bls.n	8005366 <_VPrintTarget+0x13a>
 8005340:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005344:	2b39      	cmp	r3, #57	; 0x39
 8005346:	d80e      	bhi.n	8005366 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3301      	adds	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800534e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	461a      	mov	r2, r3
 800535a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800535e:	4413      	add	r3, r2
 8005360:	3b30      	subs	r3, #48	; 0x30
 8005362:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005364:	e7e4      	b.n	8005330 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005366:	2300      	movs	r3, #0
 8005368:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005372:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005376:	2b2e      	cmp	r3, #46	; 0x2e
 8005378:	d11d      	bne.n	80053b6 <_VPrintTarget+0x18a>
        sFormat++;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3301      	adds	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800538c:	2b2f      	cmp	r3, #47	; 0x2f
 800538e:	d912      	bls.n	80053b6 <_VPrintTarget+0x18a>
 8005390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005394:	2b39      	cmp	r3, #57	; 0x39
 8005396:	d80e      	bhi.n	80053b6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3301      	adds	r3, #1
 800539c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800539e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	461a      	mov	r2, r3
 80053aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053ae:	4413      	add	r3, r2
 80053b0:	3b30      	subs	r3, #48	; 0x30
 80053b2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80053b4:	e7e4      	b.n	8005380 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80053be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053c2:	2b6c      	cmp	r3, #108	; 0x6c
 80053c4:	d003      	beq.n	80053ce <_VPrintTarget+0x1a2>
 80053c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053ca:	2b68      	cmp	r3, #104	; 0x68
 80053cc:	d107      	bne.n	80053de <_VPrintTarget+0x1b2>
          c = *sFormat;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3301      	adds	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80053dc:	e7ef      	b.n	80053be <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80053de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053e2:	2b25      	cmp	r3, #37	; 0x25
 80053e4:	f000 80d8 	beq.w	8005598 <_VPrintTarget+0x36c>
 80053e8:	2b25      	cmp	r3, #37	; 0x25
 80053ea:	f2c0 80dc 	blt.w	80055a6 <_VPrintTarget+0x37a>
 80053ee:	2b78      	cmp	r3, #120	; 0x78
 80053f0:	f300 80d9 	bgt.w	80055a6 <_VPrintTarget+0x37a>
 80053f4:	2b58      	cmp	r3, #88	; 0x58
 80053f6:	f2c0 80d6 	blt.w	80055a6 <_VPrintTarget+0x37a>
 80053fa:	3b58      	subs	r3, #88	; 0x58
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	f200 80d2 	bhi.w	80055a6 <_VPrintTarget+0x37a>
 8005402:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <_VPrintTarget+0x1dc>)
 8005404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005408:	080054ff 	.word	0x080054ff
 800540c:	080055a7 	.word	0x080055a7
 8005410:	080055a7 	.word	0x080055a7
 8005414:	080055a7 	.word	0x080055a7
 8005418:	080055a7 	.word	0x080055a7
 800541c:	080055a7 	.word	0x080055a7
 8005420:	080055a7 	.word	0x080055a7
 8005424:	080055a7 	.word	0x080055a7
 8005428:	080055a7 	.word	0x080055a7
 800542c:	080055a7 	.word	0x080055a7
 8005430:	080055a7 	.word	0x080055a7
 8005434:	0800548d 	.word	0x0800548d
 8005438:	080054b3 	.word	0x080054b3
 800543c:	080055a7 	.word	0x080055a7
 8005440:	080055a7 	.word	0x080055a7
 8005444:	080055a7 	.word	0x080055a7
 8005448:	080055a7 	.word	0x080055a7
 800544c:	080055a7 	.word	0x080055a7
 8005450:	080055a7 	.word	0x080055a7
 8005454:	080055a7 	.word	0x080055a7
 8005458:	080055a7 	.word	0x080055a7
 800545c:	080055a7 	.word	0x080055a7
 8005460:	080055a7 	.word	0x080055a7
 8005464:	080055a7 	.word	0x080055a7
 8005468:	08005573 	.word	0x08005573
 800546c:	080055a7 	.word	0x080055a7
 8005470:	080055a7 	.word	0x080055a7
 8005474:	08005529 	.word	0x08005529
 8005478:	080055a7 	.word	0x080055a7
 800547c:	080054d9 	.word	0x080054d9
 8005480:	080055a7 	.word	0x080055a7
 8005484:	080055a7 	.word	0x080055a7
 8005488:	080054ff 	.word	0x080054ff
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	1d19      	adds	r1, r3, #4
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6011      	str	r1, [r2, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800549a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800549c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80054a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80054a4:	f107 0310 	add.w	r3, r7, #16
 80054a8:	4611      	mov	r1, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff fd1c 	bl	8004ee8 <_StoreChar>
        break;
 80054b0:	e07a      	b.n	80055a8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	1d19      	adds	r1, r3, #4
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6011      	str	r1, [r2, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80054c0:	f107 0010 	add.w	r0, r7, #16
 80054c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ce:	220a      	movs	r2, #10
 80054d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054d2:	f7ff fe1b 	bl	800510c <_PrintInt>
        break;
 80054d6:	e067      	b.n	80055a8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	1d19      	adds	r1, r3, #4
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6011      	str	r1, [r2, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80054e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054e8:	f107 0010 	add.w	r0, r7, #16
 80054ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f6:	220a      	movs	r2, #10
 80054f8:	f7ff fd72 	bl	8004fe0 <_PrintUnsigned>
        break;
 80054fc:	e054      	b.n	80055a8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	1d19      	adds	r1, r3, #4
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6011      	str	r1, [r2, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800550c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800550e:	f107 0010 	add.w	r0, r7, #16
 8005512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551c:	2210      	movs	r2, #16
 800551e:	f7ff fd5f 	bl	8004fe0 <_PrintUnsigned>
        break;
 8005522:	e041      	b.n	80055a8 <_VPrintTarget+0x37c>
 8005524:	200142bc 	.word	0x200142bc
      case 's':
        s = va_arg(*pParamList, const char*);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	1d19      	adds	r1, r3, #4
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6011      	str	r1, [r2, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <_VPrintTarget+0x314>
          s = "(null)";
 800553c:	4b4a      	ldr	r3, [pc, #296]	; (8005668 <_VPrintTarget+0x43c>)
 800553e:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800554a:	3301      	adds	r3, #1
 800554c:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 800554e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005556:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800555a:	f107 0310 	add.w	r3, r7, #16
 800555e:	4611      	mov	r1, r2
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fcc1 	bl	8004ee8 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	2b7f      	cmp	r3, #127	; 0x7f
 800556a:	d9e9      	bls.n	8005540 <_VPrintTarget+0x314>
        break;
 800556c:	e01c      	b.n	80055a8 <_VPrintTarget+0x37c>
            break;
 800556e:	bf00      	nop
        break;
 8005570:	e01a      	b.n	80055a8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	1d19      	adds	r1, r3, #4
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6011      	str	r1, [r2, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005580:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005582:	f107 0010 	add.w	r0, r7, #16
 8005586:	2300      	movs	r3, #0
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	2308      	movs	r3, #8
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	2308      	movs	r3, #8
 8005590:	2210      	movs	r2, #16
 8005592:	f7ff fd25 	bl	8004fe0 <_PrintUnsigned>
        break;
 8005596:	e007      	b.n	80055a8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005598:	f107 0310 	add.w	r3, r7, #16
 800559c:	2125      	movs	r1, #37	; 0x25
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fca2 	bl	8004ee8 <_StoreChar>
        break;
 80055a4:	e000      	b.n	80055a8 <_VPrintTarget+0x37c>
      default:
        break;
 80055a6:	bf00      	nop
      }
      sFormat++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	e007      	b.n	80055c0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80055b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80055b4:	f107 0310 	add.w	r3, r7, #16
 80055b8:	4611      	mov	r1, r2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff fc94 	bl	8004ee8 <_StoreChar>
    }
  } while (*sFormat);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f47f ae4d 	bne.w	8005264 <_VPrintTarget+0x38>
 80055ca:	e000      	b.n	80055ce <_VPrintTarget+0x3a2>
      break;
 80055cc:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d041      	beq.n	8005658 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80055d4:	6a3a      	ldr	r2, [r7, #32]
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80055e4:	e00b      	b.n	80055fe <_VPrintTarget+0x3d2>
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ec:	1c59      	adds	r1, r3, #1
 80055ee:	63f9      	str	r1, [r7, #60]	; 0x3c
 80055f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fa:	09db      	lsrs	r3, r3, #7
 80055fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80055fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005600:	2b7f      	cmp	r3, #127	; 0x7f
 8005602:	d8f0      	bhi.n	80055e6 <_VPrintTarget+0x3ba>
 8005604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	63fa      	str	r2, [r7, #60]	; 0x3c
 800560a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	701a      	strb	r2, [r3, #0]
 8005610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005612:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	637b      	str	r3, [r7, #52]	; 0x34
 8005618:	2300      	movs	r3, #0
 800561a:	633b      	str	r3, [r7, #48]	; 0x30
 800561c:	e00b      	b.n	8005636 <_VPrintTarget+0x40a>
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	b2da      	uxtb	r2, r3
 8005622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005624:	1c59      	adds	r1, r3, #1
 8005626:	6379      	str	r1, [r7, #52]	; 0x34
 8005628:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	09db      	lsrs	r3, r3, #7
 8005634:	633b      	str	r3, [r7, #48]	; 0x30
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	2b7f      	cmp	r3, #127	; 0x7f
 800563a:	d8f0      	bhi.n	800561e <_VPrintTarget+0x3f2>
 800563c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	637a      	str	r2, [r7, #52]	; 0x34
 8005642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	6979      	ldr	r1, [r7, #20]
 8005650:	221a      	movs	r2, #26
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fad8 	bl	8004c08 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800565e:	bf00      	nop
 8005660:	3758      	adds	r7, #88	; 0x58
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	08006764 	.word	0x08006764

0800566c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800567a:	2300      	movs	r3, #0
 800567c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005680:	4917      	ldr	r1, [pc, #92]	; (80056e0 <SEGGER_SYSVIEW_Init+0x74>)
 8005682:	4818      	ldr	r0, [pc, #96]	; (80056e4 <SEGGER_SYSVIEW_Init+0x78>)
 8005684:	f7ff f8d0 	bl	8004828 <SEGGER_RTT_AllocUpBuffer>
 8005688:	4603      	mov	r3, r0
 800568a:	b2da      	uxtb	r2, r3
 800568c:	4b16      	ldr	r3, [pc, #88]	; (80056e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800568e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005690:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005692:	785a      	ldrb	r2, [r3, #1]
 8005694:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005696:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005698:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800569a:	7e1b      	ldrb	r3, [r3, #24]
 800569c:	4618      	mov	r0, r3
 800569e:	2300      	movs	r3, #0
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	2308      	movs	r3, #8
 80056a4:	4a11      	ldr	r2, [pc, #68]	; (80056ec <SEGGER_SYSVIEW_Init+0x80>)
 80056a6:	490f      	ldr	r1, [pc, #60]	; (80056e4 <SEGGER_SYSVIEW_Init+0x78>)
 80056a8:	f7ff f942 	bl	8004930 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80056ac:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056b2:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <SEGGER_SYSVIEW_Init+0x84>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a0c      	ldr	r2, [pc, #48]	; (80056e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056b8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80056ba:	4a0b      	ldr	r2, [pc, #44]	; (80056e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80056c0:	4a09      	ldr	r2, [pc, #36]	; (80056e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80056c6:	4a08      	ldr	r2, [pc, #32]	; (80056e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80056cc:	4a06      	ldr	r2, [pc, #24]	; (80056e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80056d8:	bf00      	nop
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20013284 	.word	0x20013284
 80056e4:	0800676c 	.word	0x0800676c
 80056e8:	2001428c 	.word	0x2001428c
 80056ec:	20014284 	.word	0x20014284
 80056f0:	e0001004 	.word	0xe0001004

080056f4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80056fc:	4a04      	ldr	r2, [pc, #16]	; (8005710 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6113      	str	r3, [r2, #16]
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	2001428c 	.word	0x2001428c

08005714 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800571c:	f3ef 8311 	mrs	r3, BASEPRI
 8005720:	f04f 0120 	mov.w	r1, #32
 8005724:	f381 8811 	msr	BASEPRI, r1
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	4808      	ldr	r0, [pc, #32]	; (800574c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800572c:	f7ff f97c 	bl	8004a28 <_PreparePacket>
 8005730:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	68b8      	ldr	r0, [r7, #8]
 8005738:	f7ff fa66 	bl	8004c08 <_SendPacket>
  RECORD_END();
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f383 8811 	msr	BASEPRI, r3
}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	200142bc 	.word	0x200142bc

08005750 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800575a:	f3ef 8311 	mrs	r3, BASEPRI
 800575e:	f04f 0120 	mov.w	r1, #32
 8005762:	f381 8811 	msr	BASEPRI, r1
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	4816      	ldr	r0, [pc, #88]	; (80057c4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800576a:	f7ff f95d 	bl	8004a28 <_PreparePacket>
 800576e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	61fb      	str	r3, [r7, #28]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	e00b      	b.n	8005796 <SEGGER_SYSVIEW_RecordU32+0x46>
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	b2da      	uxtb	r2, r3
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	1c59      	adds	r1, r3, #1
 8005786:	61f9      	str	r1, [r7, #28]
 8005788:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	09db      	lsrs	r3, r3, #7
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b7f      	cmp	r3, #127	; 0x7f
 800579a:	d8f0      	bhi.n	800577e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	61fa      	str	r2, [r7, #28]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	68f9      	ldr	r1, [r7, #12]
 80057b0:	6938      	ldr	r0, [r7, #16]
 80057b2:	f7ff fa29 	bl	8004c08 <_SendPacket>
  RECORD_END();
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f383 8811 	msr	BASEPRI, r3
}
 80057bc:	bf00      	nop
 80057be:	3720      	adds	r7, #32
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	200142bc 	.word	0x200142bc

080057c8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08c      	sub	sp, #48	; 0x30
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057d4:	f3ef 8311 	mrs	r3, BASEPRI
 80057d8:	f04f 0120 	mov.w	r1, #32
 80057dc:	f381 8811 	msr	BASEPRI, r1
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	4825      	ldr	r0, [pc, #148]	; (8005878 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80057e4:	f7ff f920 	bl	8004a28 <_PreparePacket>
 80057e8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f6:	e00b      	b.n	8005810 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	1c59      	adds	r1, r3, #1
 8005800:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005802:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	09db      	lsrs	r3, r3, #7
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	2b7f      	cmp	r3, #127	; 0x7f
 8005814:	d8f0      	bhi.n	80057f8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800581c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005824:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	623b      	str	r3, [r7, #32]
 800582e:	e00b      	b.n	8005848 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	b2da      	uxtb	r2, r3
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	1c59      	adds	r1, r3, #1
 8005838:	6279      	str	r1, [r7, #36]	; 0x24
 800583a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	09db      	lsrs	r3, r3, #7
 8005846:	623b      	str	r3, [r7, #32]
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	2b7f      	cmp	r3, #127	; 0x7f
 800584c:	d8f0      	bhi.n	8005830 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	627a      	str	r2, [r7, #36]	; 0x24
 8005854:	6a3a      	ldr	r2, [r7, #32]
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	6979      	ldr	r1, [r7, #20]
 8005862:	69b8      	ldr	r0, [r7, #24]
 8005864:	f7ff f9d0 	bl	8004c08 <_SendPacket>
  RECORD_END();
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f383 8811 	msr	BASEPRI, r3
}
 800586e:	bf00      	nop
 8005870:	3730      	adds	r7, #48	; 0x30
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	200142bc 	.word	0x200142bc

0800587c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b090      	sub	sp, #64	; 0x40
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800588a:	f3ef 8311 	mrs	r3, BASEPRI
 800588e:	f04f 0120 	mov.w	r1, #32
 8005892:	f381 8811 	msr	BASEPRI, r1
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	4840      	ldr	r0, [pc, #256]	; (800599c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800589a:	f7ff f8c5 	bl	8004a28 <_PreparePacket>
 800589e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ac:	e00b      	b.n	80058c6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80058ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b4:	1c59      	adds	r1, r3, #1
 80058b6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80058b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	09db      	lsrs	r3, r3, #7
 80058c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	2b7f      	cmp	r3, #127	; 0x7f
 80058ca:	d8f0      	bhi.n	80058ae <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80058cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	637b      	str	r3, [r7, #52]	; 0x34
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	633b      	str	r3, [r7, #48]	; 0x30
 80058e4:	e00b      	b.n	80058fe <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ec:	1c59      	adds	r1, r3, #1
 80058ee:	6379      	str	r1, [r7, #52]	; 0x34
 80058f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	09db      	lsrs	r3, r3, #7
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	2b7f      	cmp	r3, #127	; 0x7f
 8005902:	d8f0      	bhi.n	80058e6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	637a      	str	r2, [r7, #52]	; 0x34
 800590a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005912:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
 800591c:	e00b      	b.n	8005936 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	b2da      	uxtb	r2, r3
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	1c59      	adds	r1, r3, #1
 8005926:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005928:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	09db      	lsrs	r3, r3, #7
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	2b7f      	cmp	r3, #127	; 0x7f
 800593a:	d8f0      	bhi.n	800591e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
 8005950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005952:	623b      	str	r3, [r7, #32]
 8005954:	e00b      	b.n	800596e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	b2da      	uxtb	r2, r3
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	1c59      	adds	r1, r3, #1
 800595e:	6279      	str	r1, [r7, #36]	; 0x24
 8005960:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	09db      	lsrs	r3, r3, #7
 800596c:	623b      	str	r3, [r7, #32]
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	2b7f      	cmp	r3, #127	; 0x7f
 8005972:	d8f0      	bhi.n	8005956 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	627a      	str	r2, [r7, #36]	; 0x24
 800597a:	6a3a      	ldr	r2, [r7, #32]
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	6979      	ldr	r1, [r7, #20]
 8005988:	69b8      	ldr	r0, [r7, #24]
 800598a:	f7ff f93d 	bl	8004c08 <_SendPacket>
  RECORD_END();
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	f383 8811 	msr	BASEPRI, r3
}
 8005994:	bf00      	nop
 8005996:	3740      	adds	r7, #64	; 0x40
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	200142bc 	.word	0x200142bc

080059a0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08c      	sub	sp, #48	; 0x30
 80059a4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80059a6:	4b59      	ldr	r3, [pc, #356]	; (8005b0c <SEGGER_SYSVIEW_Start+0x16c>)
 80059a8:	2201      	movs	r2, #1
 80059aa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80059ac:	f3ef 8311 	mrs	r3, BASEPRI
 80059b0:	f04f 0120 	mov.w	r1, #32
 80059b4:	f381 8811 	msr	BASEPRI, r1
 80059b8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80059ba:	4b54      	ldr	r3, [pc, #336]	; (8005b0c <SEGGER_SYSVIEW_Start+0x16c>)
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	220a      	movs	r2, #10
 80059c0:	4953      	ldr	r1, [pc, #332]	; (8005b10 <SEGGER_SYSVIEW_Start+0x170>)
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fa fc0c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80059ce:	f7fe fbfd 	bl	80041cc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80059d2:	200a      	movs	r0, #10
 80059d4:	f7ff fe9e 	bl	8005714 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059d8:	f3ef 8311 	mrs	r3, BASEPRI
 80059dc:	f04f 0120 	mov.w	r1, #32
 80059e0:	f381 8811 	msr	BASEPRI, r1
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	484b      	ldr	r0, [pc, #300]	; (8005b14 <SEGGER_SYSVIEW_Start+0x174>)
 80059e8:	f7ff f81e 	bl	8004a28 <_PreparePacket>
 80059ec:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f6:	4b45      	ldr	r3, [pc, #276]	; (8005b0c <SEGGER_SYSVIEW_Start+0x16c>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80059fc:	e00b      	b.n	8005a16 <SEGGER_SYSVIEW_Start+0x76>
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	1c59      	adds	r1, r3, #1
 8005a06:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	09db      	lsrs	r3, r3, #7
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	2b7f      	cmp	r3, #127	; 0x7f
 8005a1a:	d8f0      	bhi.n	80059fe <SEGGER_SYSVIEW_Start+0x5e>
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a30:	4b36      	ldr	r3, [pc, #216]	; (8005b0c <SEGGER_SYSVIEW_Start+0x16c>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	623b      	str	r3, [r7, #32]
 8005a36:	e00b      	b.n	8005a50 <SEGGER_SYSVIEW_Start+0xb0>
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	1c59      	adds	r1, r3, #1
 8005a40:	6279      	str	r1, [r7, #36]	; 0x24
 8005a42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	09db      	lsrs	r3, r3, #7
 8005a4e:	623b      	str	r3, [r7, #32]
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	2b7f      	cmp	r3, #127	; 0x7f
 8005a54:	d8f0      	bhi.n	8005a38 <SEGGER_SYSVIEW_Start+0x98>
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	627a      	str	r2, [r7, #36]	; 0x24
 8005a5c:	6a3a      	ldr	r2, [r7, #32]
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	4b28      	ldr	r3, [pc, #160]	; (8005b0c <SEGGER_SYSVIEW_Start+0x16c>)
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	e00b      	b.n	8005a8a <SEGGER_SYSVIEW_Start+0xea>
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	1c59      	adds	r1, r3, #1
 8005a7a:	61f9      	str	r1, [r7, #28]
 8005a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	09db      	lsrs	r3, r3, #7
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a8e:	d8f0      	bhi.n	8005a72 <SEGGER_SYSVIEW_Start+0xd2>
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	61fa      	str	r2, [r7, #28]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	e00b      	b.n	8005ac2 <SEGGER_SYSVIEW_Start+0x122>
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	1c59      	adds	r1, r3, #1
 8005ab2:	6179      	str	r1, [r7, #20]
 8005ab4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	09db      	lsrs	r3, r3, #7
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac6:	d8f0      	bhi.n	8005aaa <SEGGER_SYSVIEW_Start+0x10a>
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	617a      	str	r2, [r7, #20]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ad8:	2218      	movs	r2, #24
 8005ada:	6839      	ldr	r1, [r7, #0]
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff f893 	bl	8004c08 <_SendPacket>
      RECORD_END();
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ae8:	4b08      	ldr	r3, [pc, #32]	; (8005b0c <SEGGER_SYSVIEW_Start+0x16c>)
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005af0:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <SEGGER_SYSVIEW_Start+0x16c>)
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005af6:	f000 f9eb 	bl	8005ed0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005afa:	f000 f9b1 	bl	8005e60 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005afe:	f000 fc2d 	bl	800635c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005b02:	bf00      	nop
 8005b04:	3730      	adds	r7, #48	; 0x30
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	2001428c 	.word	0x2001428c
 8005b10:	080067ac 	.word	0x080067ac
 8005b14:	200142bc 	.word	0x200142bc

08005b18 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b22:	f04f 0120 	mov.w	r1, #32
 8005b26:	f381 8811 	msr	BASEPRI, r1
 8005b2a:	607b      	str	r3, [r7, #4]
 8005b2c:	480b      	ldr	r0, [pc, #44]	; (8005b5c <SEGGER_SYSVIEW_Stop+0x44>)
 8005b2e:	f7fe ff7b 	bl	8004a28 <_PreparePacket>
 8005b32:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <SEGGER_SYSVIEW_Stop+0x48>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005b3c:	220b      	movs	r2, #11
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6838      	ldr	r0, [r7, #0]
 8005b42:	f7ff f861 	bl	8004c08 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005b46:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <SEGGER_SYSVIEW_Stop+0x48>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f383 8811 	msr	BASEPRI, r3
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	200142bc 	.word	0x200142bc
 8005b60:	2001428c 	.word	0x2001428c

08005b64 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08c      	sub	sp, #48	; 0x30
 8005b68:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b6e:	f04f 0120 	mov.w	r1, #32
 8005b72:	f381 8811 	msr	BASEPRI, r1
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	4845      	ldr	r0, [pc, #276]	; (8005c90 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005b7a:	f7fe ff55 	bl	8004a28 <_PreparePacket>
 8005b7e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b88:	4b42      	ldr	r3, [pc, #264]	; (8005c94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b8e:	e00b      	b.n	8005ba8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	1c59      	adds	r1, r3, #1
 8005b98:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	09db      	lsrs	r3, r3, #7
 8005ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	2b7f      	cmp	r3, #127	; 0x7f
 8005bac:	d8f0      	bhi.n	8005b90 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc2:	4b34      	ldr	r3, [pc, #208]	; (8005c94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	e00b      	b.n	8005be2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	1c59      	adds	r1, r3, #1
 8005bd2:	6279      	str	r1, [r7, #36]	; 0x24
 8005bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	09db      	lsrs	r3, r3, #7
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	2b7f      	cmp	r3, #127	; 0x7f
 8005be6:	d8f0      	bhi.n	8005bca <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	627a      	str	r2, [r7, #36]	; 0x24
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	4b25      	ldr	r3, [pc, #148]	; (8005c94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e00b      	b.n	8005c1c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	1c59      	adds	r1, r3, #1
 8005c0c:	61f9      	str	r1, [r7, #28]
 8005c0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	09db      	lsrs	r3, r3, #7
 8005c1a:	61bb      	str	r3, [r7, #24]
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c20:	d8f0      	bhi.n	8005c04 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	61fa      	str	r2, [r7, #28]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	2300      	movs	r3, #0
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	e00b      	b.n	8005c54 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	1c59      	adds	r1, r3, #1
 8005c44:	6179      	str	r1, [r7, #20]
 8005c46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	09db      	lsrs	r3, r3, #7
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	2b7f      	cmp	r3, #127	; 0x7f
 8005c58:	d8f0      	bhi.n	8005c3c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	617a      	str	r2, [r7, #20]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c6a:	2218      	movs	r2, #24
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	68b8      	ldr	r0, [r7, #8]
 8005c70:	f7fe ffca 	bl	8004c08 <_SendPacket>
  RECORD_END();
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c7a:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005c82:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	4798      	blx	r3
  }
}
 8005c88:	bf00      	nop
 8005c8a:	3730      	adds	r7, #48	; 0x30
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	200142bc 	.word	0x200142bc
 8005c94:	2001428c 	.word	0x2001428c

08005c98 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b092      	sub	sp, #72	; 0x48
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ca0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ca4:	f04f 0120 	mov.w	r1, #32
 8005ca8:	f381 8811 	msr	BASEPRI, r1
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	486a      	ldr	r0, [pc, #424]	; (8005e58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005cb0:	f7fe feba 	bl	8004a28 <_PreparePacket>
 8005cb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4b66      	ldr	r3, [pc, #408]	; (8005e5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	643b      	str	r3, [r7, #64]	; 0x40
 8005cca:	e00b      	b.n	8005ce4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd2:	1c59      	adds	r1, r3, #1
 8005cd4:	6479      	str	r1, [r7, #68]	; 0x44
 8005cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce0:	09db      	lsrs	r3, r3, #7
 8005ce2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce8:	d8f0      	bhi.n	8005ccc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	647a      	str	r2, [r7, #68]	; 0x44
 8005cf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d04:	e00b      	b.n	8005d1e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0c:	1c59      	adds	r1, r3, #1
 8005d0e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005d10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	09db      	lsrs	r3, r3, #7
 8005d1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	2b7f      	cmp	r3, #127	; 0x7f
 8005d22:	d8f0      	bhi.n	8005d06 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d32:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f7fe fe43 	bl	80049c8 <_EncodeStr>
 8005d42:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005d44:	2209      	movs	r2, #9
 8005d46:	68f9      	ldr	r1, [r7, #12]
 8005d48:	6938      	ldr	r0, [r7, #16]
 8005d4a:	f7fe ff5d 	bl	8004c08 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b40      	ldr	r3, [pc, #256]	; (8005e5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	633b      	str	r3, [r7, #48]	; 0x30
 8005d62:	e00b      	b.n	8005d7c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6a:	1c59      	adds	r1, r3, #1
 8005d6c:	6379      	str	r1, [r7, #52]	; 0x34
 8005d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	09db      	lsrs	r3, r3, #7
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d80:	d8f0      	bhi.n	8005d64 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	637a      	str	r2, [r7, #52]	; 0x34
 8005d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d9c:	e00b      	b.n	8005db6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	1c59      	adds	r1, r3, #1
 8005da6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005da8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	09db      	lsrs	r3, r3, #7
 8005db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	2b7f      	cmp	r3, #127	; 0x7f
 8005dba:	d8f0      	bhi.n	8005d9e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	701a      	strb	r2, [r3, #0]
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	623b      	str	r3, [r7, #32]
 8005dd6:	e00b      	b.n	8005df0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	1c59      	adds	r1, r3, #1
 8005de0:	6279      	str	r1, [r7, #36]	; 0x24
 8005de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	09db      	lsrs	r3, r3, #7
 8005dee:	623b      	str	r3, [r7, #32]
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	2b7f      	cmp	r3, #127	; 0x7f
 8005df4:	d8f0      	bhi.n	8005dd8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	627a      	str	r2, [r7, #36]	; 0x24
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	e00b      	b.n	8005e28 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	1c59      	adds	r1, r3, #1
 8005e18:	61f9      	str	r1, [r7, #28]
 8005e1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	09db      	lsrs	r3, r3, #7
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e2c:	d8f0      	bhi.n	8005e10 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	61fa      	str	r2, [r7, #28]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005e3e:	2215      	movs	r2, #21
 8005e40:	68f9      	ldr	r1, [r7, #12]
 8005e42:	6938      	ldr	r0, [r7, #16]
 8005e44:	f7fe fee0 	bl	8004c08 <_SendPacket>
  RECORD_END();
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f383 8811 	msr	BASEPRI, r3
}
 8005e4e:	bf00      	nop
 8005e50:	3748      	adds	r7, #72	; 0x48
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	200142bc 	.word	0x200142bc
 8005e5c:	2001428c 	.word	0x2001428c

08005e60 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005e64:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005e76:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	4798      	blx	r3
  }
}
 8005e7e:	bf00      	nop
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	2001428c 	.word	0x2001428c

08005e88 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e90:	f3ef 8311 	mrs	r3, BASEPRI
 8005e94:	f04f 0120 	mov.w	r1, #32
 8005e98:	f381 8811 	msr	BASEPRI, r1
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	480b      	ldr	r0, [pc, #44]	; (8005ecc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005ea0:	f7fe fdc2 	bl	8004a28 <_PreparePacket>
 8005ea4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ea6:	2280      	movs	r2, #128	; 0x80
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	6938      	ldr	r0, [r7, #16]
 8005eac:	f7fe fd8c 	bl	80049c8 <_EncodeStr>
 8005eb0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005eb2:	220e      	movs	r2, #14
 8005eb4:	68f9      	ldr	r1, [r7, #12]
 8005eb6:	6938      	ldr	r0, [r7, #16]
 8005eb8:	f7fe fea6 	bl	8004c08 <_SendPacket>
  RECORD_END();
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f383 8811 	msr	BASEPRI, r3
}
 8005ec2:	bf00      	nop
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	200142bc 	.word	0x200142bc

08005ed0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005ed6:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01a      	beq.n	8005f14 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005ede:	4b13      	ldr	r3, [pc, #76]	; (8005f2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d015      	beq.n	8005f14 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005ee8:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4798      	blx	r3
 8005ef0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ef4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005ef6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	000a      	movs	r2, r1
 8005f04:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005f06:	4613      	mov	r3, r2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	200d      	movs	r0, #13
 8005f0e:	f7ff fc5b 	bl	80057c8 <SEGGER_SYSVIEW_RecordU32x2>
 8005f12:	e006      	b.n	8005f22 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005f14:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	200c      	movs	r0, #12
 8005f1c:	f7ff fc18 	bl	8005750 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd90      	pop	{r4, r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	2001428c 	.word	0x2001428c
 8005f30:	e0001004 	.word	0xe0001004

08005f34 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f3e:	f04f 0120 	mov.w	r1, #32
 8005f42:	f381 8811 	msr	BASEPRI, r1
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	4819      	ldr	r0, [pc, #100]	; (8005fb0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005f4a:	f7fe fd6d 	bl	8004a28 <_PreparePacket>
 8005f4e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005f54:	4b17      	ldr	r3, [pc, #92]	; (8005fb4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	e00b      	b.n	8005f80 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	1c59      	adds	r1, r3, #1
 8005f70:	6179      	str	r1, [r7, #20]
 8005f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	09db      	lsrs	r3, r3, #7
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	2b7f      	cmp	r3, #127	; 0x7f
 8005f84:	d8f0      	bhi.n	8005f68 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	617a      	str	r2, [r7, #20]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005f96:	2202      	movs	r2, #2
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	68b8      	ldr	r0, [r7, #8]
 8005f9c:	f7fe fe34 	bl	8004c08 <_SendPacket>
  RECORD_END();
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f383 8811 	msr	BASEPRI, r3
}
 8005fa6:	bf00      	nop
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	200142bc 	.word	0x200142bc
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc2:	f04f 0120 	mov.w	r1, #32
 8005fc6:	f381 8811 	msr	BASEPRI, r1
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	4807      	ldr	r0, [pc, #28]	; (8005fec <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005fce:	f7fe fd2b 	bl	8004a28 <_PreparePacket>
 8005fd2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6838      	ldr	r0, [r7, #0]
 8005fda:	f7fe fe15 	bl	8004c08 <_SendPacket>
  RECORD_END();
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f383 8811 	msr	BASEPRI, r3
}
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	200142bc 	.word	0x200142bc

08005ff0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8005ffa:	f04f 0120 	mov.w	r1, #32
 8005ffe:	f381 8811 	msr	BASEPRI, r1
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	4807      	ldr	r0, [pc, #28]	; (8006024 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006006:	f7fe fd0f 	bl	8004a28 <_PreparePacket>
 800600a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800600c:	2212      	movs	r2, #18
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6838      	ldr	r0, [r7, #0]
 8006012:	f7fe fdf9 	bl	8004c08 <_SendPacket>
  RECORD_END();
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f383 8811 	msr	BASEPRI, r3
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	200142bc 	.word	0x200142bc

08006028 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800602e:	f3ef 8311 	mrs	r3, BASEPRI
 8006032:	f04f 0120 	mov.w	r1, #32
 8006036:	f381 8811 	msr	BASEPRI, r1
 800603a:	607b      	str	r3, [r7, #4]
 800603c:	4807      	ldr	r0, [pc, #28]	; (800605c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800603e:	f7fe fcf3 	bl	8004a28 <_PreparePacket>
 8006042:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006044:	2211      	movs	r2, #17
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6838      	ldr	r0, [r7, #0]
 800604a:	f7fe fddd 	bl	8004c08 <_SendPacket>
  RECORD_END();
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f383 8811 	msr	BASEPRI, r3
}
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	200142bc 	.word	0x200142bc

08006060 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006060:	b580      	push	{r7, lr}
 8006062:	b088      	sub	sp, #32
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006068:	f3ef 8311 	mrs	r3, BASEPRI
 800606c:	f04f 0120 	mov.w	r1, #32
 8006070:	f381 8811 	msr	BASEPRI, r1
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	4819      	ldr	r0, [pc, #100]	; (80060dc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006078:	f7fe fcd6 	bl	8004a28 <_PreparePacket>
 800607c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006082:	4b17      	ldr	r3, [pc, #92]	; (80060e0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	e00b      	b.n	80060ae <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	b2da      	uxtb	r2, r3
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	1c59      	adds	r1, r3, #1
 800609e:	61f9      	str	r1, [r7, #28]
 80060a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	09db      	lsrs	r3, r3, #7
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	2b7f      	cmp	r3, #127	; 0x7f
 80060b2:	d8f0      	bhi.n	8006096 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	61fa      	str	r2, [r7, #28]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80060c4:	2208      	movs	r2, #8
 80060c6:	68f9      	ldr	r1, [r7, #12]
 80060c8:	6938      	ldr	r0, [r7, #16]
 80060ca:	f7fe fd9d 	bl	8004c08 <_SendPacket>
  RECORD_END();
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f383 8811 	msr	BASEPRI, r3
}
 80060d4:	bf00      	nop
 80060d6:	3720      	adds	r7, #32
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	200142bc 	.word	0x200142bc
 80060e0:	2001428c 	.word	0x2001428c

080060e4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060ec:	f3ef 8311 	mrs	r3, BASEPRI
 80060f0:	f04f 0120 	mov.w	r1, #32
 80060f4:	f381 8811 	msr	BASEPRI, r1
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	4819      	ldr	r0, [pc, #100]	; (8006160 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80060fc:	f7fe fc94 	bl	8004a28 <_PreparePacket>
 8006100:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006106:	4b17      	ldr	r3, [pc, #92]	; (8006164 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	61bb      	str	r3, [r7, #24]
 8006118:	e00b      	b.n	8006132 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	b2da      	uxtb	r2, r3
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	1c59      	adds	r1, r3, #1
 8006122:	61f9      	str	r1, [r7, #28]
 8006124:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	09db      	lsrs	r3, r3, #7
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	2b7f      	cmp	r3, #127	; 0x7f
 8006136:	d8f0      	bhi.n	800611a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	61fa      	str	r2, [r7, #28]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006148:	2204      	movs	r2, #4
 800614a:	68f9      	ldr	r1, [r7, #12]
 800614c:	6938      	ldr	r0, [r7, #16]
 800614e:	f7fe fd5b 	bl	8004c08 <_SendPacket>
  RECORD_END();
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f383 8811 	msr	BASEPRI, r3
}
 8006158:	bf00      	nop
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	200142bc 	.word	0x200142bc
 8006164:	2001428c 	.word	0x2001428c

08006168 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006170:	f3ef 8311 	mrs	r3, BASEPRI
 8006174:	f04f 0120 	mov.w	r1, #32
 8006178:	f381 8811 	msr	BASEPRI, r1
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	4819      	ldr	r0, [pc, #100]	; (80061e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006180:	f7fe fc52 	bl	8004a28 <_PreparePacket>
 8006184:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800618a:	4b17      	ldr	r3, [pc, #92]	; (80061e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	e00b      	b.n	80061b6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	1c59      	adds	r1, r3, #1
 80061a6:	61f9      	str	r1, [r7, #28]
 80061a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	09db      	lsrs	r3, r3, #7
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	2b7f      	cmp	r3, #127	; 0x7f
 80061ba:	d8f0      	bhi.n	800619e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	61fa      	str	r2, [r7, #28]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80061cc:	2206      	movs	r2, #6
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	6938      	ldr	r0, [r7, #16]
 80061d2:	f7fe fd19 	bl	8004c08 <_SendPacket>
  RECORD_END();
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f383 8811 	msr	BASEPRI, r3
}
 80061dc:	bf00      	nop
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	200142bc 	.word	0x200142bc
 80061e8:	2001428c 	.word	0x2001428c

080061ec <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80061f4:	4b04      	ldr	r3, [pc, #16]	; (8006208 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	1ad3      	subs	r3, r2, r3
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	2001428c 	.word	0x2001428c

0800620c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800620c:	b580      	push	{r7, lr}
 800620e:	b08c      	sub	sp, #48	; 0x30
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006216:	4b40      	ldr	r3, [pc, #256]	; (8006318 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d077      	beq.n	800630e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800621e:	4b3e      	ldr	r3, [pc, #248]	; (8006318 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006224:	2300      	movs	r3, #0
 8006226:	62bb      	str	r3, [r7, #40]	; 0x28
 8006228:	e008      	b.n	800623c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d007      	beq.n	8006246 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	3301      	adds	r3, #1
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006240:	429a      	cmp	r2, r3
 8006242:	d3f2      	bcc.n	800622a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006244:	e000      	b.n	8006248 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006246:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d055      	beq.n	80062fa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800624e:	f3ef 8311 	mrs	r3, BASEPRI
 8006252:	f04f 0120 	mov.w	r1, #32
 8006256:	f381 8811 	msr	BASEPRI, r1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	482f      	ldr	r0, [pc, #188]	; (800631c <SEGGER_SYSVIEW_SendModule+0x110>)
 800625e:	f7fe fbe3 	bl	8004a28 <_PreparePacket>
 8006262:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	623b      	str	r3, [r7, #32]
 8006270:	e00b      	b.n	800628a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	b2da      	uxtb	r2, r3
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	1c59      	adds	r1, r3, #1
 800627a:	6279      	str	r1, [r7, #36]	; 0x24
 800627c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	09db      	lsrs	r3, r3, #7
 8006288:	623b      	str	r3, [r7, #32]
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	2b7f      	cmp	r3, #127	; 0x7f
 800628e:	d8f0      	bhi.n	8006272 <SEGGER_SYSVIEW_SendModule+0x66>
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	627a      	str	r2, [r7, #36]	; 0x24
 8006296:	6a3a      	ldr	r2, [r7, #32]
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	61bb      	str	r3, [r7, #24]
 80062aa:	e00b      	b.n	80062c4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	61f9      	str	r1, [r7, #28]
 80062b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	09db      	lsrs	r3, r3, #7
 80062c2:	61bb      	str	r3, [r7, #24]
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	2b7f      	cmp	r3, #127	; 0x7f
 80062c8:	d8f0      	bhi.n	80062ac <SEGGER_SYSVIEW_SendModule+0xa0>
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	61fa      	str	r2, [r7, #28]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2280      	movs	r2, #128	; 0x80
 80062e0:	4619      	mov	r1, r3
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f7fe fb70 	bl	80049c8 <_EncodeStr>
 80062e8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80062ea:	2216      	movs	r2, #22
 80062ec:	68f9      	ldr	r1, [r7, #12]
 80062ee:	6938      	ldr	r0, [r7, #16]
 80062f0:	f7fe fc8a 	bl	8004c08 <_SendPacket>
      RECORD_END();
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d006      	beq.n	800630e <SEGGER_SYSVIEW_SendModule+0x102>
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	4798      	blx	r3
    }
  }
}
 800630e:	bf00      	nop
 8006310:	3730      	adds	r7, #48	; 0x30
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200142b4 	.word	0x200142b4
 800631c:	200142bc 	.word	0x200142bc

08006320 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006326:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00f      	beq.n	800634e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800632e:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f2      	bne.n	8006334 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	200142b4 	.word	0x200142b4

0800635c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006362:	f3ef 8311 	mrs	r3, BASEPRI
 8006366:	f04f 0120 	mov.w	r1, #32
 800636a:	f381 8811 	msr	BASEPRI, r1
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	4817      	ldr	r0, [pc, #92]	; (80063d0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006372:	f7fe fb59 	bl	8004a28 <_PreparePacket>
 8006376:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	e00b      	b.n	80063a0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	b2da      	uxtb	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	1c59      	adds	r1, r3, #1
 8006390:	6179      	str	r1, [r7, #20]
 8006392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	09db      	lsrs	r3, r3, #7
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b7f      	cmp	r3, #127	; 0x7f
 80063a4:	d8f0      	bhi.n	8006388 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	617a      	str	r2, [r7, #20]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80063b6:	221b      	movs	r2, #27
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	68b8      	ldr	r0, [r7, #8]
 80063bc:	f7fe fc24 	bl	8004c08 <_SendPacket>
  RECORD_END();
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f383 8811 	msr	BASEPRI, r3
}
 80063c6:	bf00      	nop
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	200142bc 	.word	0x200142bc
 80063d4:	200142b8 	.word	0x200142b8

080063d8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80063d8:	b40f      	push	{r0, r1, r2, r3}
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80063e0:	f107 0314 	add.w	r3, r7, #20
 80063e4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80063e6:	1d3b      	adds	r3, r7, #4
 80063e8:	461a      	mov	r2, r3
 80063ea:	2100      	movs	r1, #0
 80063ec:	6938      	ldr	r0, [r7, #16]
 80063ee:	f7fe ff1d 	bl	800522c <_VPrintTarget>
  va_end(ParamList);
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063fc:	b004      	add	sp, #16
 80063fe:	4770      	bx	lr

08006400 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	; 0x28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006408:	f3ef 8311 	mrs	r3, BASEPRI
 800640c:	f04f 0120 	mov.w	r1, #32
 8006410:	f381 8811 	msr	BASEPRI, r1
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	4827      	ldr	r0, [pc, #156]	; (80064b4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006418:	f7fe fb06 	bl	8004a28 <_PreparePacket>
 800641c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800641e:	2280      	movs	r2, #128	; 0x80
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	6938      	ldr	r0, [r7, #16]
 8006424:	f7fe fad0 	bl	80049c8 <_EncodeStr>
 8006428:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
 800642e:	2301      	movs	r3, #1
 8006430:	623b      	str	r3, [r7, #32]
 8006432:	e00b      	b.n	800644c <SEGGER_SYSVIEW_Warn+0x4c>
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	1c59      	adds	r1, r3, #1
 800643c:	6279      	str	r1, [r7, #36]	; 0x24
 800643e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	09db      	lsrs	r3, r3, #7
 800644a:	623b      	str	r3, [r7, #32]
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	2b7f      	cmp	r3, #127	; 0x7f
 8006450:	d8f0      	bhi.n	8006434 <SEGGER_SYSVIEW_Warn+0x34>
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	627a      	str	r2, [r7, #36]	; 0x24
 8006458:	6a3a      	ldr	r2, [r7, #32]
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	61fb      	str	r3, [r7, #28]
 8006466:	2300      	movs	r3, #0
 8006468:	61bb      	str	r3, [r7, #24]
 800646a:	e00b      	b.n	8006484 <SEGGER_SYSVIEW_Warn+0x84>
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	b2da      	uxtb	r2, r3
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	1c59      	adds	r1, r3, #1
 8006474:	61f9      	str	r1, [r7, #28]
 8006476:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	09db      	lsrs	r3, r3, #7
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b7f      	cmp	r3, #127	; 0x7f
 8006488:	d8f0      	bhi.n	800646c <SEGGER_SYSVIEW_Warn+0x6c>
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	61fa      	str	r2, [r7, #28]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800649a:	221a      	movs	r2, #26
 800649c:	68f9      	ldr	r1, [r7, #12]
 800649e:	6938      	ldr	r0, [r7, #16]
 80064a0:	f7fe fbb2 	bl	8004c08 <_SendPacket>
  RECORD_END();
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f383 8811 	msr	BASEPRI, r3
}
 80064aa:	bf00      	nop
 80064ac:	3728      	adds	r7, #40	; 0x28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200142bc 	.word	0x200142bc

080064b8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80064bc:	4b13      	ldr	r3, [pc, #76]	; (800650c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80064be:	7e1b      	ldrb	r3, [r3, #24]
 80064c0:	4619      	mov	r1, r3
 80064c2:	4a13      	ldr	r2, [pc, #76]	; (8006510 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80064c4:	460b      	mov	r3, r1
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	440b      	add	r3, r1
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	4413      	add	r3, r2
 80064ce:	336c      	adds	r3, #108	; 0x6c
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4b0e      	ldr	r3, [pc, #56]	; (800650c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80064d4:	7e1b      	ldrb	r3, [r3, #24]
 80064d6:	4618      	mov	r0, r3
 80064d8:	490d      	ldr	r1, [pc, #52]	; (8006510 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80064da:	4603      	mov	r3, r0
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	4403      	add	r3, r0
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	440b      	add	r3, r1
 80064e4:	3370      	adds	r3, #112	; 0x70
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d00b      	beq.n	8006504 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80064ec:	4b07      	ldr	r3, [pc, #28]	; (800650c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80064ee:	789b      	ldrb	r3, [r3, #2]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80064f4:	4b05      	ldr	r3, [pc, #20]	; (800650c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80064fa:	f7fe faa1 	bl	8004a40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80064fe:	4b03      	ldr	r3, [pc, #12]	; (800650c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006500:	2200      	movs	r2, #0
 8006502:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006504:	4b01      	ldr	r3, [pc, #4]	; (800650c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006506:	781b      	ldrb	r3, [r3, #0]
}
 8006508:	4618      	mov	r0, r3
 800650a:	bd80      	pop	{r7, pc}
 800650c:	2001428c 	.word	0x2001428c
 8006510:	20014400 	.word	0x20014400

08006514 <__libc_init_array>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	4d0d      	ldr	r5, [pc, #52]	; (800654c <__libc_init_array+0x38>)
 8006518:	4c0d      	ldr	r4, [pc, #52]	; (8006550 <__libc_init_array+0x3c>)
 800651a:	1b64      	subs	r4, r4, r5
 800651c:	10a4      	asrs	r4, r4, #2
 800651e:	2600      	movs	r6, #0
 8006520:	42a6      	cmp	r6, r4
 8006522:	d109      	bne.n	8006538 <__libc_init_array+0x24>
 8006524:	4d0b      	ldr	r5, [pc, #44]	; (8006554 <__libc_init_array+0x40>)
 8006526:	4c0c      	ldr	r4, [pc, #48]	; (8006558 <__libc_init_array+0x44>)
 8006528:	f000 f83c 	bl	80065a4 <_init>
 800652c:	1b64      	subs	r4, r4, r5
 800652e:	10a4      	asrs	r4, r4, #2
 8006530:	2600      	movs	r6, #0
 8006532:	42a6      	cmp	r6, r4
 8006534:	d105      	bne.n	8006542 <__libc_init_array+0x2e>
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	f855 3b04 	ldr.w	r3, [r5], #4
 800653c:	4798      	blx	r3
 800653e:	3601      	adds	r6, #1
 8006540:	e7ee      	b.n	8006520 <__libc_init_array+0xc>
 8006542:	f855 3b04 	ldr.w	r3, [r5], #4
 8006546:	4798      	blx	r3
 8006548:	3601      	adds	r6, #1
 800654a:	e7f2      	b.n	8006532 <__libc_init_array+0x1e>
 800654c:	080067d0 	.word	0x080067d0
 8006550:	080067d0 	.word	0x080067d0
 8006554:	080067d0 	.word	0x080067d0
 8006558:	080067d4 	.word	0x080067d4

0800655c <memcmp>:
 800655c:	b530      	push	{r4, r5, lr}
 800655e:	3901      	subs	r1, #1
 8006560:	2400      	movs	r4, #0
 8006562:	42a2      	cmp	r2, r4
 8006564:	d101      	bne.n	800656a <memcmp+0xe>
 8006566:	2000      	movs	r0, #0
 8006568:	e005      	b.n	8006576 <memcmp+0x1a>
 800656a:	5d03      	ldrb	r3, [r0, r4]
 800656c:	3401      	adds	r4, #1
 800656e:	5d0d      	ldrb	r5, [r1, r4]
 8006570:	42ab      	cmp	r3, r5
 8006572:	d0f6      	beq.n	8006562 <memcmp+0x6>
 8006574:	1b58      	subs	r0, r3, r5
 8006576:	bd30      	pop	{r4, r5, pc}

08006578 <memcpy>:
 8006578:	440a      	add	r2, r1
 800657a:	4291      	cmp	r1, r2
 800657c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006580:	d100      	bne.n	8006584 <memcpy+0xc>
 8006582:	4770      	bx	lr
 8006584:	b510      	push	{r4, lr}
 8006586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800658a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800658e:	4291      	cmp	r1, r2
 8006590:	d1f9      	bne.n	8006586 <memcpy+0xe>
 8006592:	bd10      	pop	{r4, pc}

08006594 <memset>:
 8006594:	4402      	add	r2, r0
 8006596:	4603      	mov	r3, r0
 8006598:	4293      	cmp	r3, r2
 800659a:	d100      	bne.n	800659e <memset+0xa>
 800659c:	4770      	bx	lr
 800659e:	f803 1b01 	strb.w	r1, [r3], #1
 80065a2:	e7f9      	b.n	8006598 <memset+0x4>

080065a4 <_init>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	bf00      	nop
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr

080065b0 <_fini>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	bf00      	nop
 80065b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b6:	bc08      	pop	{r3}
 80065b8:	469e      	mov	lr, r3
 80065ba:	4770      	bx	lr
