
01_tasks_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800663c  0800663c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006644  08006644  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006644  08006644  00016644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006648  08006648  00016648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800664c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001442c  20000080  080066cc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144ac  080066cc  000244ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172e6  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8a  00000000  00000000  00037396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003a220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  0003b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d94  00000000  00000000  0003c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f9f  00000000  00000000  0005516c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a63d  00000000  00000000  0006910b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103748  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce8  00000000  00000000  0010379c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800645c 	.word	0x0800645c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800645c 	.word	0x0800645c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200143f4 	.word	0x200143f4
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800061e:	f000 fb4f 	bl	8000cc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000622:	f000 f855 	bl	80006d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000626:	f000 f8bb 	bl	80007a0 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	//Enable the CYCCNT counter.
	DWT_CTRL |= (1 << 0);
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <main+0x98>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <main+0x98>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6013      	str	r3, [r2, #0]



	SEGGER_SYSVIEW_Conf();
 8000636:	f002 ff5b 	bl	80034f0 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800063a:	f004 fcdb 	bl	8004ff4 <SEGGER_SYSVIEW_Start>


	SEGGER_UART_init(500000);
 800063e:	481d      	ldr	r0, [pc, #116]	; (80006b4 <main+0x9c>)
 8000640:	f003 f924 	bl	800388c <SEGGER_UART_init>


	status = xTaskCreate(task1_handler, "Task-1", 200,
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2302      	movs	r3, #2
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <main+0xa0>)
 8000650:	22c8      	movs	r2, #200	; 0xc8
 8000652:	491a      	ldr	r1, [pc, #104]	; (80006bc <main+0xa4>)
 8000654:	481a      	ldr	r0, [pc, #104]	; (80006c0 <main+0xa8>)
 8000656:	f001 fd5e 	bl	8002116 <xTaskCreate>
 800065a:	6178      	str	r0, [r7, #20]
			"Hello world from Task-1 and have a nice day", 2, &task1_handle);

	configASSERT(status == pdPASS);
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d00a      	beq.n	8000678 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000666:	f383 8811 	msr	BASEPRI, r3
 800066a:	f3bf 8f6f 	isb	sy
 800066e:	f3bf 8f4f 	dsb	sy
 8000672:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000674:	bf00      	nop
 8000676:	e7fe      	b.n	8000676 <main+0x5e>

	status = xTaskCreate(task2_handler, "Task-2", 200,
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	2302      	movs	r3, #2
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <main+0xac>)
 8000682:	22c8      	movs	r2, #200	; 0xc8
 8000684:	4910      	ldr	r1, [pc, #64]	; (80006c8 <main+0xb0>)
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <main+0xb4>)
 8000688:	f001 fd45 	bl	8002116 <xTaskCreate>
 800068c:	6178      	str	r0, [r7, #20]
			"Hello world from Task-2 and have a nice day", 2, &task2_handle);

	configASSERT(status == pdPASS);
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d00a      	beq.n	80006aa <main+0x92>
        __asm volatile
 8000694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000698:	f383 8811 	msr	BASEPRI, r3
 800069c:	f3bf 8f6f 	isb	sy
 80006a0:	f3bf 8f4f 	dsb	sy
 80006a4:	60fb      	str	r3, [r7, #12]
    }
 80006a6:	bf00      	nop
 80006a8:	e7fe      	b.n	80006a8 <main+0x90>

	//start the freeRTOS scheduler
	vTaskStartScheduler();
 80006aa:	f001 febd 	bl	8002428 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006ae:	e7fe      	b.n	80006ae <main+0x96>
 80006b0:	e0001000 	.word	0xe0001000
 80006b4:	0007a120 	.word	0x0007a120
 80006b8:	08006474 	.word	0x08006474
 80006bc:	080064a0 	.word	0x080064a0
 80006c0:	08000a5d 	.word	0x08000a5d
 80006c4:	080064a8 	.word	0x080064a8
 80006c8:	080064d4 	.word	0x080064d4
 80006cc:	08000a99 	.word	0x08000a99

080006d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 fa72 	bl	8005bc8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <SystemClock_Config+0xc8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a26      	ldr	r2, [pc, #152]	; (8000798 <SystemClock_Config+0xc8>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <SystemClock_Config+0xc8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <SystemClock_Config+0xcc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a20      	ldr	r2, [pc, #128]	; (800079c <SystemClock_Config+0xcc>)
 800071a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <SystemClock_Config+0xcc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2302      	movs	r3, #2
 800072e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2310      	movs	r3, #16
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000740:	2308      	movs	r3, #8
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 200;
 8000744:	23c8      	movs	r3, #200	; 0xc8
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000748:	2304      	movs	r3, #4
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 800074c:	2308      	movs	r3, #8
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fd75 	bl	8001244 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x94>
		Error_Handler();
 8000760:	f000 f9ca 	bl	8000af8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2103      	movs	r1, #3
 8000780:	4618      	mov	r0, r3
 8000782:	f000 ffd7 	bl	8001734 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xc0>
		Error_Handler();
 800078c:	f000 f9b4 	bl	8000af8 <Error_Handler>
	}
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	4ba2      	ldr	r3, [pc, #648]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4aa1      	ldr	r2, [pc, #644]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 80007c0:	f043 0310 	orr.w	r3, r3, #16
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b9f      	ldr	r3, [pc, #636]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	4b9b      	ldr	r3, [pc, #620]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a9a      	ldr	r2, [pc, #616]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b98      	ldr	r3, [pc, #608]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b94      	ldr	r3, [pc, #592]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a93      	ldr	r2, [pc, #588]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b91      	ldr	r3, [pc, #580]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b8d      	ldr	r3, [pc, #564]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a8c      	ldr	r2, [pc, #560]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b8a      	ldr	r3, [pc, #552]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b86      	ldr	r3, [pc, #536]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a85      	ldr	r2, [pc, #532]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b83      	ldr	r3, [pc, #524]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b7f      	ldr	r3, [pc, #508]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a7e      	ldr	r2, [pc, #504]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b7c      	ldr	r3, [pc, #496]	; (8000a44 <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2108      	movs	r1, #8
 8000862:	4879      	ldr	r0, [pc, #484]	; (8000a48 <MX_GPIO_Init+0x2a8>)
 8000864:	f000 fcd4 	bl	8001210 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000868:	2201      	movs	r2, #1
 800086a:	2101      	movs	r1, #1
 800086c:	4877      	ldr	r0, [pc, #476]	; (8000a4c <MX_GPIO_Init+0x2ac>)
 800086e:	f000 fccf 	bl	8001210 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000872:	2200      	movs	r2, #0
 8000874:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000878:	4875      	ldr	r0, [pc, #468]	; (8000a50 <MX_GPIO_Init+0x2b0>)
 800087a:	f000 fcc9 	bl	8001210 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : PE2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800087e:	2304      	movs	r3, #4
 8000880:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	486d      	ldr	r0, [pc, #436]	; (8000a48 <MX_GPIO_Init+0x2a8>)
 8000892:	f000 fb39 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000896:	2308      	movs	r3, #8
 8000898:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4866      	ldr	r0, [pc, #408]	; (8000a48 <MX_GPIO_Init+0x2a8>)
 80008ae:	f000 fb2b 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | MEMS_INT2_Pin;
 80008b2:	2332      	movs	r3, #50	; 0x32
 80008b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4860      	ldr	r0, [pc, #384]	; (8000a48 <MX_GPIO_Init+0x2a8>)
 80008c8:	f000 fb1e 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	485a      	ldr	r0, [pc, #360]	; (8000a4c <MX_GPIO_Init+0x2ac>)
 80008e4:	f000 fb10 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e8:	2308      	movs	r3, #8
 80008ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f8:	2305      	movs	r3, #5
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4852      	ldr	r0, [pc, #328]	; (8000a4c <MX_GPIO_Init+0x2ac>)
 8000904:	f000 fb00 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000908:	2301      	movs	r3, #1
 800090a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000910:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	484d      	ldr	r0, [pc, #308]	; (8000a54 <MX_GPIO_Init+0x2b4>)
 800091e:	f000 faf3 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000922:	2310      	movs	r3, #16
 8000924:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000932:	2306      	movs	r3, #6
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4845      	ldr	r0, [pc, #276]	; (8000a54 <MX_GPIO_Init+0x2b4>)
 800093e:	f000 fae3 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8000942:	23e0      	movs	r3, #224	; 0xe0
 8000944:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	483d      	ldr	r0, [pc, #244]	; (8000a54 <MX_GPIO_Init+0x2b4>)
 800095e:	f000 fad3 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pins : CLK_IN_Pin PB12 */
	GPIO_InitStruct.Pin = CLK_IN_Pin | GPIO_PIN_12;
 8000962:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000966:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000974:	2305      	movs	r3, #5
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4836      	ldr	r0, [pc, #216]	; (8000a58 <MX_GPIO_Init+0x2b8>)
 8000980:	f000 fac2 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000984:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000988:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	482c      	ldr	r0, [pc, #176]	; (8000a50 <MX_GPIO_Init+0x2b0>)
 800099e:	f000 fab3 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 80009a2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b4:	2306      	movs	r3, #6
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4823      	ldr	r0, [pc, #140]	; (8000a4c <MX_GPIO_Init+0x2ac>)
 80009c0:	f000 faa2 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	481e      	ldr	r0, [pc, #120]	; (8000a54 <MX_GPIO_Init+0x2b4>)
 80009da:	f000 fa95 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 80009de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009f0:	230a      	movs	r3, #10
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4816      	ldr	r0, [pc, #88]	; (8000a54 <MX_GPIO_Init+0x2b4>)
 80009fc:	f000 fa84 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a00:	2320      	movs	r3, #32
 8000a02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	480f      	ldr	r0, [pc, #60]	; (8000a50 <MX_GPIO_Init+0x2b0>)
 8000a14:	f000 fa78 	bl	8000f08 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 8000a18:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1e:	2312      	movs	r3, #18
 8000a20:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <MX_GPIO_Init+0x2b8>)
 8000a36:	f000 fa67 	bl	8000f08 <HAL_GPIO_Init>

}
 8000a3a:	bf00      	nop
 8000a3c:	3730      	adds	r7, #48	; 0x30
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	40020c00 	.word	0x40020c00
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40020400 	.word	0x40020400

08000a5c <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void *parameters) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09c      	sub	sp, #112	; 0x70
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]


	char msg[100];
	while (1) {
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000a64:	f107 000c 	add.w	r0, r7, #12
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <task1_handler+0x34>)
 8000a6c:	2164      	movs	r1, #100	; 0x64
 8000a6e:	f005 f8b3 	bl	8005bd8 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4618      	mov	r0, r3
 8000a78:	f004 ffc8 	bl	8005a0c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <task1_handler+0x38>)
 8000a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	f3bf 8f4f 	dsb	sy
 8000a88:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000a8c:	e7ea      	b.n	8000a64 <task1_handler+0x8>
 8000a8e:	bf00      	nop
 8000a90:	080064dc 	.word	0x080064dc
 8000a94:	e000ed04 	.word	0xe000ed04

08000a98 <task2_handler>:
//			printf("%s \n", (char*)parameters);
//			taskYIELD();
//		}
}

static void task2_handler(void *parameters) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b09c      	sub	sp, #112	; 0x70
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	char msg[100];
	while (1) {
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000aa0:	f107 000c 	add.w	r0, r7, #12
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a09      	ldr	r2, [pc, #36]	; (8000acc <task2_handler+0x34>)
 8000aa8:	2164      	movs	r1, #100	; 0x64
 8000aaa:	f005 f895 	bl	8005bd8 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f004 ffaa 	bl	8005a0c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <task2_handler+0x38>)
 8000aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	f3bf 8f4f 	dsb	sy
 8000ac4:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000ac8:	e7ea      	b.n	8000aa0 <task2_handler+0x8>
 8000aca:	bf00      	nop
 8000acc:	080064dc 	.word	0x080064dc
 8000ad0:	e000ed04 	.word	0xe000ed04

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000ae6:	f000 f90d 	bl	8000d04 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40000c00 	.word	0x40000c00

08000af8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b42:	f002 f951 	bl	8002de8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	2032      	movs	r0, #50	; 0x32
 8000b6a:	f000 f9a3 	bl	8000eb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b6e:	2032      	movs	r0, #50	; 0x32
 8000b70:	f000 f9bc 	bl	8000eec <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000b7e:	f043 0308 	orr.w	r3, r3, #8
 8000b82:	6413      	str	r3, [r2, #64]	; 0x40
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b90:	f107 0210 	add.w	r2, r7, #16
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 ffb2 	bl	8001b04 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ba0:	f000 ff9c 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bac:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <HAL_InitTick+0xa8>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	0c9b      	lsrs	r3, r3, #18
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_InitTick+0xac>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <HAL_InitTick+0xb0>)
 8000bbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_InitTick+0xac>)
 8000bc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <HAL_InitTick+0xac>)
 8000bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bca:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_InitTick+0xac>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_InitTick+0xac>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <HAL_InitTick+0xac>)
 8000bda:	f000 ffc5 	bl	8001b68 <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d104      	bne.n	8000bee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <HAL_InitTick+0xac>)
 8000be6:	f001 f819 	bl	8001c1c <HAL_TIM_Base_Start_IT>
 8000bea:	4603      	mov	r3, r0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3730      	adds	r7, #48	; 0x30
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	431bde83 	.word	0x431bde83
 8000c00:	200143a8 	.word	0x200143a8
 8000c04:	40000c00 	.word	0x40000c00

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <TIM5_IRQHandler+0x10>)
 8000c3a:	f001 f851 	bl	8001ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200143a8 	.word	0x200143a8

08000c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c72:	490e      	ldr	r1, [pc, #56]	; (8000cac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c88:	4c0b      	ldr	r4, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c96:	f7ff ffd7 	bl	8000c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f004 ff55 	bl	8005b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fcbb 	bl	8000618 <main>
  bx  lr    
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000cb0:	0800664c 	.word	0x0800664c
  ldr r2, =_sbss
 8000cb4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000cb8:	200144ac 	.word	0x200144ac

08000cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <HAL_Init+0x40>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_Init+0x40>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_Init+0x40>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f8d8 	bl	8000e9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f7ff ff30 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff ff06 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008
 8000d28:	200143f0 	.word	0x200143f0

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	200143f0 	.word	0x200143f0

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff4c 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec6:	f7ff ff61 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000eca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	6978      	ldr	r0, [r7, #20]
 8000ed2:	f7ff ffb1 	bl	8000e38 <NVIC_EncodePriority>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff80 	bl	8000de4 <__NVIC_SetPriority>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff54 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e159      	b.n	80011d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	f040 8148 	bne.w	80011d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d005      	beq.n	8000f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d130      	bne.n	8000fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f90:	2201      	movs	r2, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	f003 0201 	and.w	r2, r3, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d017      	beq.n	8000ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d123      	bne.n	800104c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	69b9      	ldr	r1, [r7, #24]
 8001048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0203 	and.w	r2, r3, #3
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 80a2 	beq.w	80011d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b57      	ldr	r3, [pc, #348]	; (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a56      	ldr	r2, [pc, #344]	; (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b54      	ldr	r3, [pc, #336]	; (80011f0 <HAL_GPIO_Init+0x2e8>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010aa:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_GPIO_Init+0x2ec>)
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a49      	ldr	r2, [pc, #292]	; (80011f8 <HAL_GPIO_Init+0x2f0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x202>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a48      	ldr	r2, [pc, #288]	; (80011fc <HAL_GPIO_Init+0x2f4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x1fe>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a47      	ldr	r2, [pc, #284]	; (8001200 <HAL_GPIO_Init+0x2f8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x1fa>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a46      	ldr	r2, [pc, #280]	; (8001204 <HAL_GPIO_Init+0x2fc>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x1f6>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a45      	ldr	r2, [pc, #276]	; (8001208 <HAL_GPIO_Init+0x300>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x1f2>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e008      	b.n	800110c <HAL_GPIO_Init+0x204>
 80010fa:	2307      	movs	r3, #7
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x204>
 80010fe:	2303      	movs	r3, #3
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x204>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x204>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x204>
 800110a:	2300      	movs	r3, #0
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	f002 0203 	and.w	r2, r2, #3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111c:	4935      	ldr	r1, [pc, #212]	; (80011f4 <HAL_GPIO_Init+0x2ec>)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_GPIO_Init+0x304>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114e:	4a2f      	ldr	r2, [pc, #188]	; (800120c <HAL_GPIO_Init+0x304>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <HAL_GPIO_Init+0x304>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001178:	4a24      	ldr	r2, [pc, #144]	; (800120c <HAL_GPIO_Init+0x304>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <HAL_GPIO_Init+0x304>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a2:	4a1a      	ldr	r2, [pc, #104]	; (800120c <HAL_GPIO_Init+0x304>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_GPIO_Init+0x304>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011cc:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_GPIO_Init+0x304>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	f67f aea2 	bls.w	8000f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40013c00 	.word	0x40013c00

08001210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800122c:	e003      	b.n	8001236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	041a      	lsls	r2, r3, #16
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	619a      	str	r2, [r3, #24]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e264      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d075      	beq.n	800134e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	4ba3      	ldr	r3, [pc, #652]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d00c      	beq.n	8001288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4ba0      	ldr	r3, [pc, #640]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001276:	2b08      	cmp	r3, #8
 8001278:	d112      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b9d      	ldr	r3, [pc, #628]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b99      	ldr	r3, [pc, #612]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d05b      	beq.n	800134c <HAL_RCC_OscConfig+0x108>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d157      	bne.n	800134c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e23f      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x74>
 80012aa:	4b91      	ldr	r3, [pc, #580]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a90      	ldr	r2, [pc, #576]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e01d      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b8b      	ldr	r3, [pc, #556]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a8a      	ldr	r2, [pc, #552]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b88      	ldr	r3, [pc, #544]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a87      	ldr	r2, [pc, #540]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012dc:	4b84      	ldr	r3, [pc, #528]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a83      	ldr	r2, [pc, #524]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b81      	ldr	r3, [pc, #516]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a80      	ldr	r2, [pc, #512]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fd16 	bl	8000d2c <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fd12 	bl	8000d2c <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e204      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b76      	ldr	r3, [pc, #472]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xc0>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fd02 	bl	8000d2c <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fcfe 	bl	8000d2c <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1f0      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	4b6c      	ldr	r3, [pc, #432]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0xe8>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d063      	beq.n	8001422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	4b65      	ldr	r3, [pc, #404]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b62      	ldr	r3, [pc, #392]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d11c      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	4b5c      	ldr	r3, [pc, #368]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e1c4      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b56      	ldr	r3, [pc, #344]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4952      	ldr	r1, [pc, #328]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e03a      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b4:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <HAL_RCC_OscConfig+0x2b0>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fcb7 	bl	8000d2c <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff fcb3 	bl	8000d2c <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e1a5      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4940      	ldr	r1, [pc, #256]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
 80013f4:	e015      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f6:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <HAL_RCC_OscConfig+0x2b0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fc96 	bl	8000d2c <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fc92 	bl	8000d2c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e184      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d030      	beq.n	8001490 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d016      	beq.n	8001464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_RCC_OscConfig+0x2b4>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fc76 	bl	8000d2c <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fc72 	bl	8000d2c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e164      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x200>
 8001462:	e015      	b.n	8001490 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_OscConfig+0x2b4>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fc5f 	bl	8000d2c <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fc5b 	bl	8000d2c <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e14d      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a0 	beq.w	80015de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_OscConfig+0x2b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d121      	bne.n	800151e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_RCC_OscConfig+0x2b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_RCC_OscConfig+0x2b8>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fc21 	bl	8000d2c <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e011      	b.n	8001512 <HAL_RCC_OscConfig+0x2ce>
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	42470000 	.word	0x42470000
 80014f8:	42470e80 	.word	0x42470e80
 80014fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001500:	f7ff fc14 	bl	8000d2c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e106      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	4b85      	ldr	r3, [pc, #532]	; (8001728 <HAL_RCC_OscConfig+0x4e4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d106      	bne.n	8001534 <HAL_RCC_OscConfig+0x2f0>
 8001526:	4b81      	ldr	r3, [pc, #516]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a80      	ldr	r2, [pc, #512]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	e01c      	b.n	800156e <HAL_RCC_OscConfig+0x32a>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b05      	cmp	r3, #5
 800153a:	d10c      	bne.n	8001556 <HAL_RCC_OscConfig+0x312>
 800153c:	4b7b      	ldr	r3, [pc, #492]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a7a      	ldr	r2, [pc, #488]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	4b78      	ldr	r3, [pc, #480]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a77      	ldr	r2, [pc, #476]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	e00b      	b.n	800156e <HAL_RCC_OscConfig+0x32a>
 8001556:	4b75      	ldr	r3, [pc, #468]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	4a74      	ldr	r2, [pc, #464]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6713      	str	r3, [r2, #112]	; 0x70
 8001562:	4b72      	ldr	r3, [pc, #456]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a71      	ldr	r2, [pc, #452]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d015      	beq.n	80015a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff fbd9 	bl	8000d2c <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff fbd5 	bl	8000d2c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0c5      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	4b65      	ldr	r3, [pc, #404]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ee      	beq.n	800157e <HAL_RCC_OscConfig+0x33a>
 80015a0:	e014      	b.n	80015cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fbc3 	bl	8000d2c <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7ff fbbf 	bl	8000d2c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e0af      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	4b5a      	ldr	r3, [pc, #360]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ee      	bne.n	80015aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d105      	bne.n	80015de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d2:	4b56      	ldr	r3, [pc, #344]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a55      	ldr	r2, [pc, #340]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 80015d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 809b 	beq.w	800171e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e8:	4b50      	ldr	r3, [pc, #320]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d05c      	beq.n	80016ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d141      	bne.n	8001680 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fc:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <HAL_RCC_OscConfig+0x4ec>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fb93 	bl	8000d2c <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fb8f 	bl	8000d2c <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e081      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161c:	4b43      	ldr	r3, [pc, #268]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f0      	bne.n	800160a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69da      	ldr	r2, [r3, #28]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	085b      	lsrs	r3, r3, #1
 8001640:	3b01      	subs	r3, #1
 8001642:	041b      	lsls	r3, r3, #16
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	061b      	lsls	r3, r3, #24
 800164c:	4937      	ldr	r1, [pc, #220]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <HAL_RCC_OscConfig+0x4ec>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb68 	bl	8000d2c <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff fb64 	bl	8000d2c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e056      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x41c>
 800167e:	e04e      	b.n	800171e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_RCC_OscConfig+0x4ec>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff fb51 	bl	8000d2c <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff fb4d 	bl	8000d2c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e03f      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x44a>
 80016ac:	e037      	b.n	800171e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e032      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d028      	beq.n	800171a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d121      	bne.n	800171a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d11a      	bne.n	800171a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ea:	4013      	ands	r3, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d111      	bne.n	800171a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	3b01      	subs	r3, #1
 8001704:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d107      	bne.n	800171a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40007000 	.word	0x40007000
 800172c:	40023800 	.word	0x40023800
 8001730:	42470060 	.word	0x42470060

08001734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0cc      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d90c      	bls.n	8001770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b65      	ldr	r3, [pc, #404]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b63      	ldr	r3, [pc, #396]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b8      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a52      	ldr	r2, [pc, #328]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	494d      	ldr	r1, [pc, #308]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d044      	beq.n	8001854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d119      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e067      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 0203 	bic.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4934      	ldr	r1, [pc, #208]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001824:	f7ff fa82 	bl	8000d2c <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	e00a      	b.n	8001842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7ff fa7e 	bl	8000d2c <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e04f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 020c 	and.w	r2, r3, #12
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	429a      	cmp	r2, r3
 8001852:	d1eb      	bne.n	800182c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d20c      	bcs.n	800187c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e032      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4916      	ldr	r1, [pc, #88]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	490e      	ldr	r1, [pc, #56]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ba:	f000 f821 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490a      	ldr	r1, [pc, #40]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f93a 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	080065b4 	.word	0x080065b4
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	2300      	movs	r3, #0
 8001912:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001918:	4b67      	ldr	r3, [pc, #412]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d00d      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x40>
 8001924:	2b08      	cmp	r3, #8
 8001926:	f200 80bd 	bhi.w	8001aa4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x34>
 800192e:	2b04      	cmp	r3, #4
 8001930:	d003      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x3a>
 8001932:	e0b7      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001936:	60bb      	str	r3, [r7, #8]
       break;
 8001938:	e0b7      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193a:	4b61      	ldr	r3, [pc, #388]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800193c:	60bb      	str	r3, [r7, #8]
      break;
 800193e:	e0b4      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001940:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001948:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194a:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d04d      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001956:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	461a      	mov	r2, r3
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	ea02 0800 	and.w	r8, r2, r0
 800196e:	ea03 0901 	and.w	r9, r3, r1
 8001972:	4640      	mov	r0, r8
 8001974:	4649      	mov	r1, r9
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	014b      	lsls	r3, r1, #5
 8001980:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001984:	0142      	lsls	r2, r0, #5
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	ebb0 0008 	subs.w	r0, r0, r8
 800198e:	eb61 0109 	sbc.w	r1, r1, r9
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	018b      	lsls	r3, r1, #6
 800199c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019a0:	0182      	lsls	r2, r0, #6
 80019a2:	1a12      	subs	r2, r2, r0
 80019a4:	eb63 0301 	sbc.w	r3, r3, r1
 80019a8:	f04f 0000 	mov.w	r0, #0
 80019ac:	f04f 0100 	mov.w	r1, #0
 80019b0:	00d9      	lsls	r1, r3, #3
 80019b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019b6:	00d0      	lsls	r0, r2, #3
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	eb12 0208 	adds.w	r2, r2, r8
 80019c0:	eb43 0309 	adc.w	r3, r3, r9
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	0259      	lsls	r1, r3, #9
 80019ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019d2:	0250      	lsls	r0, r2, #9
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	f7fe fc9c 	bl	8000320 <__aeabi_uldivmod>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4613      	mov	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e04a      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	099b      	lsrs	r3, r3, #6
 80019f8:	461a      	mov	r2, r3
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	ea02 0400 	and.w	r4, r2, r0
 8001a0a:	ea03 0501 	and.w	r5, r3, r1
 8001a0e:	4620      	mov	r0, r4
 8001a10:	4629      	mov	r1, r5
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	014b      	lsls	r3, r1, #5
 8001a1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a20:	0142      	lsls	r2, r0, #5
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	1b00      	subs	r0, r0, r4
 8001a28:	eb61 0105 	sbc.w	r1, r1, r5
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	018b      	lsls	r3, r1, #6
 8001a36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a3a:	0182      	lsls	r2, r0, #6
 8001a3c:	1a12      	subs	r2, r2, r0
 8001a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a42:	f04f 0000 	mov.w	r0, #0
 8001a46:	f04f 0100 	mov.w	r1, #0
 8001a4a:	00d9      	lsls	r1, r3, #3
 8001a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a50:	00d0      	lsls	r0, r2, #3
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	1912      	adds	r2, r2, r4
 8001a58:	eb45 0303 	adc.w	r3, r5, r3
 8001a5c:	f04f 0000 	mov.w	r0, #0
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	0299      	lsls	r1, r3, #10
 8001a66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a6a:	0290      	lsls	r0, r2, #10
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	f7fe fc50 	bl	8000320 <__aeabi_uldivmod>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4613      	mov	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	3301      	adds	r3, #1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	60bb      	str	r3, [r7, #8]
      break;
 8001aa2:	e002      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001aa6:	60bb      	str	r3, [r7, #8]
      break;
 8001aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	007a1200 	.word	0x007a1200

08001ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000000 	.word	0x20000000

08001adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae0:	f7ff fff0 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0a9b      	lsrs	r3, r3, #10
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4903      	ldr	r1, [pc, #12]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	080065c4 	.word	0x080065c4

08001b04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	220f      	movs	r2, #15
 8001b12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_GetClockConfig+0x5c>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_RCC_GetClockConfig+0x5c>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	08db      	lsrs	r3, r3, #3
 8001b3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_RCC_GetClockConfig+0x60>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0207 	and.w	r2, r3, #7
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40023c00 	.word	0x40023c00

08001b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e041      	b.n	8001bfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f839 	bl	8001c06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	f000 f9ca 	bl	8001f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d001      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e044      	b.n	8001cbe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <HAL_TIM_Base_Start_IT+0xb0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d018      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x6c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5e:	d013      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x6c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00e      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x6c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d009      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x6c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a17      	ldr	r2, [pc, #92]	; (8001cd8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d004      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x6c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a16      	ldr	r2, [pc, #88]	; (8001cdc <HAL_TIM_Base_Start_IT+0xc0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d111      	bne.n	8001cac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d010      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001caa:	e007      	b.n	8001cbc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40010000 	.word	0x40010000
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40000800 	.word	0x40000800
 8001cd8:	40000c00 	.word	0x40000c00
 8001cdc:	40014000 	.word	0x40014000

08001ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0202 	mvn.w	r2, #2
 8001d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8ee 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8e0 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8f1 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d122      	bne.n	8001d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d11b      	bne.n	8001d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0204 	mvn.w	r2, #4
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2202      	movs	r2, #2
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8c4 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f8b6 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f8c7 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d122      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d11b      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0208 	mvn.w	r2, #8
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2204      	movs	r2, #4
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f89a 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f88c 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f89d 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d122      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d11b      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0210 	mvn.w	r2, #16
 8001e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f870 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f862 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f873 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0201 	mvn.w	r2, #1
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fe38 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6e:	2b80      	cmp	r3, #128	; 0x80
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7c:	2b80      	cmp	r3, #128	; 0x80
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8e2 	bl	8002054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9a:	2b40      	cmp	r3, #64	; 0x40
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	2b40      	cmp	r3, #64	; 0x40
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f838 	bl	8001f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d107      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0220 	mvn.w	r2, #32
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8ac 	bl	8002040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a34      	ldr	r2, [pc, #208]	; (8002024 <TIM_Base_SetConfig+0xe4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d00f      	beq.n	8001f78 <TIM_Base_SetConfig+0x38>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5e:	d00b      	beq.n	8001f78 <TIM_Base_SetConfig+0x38>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a31      	ldr	r2, [pc, #196]	; (8002028 <TIM_Base_SetConfig+0xe8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d007      	beq.n	8001f78 <TIM_Base_SetConfig+0x38>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a30      	ldr	r2, [pc, #192]	; (800202c <TIM_Base_SetConfig+0xec>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d003      	beq.n	8001f78 <TIM_Base_SetConfig+0x38>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <TIM_Base_SetConfig+0xf0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d108      	bne.n	8001f8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a25      	ldr	r2, [pc, #148]	; (8002024 <TIM_Base_SetConfig+0xe4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d01b      	beq.n	8001fca <TIM_Base_SetConfig+0x8a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f98:	d017      	beq.n	8001fca <TIM_Base_SetConfig+0x8a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a22      	ldr	r2, [pc, #136]	; (8002028 <TIM_Base_SetConfig+0xe8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <TIM_Base_SetConfig+0x8a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a21      	ldr	r2, [pc, #132]	; (800202c <TIM_Base_SetConfig+0xec>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00f      	beq.n	8001fca <TIM_Base_SetConfig+0x8a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a20      	ldr	r2, [pc, #128]	; (8002030 <TIM_Base_SetConfig+0xf0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00b      	beq.n	8001fca <TIM_Base_SetConfig+0x8a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <TIM_Base_SetConfig+0xf4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d007      	beq.n	8001fca <TIM_Base_SetConfig+0x8a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a1e      	ldr	r2, [pc, #120]	; (8002038 <TIM_Base_SetConfig+0xf8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d003      	beq.n	8001fca <TIM_Base_SetConfig+0x8a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1d      	ldr	r2, [pc, #116]	; (800203c <TIM_Base_SetConfig+0xfc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d108      	bne.n	8001fdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <TIM_Base_SetConfig+0xe4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d103      	bne.n	8002010 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	615a      	str	r2, [r3, #20]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40010000 	.word	0x40010000
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800
 8002030:	40000c00 	.word	0x40000c00
 8002034:	40014000 	.word	0x40014000
 8002038:	40014400 	.word	0x40014400
 800203c:	40014800 	.word	0x40014800

08002040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f103 0208 	add.w	r2, r3, #8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f103 0208 	add.w	r2, r3, #8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f103 0208 	add.w	r2, r3, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020c2:	b480      	push	{r7}
 80020c4:	b085      	sub	sp, #20
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6892      	ldr	r2, [r2, #8]
 80020d8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6852      	ldr	r2, [r2, #4]
 80020e2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d103      	bne.n	80020f6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	1e5a      	subs	r2, r3, #1
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002116:	b580      	push	{r7, lr}
 8002118:	b08c      	sub	sp, #48	; 0x30
 800211a:	af04      	add	r7, sp, #16
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	4613      	mov	r3, r2
 8002124:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4618      	mov	r0, r3
 800212c:	f001 f806 	bl	800313c <pvPortMalloc>
 8002130:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002138:	2058      	movs	r0, #88	; 0x58
 800213a:	f000 ffff 	bl	800313c <pvPortMalloc>
 800213e:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002146:	2258      	movs	r2, #88	; 0x58
 8002148:	2100      	movs	r1, #0
 800214a:	69f8      	ldr	r0, [r7, #28]
 800214c:	f003 fd3c 	bl	8005bc8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
 8002156:	e005      	b.n	8002164 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002158:	6978      	ldr	r0, [r7, #20]
 800215a:	f001 f8a9 	bl	80032b0 <vPortFree>
 800215e:	e001      	b.n	8002164 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d013      	beq.n	8002192 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800216a:	88fa      	ldrh	r2, [r7, #6]
 800216c:	2300      	movs	r3, #0
 800216e:	9303      	str	r3, [sp, #12]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	9302      	str	r3, [sp, #8]
 8002174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f80e 	bl	80021a2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002186:	69f8      	ldr	r0, [r7, #28]
 8002188:	f000 f89a 	bl	80022c0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800218c:	2301      	movs	r3, #1
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	e002      	b.n	8002198 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002198:	69bb      	ldr	r3, [r7, #24]
    }
 800219a:	4618      	mov	r0, r3
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b088      	sub	sp, #32
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	461a      	mov	r2, r3
 80021ba:	21a5      	movs	r1, #165	; 0xa5
 80021bc:	f003 fd04 	bl	8005bc8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021ca:	3b01      	subs	r3, #1
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f023 0307 	bic.w	r3, r3, #7
 80021d8:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <prvInitialiseNewTask+0x58>
        __asm volatile
 80021e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e8:	f383 8811 	msr	BASEPRI, r3
 80021ec:	f3bf 8f6f 	isb	sy
 80021f0:	f3bf 8f4f 	dsb	sy
 80021f4:	617b      	str	r3, [r7, #20]
    }
 80021f6:	bf00      	nop
 80021f8:	e7fe      	b.n	80021f8 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01e      	beq.n	800223e <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	e012      	b.n	800222c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	4413      	add	r3, r2
 800220c:	7819      	ldrb	r1, [r3, #0]
 800220e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	4413      	add	r3, r2
 8002214:	3334      	adds	r3, #52	; 0x34
 8002216:	460a      	mov	r2, r1
 8002218:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	4413      	add	r3, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3301      	adds	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b09      	cmp	r3, #9
 8002230:	d9e9      	bls.n	8002206 <prvInitialiseNewTask+0x64>
 8002232:	e000      	b.n	8002236 <prvInitialiseNewTask+0x94>
            {
                break;
 8002234:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	2b04      	cmp	r3, #4
 8002242:	d90a      	bls.n	800225a <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002248:	f383 8811 	msr	BASEPRI, r3
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	613b      	str	r3, [r7, #16]
    }
 8002256:	bf00      	nop
 8002258:	e7fe      	b.n	8002258 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	2b04      	cmp	r3, #4
 800225e:	d901      	bls.n	8002264 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002260:	2304      	movs	r3, #4
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800226e:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	3304      	adds	r3, #4
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff17 	bl	80020a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	3318      	adds	r3, #24
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff12 	bl	80020a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002288:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	f1c3 0205 	rsb	r2, r3, #5
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	68f9      	ldr	r1, [r7, #12]
 800229e:	69b8      	ldr	r0, [r7, #24]
 80022a0:	f000 fc74 	bl	8002b8c <pxPortInitialiseStack>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022b6:	bf00      	nop
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80022c8:	f000 fe0c 	bl	8002ee4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80022cc:	4b4f      	ldr	r3, [pc, #316]	; (800240c <prvAddNewTaskToReadyList+0x14c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	4a4e      	ldr	r2, [pc, #312]	; (800240c <prvAddNewTaskToReadyList+0x14c>)
 80022d4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80022d6:	4b4e      	ldr	r3, [pc, #312]	; (8002410 <prvAddNewTaskToReadyList+0x150>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80022de:	4a4c      	ldr	r2, [pc, #304]	; (8002410 <prvAddNewTaskToReadyList+0x150>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022e4:	4b49      	ldr	r3, [pc, #292]	; (800240c <prvAddNewTaskToReadyList+0x14c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d110      	bne.n	800230e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80022ec:	f000 fbb4 	bl	8002a58 <prvInitialiseTaskLists>
 80022f0:	e00d      	b.n	800230e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80022f2:	4b48      	ldr	r3, [pc, #288]	; (8002414 <prvAddNewTaskToReadyList+0x154>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022fa:	4b45      	ldr	r3, [pc, #276]	; (8002410 <prvAddNewTaskToReadyList+0x150>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	429a      	cmp	r2, r3
 8002306:	d802      	bhi.n	800230e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002308:	4a41      	ldr	r2, [pc, #260]	; (8002410 <prvAddNewTaskToReadyList+0x150>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800230e:	4b42      	ldr	r3, [pc, #264]	; (8002418 <prvAddNewTaskToReadyList+0x158>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	4a40      	ldr	r2, [pc, #256]	; (8002418 <prvAddNewTaskToReadyList+0x158>)
 8002316:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002318:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <prvAddNewTaskToReadyList+0x158>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <prvAddNewTaskToReadyList+0x94>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	f003 f9c3 	bl	80056b4 <SEGGER_SYSVIEW_OnTaskCreate>
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	461d      	mov	r5, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461c      	mov	r4, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	1ae3      	subs	r3, r4, r3
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	462b      	mov	r3, r5
 8002350:	f001 f968 	bl	8003624 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fa30 	bl	80057bc <SEGGER_SYSVIEW_OnTaskStartReady>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	2201      	movs	r2, #1
 8002362:	409a      	lsls	r2, r3
 8002364:	4b2d      	ldr	r3, [pc, #180]	; (800241c <prvAddNewTaskToReadyList+0x15c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	4a2c      	ldr	r2, [pc, #176]	; (800241c <prvAddNewTaskToReadyList+0x15c>)
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002372:	492b      	ldr	r1, [pc, #172]	; (8002420 <prvAddNewTaskToReadyList+0x160>)
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3304      	adds	r3, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	3204      	adds	r2, #4
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <prvAddNewTaskToReadyList+0x160>)
 80023b2:	441a      	add	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	615a      	str	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023bc:	4918      	ldr	r1, [pc, #96]	; (8002420 <prvAddNewTaskToReadyList+0x160>)
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	1c59      	adds	r1, r3, #1
 80023cc:	4814      	ldr	r0, [pc, #80]	; (8002420 <prvAddNewTaskToReadyList+0x160>)
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4403      	add	r3, r0
 80023d8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023da:	f000 fdb3 	bl	8002f44 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <prvAddNewTaskToReadyList+0x154>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00e      	beq.n	8002404 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <prvAddNewTaskToReadyList+0x150>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d207      	bcs.n	8002404 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <prvAddNewTaskToReadyList+0x164>)
 80023f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bdb0      	pop	{r4, r5, r7, pc}
 800240c:	20000174 	.word	0x20000174
 8002410:	2000009c 	.word	0x2000009c
 8002414:	20000180 	.word	0x20000180
 8002418:	20000190 	.word	0x20000190
 800241c:	2000017c 	.word	0x2000017c
 8002420:	200000a0 	.word	0x200000a0
 8002424:	e000ed04 	.word	0xe000ed04

08002428 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <vTaskStartScheduler+0x98>)
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	2300      	movs	r3, #0
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	2300      	movs	r3, #0
 8002438:	2282      	movs	r2, #130	; 0x82
 800243a:	4922      	ldr	r1, [pc, #136]	; (80024c4 <vTaskStartScheduler+0x9c>)
 800243c:	4822      	ldr	r0, [pc, #136]	; (80024c8 <vTaskStartScheduler+0xa0>)
 800243e:	f7ff fe6a 	bl	8002116 <xTaskCreate>
 8002442:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d124      	bne.n	8002494 <vTaskStartScheduler+0x6c>
        __asm volatile
 800244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244e:	f383 8811 	msr	BASEPRI, r3
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	60bb      	str	r3, [r7, #8]
    }
 800245c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <vTaskStartScheduler+0xa4>)
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <vTaskStartScheduler+0xa8>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <vTaskStartScheduler+0xac>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <vTaskStartScheduler+0xb0>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <vTaskStartScheduler+0x98>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d102      	bne.n	8002484 <vTaskStartScheduler+0x5c>
 800247e:	f003 f8fd 	bl	800567c <SEGGER_SYSVIEW_OnIdle>
 8002482:	e004      	b.n	800248e <vTaskStartScheduler+0x66>
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <vTaskStartScheduler+0xb0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 f955 	bl	8005738 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800248e:	f000 fc09 	bl	8002ca4 <xPortStartScheduler>
 8002492:	e00e      	b.n	80024b2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249a:	d10a      	bne.n	80024b2 <vTaskStartScheduler+0x8a>
        __asm volatile
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	607b      	str	r3, [r7, #4]
    }
 80024ae:	bf00      	nop
 80024b0:	e7fe      	b.n	80024b0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <vTaskStartScheduler+0xb4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000198 	.word	0x20000198
 80024c4:	080064e0 	.word	0x080064e0
 80024c8:	08002a29 	.word	0x08002a29
 80024cc:	20000194 	.word	0x20000194
 80024d0:	20000180 	.word	0x20000180
 80024d4:	20000178 	.word	0x20000178
 80024d8:	2000009c 	.word	0x2000009c
 80024dc:	2000000c 	.word	0x2000000c

080024e0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <vTaskSuspendAll+0x18>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	4a03      	ldr	r2, [pc, #12]	; (80024f8 <vTaskSuspendAll+0x18>)
 80024ec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	2000019c 	.word	0x2000019c

080024fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800250a:	4b73      	ldr	r3, [pc, #460]	; (80026d8 <xTaskResumeAll+0x1dc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <xTaskResumeAll+0x2c>
        __asm volatile
 8002512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	607b      	str	r3, [r7, #4]
    }
 8002524:	bf00      	nop
 8002526:	e7fe      	b.n	8002526 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002528:	f000 fcdc 	bl	8002ee4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800252c:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <xTaskResumeAll+0x1dc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3b01      	subs	r3, #1
 8002532:	4a69      	ldr	r2, [pc, #420]	; (80026d8 <xTaskResumeAll+0x1dc>)
 8002534:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002536:	4b68      	ldr	r3, [pc, #416]	; (80026d8 <xTaskResumeAll+0x1dc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 80c4 	bne.w	80026c8 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002540:	4b66      	ldr	r3, [pc, #408]	; (80026dc <xTaskResumeAll+0x1e0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80bf 	beq.w	80026c8 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800254a:	e08e      	b.n	800266a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800254c:	4b64      	ldr	r3, [pc, #400]	; (80026e0 <xTaskResumeAll+0x1e4>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	6a12      	ldr	r2, [r2, #32]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	69d2      	ldr	r2, [r2, #28]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3318      	adds	r3, #24
 8002576:	429a      	cmp	r2, r3
 8002578:	d103      	bne.n	8002582 <xTaskResumeAll+0x86>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	6a1a      	ldr	r2, [r3, #32]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	2200      	movs	r2, #0
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	68d2      	ldr	r2, [r2, #12]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	3304      	adds	r3, #4
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d103      	bne.n	80025c0 <xTaskResumeAll+0xc4>
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2200      	movs	r2, #0
 80025c4:	615a      	str	r2, [r3, #20]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	1e5a      	subs	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 f8f2 	bl	80057bc <SEGGER_SYSVIEW_OnTaskStartReady>
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	2201      	movs	r2, #1
 80025de:	409a      	lsls	r2, r3
 80025e0:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <xTaskResumeAll+0x1e8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	4a3f      	ldr	r2, [pc, #252]	; (80026e4 <xTaskResumeAll+0x1e8>)
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ee:	493e      	ldr	r1, [pc, #248]	; (80026e8 <xTaskResumeAll+0x1ec>)
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	3304      	adds	r3, #4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	3204      	adds	r2, #4
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	1d1a      	adds	r2, r3, #4
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4a2e      	ldr	r2, [pc, #184]	; (80026e8 <xTaskResumeAll+0x1ec>)
 800262e:	441a      	add	r2, r3
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	615a      	str	r2, [r3, #20]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	492b      	ldr	r1, [pc, #172]	; (80026e8 <xTaskResumeAll+0x1ec>)
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	1c59      	adds	r1, r3, #1
 8002648:	4827      	ldr	r0, [pc, #156]	; (80026e8 <xTaskResumeAll+0x1ec>)
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4403      	add	r3, r0
 8002654:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <xTaskResumeAll+0x1f0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	429a      	cmp	r2, r3
 8002662:	d302      	bcc.n	800266a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <xTaskResumeAll+0x1f4>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <xTaskResumeAll+0x1e4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f47f af6c 	bne.w	800254c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800267a:	f000 fa6b 	bl	8002b54 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <xTaskResumeAll+0x1f8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800268a:	f000 f849 	bl	8002720 <xTaskIncrementTick>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002694:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <xTaskResumeAll+0x1f4>)
 8002696:	2201      	movs	r2, #1
 8002698:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3b01      	subs	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f1      	bne.n	800268a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <xTaskResumeAll+0x1f8>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <xTaskResumeAll+0x1f4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <xTaskResumeAll+0x1fc>)
 80026ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80026c8:	f000 fc3c 	bl	8002f44 <vPortExitCritical>

    return xAlreadyYielded;
 80026cc:	69bb      	ldr	r3, [r7, #24]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000019c 	.word	0x2000019c
 80026dc:	20000174 	.word	0x20000174
 80026e0:	20000134 	.word	0x20000134
 80026e4:	2000017c 	.word	0x2000017c
 80026e8:	200000a0 	.word	0x200000a0
 80026ec:	2000009c 	.word	0x2000009c
 80026f0:	20000188 	.word	0x20000188
 80026f4:	20000184 	.word	0x20000184
 80026f8:	e000ed04 	.word	0xe000ed04

080026fc <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002702:	f000 fcdb 	bl	80030bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <xTaskGetTickCountFromISR+0x20>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002710:	683b      	ldr	r3, [r7, #0]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000178 	.word	0x20000178

08002720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800272a:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <xTaskIncrementTick+0x208>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 80f0 	bne.w	8002914 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002734:	4b7d      	ldr	r3, [pc, #500]	; (800292c <xTaskIncrementTick+0x20c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800273c:	4a7b      	ldr	r2, [pc, #492]	; (800292c <xTaskIncrementTick+0x20c>)
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d120      	bne.n	800278a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002748:	4b79      	ldr	r3, [pc, #484]	; (8002930 <xTaskIncrementTick+0x210>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <xTaskIncrementTick+0x48>
        __asm volatile
 8002752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	607b      	str	r3, [r7, #4]
    }
 8002764:	bf00      	nop
 8002766:	e7fe      	b.n	8002766 <xTaskIncrementTick+0x46>
 8002768:	4b71      	ldr	r3, [pc, #452]	; (8002930 <xTaskIncrementTick+0x210>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	4b71      	ldr	r3, [pc, #452]	; (8002934 <xTaskIncrementTick+0x214>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6f      	ldr	r2, [pc, #444]	; (8002930 <xTaskIncrementTick+0x210>)
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4a6f      	ldr	r2, [pc, #444]	; (8002934 <xTaskIncrementTick+0x214>)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b6e      	ldr	r3, [pc, #440]	; (8002938 <xTaskIncrementTick+0x218>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3301      	adds	r3, #1
 8002782:	4a6d      	ldr	r2, [pc, #436]	; (8002938 <xTaskIncrementTick+0x218>)
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	f000 f9e5 	bl	8002b54 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800278a:	4b6c      	ldr	r3, [pc, #432]	; (800293c <xTaskIncrementTick+0x21c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a3a      	ldr	r2, [r7, #32]
 8002790:	429a      	cmp	r2, r3
 8002792:	f0c0 80aa 	bcc.w	80028ea <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002796:	4b66      	ldr	r3, [pc, #408]	; (8002930 <xTaskIncrementTick+0x210>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027a0:	4b66      	ldr	r3, [pc, #408]	; (800293c <xTaskIncrementTick+0x21c>)
 80027a2:	f04f 32ff 	mov.w	r2, #4294967295
 80027a6:	601a      	str	r2, [r3, #0]
                    break;
 80027a8:	e09f      	b.n	80028ea <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027aa:	4b61      	ldr	r3, [pc, #388]	; (8002930 <xTaskIncrementTick+0x210>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80027ba:	6a3a      	ldr	r2, [r7, #32]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d203      	bcs.n	80027ca <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80027c2:	4a5e      	ldr	r2, [pc, #376]	; (800293c <xTaskIncrementTick+0x21c>)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80027c8:	e08f      	b.n	80028ea <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	68d2      	ldr	r2, [r2, #12]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	6892      	ldr	r2, [r2, #8]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	3304      	adds	r3, #4
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d103      	bne.n	80027f8 <xTaskIncrementTick+0xd8>
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2200      	movs	r2, #0
 80027fc:	615a      	str	r2, [r3, #20]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01e      	beq.n	800284e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	6a12      	ldr	r2, [r2, #32]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	69d2      	ldr	r2, [r2, #28]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	3318      	adds	r3, #24
 8002832:	429a      	cmp	r2, r3
 8002834:	d103      	bne.n	800283e <xTaskIncrementTick+0x11e>
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6a1a      	ldr	r2, [r3, #32]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2200      	movs	r2, #0
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	1e5a      	subs	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	4618      	mov	r0, r3
 8002852:	f002 ffb3 	bl	80057bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	2201      	movs	r2, #1
 800285c:	409a      	lsls	r2, r3
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <xTaskIncrementTick+0x220>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	4a36      	ldr	r2, [pc, #216]	; (8002940 <xTaskIncrementTick+0x220>)
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286c:	4935      	ldr	r1, [pc, #212]	; (8002944 <xTaskIncrementTick+0x224>)
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	3304      	adds	r3, #4
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	3204      	adds	r2, #4
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	1d1a      	adds	r2, r3, #4
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4a26      	ldr	r2, [pc, #152]	; (8002944 <xTaskIncrementTick+0x224>)
 80028ac:	441a      	add	r2, r3
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	615a      	str	r2, [r3, #20]
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b6:	4923      	ldr	r1, [pc, #140]	; (8002944 <xTaskIncrementTick+0x224>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	1c59      	adds	r1, r3, #1
 80028c6:	481f      	ldr	r0, [pc, #124]	; (8002944 <xTaskIncrementTick+0x224>)
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4403      	add	r3, r0
 80028d2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <xTaskIncrementTick+0x228>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	429a      	cmp	r2, r3
 80028e0:	f67f af59 	bls.w	8002796 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80028e4:	2301      	movs	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028e8:	e755      	b.n	8002796 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <xTaskIncrementTick+0x228>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f0:	4914      	ldr	r1, [pc, #80]	; (8002944 <xTaskIncrementTick+0x224>)
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d901      	bls.n	8002906 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002902:	2301      	movs	r3, #1
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <xTaskIncrementTick+0x22c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800290e:	2301      	movs	r3, #1
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
 8002912:	e004      	b.n	800291e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <xTaskIncrementTick+0x230>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3301      	adds	r3, #1
 800291a:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <xTaskIncrementTick+0x230>)
 800291c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002920:	4618      	mov	r0, r3
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000019c 	.word	0x2000019c
 800292c:	20000178 	.word	0x20000178
 8002930:	2000012c 	.word	0x2000012c
 8002934:	20000130 	.word	0x20000130
 8002938:	2000018c 	.word	0x2000018c
 800293c:	20000194 	.word	0x20000194
 8002940:	2000017c 	.word	0x2000017c
 8002944:	200000a0 	.word	0x200000a0
 8002948:	2000009c 	.word	0x2000009c
 800294c:	20000188 	.word	0x20000188
 8002950:	20000184 	.word	0x20000184

08002954 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800295a:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <vTaskSwitchContext+0xbc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002962:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <vTaskSwitchContext+0xc0>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002968:	e04d      	b.n	8002a06 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800296a:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <vTaskSwitchContext+0xc0>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002970:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <vTaskSwitchContext+0xc4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	f1c3 031f 	rsb	r3, r3, #31
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	4925      	ldr	r1, [pc, #148]	; (8002a1c <vTaskSwitchContext+0xc8>)
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <vTaskSwitchContext+0x5c>
        __asm volatile
 800299a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	607b      	str	r3, [r7, #4]
    }
 80029ac:	bf00      	nop
 80029ae:	e7fe      	b.n	80029ae <vTaskSwitchContext+0x5a>
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <vTaskSwitchContext+0xc8>)
 80029bc:	4413      	add	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	3308      	adds	r3, #8
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d104      	bne.n	80029e0 <vTaskSwitchContext+0x8c>
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <vTaskSwitchContext+0xcc>)
 80029e8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80029ea:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <vTaskSwitchContext+0xcc>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <vTaskSwitchContext+0xd0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d102      	bne.n	80029fc <vTaskSwitchContext+0xa8>
 80029f6:	f002 fe41 	bl	800567c <SEGGER_SYSVIEW_OnIdle>
}
 80029fa:	e004      	b.n	8002a06 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <vTaskSwitchContext+0xcc>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 fe99 	bl	8005738 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000019c 	.word	0x2000019c
 8002a14:	20000188 	.word	0x20000188
 8002a18:	2000017c 	.word	0x2000017c
 8002a1c:	200000a0 	.word	0x200000a0
 8002a20:	2000009c 	.word	0x2000009c
 8002a24:	20000198 	.word	0x20000198

08002a28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002a30:	f000 f852 	bl	8002ad8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <prvIdleTask+0x28>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d9f9      	bls.n	8002a30 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <prvIdleTask+0x2c>)
 8002a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002a4c:	e7f0      	b.n	8002a30 <prvIdleTask+0x8>
 8002a4e:	bf00      	nop
 8002a50:	200000a0 	.word	0x200000a0
 8002a54:	e000ed04 	.word	0xe000ed04

08002a58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	e00c      	b.n	8002a7e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <prvInitialiseTaskLists+0x60>)
 8002a70:	4413      	add	r3, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff faf8 	bl	8002068 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d9ef      	bls.n	8002a64 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a84:	480d      	ldr	r0, [pc, #52]	; (8002abc <prvInitialiseTaskLists+0x64>)
 8002a86:	f7ff faef 	bl	8002068 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a8a:	480d      	ldr	r0, [pc, #52]	; (8002ac0 <prvInitialiseTaskLists+0x68>)
 8002a8c:	f7ff faec 	bl	8002068 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a90:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <prvInitialiseTaskLists+0x6c>)
 8002a92:	f7ff fae9 	bl	8002068 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002a96:	480c      	ldr	r0, [pc, #48]	; (8002ac8 <prvInitialiseTaskLists+0x70>)
 8002a98:	f7ff fae6 	bl	8002068 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002a9c:	480b      	ldr	r0, [pc, #44]	; (8002acc <prvInitialiseTaskLists+0x74>)
 8002a9e:	f7ff fae3 	bl	8002068 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <prvInitialiseTaskLists+0x78>)
 8002aa4:	4a05      	ldr	r2, [pc, #20]	; (8002abc <prvInitialiseTaskLists+0x64>)
 8002aa6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <prvInitialiseTaskLists+0x7c>)
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <prvInitialiseTaskLists+0x68>)
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200000a0 	.word	0x200000a0
 8002abc:	20000104 	.word	0x20000104
 8002ac0:	20000118 	.word	0x20000118
 8002ac4:	20000134 	.word	0x20000134
 8002ac8:	20000148 	.word	0x20000148
 8002acc:	20000160 	.word	0x20000160
 8002ad0:	2000012c 	.word	0x2000012c
 8002ad4:	20000130 	.word	0x20000130

08002ad8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ade:	e019      	b.n	8002b14 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002ae0:	f000 fa00 	bl	8002ee4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <prvCheckTasksWaitingTermination+0x50>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3304      	adds	r3, #4
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fae6 	bl	80020c2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <prvCheckTasksWaitingTermination+0x54>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <prvCheckTasksWaitingTermination+0x54>)
 8002afe:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <prvCheckTasksWaitingTermination+0x58>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <prvCheckTasksWaitingTermination+0x58>)
 8002b08:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002b0a:	f000 fa1b 	bl	8002f44 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f810 	bl	8002b34 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <prvCheckTasksWaitingTermination+0x58>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e1      	bne.n	8002ae0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000148 	.word	0x20000148
 8002b2c:	20000174 	.word	0x20000174
 8002b30:	2000015c 	.word	0x2000015c

08002b34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fbb5 	bl	80032b0 <vPortFree>
            vPortFree( pxTCB );
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fbb2 	bl	80032b0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <prvResetNextTaskUnblockTime+0x30>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d104      	bne.n	8002b6c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <prvResetNextTaskUnblockTime+0x34>)
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b6a:	e005      	b.n	8002b78 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <prvResetNextTaskUnblockTime+0x30>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <prvResetNextTaskUnblockTime+0x34>)
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	2000012c 	.word	0x2000012c
 8002b88:	20000194 	.word	0x20000194

08002b8c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3b04      	subs	r3, #4
 8002b9c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ba4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3b04      	subs	r3, #4
 8002baa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f023 0201 	bic.w	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3b04      	subs	r3, #4
 8002bba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002bbc:	4a0c      	ldr	r2, [pc, #48]	; (8002bf0 <pxPortInitialiseStack+0x64>)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3b14      	subs	r3, #20
 8002bc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3b04      	subs	r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f06f 0202 	mvn.w	r2, #2
 8002bda:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3b20      	subs	r3, #32
 8002be0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002be2:	68fb      	ldr	r3, [r7, #12]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	08002bf5 	.word	0x08002bf5

08002bf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <prvTaskExitError+0x54>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c06:	d00a      	beq.n	8002c1e <prvTaskExitError+0x2a>
        __asm volatile
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	60fb      	str	r3, [r7, #12]
    }
 8002c1a:	bf00      	nop
 8002c1c:	e7fe      	b.n	8002c1c <prvTaskExitError+0x28>
        __asm volatile
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	60bb      	str	r3, [r7, #8]
    }
 8002c30:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c32:	bf00      	nop
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0fc      	beq.n	8002c34 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	20000010 	.word	0x20000010
 8002c4c:	00000000 	.word	0x00000000

08002c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c50:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <pxCurrentTCBConst2>)
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	6808      	ldr	r0, [r1, #0]
 8002c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c5a:	f380 8809 	msr	PSP, r0
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f380 8811 	msr	BASEPRI, r0
 8002c6a:	4770      	bx	lr
 8002c6c:	f3af 8000 	nop.w

08002c70 <pxCurrentTCBConst2>:
 8002c70:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop

08002c78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c78:	4808      	ldr	r0, [pc, #32]	; (8002c9c <prvPortStartFirstTask+0x24>)
 8002c7a:	6800      	ldr	r0, [r0, #0]
 8002c7c:	6800      	ldr	r0, [r0, #0]
 8002c7e:	f380 8808 	msr	MSP, r0
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f380 8814 	msr	CONTROL, r0
 8002c8a:	b662      	cpsie	i
 8002c8c:	b661      	cpsie	f
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	df00      	svc	0
 8002c98:	bf00      	nop
 8002c9a:	0000      	.short	0x0000
 8002c9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop

08002ca4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002caa:	4b46      	ldr	r3, [pc, #280]	; (8002dc4 <xPortStartScheduler+0x120>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a46      	ldr	r2, [pc, #280]	; (8002dc8 <xPortStartScheduler+0x124>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10a      	bne.n	8002cca <xPortStartScheduler+0x26>
        __asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	613b      	str	r3, [r7, #16]
    }
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002cca:	4b3e      	ldr	r3, [pc, #248]	; (8002dc4 <xPortStartScheduler+0x120>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a3f      	ldr	r2, [pc, #252]	; (8002dcc <xPortStartScheduler+0x128>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d10a      	bne.n	8002cea <xPortStartScheduler+0x46>
        __asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	60fb      	str	r3, [r7, #12]
    }
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002cea:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <xPortStartScheduler+0x12c>)
 8002cec:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	22ff      	movs	r2, #255	; 0xff
 8002cfa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <xPortStartScheduler+0x130>)
 8002d10:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d12:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d14:	2207      	movs	r2, #7
 8002d16:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d18:	e009      	b.n	8002d2e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	4a2d      	ldr	r2, [pc, #180]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d22:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b80      	cmp	r3, #128	; 0x80
 8002d38:	d0ef      	beq.n	8002d1a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d3a:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f1c3 0307 	rsb	r3, r3, #7
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d00a      	beq.n	8002d5c <xPortStartScheduler+0xb8>
        __asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	60bb      	str	r3, [r7, #8]
    }
 8002d58:	bf00      	nop
 8002d5a:	e7fe      	b.n	8002d5a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d64:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d66:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d6e:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d70:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <xPortStartScheduler+0x138>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <xPortStartScheduler+0x138>)
 8002d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <xPortStartScheduler+0x138>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <xPortStartScheduler+0x138>)
 8002d8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d92:	f000 f963 	bl	800305c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <xPortStartScheduler+0x13c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002d9c:	f000 f982 	bl	80030a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <xPortStartScheduler+0x140>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <xPortStartScheduler+0x140>)
 8002da6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002daa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002dac:	f7ff ff64 	bl	8002c78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002db0:	f7ff fdd0 	bl	8002954 <vTaskSwitchContext>
    prvTaskExitError();
 8002db4:	f7ff ff1e 	bl	8002bf4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	e000ed00 	.word	0xe000ed00
 8002dc8:	410fc271 	.word	0x410fc271
 8002dcc:	410fc270 	.word	0x410fc270
 8002dd0:	e000e400 	.word	0xe000e400
 8002dd4:	200001a0 	.word	0x200001a0
 8002dd8:	200001a4 	.word	0x200001a4
 8002ddc:	e000ed20 	.word	0xe000ed20
 8002de0:	20000010 	.word	0x20000010
 8002de4:	e000ef34 	.word	0xe000ef34

08002de8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002dee:	4b37      	ldr	r3, [pc, #220]	; (8002ecc <vInitPrioGroupValue+0xe4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a37      	ldr	r2, [pc, #220]	; (8002ed0 <vInitPrioGroupValue+0xe8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d10a      	bne.n	8002e0e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	613b      	str	r3, [r7, #16]
    }
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <vInitPrioGroupValue+0xe4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <vInitPrioGroupValue+0xec>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d10a      	bne.n	8002e2e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	60fb      	str	r3, [r7, #12]
    }
 8002e2a:	bf00      	nop
 8002e2c:	e7fe      	b.n	8002e2c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <vInitPrioGroupValue+0xf0>)
 8002e30:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	22ff      	movs	r2, #255	; 0xff
 8002e3e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <vInitPrioGroupValue+0xf4>)
 8002e54:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e56:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <vInitPrioGroupValue+0xf8>)
 8002e58:	2207      	movs	r2, #7
 8002e5a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e5c:	e009      	b.n	8002e72 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e5e:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <vInitPrioGroupValue+0xf8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <vInitPrioGroupValue+0xf8>)
 8002e66:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	2b80      	cmp	r3, #128	; 0x80
 8002e7c:	d0ef      	beq.n	8002e5e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <vInitPrioGroupValue+0xf8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f1c3 0307 	rsb	r3, r3, #7
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d00a      	beq.n	8002ea0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	60bb      	str	r3, [r7, #8]
    }
 8002e9c:	bf00      	nop
 8002e9e:	e7fe      	b.n	8002e9e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <vInitPrioGroupValue+0xf8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <vInitPrioGroupValue+0xf8>)
 8002ea8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <vInitPrioGroupValue+0xf8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002eb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <vInitPrioGroupValue+0xf8>)
 8002eb4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed00 	.word	0xe000ed00
 8002ed0:	410fc271 	.word	0x410fc271
 8002ed4:	410fc270 	.word	0x410fc270
 8002ed8:	e000e400 	.word	0xe000e400
 8002edc:	200001a0 	.word	0x200001a0
 8002ee0:	200001a4 	.word	0x200001a4

08002ee4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
        __asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	607b      	str	r3, [r7, #4]
    }
 8002efc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002efe:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <vPortEnterCritical+0x58>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	4a0d      	ldr	r2, [pc, #52]	; (8002f3c <vPortEnterCritical+0x58>)
 8002f06:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <vPortEnterCritical+0x58>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d10f      	bne.n	8002f30 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <vPortEnterCritical+0x5c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <vPortEnterCritical+0x4c>
        __asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	603b      	str	r3, [r7, #0]
    }
 8002f2c:	bf00      	nop
 8002f2e:	e7fe      	b.n	8002f2e <vPortEnterCritical+0x4a>
    }
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	20000010 	.word	0x20000010
 8002f40:	e000ed04 	.word	0xe000ed04

08002f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <vPortExitCritical+0x50>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <vPortExitCritical+0x24>
        __asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	607b      	str	r3, [r7, #4]
    }
 8002f64:	bf00      	nop
 8002f66:	e7fe      	b.n	8002f66 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <vPortExitCritical+0x50>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <vPortExitCritical+0x50>)
 8002f70:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <vPortExitCritical+0x50>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <vPortExitCritical+0x42>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f84:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000010 	.word	0x20000010
	...

08002fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002fa0:	f3ef 8009 	mrs	r0, PSP
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	4b15      	ldr	r3, [pc, #84]	; (8003000 <pxCurrentTCBConst>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	f01e 0f10 	tst.w	lr, #16
 8002fb0:	bf08      	it	eq
 8002fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fba:	6010      	str	r0, [r2, #0]
 8002fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002fc4:	f380 8811 	msr	BASEPRI, r0
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f7ff fcc0 	bl	8002954 <vTaskSwitchContext>
 8002fd4:	f04f 0000 	mov.w	r0, #0
 8002fd8:	f380 8811 	msr	BASEPRI, r0
 8002fdc:	bc09      	pop	{r0, r3}
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	6808      	ldr	r0, [r1, #0]
 8002fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe6:	f01e 0f10 	tst.w	lr, #16
 8002fea:	bf08      	it	eq
 8002fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ff0:	f380 8809 	msr	PSP, r0
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	f3af 8000 	nop.w

08003000 <pxCurrentTCBConst>:
 8003000:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop

08003008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
        __asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	607b      	str	r3, [r7, #4]
    }
 8003020:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003022:	f002 fab1 	bl	8005588 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003026:	f7ff fb7b 	bl	8002720 <xTaskIncrementTick>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d006      	beq.n	800303e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003030:	f002 fb08 	bl	8005644 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <SysTick_Handler+0x50>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e001      	b.n	8003042 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800303e:	f002 fae5 	bl	800560c <SEGGER_SYSVIEW_RecordExitISR>
 8003042:	2300      	movs	r3, #0
 8003044:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f383 8811 	msr	BASEPRI, r3
    }
 800304c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	e000ed04 	.word	0xe000ed04

0800305c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <vPortSetupTimerInterrupt+0x34>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <vPortSetupTimerInterrupt+0x38>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800306c:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <vPortSetupTimerInterrupt+0x3c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0a      	ldr	r2, [pc, #40]	; (800309c <vPortSetupTimerInterrupt+0x40>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	4a09      	ldr	r2, [pc, #36]	; (80030a0 <vPortSetupTimerInterrupt+0x44>)
 800307a:	3b01      	subs	r3, #1
 800307c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <vPortSetupTimerInterrupt+0x34>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000e010 	.word	0xe000e010
 8003094:	e000e018 	.word	0xe000e018
 8003098:	20000000 	.word	0x20000000
 800309c:	10624dd3 	.word	0x10624dd3
 80030a0:	e000e014 	.word	0xe000e014

080030a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80030a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80030b4 <vPortEnableVFP+0x10>
 80030a8:	6801      	ldr	r1, [r0, #0]
 80030aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80030ae:	6001      	str	r1, [r0, #0]
 80030b0:	4770      	bx	lr
 80030b2:	0000      	.short	0x0000
 80030b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop

080030bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80030c2:	f3ef 8305 	mrs	r3, IPSR
 80030c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	d914      	bls.n	80030f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80030ce:	4a17      	ldr	r2, [pc, #92]	; (800312c <vPortValidateInterruptPriority+0x70>)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80030d8:	4b15      	ldr	r3, [pc, #84]	; (8003130 <vPortValidateInterruptPriority+0x74>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	7afa      	ldrb	r2, [r7, #11]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d20a      	bcs.n	80030f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	607b      	str	r3, [r7, #4]
    }
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <vPortValidateInterruptPriority+0x78>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <vPortValidateInterruptPriority+0x7c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d90a      	bls.n	800311e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	603b      	str	r3, [r7, #0]
    }
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <vPortValidateInterruptPriority+0x60>
    }
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000e3f0 	.word	0xe000e3f0
 8003130:	200001a0 	.word	0x200001a0
 8003134:	e000ed0c 	.word	0xe000ed0c
 8003138:	200001a4 	.word	0x200001a4

0800313c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003148:	f7ff f9ca 	bl	80024e0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <pvPortMalloc+0x160>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003154:	f000 f908 	bl	8003368 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d012      	beq.n	8003184 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800315e:	2208      	movs	r2, #8
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	3308      	adds	r3, #8
 800316a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	43db      	mvns	r3, r3
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	429a      	cmp	r2, r3
 8003174:	d804      	bhi.n	8003180 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4413      	add	r3, r2
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	e001      	b.n	8003184 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db70      	blt.n	800326c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d06d      	beq.n	800326c <pvPortMalloc+0x130>
 8003190:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <pvPortMalloc+0x164>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	429a      	cmp	r2, r3
 8003198:	d868      	bhi.n	800326c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800319a:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <pvPortMalloc+0x168>)
 800319c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <pvPortMalloc+0x168>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031a4:	e004      	b.n	80031b0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d903      	bls.n	80031c2 <pvPortMalloc+0x86>
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f1      	bne.n	80031a6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80031c2:	4b36      	ldr	r3, [pc, #216]	; (800329c <pvPortMalloc+0x160>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d04f      	beq.n	800326c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2208      	movs	r2, #8
 80031d2:	4413      	add	r3, r2
 80031d4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	1ad2      	subs	r2, r2, r3
 80031e6:	2308      	movs	r3, #8
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d91f      	bls.n	800322e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <pvPortMalloc+0xda>
        __asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	613b      	str	r3, [r7, #16]
    }
 8003212:	bf00      	nop
 8003214:	e7fe      	b.n	8003214 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	1ad2      	subs	r2, r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003228:	6978      	ldr	r0, [r7, #20]
 800322a:	f000 f8f9 	bl	8003420 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <pvPortMalloc+0x164>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <pvPortMalloc+0x164>)
 800323a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800323c:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <pvPortMalloc+0x164>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <pvPortMalloc+0x16c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d203      	bcs.n	8003250 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <pvPortMalloc+0x164>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <pvPortMalloc+0x16c>)
 800324e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <pvPortMalloc+0x170>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	4a10      	ldr	r2, [pc, #64]	; (80032ac <pvPortMalloc+0x170>)
 800326a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800326c:	f7ff f946 	bl	80024fc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <pvPortMalloc+0x154>
        __asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	60fb      	str	r3, [r7, #12]
    }
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <pvPortMalloc+0x152>
    return pvReturn;
 8003290:	69fb      	ldr	r3, [r7, #28]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3728      	adds	r7, #40	; 0x28
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20012db0 	.word	0x20012db0
 80032a0:	20012db4 	.word	0x20012db4
 80032a4:	20012da8 	.word	0x20012da8
 80032a8:	20012db8 	.word	0x20012db8
 80032ac:	20012dbc 	.word	0x20012dbc

080032b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d049      	beq.n	8003356 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80032c2:	2308      	movs	r3, #8
 80032c4:	425b      	negs	r3, r3
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4413      	add	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	db0a      	blt.n	80032ee <vPortFree+0x3e>
        __asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	60fb      	str	r3, [r7, #12]
    }
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <vPortFree+0x5c>
        __asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	60bb      	str	r3, [r7, #8]
    }
 8003308:	bf00      	nop
 800330a:	e7fe      	b.n	800330a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	0fdb      	lsrs	r3, r3, #31
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01c      	beq.n	8003356 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d118      	bne.n	8003356 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003330:	f7ff f8d6 	bl	80024e0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <vPortFree+0xb0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4413      	add	r3, r2
 800333e:	4a08      	ldr	r2, [pc, #32]	; (8003360 <vPortFree+0xb0>)
 8003340:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003342:	6938      	ldr	r0, [r7, #16]
 8003344:	f000 f86c 	bl	8003420 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003348:	4b06      	ldr	r3, [pc, #24]	; (8003364 <vPortFree+0xb4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	4a05      	ldr	r2, [pc, #20]	; (8003364 <vPortFree+0xb4>)
 8003350:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003352:	f7ff f8d3 	bl	80024fc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003356:	bf00      	nop
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20012db4 	.word	0x20012db4
 8003364:	20012dc0 	.word	0x20012dc0

08003368 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800336e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003372:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <prvHeapInit+0xa4>)
 8003376:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00c      	beq.n	800339c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3307      	adds	r3, #7
 8003386:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0307 	bic.w	r3, r3, #7
 800338e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <prvHeapInit+0xa4>)
 8003398:	4413      	add	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033a0:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <prvHeapInit+0xa8>)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80033a6:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <prvHeapInit+0xa8>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	4413      	add	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80033b4:	2208      	movs	r2, #8
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0307 	bic.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a13      	ldr	r2, [pc, #76]	; (8003414 <prvHeapInit+0xac>)
 80033c8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <prvHeapInit+0xac>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80033d2:	4b10      	ldr	r3, [pc, #64]	; (8003414 <prvHeapInit+0xac>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	1ad2      	subs	r2, r2, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <prvHeapInit+0xac>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a08      	ldr	r2, [pc, #32]	; (8003418 <prvHeapInit+0xb0>)
 80033f6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <prvHeapInit+0xb4>)
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	200001a8 	.word	0x200001a8
 8003410:	20012da8 	.word	0x20012da8
 8003414:	20012db0 	.word	0x20012db0
 8003418:	20012db8 	.word	0x20012db8
 800341c:	20012db4 	.word	0x20012db4

08003420 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003428:	4b28      	ldr	r3, [pc, #160]	; (80034cc <prvInsertBlockIntoFreeList+0xac>)
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e002      	b.n	8003434 <prvInsertBlockIntoFreeList+0x14>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	429a      	cmp	r2, r3
 800343c:	d8f7      	bhi.n	800342e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	4413      	add	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d108      	bne.n	8003462 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	441a      	add	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	441a      	add	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d118      	bne.n	80034a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <prvInsertBlockIntoFreeList+0xb0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d00d      	beq.n	800349e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	441a      	add	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	e008      	b.n	80034b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <prvInsertBlockIntoFreeList+0xb0>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e003      	b.n	80034b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d002      	beq.n	80034be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20012da8 	.word	0x20012da8
 80034d0:	20012db0 	.word	0x20012db0

080034d4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80034d8:	4803      	ldr	r0, [pc, #12]	; (80034e8 <_cbSendSystemDesc+0x14>)
 80034da:	f001 ffff 	bl	80054dc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80034de:	4803      	ldr	r0, [pc, #12]	; (80034ec <_cbSendSystemDesc+0x18>)
 80034e0:	f001 fffc 	bl	80054dc <SEGGER_SYSVIEW_SendSysDesc>
}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	080064e8 	.word	0x080064e8
 80034ec:	08006530 	.word	0x08006530

080034f0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <SEGGER_SYSVIEW_Conf+0x20>)
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <SEGGER_SYSVIEW_Conf+0x20>)
 80034fa:	6819      	ldr	r1, [r3, #0]
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <SEGGER_SYSVIEW_Conf+0x24>)
 80034fe:	4a06      	ldr	r2, [pc, #24]	; (8003518 <SEGGER_SYSVIEW_Conf+0x28>)
 8003500:	f001 fc70 	bl	8004de4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003504:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003508:	f001 fcb0 	bl	8004e6c <SEGGER_SYSVIEW_SetRAMBase>
}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}
 8003510:	20000000 	.word	0x20000000
 8003514:	080034d5 	.word	0x080034d5
 8003518:	080065cc 	.word	0x080065cc

0800351c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800351c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800351e:	b085      	sub	sp, #20
 8003520:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	e033      	b.n	8003590 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003528:	491e      	ldr	r1, [pc, #120]	; (80035a4 <_cbSendTaskList+0x88>)
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	491a      	ldr	r1, [pc, #104]	; (80035a4 <_cbSendTaskList+0x88>)
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3304      	adds	r3, #4
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	4c16      	ldr	r4, [pc, #88]	; (80035a4 <_cbSendTaskList+0x88>)
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4423      	add	r3, r4
 8003558:	3308      	adds	r3, #8
 800355a:	681c      	ldr	r4, [r3, #0]
 800355c:	4d11      	ldr	r5, [pc, #68]	; (80035a4 <_cbSendTaskList+0x88>)
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	442b      	add	r3, r5
 800356a:	330c      	adds	r3, #12
 800356c:	681d      	ldr	r5, [r3, #0]
 800356e:	4e0d      	ldr	r6, [pc, #52]	; (80035a4 <_cbSendTaskList+0x88>)
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4433      	add	r3, r6
 800357c:	3310      	adds	r3, #16
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	462b      	mov	r3, r5
 8003584:	4622      	mov	r2, r4
 8003586:	f000 f8b5 	bl	80036f4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3301      	adds	r3, #1
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <_cbSendTaskList+0x8c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	429a      	cmp	r2, r3
 8003598:	d3c6      	bcc.n	8003528 <_cbSendTaskList+0xc>
  }
}
 800359a:	bf00      	nop
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035a4:	20012dc4 	.word	0x20012dc4
 80035a8:	20012e64 	.word	0x20012e64

080035ac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80035ac:	b5b0      	push	{r4, r5, r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80035b2:	f7ff f8a3 	bl	80026fc <xTaskGetTickCountFromISR>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80035c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	f04f 0400 	mov.w	r4, #0
 80035ce:	f04f 0500 	mov.w	r5, #0
 80035d2:	015d      	lsls	r5, r3, #5
 80035d4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80035d8:	0154      	lsls	r4, r2, #5
 80035da:	4622      	mov	r2, r4
 80035dc:	462b      	mov	r3, r5
 80035de:	1a12      	subs	r2, r2, r0
 80035e0:	eb63 0301 	sbc.w	r3, r3, r1
 80035e4:	f04f 0400 	mov.w	r4, #0
 80035e8:	f04f 0500 	mov.w	r5, #0
 80035ec:	009d      	lsls	r5, r3, #2
 80035ee:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80035f2:	0094      	lsls	r4, r2, #2
 80035f4:	4622      	mov	r2, r4
 80035f6:	462b      	mov	r3, r5
 80035f8:	1812      	adds	r2, r2, r0
 80035fa:	eb41 0303 	adc.w	r3, r1, r3
 80035fe:	f04f 0000 	mov.w	r0, #0
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	00d9      	lsls	r1, r3, #3
 8003608:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800360c:	00d0      	lsls	r0, r2, #3
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8003616:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bdb0      	pop	{r4, r5, r7, pc}

08003624 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003632:	2205      	movs	r2, #5
 8003634:	492b      	ldr	r1, [pc, #172]	; (80036e4 <SYSVIEW_AddTask+0xc0>)
 8003636:	68b8      	ldr	r0, [r7, #8]
 8003638:	f002 faaa 	bl	8005b90 <memcmp>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d04b      	beq.n	80036da <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003642:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <SYSVIEW_AddTask+0xc4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b07      	cmp	r3, #7
 8003648:	d903      	bls.n	8003652 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800364a:	4828      	ldr	r0, [pc, #160]	; (80036ec <SYSVIEW_AddTask+0xc8>)
 800364c:	f002 f9f2 	bl	8005a34 <SEGGER_SYSVIEW_Warn>
    return;
 8003650:	e044      	b.n	80036dc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003652:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <SYSVIEW_AddTask+0xc4>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4926      	ldr	r1, [pc, #152]	; (80036f0 <SYSVIEW_AddTask+0xcc>)
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <SYSVIEW_AddTask+0xc4>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4921      	ldr	r1, [pc, #132]	; (80036f0 <SYSVIEW_AddTask+0xcc>)
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3304      	adds	r3, #4
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800367c:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <SYSVIEW_AddTask+0xc4>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	491b      	ldr	r1, [pc, #108]	; (80036f0 <SYSVIEW_AddTask+0xcc>)
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3308      	adds	r3, #8
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <SYSVIEW_AddTask+0xc4>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4916      	ldr	r1, [pc, #88]	; (80036f0 <SYSVIEW_AddTask+0xcc>)
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	330c      	adds	r3, #12
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80036a8:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <SYSVIEW_AddTask+0xc4>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4910      	ldr	r1, [pc, #64]	; (80036f0 <SYSVIEW_AddTask+0xcc>)
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3310      	adds	r3, #16
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <SYSVIEW_AddTask+0xc4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <SYSVIEW_AddTask+0xc4>)
 80036c6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f80e 	bl	80036f4 <SYSVIEW_SendTaskInfo>
 80036d8:	e000      	b.n	80036dc <SYSVIEW_AddTask+0xb8>
    return;
 80036da:	bf00      	nop

}
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	08006540 	.word	0x08006540
 80036e8:	20012e64 	.word	0x20012e64
 80036ec:	08006548 	.word	0x08006548
 80036f0:	20012dc4 	.word	0x20012dc4

080036f4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003702:	f107 0314 	add.w	r3, r7, #20
 8003706:	2214      	movs	r2, #20
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f002 fa5c 	bl	8005bc8 <memset>
  TaskInfo.TaskID     = TaskID;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003724:	f107 0314 	add.w	r3, r7, #20
 8003728:	4618      	mov	r0, r3
 800372a:	f001 fddf 	bl	80052ec <SEGGER_SYSVIEW_SendTaskInfo>
}
 800372e:	bf00      	nop
 8003730:	3728      	adds	r7, #40	; 0x28
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <__NVIC_EnableIRQ>:
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	2b00      	cmp	r3, #0
 8003748:	db0b      	blt.n	8003762 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	4907      	ldr	r1, [pc, #28]	; (8003770 <__NVIC_EnableIRQ+0x38>)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2001      	movs	r0, #1
 800375a:	fa00 f202 	lsl.w	r2, r0, r2
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000e100 	.word	0xe000e100

08003774 <__NVIC_SetPriority>:
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	6039      	str	r1, [r7, #0]
 800377e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003784:	2b00      	cmp	r3, #0
 8003786:	db0a      	blt.n	800379e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	490c      	ldr	r1, [pc, #48]	; (80037c0 <__NVIC_SetPriority+0x4c>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	0112      	lsls	r2, r2, #4
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	440b      	add	r3, r1
 8003798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800379c:	e00a      	b.n	80037b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	4908      	ldr	r1, [pc, #32]	; (80037c4 <__NVIC_SetPriority+0x50>)
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	3b04      	subs	r3, #4
 80037ac:	0112      	lsls	r2, r2, #4
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	440b      	add	r3, r1
 80037b2:	761a      	strb	r2, [r3, #24]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000e100 	.word	0xe000e100
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80037ce:	f002 f98d 	bl	8005aec <SEGGER_SYSVIEW_IsStarted>
 80037d2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80037da:	f001 fc0b 	bl	8004ff4 <SEGGER_SYSVIEW_Start>
  }
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <_cbOnUARTRx+0x3c>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d806      	bhi.n	8003808 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <_cbOnUARTRx+0x3c>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4b08      	ldr	r3, [pc, #32]	; (8003824 <_cbOnUARTRx+0x3c>)
 8003804:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003806:	e009      	b.n	800381c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003808:	f7ff ffde 	bl	80037c8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <_cbOnUARTRx+0x3c>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4618      	mov	r0, r3
 8003812:	1dfb      	adds	r3, r7, #7
 8003814:	2201      	movs	r2, #1
 8003816:	4619      	mov	r1, r3
 8003818:	f000 fb9c 	bl	8003f54 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800381c:	bf00      	nop
}
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000014 	.word	0x20000014

08003828 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <_cbOnUARTTx+0x5c>)
 8003832:	785b      	ldrb	r3, [r3, #1]
 8003834:	2b03      	cmp	r3, #3
 8003836:	d80f      	bhi.n	8003858 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003838:	4b12      	ldr	r3, [pc, #72]	; (8003884 <_cbOnUARTTx+0x5c>)
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	461a      	mov	r2, r3
 800383e:	4b12      	ldr	r3, [pc, #72]	; (8003888 <_cbOnUARTTx+0x60>)
 8003840:	5c9a      	ldrb	r2, [r3, r2]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003846:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <_cbOnUARTTx+0x5c>)
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	3301      	adds	r3, #1
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <_cbOnUARTTx+0x5c>)
 8003850:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003852:	2301      	movs	r3, #1
 8003854:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003856:	e00f      	b.n	8003878 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <_cbOnUARTTx+0x5c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fa1b 	bl	8003c9c <SEGGER_RTT_ReadUpBufferNoLock>
 8003866:	4603      	mov	r3, r0
 8003868:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	da02      	bge.n	8003876 <_cbOnUARTTx+0x4e>
    r = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e000      	b.n	8003878 <_cbOnUARTTx+0x50>
  }
Done:
 8003876:	bf00      	nop
  return r;
 8003878:	68fb      	ldr	r3, [r7, #12]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000014 	.word	0x20000014
 8003888:	080065d4 	.word	0x080065d4

0800388c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003894:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <SEGGER_UART_init+0x1c>)
 8003896:	4905      	ldr	r1, [pc, #20]	; (80038ac <SEGGER_UART_init+0x20>)
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f863 	bl	8003964 <HIF_UART_Init>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	080037e9 	.word	0x080037e9
 80038ac:	08003829 	.word	0x08003829

080038b0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80038b6:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <USART2_IRQHandler+0x80>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d011      	beq.n	80038ea <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80038c6:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <USART2_IRQHandler+0x84>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 030b 	and.w	r3, r3, #11
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d108      	bne.n	80038ea <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <USART2_IRQHandler+0x88>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80038e0:	4b15      	ldr	r3, [pc, #84]	; (8003938 <USART2_IRQHandler+0x88>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	79fa      	ldrb	r2, [r7, #7]
 80038e6:	4610      	mov	r0, r2
 80038e8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01a      	beq.n	800392a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80038f4:	4b11      	ldr	r3, [pc, #68]	; (800393c <USART2_IRQHandler+0x8c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80038fc:	4b0f      	ldr	r3, [pc, #60]	; (800393c <USART2_IRQHandler+0x8c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	1dfa      	adds	r2, r7, #7
 8003902:	4610      	mov	r0, r2
 8003904:	4798      	blx	r3
 8003906:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <USART2_IRQHandler+0x90>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a0b      	ldr	r2, [pc, #44]	; (8003940 <USART2_IRQHandler+0x90>)
 8003914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e006      	b.n	800392a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <USART2_IRQHandler+0x80>)
 800391e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003920:	79fa      	ldrb	r2, [r7, #7]
 8003922:	4b04      	ldr	r3, [pc, #16]	; (8003934 <USART2_IRQHandler+0x84>)
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e000      	b.n	800392a <USART2_IRQHandler+0x7a>
      return;
 8003928:	bf00      	nop
    }
  }
}
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40004400 	.word	0x40004400
 8003934:	40004404 	.word	0x40004404
 8003938:	20012e68 	.word	0x20012e68
 800393c:	20012e6c 	.word	0x20012e6c
 8003940:	4000440c 	.word	0x4000440c

08003944 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800394e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003952:	6013      	str	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	4000440c 	.word	0x4000440c

08003964 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003970:	4b2e      	ldr	r3, [pc, #184]	; (8003a2c <HIF_UART_Init+0xc8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a2d      	ldr	r2, [pc, #180]	; (8003a2c <HIF_UART_Init+0xc8>)
 8003976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800397c:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <HIF_UART_Init+0xcc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2b      	ldr	r2, [pc, #172]	; (8003a30 <HIF_UART_Init+0xcc>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003988:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <HIF_UART_Init+0xd0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003994:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800399c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800399e:	4a25      	ldr	r2, [pc, #148]	; (8003a34 <HIF_UART_Init+0xd0>)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80039a4:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <HIF_UART_Init+0xd4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80039b8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80039ba:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <HIF_UART_Init+0xd4>)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80039c0:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <HIF_UART_Init+0xd8>)
 80039c2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80039c6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80039c8:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <HIF_UART_Init+0xdc>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HIF_UART_Init+0xe0>)
 80039d0:	2280      	movs	r2, #128	; 0x80
 80039d2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80039da:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <HIF_UART_Init+0xe4>)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	3301      	adds	r3, #1
 80039e4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d302      	bcc.n	80039fa <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80039f4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80039f8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <HIF_UART_Init+0xe8>)
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003a0a:	4a11      	ldr	r2, [pc, #68]	; (8003a50 <HIF_UART_Init+0xec>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003a10:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <HIF_UART_Init+0xf0>)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003a16:	2106      	movs	r1, #6
 8003a18:	2026      	movs	r0, #38	; 0x26
 8003a1a:	f7ff feab 	bl	8003774 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003a1e:	2026      	movs	r0, #38	; 0x26
 8003a20:	f7ff fe8a 	bl	8003738 <__NVIC_EnableIRQ>
}
 8003a24:	bf00      	nop
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40023840 	.word	0x40023840
 8003a30:	40023830 	.word	0x40023830
 8003a34:	40020020 	.word	0x40020020
 8003a38:	40020000 	.word	0x40020000
 8003a3c:	4000440c 	.word	0x4000440c
 8003a40:	40004410 	.word	0x40004410
 8003a44:	40004414 	.word	0x40004414
 8003a48:	05f5e100 	.word	0x05f5e100
 8003a4c:	40004408 	.word	0x40004408
 8003a50:	20012e68 	.word	0x20012e68
 8003a54:	20012e6c 	.word	0x20012e6c

08003a58 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003a5e:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <_DoInit+0xa0>)
 8003a60:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003a62:	22a8      	movs	r2, #168	; 0xa8
 8003a64:	2100      	movs	r1, #0
 8003a66:	6838      	ldr	r0, [r7, #0]
 8003a68:	f002 f8ae 	bl	8005bc8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2203      	movs	r2, #3
 8003a76:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4a20      	ldr	r2, [pc, #128]	; (8003afc <_DoInit+0xa4>)
 8003a7c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <_DoInit+0xa8>)
 8003a82:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a8a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2200      	movs	r2, #0
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	4a16      	ldr	r2, [pc, #88]	; (8003afc <_DoInit+0xa4>)
 8003aa2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	4a17      	ldr	r2, [pc, #92]	; (8003b04 <_DoInit+0xac>)
 8003aa8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2210      	movs	r2, #16
 8003aae:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003ac2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	e00c      	b.n	8003ae6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f1c3 030f 	rsb	r3, r3, #15
 8003ad2:	4a0d      	ldr	r2, [pc, #52]	; (8003b08 <_DoInit+0xb0>)
 8003ad4:	5cd1      	ldrb	r1, [r2, r3]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	460a      	mov	r2, r1
 8003ade:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b0f      	cmp	r3, #15
 8003aea:	d9ef      	bls.n	8003acc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003aec:	f3bf 8f5f 	dmb	sy
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	200143f4 	.word	0x200143f4
 8003afc:	08006598 	.word	0x08006598
 8003b00:	20012e70 	.word	0x20012e70
 8003b04:	20013270 	.word	0x20013270
 8003b08:	080065d8 	.word	0x080065d8

08003b0c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d905      	bls.n	8003b3c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	e007      	b.n	8003b4c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	69b9      	ldr	r1, [r7, #24]
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	1acb      	subs	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	4293      	cmp	r3, r2
 8003b58:	bf28      	it	cs
 8003b5a:	4613      	movcs	r3, r2
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4293      	cmp	r3, r2
 8003b64:	bf28      	it	cs
 8003b66:	4613      	movcs	r3, r2
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	6978      	ldr	r0, [r7, #20]
 8003b7a:	f002 f817 	bl	8005bac <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003b7e:	6a3a      	ldr	r2, [r7, #32]
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	4413      	add	r3, r2
 8003b84:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	4413      	add	r3, r2
 8003b8c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	4413      	add	r3, r2
 8003b9c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d101      	bne.n	8003bac <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003bac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1b2      	bne.n	8003b22 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3728      	adds	r7, #40	; 0x28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b088      	sub	sp, #32
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d911      	bls.n	8003c0e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68b9      	ldr	r1, [r7, #8]
 8003bf8:	6938      	ldr	r0, [r7, #16]
 8003bfa:	f001 ffd7 	bl	8005bac <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003bfe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	441a      	add	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003c0c:	e01f      	b.n	8003c4e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	6938      	ldr	r0, [r7, #16]
 8003c22:	f001 ffc3 	bl	8005bac <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	4413      	add	r3, r2
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6938      	ldr	r0, [r7, #16]
 8003c40:	f001 ffb4 	bl	8005bac <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c44:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	60da      	str	r2, [r3, #12]
}
 8003c4e:	bf00      	nop
 8003c50:	3720      	adds	r7, #32
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003c56:	b480      	push	{r7}
 8003c58:	b087      	sub	sp, #28
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d808      	bhi.n	8003c84 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad2      	subs	r2, r2, r3
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	e004      	b.n	8003c8e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003c8e:	697b      	ldr	r3, [r7, #20]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	; 0x30
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003ca8:	4b3e      	ldr	r3, [pc, #248]	; (8003da4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003caa:	623b      	str	r3, [r7, #32]
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b53      	cmp	r3, #83	; 0x53
 8003cb4:	d001      	beq.n	8003cba <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003cb6:	f7ff fecf 	bl	8003a58 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4a37      	ldr	r2, [pc, #220]	; (8003da4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003cc8:	4413      	add	r3, r2
 8003cca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d92b      	bls.n	8003d40 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	bf28      	it	cs
 8003cfa:	4613      	movcs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	4413      	add	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	6939      	ldr	r1, [r7, #16]
 8003d0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d0e:	f001 ff4d 	bl	8005bac <memcpy>
    NumBytesRead += NumBytesRem;
 8003d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	4413      	add	r3, r2
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	4413      	add	r3, r2
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	4413      	add	r3, r2
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d101      	bne.n	8003d40 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	bf28      	it	cs
 8003d50:	4613      	movcs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d019      	beq.n	8003d8e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	4413      	add	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	6939      	ldr	r1, [r7, #16]
 8003d68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d6a:	f001 ff1f 	bl	8005bac <memcpy>
    NumBytesRead += NumBytesRem;
 8003d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	4413      	add	r3, r2
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d98:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3730      	adds	r7, #48	; 0x30
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	200143f4 	.word	0x200143f4

08003da8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08c      	sub	sp, #48	; 0x30
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003db4:	4b3e      	ldr	r3, [pc, #248]	; (8003eb0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003db6:	623b      	str	r3, [r7, #32]
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b53      	cmp	r3, #83	; 0x53
 8003dc0:	d001      	beq.n	8003dc6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003dc2:	f7ff fe49 	bl	8003a58 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	3360      	adds	r3, #96	; 0x60
 8003dd2:	4a37      	ldr	r2, [pc, #220]	; (8003eb0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003dd4:	4413      	add	r3, r2
 8003dd6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d92b      	bls.n	8003e4c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4293      	cmp	r3, r2
 8003e04:	bf28      	it	cs
 8003e06:	4613      	movcs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	4413      	add	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	6939      	ldr	r1, [r7, #16]
 8003e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e1a:	f001 fec7 	bl	8005bac <memcpy>
    NumBytesRead += NumBytesRem;
 8003e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	4413      	add	r3, r2
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d101      	bne.n	8003e4c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	bf28      	it	cs
 8003e5c:	4613      	movcs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d019      	beq.n	8003e9a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	4413      	add	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	6939      	ldr	r1, [r7, #16]
 8003e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e76:	f001 fe99 	bl	8005bac <memcpy>
    NumBytesRead += NumBytesRem;
 8003e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	4413      	add	r3, r2
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	4413      	add	r3, r2
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	4413      	add	r3, r2
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ea4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3730      	adds	r7, #48	; 0x30
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	200143f4 	.word	0x200143f4

08003eb4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	3360      	adds	r3, #96	; 0x60
 8003ed0:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003ed2:	4413      	add	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d029      	beq.n	8003f32 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d82e      	bhi.n	8003f40 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d013      	beq.n	8003f12 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003eea:	e029      	b.n	8003f40 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003eec:	6978      	ldr	r0, [r7, #20]
 8003eee:	f7ff feb2 	bl	8003c56 <_GetAvailWriteSpace>
 8003ef2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d202      	bcs.n	8003f02 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003f00:	e021      	b.n	8003f46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	69b9      	ldr	r1, [r7, #24]
 8003f0a:	6978      	ldr	r0, [r7, #20]
 8003f0c:	f7ff fe5b 	bl	8003bc6 <_WriteNoCheck>
    break;
 8003f10:	e019      	b.n	8003f46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f12:	6978      	ldr	r0, [r7, #20]
 8003f14:	f7ff fe9f 	bl	8003c56 <_GetAvailWriteSpace>
 8003f18:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	bf28      	it	cs
 8003f22:	4613      	movcs	r3, r2
 8003f24:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	69b9      	ldr	r1, [r7, #24]
 8003f2a:	6978      	ldr	r0, [r7, #20]
 8003f2c:	f7ff fe4b 	bl	8003bc6 <_WriteNoCheck>
    break;
 8003f30:	e009      	b.n	8003f46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	69b9      	ldr	r1, [r7, #24]
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff fde8 	bl	8003b0c <_WriteBlocking>
 8003f3c:	61f8      	str	r0, [r7, #28]
    break;
 8003f3e:	e002      	b.n	8003f46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
    break;
 8003f44:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003f46:	69fb      	ldr	r3, [r7, #28]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200143f4 	.word	0x200143f4

08003f54 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b53      	cmp	r3, #83	; 0x53
 8003f6c:	d001      	beq.n	8003f72 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003f6e:	f7ff fd73 	bl	8003a58 <_DoInit>
  SEGGER_RTT_LOCK();
 8003f72:	f3ef 8311 	mrs	r3, BASEPRI
 8003f76:	f04f 0120 	mov.w	r1, #32
 8003f7a:	f381 8811 	msr	BASEPRI, r1
 8003f7e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7ff ff95 	bl	8003eb4 <SEGGER_RTT_WriteDownBufferNoLock>
 8003f8a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003f92:	697b      	ldr	r3, [r7, #20]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200143f4 	.word	0x200143f4

08003fa0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003fae:	4b3d      	ldr	r3, [pc, #244]	; (80040a4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b53      	cmp	r3, #83	; 0x53
 8003fba:	d001      	beq.n	8003fc0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003fbc:	f7ff fd4c 	bl	8003a58 <_DoInit>
  SEGGER_RTT_LOCK();
 8003fc0:	f3ef 8311 	mrs	r3, BASEPRI
 8003fc4:	f04f 0120 	mov.w	r1, #32
 8003fc8:	f381 8811 	msr	BASEPRI, r1
 8003fcc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fce:	4b35      	ldr	r3, [pc, #212]	; (80040a4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003fd0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	4613      	mov	r3, r2
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4413      	add	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	dbeb      	blt.n	8003fd6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003ffe:	e000      	b.n	8004002 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004000:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	429a      	cmp	r2, r3
 800400a:	da3f      	bge.n	800408c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800400c:	6939      	ldr	r1, [r7, #16]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	440b      	add	r3, r1
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004020:	6939      	ldr	r1, [r7, #16]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	440b      	add	r3, r1
 8004030:	3304      	adds	r3, #4
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004036:	6939      	ldr	r1, [r7, #16]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	4613      	mov	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	3320      	adds	r3, #32
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800404a:	6939      	ldr	r1, [r7, #16]
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	440b      	add	r3, r1
 8004058:	3328      	adds	r3, #40	; 0x28
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800405e:	6939      	ldr	r1, [r7, #16]
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	440b      	add	r3, r1
 800406c:	3324      	adds	r3, #36	; 0x24
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004072:	6939      	ldr	r1, [r7, #16]
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	440b      	add	r3, r1
 8004080:	332c      	adds	r3, #44	; 0x2c
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004086:	f3bf 8f5f 	dmb	sy
 800408a:	e002      	b.n	8004092 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
 8004090:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004098:	69fb      	ldr	r3, [r7, #28]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3720      	adds	r7, #32
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	200143f4 	.word	0x200143f4

080040a8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80040b6:	4b21      	ldr	r3, [pc, #132]	; (800413c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80040b8:	623b      	str	r3, [r7, #32]
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b53      	cmp	r3, #83	; 0x53
 80040c2:	d001      	beq.n	80040c8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80040c4:	f7ff fcc8 	bl	8003a58 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040c8:	4b1c      	ldr	r3, [pc, #112]	; (800413c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80040ca:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d82c      	bhi.n	800412c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80040d2:	f3ef 8311 	mrs	r3, BASEPRI
 80040d6:	f04f 0120 	mov.w	r1, #32
 80040da:	f381 8811 	msr	BASEPRI, r1
 80040de:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	3360      	adds	r3, #96	; 0x60
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	4413      	add	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00e      	beq.n	8004116 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800411c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004126:	2300      	movs	r3, #0
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
 800412a:	e002      	b.n	8004132 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800412c:	f04f 33ff 	mov.w	r3, #4294967295
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004134:	4618      	mov	r0, r3
 8004136:	3728      	adds	r7, #40	; 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	200143f4 	.word	0x200143f4

08004140 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	60fa      	str	r2, [r7, #12]
 8004156:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b80      	cmp	r3, #128	; 0x80
 800415c:	d90a      	bls.n	8004174 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800415e:	2380      	movs	r3, #128	; 0x80
 8004160:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004162:	e007      	b.n	8004174 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	1c53      	adds	r3, r2, #1
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1c59      	adds	r1, r3, #1
 800416e:	60f9      	str	r1, [r7, #12]
 8004170:	7812      	ldrb	r2, [r2, #0]
 8004172:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	1e5a      	subs	r2, r3, #1
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <_EncodeStr+0x46>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ee      	bne.n	8004164 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	b2da      	uxtb	r2, r3
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004192:	68fb      	ldr	r3, [r7, #12]
}
 8004194:	4618      	mov	r0, r3
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3307      	adds	r3, #7
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80041be:	4b35      	ldr	r3, [pc, #212]	; (8004294 <_HandleIncomingPacket+0xdc>)
 80041c0:	7e1b      	ldrb	r3, [r3, #24]
 80041c2:	4618      	mov	r0, r3
 80041c4:	1cfb      	adds	r3, r7, #3
 80041c6:	2201      	movs	r2, #1
 80041c8:	4619      	mov	r1, r3
 80041ca:	f7ff fded 	bl	8003da8 <SEGGER_RTT_ReadNoLock>
 80041ce:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d052      	beq.n	800427c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d031      	beq.n	8004240 <_HandleIncomingPacket+0x88>
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	dc40      	bgt.n	8004262 <_HandleIncomingPacket+0xaa>
 80041e0:	2b07      	cmp	r3, #7
 80041e2:	dc15      	bgt.n	8004210 <_HandleIncomingPacket+0x58>
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	dd3c      	ble.n	8004262 <_HandleIncomingPacket+0xaa>
 80041e8:	3b01      	subs	r3, #1
 80041ea:	2b06      	cmp	r3, #6
 80041ec:	d839      	bhi.n	8004262 <_HandleIncomingPacket+0xaa>
 80041ee:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <_HandleIncomingPacket+0x3c>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	08004217 	.word	0x08004217
 80041f8:	0800421d 	.word	0x0800421d
 80041fc:	08004223 	.word	0x08004223
 8004200:	08004229 	.word	0x08004229
 8004204:	0800422f 	.word	0x0800422f
 8004208:	08004235 	.word	0x08004235
 800420c:	0800423b 	.word	0x0800423b
 8004210:	2b7f      	cmp	r3, #127	; 0x7f
 8004212:	d035      	beq.n	8004280 <_HandleIncomingPacket+0xc8>
 8004214:	e025      	b.n	8004262 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004216:	f000 feed 	bl	8004ff4 <SEGGER_SYSVIEW_Start>
      break;
 800421a:	e036      	b.n	800428a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800421c:	f000 ffa6 	bl	800516c <SEGGER_SYSVIEW_Stop>
      break;
 8004220:	e033      	b.n	800428a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004222:	f001 f97f 	bl	8005524 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004226:	e030      	b.n	800428a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004228:	f001 f944 	bl	80054b4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800422c:	e02d      	b.n	800428a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800422e:	f000 ffc3 	bl	80051b8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004232:	e02a      	b.n	800428a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004234:	f001 fbac 	bl	8005990 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004238:	e027      	b.n	800428a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800423a:	f001 fb8b 	bl	8005954 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800423e:	e024      	b.n	800428a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004240:	4b14      	ldr	r3, [pc, #80]	; (8004294 <_HandleIncomingPacket+0xdc>)
 8004242:	7e1b      	ldrb	r3, [r3, #24]
 8004244:	4618      	mov	r0, r3
 8004246:	1cfb      	adds	r3, r7, #3
 8004248:	2201      	movs	r2, #1
 800424a:	4619      	mov	r1, r3
 800424c:	f7ff fdac 	bl	8003da8 <SEGGER_RTT_ReadNoLock>
 8004250:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	4618      	mov	r0, r3
 800425c:	f001 faf0 	bl	8005840 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004260:	e010      	b.n	8004284 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	b25b      	sxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	da0e      	bge.n	8004288 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800426a:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <_HandleIncomingPacket+0xdc>)
 800426c:	7e1b      	ldrb	r3, [r3, #24]
 800426e:	4618      	mov	r0, r3
 8004270:	1cfb      	adds	r3, r7, #3
 8004272:	2201      	movs	r2, #1
 8004274:	4619      	mov	r1, r3
 8004276:	f7ff fd97 	bl	8003da8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800427a:	e005      	b.n	8004288 <_HandleIncomingPacket+0xd0>
    }
  }
 800427c:	bf00      	nop
 800427e:	e004      	b.n	800428a <_HandleIncomingPacket+0xd2>
      break;
 8004280:	bf00      	nop
 8004282:	e002      	b.n	800428a <_HandleIncomingPacket+0xd2>
      break;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <_HandleIncomingPacket+0xd2>
      break;
 8004288:	bf00      	nop
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20014288 	.word	0x20014288

08004298 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004298:	b580      	push	{r7, lr}
 800429a:	b08c      	sub	sp, #48	; 0x30
 800429c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800429e:	2301      	movs	r3, #1
 80042a0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80042a2:	1d3b      	adds	r3, r7, #4
 80042a4:	3301      	adds	r3, #1
 80042a6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ac:	4b32      	ldr	r3, [pc, #200]	; (8004378 <_TrySendOverflowPacket+0xe0>)
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b2:	e00b      	b.n	80042cc <_TrySendOverflowPacket+0x34>
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ba:	1c59      	adds	r1, r3, #1
 80042bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80042be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	09db      	lsrs	r3, r3, #7
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	2b7f      	cmp	r3, #127	; 0x7f
 80042d0:	d8f0      	bhi.n	80042b4 <_TrySendOverflowPacket+0x1c>
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80042e2:	4b26      	ldr	r3, [pc, #152]	; (800437c <_TrySendOverflowPacket+0xe4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80042e8:	4b23      	ldr	r3, [pc, #140]	; (8004378 <_TrySendOverflowPacket+0xe0>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	623b      	str	r3, [r7, #32]
 80042fa:	e00b      	b.n	8004314 <_TrySendOverflowPacket+0x7c>
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	1c59      	adds	r1, r3, #1
 8004304:	6279      	str	r1, [r7, #36]	; 0x24
 8004306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	09db      	lsrs	r3, r3, #7
 8004312:	623b      	str	r3, [r7, #32]
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	2b7f      	cmp	r3, #127	; 0x7f
 8004318:	d8f0      	bhi.n	80042fc <_TrySendOverflowPacket+0x64>
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	627a      	str	r2, [r7, #36]	; 0x24
 8004320:	6a3a      	ldr	r2, [r7, #32]
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <_TrySendOverflowPacket+0xe0>)
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	4618      	mov	r0, r3
 8004330:	1d3b      	adds	r3, r7, #4
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	461a      	mov	r2, r3
 8004338:	1d3b      	adds	r3, r7, #4
 800433a:	4619      	mov	r1, r3
 800433c:	f7fb ff50 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004340:	4603      	mov	r3, r0
 8004342:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004344:	f7ff fafe 	bl	8003944 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800434e:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <_TrySendOverflowPacket+0xe0>)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004354:	4b08      	ldr	r3, [pc, #32]	; (8004378 <_TrySendOverflowPacket+0xe0>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	3b01      	subs	r3, #1
 800435a:	b2da      	uxtb	r2, r3
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <_TrySendOverflowPacket+0xe0>)
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e004      	b.n	800436c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <_TrySendOverflowPacket+0xe0>)
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	3301      	adds	r3, #1
 8004368:	4a03      	ldr	r2, [pc, #12]	; (8004378 <_TrySendOverflowPacket+0xe0>)
 800436a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800436c:	693b      	ldr	r3, [r7, #16]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3730      	adds	r7, #48	; 0x30
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20014288 	.word	0x20014288
 800437c:	e0001004 	.word	0xe0001004

08004380 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	; 0x28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800438c:	4b9b      	ldr	r3, [pc, #620]	; (80045fc <_SendPacket+0x27c>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d010      	beq.n	80043b6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004394:	4b99      	ldr	r3, [pc, #612]	; (80045fc <_SendPacket+0x27c>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 812b 	beq.w	80045f4 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800439e:	4b97      	ldr	r3, [pc, #604]	; (80045fc <_SendPacket+0x27c>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d109      	bne.n	80043ba <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80043a6:	f7ff ff77 	bl	8004298 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80043aa:	4b94      	ldr	r3, [pc, #592]	; (80045fc <_SendPacket+0x27c>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	f040 8122 	bne.w	80045f8 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 80043b4:	e001      	b.n	80043ba <_SendPacket+0x3a>
    goto Send;
 80043b6:	bf00      	nop
 80043b8:	e000      	b.n	80043bc <_SendPacket+0x3c>
Send:
 80043ba:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b1f      	cmp	r3, #31
 80043c0:	d809      	bhi.n	80043d6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80043c2:	4b8e      	ldr	r3, [pc, #568]	; (80045fc <_SendPacket+0x27c>)
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f040 8117 	bne.w	8004604 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b17      	cmp	r3, #23
 80043da:	d807      	bhi.n	80043ec <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3b01      	subs	r3, #1
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e0c4      	b.n	8004576 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2b7f      	cmp	r3, #127	; 0x7f
 80043f8:	d912      	bls.n	8004420 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	09da      	lsrs	r2, r3, #7
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3b01      	subs	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	3a01      	subs	r2, #1
 8004412:	60fa      	str	r2, [r7, #12]
 8004414:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	e006      	b.n	800442e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3b01      	subs	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b7e      	cmp	r3, #126	; 0x7e
 8004432:	d807      	bhi.n	8004444 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3b01      	subs	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	b2da      	uxtb	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	e098      	b.n	8004576 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800444a:	d212      	bcs.n	8004472 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	09da      	lsrs	r2, r3, #7
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3b01      	subs	r3, #1
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	3a01      	subs	r2, #1
 8004464:	60fa      	str	r2, [r7, #12]
 8004466:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e081      	b.n	8004576 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004478:	d21d      	bcs.n	80044b6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0b9a      	lsrs	r2, r3, #14
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3b01      	subs	r3, #1
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	09db      	lsrs	r3, r3, #7
 800448e:	b2db      	uxtb	r3, r3
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	3a01      	subs	r2, #1
 8004494:	60fa      	str	r2, [r7, #12]
 8004496:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	3a01      	subs	r2, #1
 80044a8:	60fa      	str	r2, [r7, #12]
 80044aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e05f      	b.n	8004576 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044bc:	d228      	bcs.n	8004510 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0d5a      	lsrs	r2, r3, #21
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	0b9b      	lsrs	r3, r3, #14
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	3a01      	subs	r2, #1
 80044d8:	60fa      	str	r2, [r7, #12]
 80044da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	09db      	lsrs	r3, r3, #7
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	3a01      	subs	r2, #1
 80044ee:	60fa      	str	r2, [r7, #12]
 80044f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	3a01      	subs	r2, #1
 8004502:	60fa      	str	r2, [r7, #12]
 8004504:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004508:	b2da      	uxtb	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	e032      	b.n	8004576 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	0f1a      	lsrs	r2, r3, #28
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3b01      	subs	r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	0d5b      	lsrs	r3, r3, #21
 8004524:	b2db      	uxtb	r3, r3
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	3a01      	subs	r2, #1
 800452a:	60fa      	str	r2, [r7, #12]
 800452c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0b9b      	lsrs	r3, r3, #14
 800453a:	b2db      	uxtb	r3, r3
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	3a01      	subs	r2, #1
 8004540:	60fa      	str	r2, [r7, #12]
 8004542:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004546:	b2da      	uxtb	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	09db      	lsrs	r3, r3, #7
 8004550:	b2db      	uxtb	r3, r3
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	3a01      	subs	r2, #1
 8004556:	60fa      	str	r2, [r7, #12]
 8004558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	3a01      	subs	r2, #1
 800456a:	60fa      	str	r2, [r7, #12]
 800456c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004570:	b2da      	uxtb	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004576:	4b22      	ldr	r3, [pc, #136]	; (8004600 <_SendPacket+0x280>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800457c:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <_SendPacket+0x27c>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	623b      	str	r3, [r7, #32]
 800458e:	e00b      	b.n	80045a8 <_SendPacket+0x228>
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	1c59      	adds	r1, r3, #1
 8004598:	6279      	str	r1, [r7, #36]	; 0x24
 800459a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	09db      	lsrs	r3, r3, #7
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	2b7f      	cmp	r3, #127	; 0x7f
 80045ac:	d8f0      	bhi.n	8004590 <_SendPacket+0x210>
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	627a      	str	r2, [r7, #36]	; 0x24
 80045b4:	6a3a      	ldr	r2, [r7, #32]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <_SendPacket+0x27c>)
 80045c0:	785b      	ldrb	r3, [r3, #1]
 80045c2:	4618      	mov	r0, r3
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	68f9      	ldr	r1, [r7, #12]
 80045ce:	f7fb fe07 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80045d2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80045d4:	f7ff f9b6 	bl	8003944 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80045de:	4a07      	ldr	r2, [pc, #28]	; (80045fc <_SendPacket+0x27c>)
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	60d3      	str	r3, [r2, #12]
 80045e4:	e00f      	b.n	8004606 <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <_SendPacket+0x27c>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	3301      	adds	r3, #1
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	4b03      	ldr	r3, [pc, #12]	; (80045fc <_SendPacket+0x27c>)
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	e008      	b.n	8004606 <_SendPacket+0x286>
    goto SendDone;
 80045f4:	bf00      	nop
 80045f6:	e006      	b.n	8004606 <_SendPacket+0x286>
      goto SendDone;
 80045f8:	bf00      	nop
 80045fa:	e004      	b.n	8004606 <_SendPacket+0x286>
 80045fc:	20014288 	.word	0x20014288
 8004600:	e0001004 	.word	0xe0001004
      goto SendDone;
 8004604:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <_SendPacket+0x2d8>)
 8004608:	7e1b      	ldrb	r3, [r3, #24]
 800460a:	4619      	mov	r1, r3
 800460c:	4a13      	ldr	r2, [pc, #76]	; (800465c <_SendPacket+0x2dc>)
 800460e:	460b      	mov	r3, r1
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	440b      	add	r3, r1
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4413      	add	r3, r2
 8004618:	336c      	adds	r3, #108	; 0x6c
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <_SendPacket+0x2d8>)
 800461e:	7e1b      	ldrb	r3, [r3, #24]
 8004620:	4618      	mov	r0, r3
 8004622:	490e      	ldr	r1, [pc, #56]	; (800465c <_SendPacket+0x2dc>)
 8004624:	4603      	mov	r3, r0
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	4403      	add	r3, r0
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	440b      	add	r3, r1
 800462e:	3370      	adds	r3, #112	; 0x70
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d00b      	beq.n	800464e <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <_SendPacket+0x2d8>)
 8004638:	789b      	ldrb	r3, [r3, #2]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <_SendPacket+0x2d8>)
 8004640:	2201      	movs	r2, #1
 8004642:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004644:	f7ff fdb8 	bl	80041b8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004648:	4b03      	ldr	r3, [pc, #12]	; (8004658 <_SendPacket+0x2d8>)
 800464a:	2200      	movs	r2, #0
 800464c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800464e:	bf00      	nop
 8004650:	3728      	adds	r7, #40	; 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20014288 	.word	0x20014288
 800465c:	200143f4 	.word	0x200143f4

08004660 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3301      	adds	r3, #1
 8004676:	2b80      	cmp	r3, #128	; 0x80
 8004678:	d80a      	bhi.n	8004690 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	1c59      	adds	r1, r3, #1
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6051      	str	r1, [r2, #4]
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d15a      	bne.n	800474e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	623b      	str	r3, [r7, #32]
 80046b8:	e00b      	b.n	80046d2 <_StoreChar+0x72>
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	1c59      	adds	r1, r3, #1
 80046c2:	6279      	str	r1, [r7, #36]	; 0x24
 80046c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	09db      	lsrs	r3, r3, #7
 80046d0:	623b      	str	r3, [r7, #32]
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	2b7f      	cmp	r3, #127	; 0x7f
 80046d6:	d8f0      	bhi.n	80046ba <_StoreChar+0x5a>
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	627a      	str	r2, [r7, #36]	; 0x24
 80046de:	6a3a      	ldr	r2, [r7, #32]
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	2300      	movs	r3, #0
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	e00b      	b.n	800470a <_StoreChar+0xaa>
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	1c59      	adds	r1, r3, #1
 80046fa:	61f9      	str	r1, [r7, #28]
 80046fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	09db      	lsrs	r3, r3, #7
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b7f      	cmp	r3, #127	; 0x7f
 800470e:	d8f0      	bhi.n	80046f2 <_StoreChar+0x92>
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	61fa      	str	r2, [r7, #28]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	221a      	movs	r2, #26
 8004726:	6939      	ldr	r1, [r7, #16]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fe29 	bl	8004380 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fd34 	bl	80041a0 <_PreparePacket>
 8004738:	4602      	mov	r2, r0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	611a      	str	r2, [r3, #16]
  }
}
 800474e:	bf00      	nop
 8004750:	3728      	adds	r7, #40	; 0x28
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b08a      	sub	sp, #40	; 0x28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800476a:	2301      	movs	r3, #1
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800476e:	2301      	movs	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004772:	e007      	b.n	8004784 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004774:	6a3a      	ldr	r2, [r7, #32]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	623b      	str	r3, [r7, #32]
    Width++;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3301      	adds	r3, #1
 8004782:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004784:	6a3a      	ldr	r2, [r7, #32]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	429a      	cmp	r2, r3
 800478a:	d2f3      	bcs.n	8004774 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	429a      	cmp	r2, r3
 8004792:	d901      	bls.n	8004798 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d11f      	bne.n	80047e2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01c      	beq.n	80047e2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80047a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <_PrintUnsigned+0x66>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <_PrintUnsigned+0x66>
        c = '0';
 80047b8:	2330      	movs	r3, #48	; 0x30
 80047ba:	76fb      	strb	r3, [r7, #27]
 80047bc:	e001      	b.n	80047c2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80047be:	2320      	movs	r3, #32
 80047c0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047c2:	e007      	b.n	80047d4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	3b01      	subs	r3, #1
 80047c8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80047ca:	7efb      	ldrb	r3, [r7, #27]
 80047cc:	4619      	mov	r1, r3
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f7ff ff46 	bl	8004660 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <_PrintUnsigned+0x8a>
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	429a      	cmp	r2, r3
 80047e0:	d3f0      	bcc.n	80047c4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d903      	bls.n	80047f0 <_PrintUnsigned+0x98>
      NumDigits--;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	e009      	b.n	8004804 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d200      	bcs.n	8004804 <_PrintUnsigned+0xac>
        break;
 8004802:	e005      	b.n	8004810 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800480e:	e7e8      	b.n	80047e2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004828:	4a15      	ldr	r2, [pc, #84]	; (8004880 <_PrintUnsigned+0x128>)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	4413      	add	r3, r2
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	4619      	mov	r1, r3
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff ff14 	bl	8004660 <_StoreChar>
    Digit /= Base;
 8004838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e3      	bne.n	8004810 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d011      	beq.n	8004876 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00e      	beq.n	8004876 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004858:	e006      	b.n	8004868 <_PrintUnsigned+0x110>
        FieldWidth--;
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	3b01      	subs	r3, #1
 800485e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004860:	2120      	movs	r1, #32
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f7ff fefc 	bl	8004660 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <_PrintUnsigned+0x11e>
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	429a      	cmp	r2, r3
 8004874:	d3f1      	bcc.n	800485a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004876:	bf00      	nop
 8004878:	3728      	adds	r7, #40	; 0x28
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	080065f8 	.word	0x080065f8

08004884 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	bfb8      	it	lt
 8004898:	425b      	neglt	r3, r3
 800489a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800489c:	2301      	movs	r3, #1
 800489e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80048a0:	e007      	b.n	80048b2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80048aa:	613b      	str	r3, [r7, #16]
    Width++;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3301      	adds	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	daf3      	bge.n	80048a2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d901      	bls.n	80048c6 <_PrintInt+0x42>
    Width = NumDigits;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <_PrintInt+0x5e>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	db04      	blt.n	80048dc <_PrintInt+0x58>
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <_PrintInt+0x5e>
    FieldWidth--;
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	3b01      	subs	r3, #1
 80048e0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <_PrintInt+0x6e>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <_PrintInt+0x9c>
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d111      	bne.n	8004920 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00e      	beq.n	8004920 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004902:	e006      	b.n	8004912 <_PrintInt+0x8e>
        FieldWidth--;
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	3b01      	subs	r3, #1
 8004908:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800490a:	2120      	movs	r1, #32
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff fea7 	bl	8004660 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <_PrintInt+0x9c>
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	429a      	cmp	r2, r3
 800491e:	d3f1      	bcc.n	8004904 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	da07      	bge.n	8004936 <_PrintInt+0xb2>
    v = -v;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	425b      	negs	r3, r3
 800492a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800492c:	212d      	movs	r1, #45	; 0x2d
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff fe96 	bl	8004660 <_StoreChar>
 8004934:	e008      	b.n	8004948 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004940:	212b      	movs	r1, #43	; 0x2b
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff fe8c 	bl	8004660 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d019      	beq.n	8004986 <_PrintInt+0x102>
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d114      	bne.n	8004986 <_PrintInt+0x102>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d111      	bne.n	8004986 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00e      	beq.n	8004986 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004968:	e006      	b.n	8004978 <_PrintInt+0xf4>
        FieldWidth--;
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	3b01      	subs	r3, #1
 800496e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004970:	2130      	movs	r1, #48	; 0x30
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7ff fe74 	bl	8004660 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <_PrintInt+0x102>
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	429a      	cmp	r2, r3
 8004984:	d3f1      	bcc.n	800496a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff fedf 	bl	8004758 <_PrintUnsigned>
}
 800499a:	bf00      	nop
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b098      	sub	sp, #96	; 0x60
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80049b0:	f3ef 8311 	mrs	r3, BASEPRI
 80049b4:	f04f 0120 	mov.w	r1, #32
 80049b8:	f381 8811 	msr	BASEPRI, r1
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049be:	48b7      	ldr	r0, [pc, #732]	; (8004c9c <_VPrintTarget+0x2f8>)
 80049c0:	f7ff fbee 	bl	80041a0 <_PreparePacket>
 80049c4:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80049c6:	4bb5      	ldr	r3, [pc, #724]	; (8004c9c <_VPrintTarget+0x2f8>)
 80049c8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80049ca:	2300      	movs	r3, #0
 80049cc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	3301      	adds	r3, #1
 80049d6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80049ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 81a8 	beq.w	8004d44 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80049f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049f8:	2b25      	cmp	r3, #37	; 0x25
 80049fa:	f040 8195 	bne.w	8004d28 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80049fe:	2300      	movs	r3, #0
 8004a00:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004a02:	2301      	movs	r3, #1
 8004a04:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004a0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a12:	3b23      	subs	r3, #35	; 0x23
 8004a14:	2b0d      	cmp	r3, #13
 8004a16:	d83f      	bhi.n	8004a98 <_VPrintTarget+0xf4>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <_VPrintTarget+0x7c>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a89 	.word	0x08004a89
 8004a24:	08004a99 	.word	0x08004a99
 8004a28:	08004a99 	.word	0x08004a99
 8004a2c:	08004a99 	.word	0x08004a99
 8004a30:	08004a99 	.word	0x08004a99
 8004a34:	08004a99 	.word	0x08004a99
 8004a38:	08004a99 	.word	0x08004a99
 8004a3c:	08004a99 	.word	0x08004a99
 8004a40:	08004a79 	.word	0x08004a79
 8004a44:	08004a99 	.word	0x08004a99
 8004a48:	08004a59 	.word	0x08004a59
 8004a4c:	08004a99 	.word	0x08004a99
 8004a50:	08004a99 	.word	0x08004a99
 8004a54:	08004a69 	.word	0x08004a69
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3301      	adds	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	e01a      	b.n	8004a9e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6a:	f043 0302 	orr.w	r3, r3, #2
 8004a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3301      	adds	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	e012      	b.n	8004a9e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7a:	f043 0304 	orr.w	r3, r3, #4
 8004a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	e00a      	b.n	8004a9e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8a:	f043 0308 	orr.w	r3, r3, #8
 8004a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3301      	adds	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	e002      	b.n	8004a9e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a9c:	bf00      	nop
        }
      } while (v);
 8004a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1b0      	bne.n	8004a06 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ab4:	2b2f      	cmp	r3, #47	; 0x2f
 8004ab6:	d912      	bls.n	8004ade <_VPrintTarget+0x13a>
 8004ab8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004abc:	2b39      	cmp	r3, #57	; 0x39
 8004abe:	d80e      	bhi.n	8004ade <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3b30      	subs	r3, #48	; 0x30
 8004ada:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004adc:	e7e4      	b.n	8004aa8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004aea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aee:	2b2e      	cmp	r3, #46	; 0x2e
 8004af0:	d11d      	bne.n	8004b2e <_VPrintTarget+0x18a>
        sFormat++;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3301      	adds	r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004b00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b04:	2b2f      	cmp	r3, #47	; 0x2f
 8004b06:	d912      	bls.n	8004b2e <_VPrintTarget+0x18a>
 8004b08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b0c:	2b39      	cmp	r3, #57	; 0x39
 8004b0e:	d80e      	bhi.n	8004b2e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	461a      	mov	r2, r3
 8004b22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b26:	4413      	add	r3, r2
 8004b28:	3b30      	subs	r3, #48	; 0x30
 8004b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004b2c:	e7e4      	b.n	8004af8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004b36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b3a:	2b6c      	cmp	r3, #108	; 0x6c
 8004b3c:	d003      	beq.n	8004b46 <_VPrintTarget+0x1a2>
 8004b3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b42:	2b68      	cmp	r3, #104	; 0x68
 8004b44:	d107      	bne.n	8004b56 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3301      	adds	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004b54:	e7ef      	b.n	8004b36 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004b56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b5a:	2b25      	cmp	r3, #37	; 0x25
 8004b5c:	f000 80d8 	beq.w	8004d10 <_VPrintTarget+0x36c>
 8004b60:	2b25      	cmp	r3, #37	; 0x25
 8004b62:	f2c0 80dc 	blt.w	8004d1e <_VPrintTarget+0x37a>
 8004b66:	2b78      	cmp	r3, #120	; 0x78
 8004b68:	f300 80d9 	bgt.w	8004d1e <_VPrintTarget+0x37a>
 8004b6c:	2b58      	cmp	r3, #88	; 0x58
 8004b6e:	f2c0 80d6 	blt.w	8004d1e <_VPrintTarget+0x37a>
 8004b72:	3b58      	subs	r3, #88	; 0x58
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	f200 80d2 	bhi.w	8004d1e <_VPrintTarget+0x37a>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <_VPrintTarget+0x1dc>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004c77 	.word	0x08004c77
 8004b84:	08004d1f 	.word	0x08004d1f
 8004b88:	08004d1f 	.word	0x08004d1f
 8004b8c:	08004d1f 	.word	0x08004d1f
 8004b90:	08004d1f 	.word	0x08004d1f
 8004b94:	08004d1f 	.word	0x08004d1f
 8004b98:	08004d1f 	.word	0x08004d1f
 8004b9c:	08004d1f 	.word	0x08004d1f
 8004ba0:	08004d1f 	.word	0x08004d1f
 8004ba4:	08004d1f 	.word	0x08004d1f
 8004ba8:	08004d1f 	.word	0x08004d1f
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c2b 	.word	0x08004c2b
 8004bb4:	08004d1f 	.word	0x08004d1f
 8004bb8:	08004d1f 	.word	0x08004d1f
 8004bbc:	08004d1f 	.word	0x08004d1f
 8004bc0:	08004d1f 	.word	0x08004d1f
 8004bc4:	08004d1f 	.word	0x08004d1f
 8004bc8:	08004d1f 	.word	0x08004d1f
 8004bcc:	08004d1f 	.word	0x08004d1f
 8004bd0:	08004d1f 	.word	0x08004d1f
 8004bd4:	08004d1f 	.word	0x08004d1f
 8004bd8:	08004d1f 	.word	0x08004d1f
 8004bdc:	08004d1f 	.word	0x08004d1f
 8004be0:	08004ceb 	.word	0x08004ceb
 8004be4:	08004d1f 	.word	0x08004d1f
 8004be8:	08004d1f 	.word	0x08004d1f
 8004bec:	08004ca1 	.word	0x08004ca1
 8004bf0:	08004d1f 	.word	0x08004d1f
 8004bf4:	08004c51 	.word	0x08004c51
 8004bf8:	08004d1f 	.word	0x08004d1f
 8004bfc:	08004d1f 	.word	0x08004d1f
 8004c00:	08004c77 	.word	0x08004c77
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	1d19      	adds	r1, r3, #4
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6011      	str	r1, [r2, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8004c18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004c1c:	f107 0310 	add.w	r3, r7, #16
 8004c20:	4611      	mov	r1, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fd1c 	bl	8004660 <_StoreChar>
        break;
 8004c28:	e07a      	b.n	8004d20 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	1d19      	adds	r1, r3, #4
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6011      	str	r1, [r2, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004c38:	f107 0010 	add.w	r0, r7, #16
 8004c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c46:	220a      	movs	r2, #10
 8004c48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c4a:	f7ff fe1b 	bl	8004884 <_PrintInt>
        break;
 8004c4e:	e067      	b.n	8004d20 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	1d19      	adds	r1, r3, #4
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6011      	str	r1, [r2, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004c5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c60:	f107 0010 	add.w	r0, r7, #16
 8004c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6e:	220a      	movs	r2, #10
 8004c70:	f7ff fd72 	bl	8004758 <_PrintUnsigned>
        break;
 8004c74:	e054      	b.n	8004d20 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	1d19      	adds	r1, r3, #4
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6011      	str	r1, [r2, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004c84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c86:	f107 0010 	add.w	r0, r7, #16
 8004c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c94:	2210      	movs	r2, #16
 8004c96:	f7ff fd5f 	bl	8004758 <_PrintUnsigned>
        break;
 8004c9a:	e041      	b.n	8004d20 <_VPrintTarget+0x37c>
 8004c9c:	200142b8 	.word	0x200142b8
      case 's':
        s = va_arg(*pParamList, const char*);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	1d19      	adds	r1, r3, #4
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6011      	str	r1, [r2, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8004cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <_VPrintTarget+0x314>
          s = "(null)";
 8004cb4:	4b4a      	ldr	r3, [pc, #296]	; (8004de0 <_VPrintTarget+0x43c>)
 8004cb6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8004cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8004cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8004cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004cce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004cd2:	f107 0310 	add.w	r3, r7, #16
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fcc1 	bl	8004660 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce2:	d9e9      	bls.n	8004cb8 <_VPrintTarget+0x314>
        break;
 8004ce4:	e01c      	b.n	8004d20 <_VPrintTarget+0x37c>
            break;
 8004ce6:	bf00      	nop
        break;
 8004ce8:	e01a      	b.n	8004d20 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	1d19      	adds	r1, r3, #4
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6011      	str	r1, [r2, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004cf8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cfa:	f107 0010 	add.w	r0, r7, #16
 8004cfe:	2300      	movs	r3, #0
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	2308      	movs	r3, #8
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	2308      	movs	r3, #8
 8004d08:	2210      	movs	r2, #16
 8004d0a:	f7ff fd25 	bl	8004758 <_PrintUnsigned>
        break;
 8004d0e:	e007      	b.n	8004d20 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004d10:	f107 0310 	add.w	r3, r7, #16
 8004d14:	2125      	movs	r1, #37	; 0x25
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fca2 	bl	8004660 <_StoreChar>
        break;
 8004d1c:	e000      	b.n	8004d20 <_VPrintTarget+0x37c>
      default:
        break;
 8004d1e:	bf00      	nop
      }
      sFormat++;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3301      	adds	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e007      	b.n	8004d38 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004d28:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004d2c:	f107 0310 	add.w	r3, r7, #16
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fc94 	bl	8004660 <_StoreChar>
    }
  } while (*sFormat);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f47f ae4d 	bne.w	80049dc <_VPrintTarget+0x38>
 8004d42:	e000      	b.n	8004d46 <_VPrintTarget+0x3a2>
      break;
 8004d44:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d041      	beq.n	8004dd0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004d4c:	6a3a      	ldr	r2, [r7, #32]
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d5c:	e00b      	b.n	8004d76 <_VPrintTarget+0x3d2>
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d64:	1c59      	adds	r1, r3, #1
 8004d66:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004d68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	09db      	lsrs	r3, r3, #7
 8004d74:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	2b7f      	cmp	r3, #127	; 0x7f
 8004d7a:	d8f0      	bhi.n	8004d5e <_VPrintTarget+0x3ba>
 8004d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d8a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d90:	2300      	movs	r3, #0
 8004d92:	633b      	str	r3, [r7, #48]	; 0x30
 8004d94:	e00b      	b.n	8004dae <_VPrintTarget+0x40a>
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9c:	1c59      	adds	r1, r3, #1
 8004d9e:	6379      	str	r1, [r7, #52]	; 0x34
 8004da0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	09db      	lsrs	r3, r3, #7
 8004dac:	633b      	str	r3, [r7, #48]	; 0x30
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	2b7f      	cmp	r3, #127	; 0x7f
 8004db2:	d8f0      	bhi.n	8004d96 <_VPrintTarget+0x3f2>
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	637a      	str	r2, [r7, #52]	; 0x34
 8004dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	6979      	ldr	r1, [r7, #20]
 8004dc8:	221a      	movs	r2, #26
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fad8 	bl	8004380 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004dd6:	bf00      	nop
 8004dd8:	3758      	adds	r7, #88	; 0x58
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	080065a4 	.word	0x080065a4

08004de4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004df2:	2300      	movs	r3, #0
 8004df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004df8:	4917      	ldr	r1, [pc, #92]	; (8004e58 <SEGGER_SYSVIEW_Init+0x74>)
 8004dfa:	4818      	ldr	r0, [pc, #96]	; (8004e5c <SEGGER_SYSVIEW_Init+0x78>)
 8004dfc:	f7ff f8d0 	bl	8003fa0 <SEGGER_RTT_AllocUpBuffer>
 8004e00:	4603      	mov	r3, r0
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e06:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004e08:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e0a:	785a      	ldrb	r2, [r3, #1]
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e0e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e10:	4b13      	ldr	r3, [pc, #76]	; (8004e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e12:	7e1b      	ldrb	r3, [r3, #24]
 8004e14:	4618      	mov	r0, r3
 8004e16:	2300      	movs	r3, #0
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	2308      	movs	r3, #8
 8004e1c:	4a11      	ldr	r2, [pc, #68]	; (8004e64 <SEGGER_SYSVIEW_Init+0x80>)
 8004e1e:	490f      	ldr	r1, [pc, #60]	; (8004e5c <SEGGER_SYSVIEW_Init+0x78>)
 8004e20:	f7ff f942 	bl	80040a8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004e24:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <SEGGER_SYSVIEW_Init+0x84>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a0c      	ldr	r2, [pc, #48]	; (8004e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e30:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004e32:	4a0b      	ldr	r2, [pc, #44]	; (8004e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004e38:	4a09      	ldr	r2, [pc, #36]	; (8004e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004e3e:	4a08      	ldr	r2, [pc, #32]	; (8004e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004e44:	4a06      	ldr	r2, [pc, #24]	; (8004e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20013280 	.word	0x20013280
 8004e5c:	080065ac 	.word	0x080065ac
 8004e60:	20014288 	.word	0x20014288
 8004e64:	20014280 	.word	0x20014280
 8004e68:	e0001004 	.word	0xe0001004

08004e6c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004e74:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6113      	str	r3, [r2, #16]
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20014288 	.word	0x20014288

08004e8c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e94:	f3ef 8311 	mrs	r3, BASEPRI
 8004e98:	f04f 0120 	mov.w	r1, #32
 8004e9c:	f381 8811 	msr	BASEPRI, r1
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	4808      	ldr	r0, [pc, #32]	; (8004ec4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004ea4:	f7ff f97c 	bl	80041a0 <_PreparePacket>
 8004ea8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	68b8      	ldr	r0, [r7, #8]
 8004eb0:	f7ff fa66 	bl	8004380 <_SendPacket>
  RECORD_END();
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f383 8811 	msr	BASEPRI, r3
}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200142b8 	.word	0x200142b8

08004ec8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed6:	f04f 0120 	mov.w	r1, #32
 8004eda:	f381 8811 	msr	BASEPRI, r1
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	4816      	ldr	r0, [pc, #88]	; (8004f3c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004ee2:	f7ff f95d 	bl	80041a0 <_PreparePacket>
 8004ee6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	e00b      	b.n	8004f0e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	1c59      	adds	r1, r3, #1
 8004efe:	61f9      	str	r1, [r7, #28]
 8004f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	09db      	lsrs	r3, r3, #7
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b7f      	cmp	r3, #127	; 0x7f
 8004f12:	d8f0      	bhi.n	8004ef6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	61fa      	str	r2, [r7, #28]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	6938      	ldr	r0, [r7, #16]
 8004f2a:	f7ff fa29 	bl	8004380 <_SendPacket>
  RECORD_END();
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f383 8811 	msr	BASEPRI, r3
}
 8004f34:	bf00      	nop
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	200142b8 	.word	0x200142b8

08004f40 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08c      	sub	sp, #48	; 0x30
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f4c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f50:	f04f 0120 	mov.w	r1, #32
 8004f54:	f381 8811 	msr	BASEPRI, r1
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	4825      	ldr	r0, [pc, #148]	; (8004ff0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004f5c:	f7ff f920 	bl	80041a0 <_PreparePacket>
 8004f60:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f6e:	e00b      	b.n	8004f88 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	1c59      	adds	r1, r3, #1
 8004f78:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	09db      	lsrs	r3, r3, #7
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f8c:	d8f0      	bhi.n	8004f70 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	e00b      	b.n	8004fc0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	1c59      	adds	r1, r3, #1
 8004fb0:	6279      	str	r1, [r7, #36]	; 0x24
 8004fb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	09db      	lsrs	r3, r3, #7
 8004fbe:	623b      	str	r3, [r7, #32]
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fc4:	d8f0      	bhi.n	8004fa8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	627a      	str	r2, [r7, #36]	; 0x24
 8004fcc:	6a3a      	ldr	r2, [r7, #32]
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	6979      	ldr	r1, [r7, #20]
 8004fda:	69b8      	ldr	r0, [r7, #24]
 8004fdc:	f7ff f9d0 	bl	8004380 <_SendPacket>
  RECORD_END();
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f383 8811 	msr	BASEPRI, r3
}
 8004fe6:	bf00      	nop
 8004fe8:	3730      	adds	r7, #48	; 0x30
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	200142b8 	.word	0x200142b8

08004ff4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08c      	sub	sp, #48	; 0x30
 8004ff8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004ffa:	4b59      	ldr	r3, [pc, #356]	; (8005160 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005000:	f3ef 8311 	mrs	r3, BASEPRI
 8005004:	f04f 0120 	mov.w	r1, #32
 8005008:	f381 8811 	msr	BASEPRI, r1
 800500c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800500e:	4b54      	ldr	r3, [pc, #336]	; (8005160 <SEGGER_SYSVIEW_Start+0x16c>)
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	220a      	movs	r2, #10
 8005014:	4953      	ldr	r1, [pc, #332]	; (8005164 <SEGGER_SYSVIEW_Start+0x170>)
 8005016:	4618      	mov	r0, r3
 8005018:	f7fb f8e2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005022:	f7fe fc8f 	bl	8003944 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005026:	200a      	movs	r0, #10
 8005028:	f7ff ff30 	bl	8004e8c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800502c:	f3ef 8311 	mrs	r3, BASEPRI
 8005030:	f04f 0120 	mov.w	r1, #32
 8005034:	f381 8811 	msr	BASEPRI, r1
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	484b      	ldr	r0, [pc, #300]	; (8005168 <SEGGER_SYSVIEW_Start+0x174>)
 800503c:	f7ff f8b0 	bl	80041a0 <_PreparePacket>
 8005040:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800504a:	4b45      	ldr	r3, [pc, #276]	; (8005160 <SEGGER_SYSVIEW_Start+0x16c>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005050:	e00b      	b.n	800506a <SEGGER_SYSVIEW_Start+0x76>
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	b2da      	uxtb	r2, r3
 8005056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005058:	1c59      	adds	r1, r3, #1
 800505a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800505c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	09db      	lsrs	r3, r3, #7
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	2b7f      	cmp	r3, #127	; 0x7f
 800506e:	d8f0      	bhi.n	8005052 <SEGGER_SYSVIEW_Start+0x5e>
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
 8005084:	4b36      	ldr	r3, [pc, #216]	; (8005160 <SEGGER_SYSVIEW_Start+0x16c>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	623b      	str	r3, [r7, #32]
 800508a:	e00b      	b.n	80050a4 <SEGGER_SYSVIEW_Start+0xb0>
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	b2da      	uxtb	r2, r3
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	1c59      	adds	r1, r3, #1
 8005094:	6279      	str	r1, [r7, #36]	; 0x24
 8005096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	09db      	lsrs	r3, r3, #7
 80050a2:	623b      	str	r3, [r7, #32]
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	2b7f      	cmp	r3, #127	; 0x7f
 80050a8:	d8f0      	bhi.n	800508c <SEGGER_SYSVIEW_Start+0x98>
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	627a      	str	r2, [r7, #36]	; 0x24
 80050b0:	6a3a      	ldr	r2, [r7, #32]
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	4b28      	ldr	r3, [pc, #160]	; (8005160 <SEGGER_SYSVIEW_Start+0x16c>)
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	e00b      	b.n	80050de <SEGGER_SYSVIEW_Start+0xea>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	1c59      	adds	r1, r3, #1
 80050ce:	61f9      	str	r1, [r7, #28]
 80050d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	09db      	lsrs	r3, r3, #7
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	2b7f      	cmp	r3, #127	; 0x7f
 80050e2:	d8f0      	bhi.n	80050c6 <SEGGER_SYSVIEW_Start+0xd2>
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	61fa      	str	r2, [r7, #28]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	e00b      	b.n	8005116 <SEGGER_SYSVIEW_Start+0x122>
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	1c59      	adds	r1, r3, #1
 8005106:	6179      	str	r1, [r7, #20]
 8005108:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	09db      	lsrs	r3, r3, #7
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b7f      	cmp	r3, #127	; 0x7f
 800511a:	d8f0      	bhi.n	80050fe <SEGGER_SYSVIEW_Start+0x10a>
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	617a      	str	r2, [r7, #20]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800512c:	2218      	movs	r2, #24
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff f925 	bl	8004380 <_SendPacket>
      RECORD_END();
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800513c:	4b08      	ldr	r3, [pc, #32]	; (8005160 <SEGGER_SYSVIEW_Start+0x16c>)
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <SEGGER_SYSVIEW_Start+0x16c>)
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800514a:	f000 f9eb 	bl	8005524 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800514e:	f000 f9b1 	bl	80054b4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005152:	f000 fc1d 	bl	8005990 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005156:	bf00      	nop
 8005158:	3730      	adds	r7, #48	; 0x30
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20014288 	.word	0x20014288
 8005164:	080065ec 	.word	0x080065ec
 8005168:	200142b8 	.word	0x200142b8

0800516c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005172:	f3ef 8311 	mrs	r3, BASEPRI
 8005176:	f04f 0120 	mov.w	r1, #32
 800517a:	f381 8811 	msr	BASEPRI, r1
 800517e:	607b      	str	r3, [r7, #4]
 8005180:	480b      	ldr	r0, [pc, #44]	; (80051b0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005182:	f7ff f80d 	bl	80041a0 <_PreparePacket>
 8005186:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005190:	220b      	movs	r2, #11
 8005192:	6839      	ldr	r1, [r7, #0]
 8005194:	6838      	ldr	r0, [r7, #0]
 8005196:	f7ff f8f3 	bl	8004380 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f383 8811 	msr	BASEPRI, r3
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	200142b8 	.word	0x200142b8
 80051b4:	20014288 	.word	0x20014288

080051b8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08c      	sub	sp, #48	; 0x30
 80051bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051be:	f3ef 8311 	mrs	r3, BASEPRI
 80051c2:	f04f 0120 	mov.w	r1, #32
 80051c6:	f381 8811 	msr	BASEPRI, r1
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	4845      	ldr	r0, [pc, #276]	; (80052e4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80051ce:	f7fe ffe7 	bl	80041a0 <_PreparePacket>
 80051d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051dc:	4b42      	ldr	r3, [pc, #264]	; (80052e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e2:	e00b      	b.n	80051fc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	1c59      	adds	r1, r3, #1
 80051ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	09db      	lsrs	r3, r3, #7
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005200:	d8f0      	bhi.n	80051e4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
 8005216:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	e00b      	b.n	8005236 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	1c59      	adds	r1, r3, #1
 8005226:	6279      	str	r1, [r7, #36]	; 0x24
 8005228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	09db      	lsrs	r3, r3, #7
 8005234:	623b      	str	r3, [r7, #32]
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	2b7f      	cmp	r3, #127	; 0x7f
 800523a:	d8f0      	bhi.n	800521e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	627a      	str	r2, [r7, #36]	; 0x24
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	4b25      	ldr	r3, [pc, #148]	; (80052e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	e00b      	b.n	8005270 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	b2da      	uxtb	r2, r3
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	1c59      	adds	r1, r3, #1
 8005260:	61f9      	str	r1, [r7, #28]
 8005262:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	09db      	lsrs	r3, r3, #7
 800526e:	61bb      	str	r3, [r7, #24]
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b7f      	cmp	r3, #127	; 0x7f
 8005274:	d8f0      	bhi.n	8005258 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	61fa      	str	r2, [r7, #28]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	e00b      	b.n	80052a8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	b2da      	uxtb	r2, r3
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	6179      	str	r1, [r7, #20]
 800529a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	09db      	lsrs	r3, r3, #7
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b7f      	cmp	r3, #127	; 0x7f
 80052ac:	d8f0      	bhi.n	8005290 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	617a      	str	r2, [r7, #20]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052be:	2218      	movs	r2, #24
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	68b8      	ldr	r0, [r7, #8]
 80052c4:	f7ff f85c 	bl	8004380 <_SendPacket>
  RECORD_END();
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052ce:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80052d6:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	4798      	blx	r3
  }
}
 80052dc:	bf00      	nop
 80052de:	3730      	adds	r7, #48	; 0x30
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	200142b8 	.word	0x200142b8
 80052e8:	20014288 	.word	0x20014288

080052ec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b092      	sub	sp, #72	; 0x48
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80052f4:	f3ef 8311 	mrs	r3, BASEPRI
 80052f8:	f04f 0120 	mov.w	r1, #32
 80052fc:	f381 8811 	msr	BASEPRI, r1
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	486a      	ldr	r0, [pc, #424]	; (80054ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005304:	f7fe ff4c 	bl	80041a0 <_PreparePacket>
 8005308:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	647b      	str	r3, [r7, #68]	; 0x44
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b66      	ldr	r3, [pc, #408]	; (80054b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	643b      	str	r3, [r7, #64]	; 0x40
 800531e:	e00b      	b.n	8005338 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005322:	b2da      	uxtb	r2, r3
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	1c59      	adds	r1, r3, #1
 8005328:	6479      	str	r1, [r7, #68]	; 0x44
 800532a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005334:	09db      	lsrs	r3, r3, #7
 8005336:	643b      	str	r3, [r7, #64]	; 0x40
 8005338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533a:	2b7f      	cmp	r3, #127	; 0x7f
 800533c:	d8f0      	bhi.n	8005320 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800533e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	647a      	str	r2, [r7, #68]	; 0x44
 8005344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800534c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	63bb      	str	r3, [r7, #56]	; 0x38
 8005358:	e00b      	b.n	8005372 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	b2da      	uxtb	r2, r3
 800535e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005360:	1c59      	adds	r1, r3, #1
 8005362:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005364:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	09db      	lsrs	r3, r3, #7
 8005370:	63bb      	str	r3, [r7, #56]	; 0x38
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	2b7f      	cmp	r3, #127	; 0x7f
 8005376:	d8f0      	bhi.n	800535a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800537e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005386:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	4619      	mov	r1, r3
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7fe fed5 	bl	8004140 <_EncodeStr>
 8005396:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005398:	2209      	movs	r2, #9
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	6938      	ldr	r0, [r7, #16]
 800539e:	f7fe ffef 	bl	8004380 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4b40      	ldr	r3, [pc, #256]	; (80054b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	633b      	str	r3, [r7, #48]	; 0x30
 80053b6:	e00b      	b.n	80053d0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053be:	1c59      	adds	r1, r3, #1
 80053c0:	6379      	str	r1, [r7, #52]	; 0x34
 80053c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	09db      	lsrs	r3, r3, #7
 80053ce:	633b      	str	r3, [r7, #48]	; 0x30
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	2b7f      	cmp	r3, #127	; 0x7f
 80053d4:	d8f0      	bhi.n	80053b8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80053d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	637a      	str	r2, [r7, #52]	; 0x34
 80053dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f0:	e00b      	b.n	800540a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	1c59      	adds	r1, r3, #1
 80053fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	701a      	strb	r2, [r3, #0]
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	09db      	lsrs	r3, r3, #7
 8005408:	62bb      	str	r3, [r7, #40]	; 0x28
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	2b7f      	cmp	r3, #127	; 0x7f
 800540e:	d8f0      	bhi.n	80053f2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	623b      	str	r3, [r7, #32]
 800542a:	e00b      	b.n	8005444 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	b2da      	uxtb	r2, r3
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	6279      	str	r1, [r7, #36]	; 0x24
 8005436:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	09db      	lsrs	r3, r3, #7
 8005442:	623b      	str	r3, [r7, #32]
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	2b7f      	cmp	r3, #127	; 0x7f
 8005448:	d8f0      	bhi.n	800542c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	627a      	str	r2, [r7, #36]	; 0x24
 8005450:	6a3a      	ldr	r2, [r7, #32]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	61fb      	str	r3, [r7, #28]
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	e00b      	b.n	800547c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	1c59      	adds	r1, r3, #1
 800546c:	61f9      	str	r1, [r7, #28]
 800546e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	09db      	lsrs	r3, r3, #7
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b7f      	cmp	r3, #127	; 0x7f
 8005480:	d8f0      	bhi.n	8005464 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	61fa      	str	r2, [r7, #28]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005492:	2215      	movs	r2, #21
 8005494:	68f9      	ldr	r1, [r7, #12]
 8005496:	6938      	ldr	r0, [r7, #16]
 8005498:	f7fe ff72 	bl	8004380 <_SendPacket>
  RECORD_END();
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f383 8811 	msr	BASEPRI, r3
}
 80054a2:	bf00      	nop
 80054a4:	3748      	adds	r7, #72	; 0x48
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	200142b8 	.word	0x200142b8
 80054b0:	20014288 	.word	0x20014288

080054b4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80054b8:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80054ca:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4798      	blx	r3
  }
}
 80054d2:	bf00      	nop
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20014288 	.word	0x20014288

080054dc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054e4:	f3ef 8311 	mrs	r3, BASEPRI
 80054e8:	f04f 0120 	mov.w	r1, #32
 80054ec:	f381 8811 	msr	BASEPRI, r1
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	480b      	ldr	r0, [pc, #44]	; (8005520 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80054f4:	f7fe fe54 	bl	80041a0 <_PreparePacket>
 80054f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054fa:	2280      	movs	r2, #128	; 0x80
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	6938      	ldr	r0, [r7, #16]
 8005500:	f7fe fe1e 	bl	8004140 <_EncodeStr>
 8005504:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005506:	220e      	movs	r2, #14
 8005508:	68f9      	ldr	r1, [r7, #12]
 800550a:	6938      	ldr	r0, [r7, #16]
 800550c:	f7fe ff38 	bl	8004380 <_SendPacket>
  RECORD_END();
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f383 8811 	msr	BASEPRI, r3
}
 8005516:	bf00      	nop
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	200142b8 	.word	0x200142b8

08005524 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005524:	b590      	push	{r4, r7, lr}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01a      	beq.n	8005568 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005532:	4b13      	ldr	r3, [pc, #76]	; (8005580 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d015      	beq.n	8005568 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4798      	blx	r3
 8005544:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005548:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800554a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	000a      	movs	r2, r1
 8005558:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800555a:	4613      	mov	r3, r2
 800555c:	461a      	mov	r2, r3
 800555e:	4621      	mov	r1, r4
 8005560:	200d      	movs	r0, #13
 8005562:	f7ff fced 	bl	8004f40 <SEGGER_SYSVIEW_RecordU32x2>
 8005566:	e006      	b.n	8005576 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4619      	mov	r1, r3
 800556e:	200c      	movs	r0, #12
 8005570:	f7ff fcaa 	bl	8004ec8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	bd90      	pop	{r4, r7, pc}
 800557e:	bf00      	nop
 8005580:	20014288 	.word	0x20014288
 8005584:	e0001004 	.word	0xe0001004

08005588 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800558e:	f3ef 8311 	mrs	r3, BASEPRI
 8005592:	f04f 0120 	mov.w	r1, #32
 8005596:	f381 8811 	msr	BASEPRI, r1
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	4819      	ldr	r0, [pc, #100]	; (8005604 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800559e:	f7fe fdff 	bl	80041a0 <_PreparePacket>
 80055a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80055a8:	4b17      	ldr	r3, [pc, #92]	; (8005608 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	e00b      	b.n	80055d4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	1c59      	adds	r1, r3, #1
 80055c4:	6179      	str	r1, [r7, #20]
 80055c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	09db      	lsrs	r3, r3, #7
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b7f      	cmp	r3, #127	; 0x7f
 80055d8:	d8f0      	bhi.n	80055bc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	617a      	str	r2, [r7, #20]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80055ea:	2202      	movs	r2, #2
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	68b8      	ldr	r0, [r7, #8]
 80055f0:	f7fe fec6 	bl	8004380 <_SendPacket>
  RECORD_END();
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f383 8811 	msr	BASEPRI, r3
}
 80055fa:	bf00      	nop
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	200142b8 	.word	0x200142b8
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005612:	f3ef 8311 	mrs	r3, BASEPRI
 8005616:	f04f 0120 	mov.w	r1, #32
 800561a:	f381 8811 	msr	BASEPRI, r1
 800561e:	607b      	str	r3, [r7, #4]
 8005620:	4807      	ldr	r0, [pc, #28]	; (8005640 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005622:	f7fe fdbd 	bl	80041a0 <_PreparePacket>
 8005626:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005628:	2203      	movs	r2, #3
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	6838      	ldr	r0, [r7, #0]
 800562e:	f7fe fea7 	bl	8004380 <_SendPacket>
  RECORD_END();
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f383 8811 	msr	BASEPRI, r3
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	200142b8 	.word	0x200142b8

08005644 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800564a:	f3ef 8311 	mrs	r3, BASEPRI
 800564e:	f04f 0120 	mov.w	r1, #32
 8005652:	f381 8811 	msr	BASEPRI, r1
 8005656:	607b      	str	r3, [r7, #4]
 8005658:	4807      	ldr	r0, [pc, #28]	; (8005678 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800565a:	f7fe fda1 	bl	80041a0 <_PreparePacket>
 800565e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005660:	2212      	movs	r2, #18
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	6838      	ldr	r0, [r7, #0]
 8005666:	f7fe fe8b 	bl	8004380 <_SendPacket>
  RECORD_END();
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f383 8811 	msr	BASEPRI, r3
}
 8005670:	bf00      	nop
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	200142b8 	.word	0x200142b8

0800567c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005682:	f3ef 8311 	mrs	r3, BASEPRI
 8005686:	f04f 0120 	mov.w	r1, #32
 800568a:	f381 8811 	msr	BASEPRI, r1
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	4807      	ldr	r0, [pc, #28]	; (80056b0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005692:	f7fe fd85 	bl	80041a0 <_PreparePacket>
 8005696:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005698:	2211      	movs	r2, #17
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	6838      	ldr	r0, [r7, #0]
 800569e:	f7fe fe6f 	bl	8004380 <_SendPacket>
  RECORD_END();
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f383 8811 	msr	BASEPRI, r3
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	200142b8 	.word	0x200142b8

080056b4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056bc:	f3ef 8311 	mrs	r3, BASEPRI
 80056c0:	f04f 0120 	mov.w	r1, #32
 80056c4:	f381 8811 	msr	BASEPRI, r1
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	4819      	ldr	r0, [pc, #100]	; (8005730 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80056cc:	f7fe fd68 	bl	80041a0 <_PreparePacket>
 80056d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056d6:	4b17      	ldr	r3, [pc, #92]	; (8005734 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	e00b      	b.n	8005702 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	1c59      	adds	r1, r3, #1
 80056f2:	61f9      	str	r1, [r7, #28]
 80056f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	09db      	lsrs	r3, r3, #7
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b7f      	cmp	r3, #127	; 0x7f
 8005706:	d8f0      	bhi.n	80056ea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	61fa      	str	r2, [r7, #28]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005718:	2208      	movs	r2, #8
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	6938      	ldr	r0, [r7, #16]
 800571e:	f7fe fe2f 	bl	8004380 <_SendPacket>
  RECORD_END();
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f383 8811 	msr	BASEPRI, r3
}
 8005728:	bf00      	nop
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	200142b8 	.word	0x200142b8
 8005734:	20014288 	.word	0x20014288

08005738 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005740:	f3ef 8311 	mrs	r3, BASEPRI
 8005744:	f04f 0120 	mov.w	r1, #32
 8005748:	f381 8811 	msr	BASEPRI, r1
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	4819      	ldr	r0, [pc, #100]	; (80057b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005750:	f7fe fd26 	bl	80041a0 <_PreparePacket>
 8005754:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800575a:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	61fb      	str	r3, [r7, #28]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	e00b      	b.n	8005786 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	1c59      	adds	r1, r3, #1
 8005776:	61f9      	str	r1, [r7, #28]
 8005778:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	09db      	lsrs	r3, r3, #7
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2b7f      	cmp	r3, #127	; 0x7f
 800578a:	d8f0      	bhi.n	800576e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	61fa      	str	r2, [r7, #28]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800579c:	2204      	movs	r2, #4
 800579e:	68f9      	ldr	r1, [r7, #12]
 80057a0:	6938      	ldr	r0, [r7, #16]
 80057a2:	f7fe fded 	bl	8004380 <_SendPacket>
  RECORD_END();
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f383 8811 	msr	BASEPRI, r3
}
 80057ac:	bf00      	nop
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	200142b8 	.word	0x200142b8
 80057b8:	20014288 	.word	0x20014288

080057bc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057c4:	f3ef 8311 	mrs	r3, BASEPRI
 80057c8:	f04f 0120 	mov.w	r1, #32
 80057cc:	f381 8811 	msr	BASEPRI, r1
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	4819      	ldr	r0, [pc, #100]	; (8005838 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80057d4:	f7fe fce4 	bl	80041a0 <_PreparePacket>
 80057d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057de:	4b17      	ldr	r3, [pc, #92]	; (800583c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	61fb      	str	r3, [r7, #28]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	e00b      	b.n	800580a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	1c59      	adds	r1, r3, #1
 80057fa:	61f9      	str	r1, [r7, #28]
 80057fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	09db      	lsrs	r3, r3, #7
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2b7f      	cmp	r3, #127	; 0x7f
 800580e:	d8f0      	bhi.n	80057f2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	61fa      	str	r2, [r7, #28]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005820:	2206      	movs	r2, #6
 8005822:	68f9      	ldr	r1, [r7, #12]
 8005824:	6938      	ldr	r0, [r7, #16]
 8005826:	f7fe fdab 	bl	8004380 <_SendPacket>
  RECORD_END();
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f383 8811 	msr	BASEPRI, r3
}
 8005830:	bf00      	nop
 8005832:	3720      	adds	r7, #32
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	200142b8 	.word	0x200142b8
 800583c:	20014288 	.word	0x20014288

08005840 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005840:	b580      	push	{r7, lr}
 8005842:	b08c      	sub	sp, #48	; 0x30
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800584a:	4b40      	ldr	r3, [pc, #256]	; (800594c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d077      	beq.n	8005942 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005852:	4b3e      	ldr	r3, [pc, #248]	; (800594c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005858:	2300      	movs	r3, #0
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28
 800585c:	e008      	b.n	8005870 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	3301      	adds	r3, #1
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005874:	429a      	cmp	r2, r3
 8005876:	d3f2      	bcc.n	800585e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005878:	e000      	b.n	800587c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800587a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	2b00      	cmp	r3, #0
 8005880:	d055      	beq.n	800592e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005882:	f3ef 8311 	mrs	r3, BASEPRI
 8005886:	f04f 0120 	mov.w	r1, #32
 800588a:	f381 8811 	msr	BASEPRI, r1
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	482f      	ldr	r0, [pc, #188]	; (8005950 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005892:	f7fe fc85 	bl	80041a0 <_PreparePacket>
 8005896:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	623b      	str	r3, [r7, #32]
 80058a4:	e00b      	b.n	80058be <SEGGER_SYSVIEW_SendModule+0x7e>
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	1c59      	adds	r1, r3, #1
 80058ae:	6279      	str	r1, [r7, #36]	; 0x24
 80058b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	09db      	lsrs	r3, r3, #7
 80058bc:	623b      	str	r3, [r7, #32]
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	2b7f      	cmp	r3, #127	; 0x7f
 80058c2:	d8f0      	bhi.n	80058a6 <SEGGER_SYSVIEW_SendModule+0x66>
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	627a      	str	r2, [r7, #36]	; 0x24
 80058ca:	6a3a      	ldr	r2, [r7, #32]
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	e00b      	b.n	80058f8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	1c59      	adds	r1, r3, #1
 80058e8:	61f9      	str	r1, [r7, #28]
 80058ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	09db      	lsrs	r3, r3, #7
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2b7f      	cmp	r3, #127	; 0x7f
 80058fc:	d8f0      	bhi.n	80058e0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	61fa      	str	r2, [r7, #28]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2280      	movs	r2, #128	; 0x80
 8005914:	4619      	mov	r1, r3
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f7fe fc12 	bl	8004140 <_EncodeStr>
 800591c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800591e:	2216      	movs	r2, #22
 8005920:	68f9      	ldr	r1, [r7, #12]
 8005922:	6938      	ldr	r0, [r7, #16]
 8005924:	f7fe fd2c 	bl	8004380 <_SendPacket>
      RECORD_END();
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d006      	beq.n	8005942 <SEGGER_SYSVIEW_SendModule+0x102>
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	4798      	blx	r3
    }
  }
}
 8005942:	bf00      	nop
 8005944:	3730      	adds	r7, #48	; 0x30
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200142b0 	.word	0x200142b0
 8005950:	200142b8 	.word	0x200142b8

08005954 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800595a:	4b0c      	ldr	r3, [pc, #48]	; (800598c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00f      	beq.n	8005982 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f2      	bne.n	8005968 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005982:	bf00      	nop
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200142b0 	.word	0x200142b0

08005990 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005996:	f3ef 8311 	mrs	r3, BASEPRI
 800599a:	f04f 0120 	mov.w	r1, #32
 800599e:	f381 8811 	msr	BASEPRI, r1
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	4817      	ldr	r0, [pc, #92]	; (8005a04 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80059a6:	f7fe fbfb 	bl	80041a0 <_PreparePacket>
 80059aa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	e00b      	b.n	80059d4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	1c59      	adds	r1, r3, #1
 80059c4:	6179      	str	r1, [r7, #20]
 80059c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	09db      	lsrs	r3, r3, #7
 80059d2:	613b      	str	r3, [r7, #16]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b7f      	cmp	r3, #127	; 0x7f
 80059d8:	d8f0      	bhi.n	80059bc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	617a      	str	r2, [r7, #20]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80059ea:	221b      	movs	r2, #27
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	68b8      	ldr	r0, [r7, #8]
 80059f0:	f7fe fcc6 	bl	8004380 <_SendPacket>
  RECORD_END();
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f383 8811 	msr	BASEPRI, r3
}
 80059fa:	bf00      	nop
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	200142b8 	.word	0x200142b8
 8005a08:	200142b4 	.word	0x200142b4

08005a0c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005a0c:	b40f      	push	{r0, r1, r2, r3}
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005a14:	f107 0314 	add.w	r3, r7, #20
 8005a18:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005a1a:	1d3b      	adds	r3, r7, #4
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	2100      	movs	r1, #0
 8005a20:	6938      	ldr	r0, [r7, #16]
 8005a22:	f7fe ffbf 	bl	80049a4 <_VPrintTarget>
  va_end(ParamList);
}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a30:	b004      	add	sp, #16
 8005a32:	4770      	bx	lr

08005a34 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a40:	f04f 0120 	mov.w	r1, #32
 8005a44:	f381 8811 	msr	BASEPRI, r1
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	4827      	ldr	r0, [pc, #156]	; (8005ae8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a4c:	f7fe fba8 	bl	80041a0 <_PreparePacket>
 8005a50:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a52:	2280      	movs	r2, #128	; 0x80
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	6938      	ldr	r0, [r7, #16]
 8005a58:	f7fe fb72 	bl	8004140 <_EncodeStr>
 8005a5c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
 8005a62:	2301      	movs	r3, #1
 8005a64:	623b      	str	r3, [r7, #32]
 8005a66:	e00b      	b.n	8005a80 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	1c59      	adds	r1, r3, #1
 8005a70:	6279      	str	r1, [r7, #36]	; 0x24
 8005a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	09db      	lsrs	r3, r3, #7
 8005a7e:	623b      	str	r3, [r7, #32]
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	2b7f      	cmp	r3, #127	; 0x7f
 8005a84:	d8f0      	bhi.n	8005a68 <SEGGER_SYSVIEW_Warn+0x34>
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	627a      	str	r2, [r7, #36]	; 0x24
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	e00b      	b.n	8005ab8 <SEGGER_SYSVIEW_Warn+0x84>
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	1c59      	adds	r1, r3, #1
 8005aa8:	61f9      	str	r1, [r7, #28]
 8005aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	09db      	lsrs	r3, r3, #7
 8005ab6:	61bb      	str	r3, [r7, #24]
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b7f      	cmp	r3, #127	; 0x7f
 8005abc:	d8f0      	bhi.n	8005aa0 <SEGGER_SYSVIEW_Warn+0x6c>
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	61fa      	str	r2, [r7, #28]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ace:	221a      	movs	r2, #26
 8005ad0:	68f9      	ldr	r1, [r7, #12]
 8005ad2:	6938      	ldr	r0, [r7, #16]
 8005ad4:	f7fe fc54 	bl	8004380 <_SendPacket>
  RECORD_END();
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f383 8811 	msr	BASEPRI, r3
}
 8005ade:	bf00      	nop
 8005ae0:	3728      	adds	r7, #40	; 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	200142b8 	.word	0x200142b8

08005aec <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005af0:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005af2:	7e1b      	ldrb	r3, [r3, #24]
 8005af4:	4619      	mov	r1, r3
 8005af6:	4a13      	ldr	r2, [pc, #76]	; (8005b44 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005af8:	460b      	mov	r3, r1
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	440b      	add	r3, r1
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	4413      	add	r3, r2
 8005b02:	336c      	adds	r3, #108	; 0x6c
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b0e      	ldr	r3, [pc, #56]	; (8005b40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b08:	7e1b      	ldrb	r3, [r3, #24]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	490d      	ldr	r1, [pc, #52]	; (8005b44 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b0e:	4603      	mov	r3, r0
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	4403      	add	r3, r0
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	440b      	add	r3, r1
 8005b18:	3370      	adds	r3, #112	; 0x70
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d00b      	beq.n	8005b38 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b20:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b22:	789b      	ldrb	r3, [r3, #2]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d107      	bne.n	8005b38 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b2e:	f7fe fb43 	bl	80041b8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b32:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005b38:	4b01      	ldr	r3, [pc, #4]	; (8005b40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20014288 	.word	0x20014288
 8005b44:	200143f4 	.word	0x200143f4

08005b48 <__libc_init_array>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	4d0d      	ldr	r5, [pc, #52]	; (8005b80 <__libc_init_array+0x38>)
 8005b4c:	4c0d      	ldr	r4, [pc, #52]	; (8005b84 <__libc_init_array+0x3c>)
 8005b4e:	1b64      	subs	r4, r4, r5
 8005b50:	10a4      	asrs	r4, r4, #2
 8005b52:	2600      	movs	r6, #0
 8005b54:	42a6      	cmp	r6, r4
 8005b56:	d109      	bne.n	8005b6c <__libc_init_array+0x24>
 8005b58:	4d0b      	ldr	r5, [pc, #44]	; (8005b88 <__libc_init_array+0x40>)
 8005b5a:	4c0c      	ldr	r4, [pc, #48]	; (8005b8c <__libc_init_array+0x44>)
 8005b5c:	f000 fc7e 	bl	800645c <_init>
 8005b60:	1b64      	subs	r4, r4, r5
 8005b62:	10a4      	asrs	r4, r4, #2
 8005b64:	2600      	movs	r6, #0
 8005b66:	42a6      	cmp	r6, r4
 8005b68:	d105      	bne.n	8005b76 <__libc_init_array+0x2e>
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b70:	4798      	blx	r3
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7ee      	b.n	8005b54 <__libc_init_array+0xc>
 8005b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7a:	4798      	blx	r3
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	e7f2      	b.n	8005b66 <__libc_init_array+0x1e>
 8005b80:	08006644 	.word	0x08006644
 8005b84:	08006644 	.word	0x08006644
 8005b88:	08006644 	.word	0x08006644
 8005b8c:	08006648 	.word	0x08006648

08005b90 <memcmp>:
 8005b90:	b530      	push	{r4, r5, lr}
 8005b92:	3901      	subs	r1, #1
 8005b94:	2400      	movs	r4, #0
 8005b96:	42a2      	cmp	r2, r4
 8005b98:	d101      	bne.n	8005b9e <memcmp+0xe>
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	e005      	b.n	8005baa <memcmp+0x1a>
 8005b9e:	5d03      	ldrb	r3, [r0, r4]
 8005ba0:	3401      	adds	r4, #1
 8005ba2:	5d0d      	ldrb	r5, [r1, r4]
 8005ba4:	42ab      	cmp	r3, r5
 8005ba6:	d0f6      	beq.n	8005b96 <memcmp+0x6>
 8005ba8:	1b58      	subs	r0, r3, r5
 8005baa:	bd30      	pop	{r4, r5, pc}

08005bac <memcpy>:
 8005bac:	440a      	add	r2, r1
 8005bae:	4291      	cmp	r1, r2
 8005bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bb4:	d100      	bne.n	8005bb8 <memcpy+0xc>
 8005bb6:	4770      	bx	lr
 8005bb8:	b510      	push	{r4, lr}
 8005bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bc2:	4291      	cmp	r1, r2
 8005bc4:	d1f9      	bne.n	8005bba <memcpy+0xe>
 8005bc6:	bd10      	pop	{r4, pc}

08005bc8 <memset>:
 8005bc8:	4402      	add	r2, r0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d100      	bne.n	8005bd2 <memset+0xa>
 8005bd0:	4770      	bx	lr
 8005bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bd6:	e7f9      	b.n	8005bcc <memset+0x4>

08005bd8 <sniprintf>:
 8005bd8:	b40c      	push	{r2, r3}
 8005bda:	b530      	push	{r4, r5, lr}
 8005bdc:	4b17      	ldr	r3, [pc, #92]	; (8005c3c <sniprintf+0x64>)
 8005bde:	1e0c      	subs	r4, r1, #0
 8005be0:	681d      	ldr	r5, [r3, #0]
 8005be2:	b09d      	sub	sp, #116	; 0x74
 8005be4:	da08      	bge.n	8005bf8 <sniprintf+0x20>
 8005be6:	238b      	movs	r3, #139	; 0x8b
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	f04f 30ff 	mov.w	r0, #4294967295
 8005bee:	b01d      	add	sp, #116	; 0x74
 8005bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bf4:	b002      	add	sp, #8
 8005bf6:	4770      	bx	lr
 8005bf8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005bfc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c00:	bf14      	ite	ne
 8005c02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c06:	4623      	moveq	r3, r4
 8005c08:	9304      	str	r3, [sp, #16]
 8005c0a:	9307      	str	r3, [sp, #28]
 8005c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c10:	9002      	str	r0, [sp, #8]
 8005c12:	9006      	str	r0, [sp, #24]
 8005c14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c1a:	ab21      	add	r3, sp, #132	; 0x84
 8005c1c:	a902      	add	r1, sp, #8
 8005c1e:	4628      	mov	r0, r5
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	f000 f869 	bl	8005cf8 <_svfiprintf_r>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	bfbc      	itt	lt
 8005c2a:	238b      	movlt	r3, #139	; 0x8b
 8005c2c:	602b      	strlt	r3, [r5, #0]
 8005c2e:	2c00      	cmp	r4, #0
 8005c30:	d0dd      	beq.n	8005bee <sniprintf+0x16>
 8005c32:	9b02      	ldr	r3, [sp, #8]
 8005c34:	2200      	movs	r2, #0
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	e7d9      	b.n	8005bee <sniprintf+0x16>
 8005c3a:	bf00      	nop
 8005c3c:	2000001c 	.word	0x2000001c

08005c40 <__ssputs_r>:
 8005c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c44:	688e      	ldr	r6, [r1, #8]
 8005c46:	429e      	cmp	r6, r3
 8005c48:	4682      	mov	sl, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	4690      	mov	r8, r2
 8005c4e:	461f      	mov	r7, r3
 8005c50:	d838      	bhi.n	8005cc4 <__ssputs_r+0x84>
 8005c52:	898a      	ldrh	r2, [r1, #12]
 8005c54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c58:	d032      	beq.n	8005cc0 <__ssputs_r+0x80>
 8005c5a:	6825      	ldr	r5, [r4, #0]
 8005c5c:	6909      	ldr	r1, [r1, #16]
 8005c5e:	eba5 0901 	sub.w	r9, r5, r1
 8005c62:	6965      	ldr	r5, [r4, #20]
 8005c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	444b      	add	r3, r9
 8005c70:	106d      	asrs	r5, r5, #1
 8005c72:	429d      	cmp	r5, r3
 8005c74:	bf38      	it	cc
 8005c76:	461d      	movcc	r5, r3
 8005c78:	0553      	lsls	r3, r2, #21
 8005c7a:	d531      	bpl.n	8005ce0 <__ssputs_r+0xa0>
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	f000 fb39 	bl	80062f4 <_malloc_r>
 8005c82:	4606      	mov	r6, r0
 8005c84:	b950      	cbnz	r0, 8005c9c <__ssputs_r+0x5c>
 8005c86:	230c      	movs	r3, #12
 8005c88:	f8ca 3000 	str.w	r3, [sl]
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	f04f 30ff 	mov.w	r0, #4294967295
 8005c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9c:	6921      	ldr	r1, [r4, #16]
 8005c9e:	464a      	mov	r2, r9
 8005ca0:	f7ff ff84 	bl	8005bac <memcpy>
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cae:	81a3      	strh	r3, [r4, #12]
 8005cb0:	6126      	str	r6, [r4, #16]
 8005cb2:	6165      	str	r5, [r4, #20]
 8005cb4:	444e      	add	r6, r9
 8005cb6:	eba5 0509 	sub.w	r5, r5, r9
 8005cba:	6026      	str	r6, [r4, #0]
 8005cbc:	60a5      	str	r5, [r4, #8]
 8005cbe:	463e      	mov	r6, r7
 8005cc0:	42be      	cmp	r6, r7
 8005cc2:	d900      	bls.n	8005cc6 <__ssputs_r+0x86>
 8005cc4:	463e      	mov	r6, r7
 8005cc6:	4632      	mov	r2, r6
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	4641      	mov	r1, r8
 8005ccc:	f000 faa8 	bl	8006220 <memmove>
 8005cd0:	68a3      	ldr	r3, [r4, #8]
 8005cd2:	6822      	ldr	r2, [r4, #0]
 8005cd4:	1b9b      	subs	r3, r3, r6
 8005cd6:	4432      	add	r2, r6
 8005cd8:	60a3      	str	r3, [r4, #8]
 8005cda:	6022      	str	r2, [r4, #0]
 8005cdc:	2000      	movs	r0, #0
 8005cde:	e7db      	b.n	8005c98 <__ssputs_r+0x58>
 8005ce0:	462a      	mov	r2, r5
 8005ce2:	f000 fb61 	bl	80063a8 <_realloc_r>
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d1e1      	bne.n	8005cb0 <__ssputs_r+0x70>
 8005cec:	6921      	ldr	r1, [r4, #16]
 8005cee:	4650      	mov	r0, sl
 8005cf0:	f000 fab0 	bl	8006254 <_free_r>
 8005cf4:	e7c7      	b.n	8005c86 <__ssputs_r+0x46>
	...

08005cf8 <_svfiprintf_r>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	4698      	mov	r8, r3
 8005cfe:	898b      	ldrh	r3, [r1, #12]
 8005d00:	061b      	lsls	r3, r3, #24
 8005d02:	b09d      	sub	sp, #116	; 0x74
 8005d04:	4607      	mov	r7, r0
 8005d06:	460d      	mov	r5, r1
 8005d08:	4614      	mov	r4, r2
 8005d0a:	d50e      	bpl.n	8005d2a <_svfiprintf_r+0x32>
 8005d0c:	690b      	ldr	r3, [r1, #16]
 8005d0e:	b963      	cbnz	r3, 8005d2a <_svfiprintf_r+0x32>
 8005d10:	2140      	movs	r1, #64	; 0x40
 8005d12:	f000 faef 	bl	80062f4 <_malloc_r>
 8005d16:	6028      	str	r0, [r5, #0]
 8005d18:	6128      	str	r0, [r5, #16]
 8005d1a:	b920      	cbnz	r0, 8005d26 <_svfiprintf_r+0x2e>
 8005d1c:	230c      	movs	r3, #12
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	e0d1      	b.n	8005eca <_svfiprintf_r+0x1d2>
 8005d26:	2340      	movs	r3, #64	; 0x40
 8005d28:	616b      	str	r3, [r5, #20]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d2e:	2320      	movs	r3, #32
 8005d30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d38:	2330      	movs	r3, #48	; 0x30
 8005d3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ee4 <_svfiprintf_r+0x1ec>
 8005d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d42:	f04f 0901 	mov.w	r9, #1
 8005d46:	4623      	mov	r3, r4
 8005d48:	469a      	mov	sl, r3
 8005d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d4e:	b10a      	cbz	r2, 8005d54 <_svfiprintf_r+0x5c>
 8005d50:	2a25      	cmp	r2, #37	; 0x25
 8005d52:	d1f9      	bne.n	8005d48 <_svfiprintf_r+0x50>
 8005d54:	ebba 0b04 	subs.w	fp, sl, r4
 8005d58:	d00b      	beq.n	8005d72 <_svfiprintf_r+0x7a>
 8005d5a:	465b      	mov	r3, fp
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	4629      	mov	r1, r5
 8005d60:	4638      	mov	r0, r7
 8005d62:	f7ff ff6d 	bl	8005c40 <__ssputs_r>
 8005d66:	3001      	adds	r0, #1
 8005d68:	f000 80aa 	beq.w	8005ec0 <_svfiprintf_r+0x1c8>
 8005d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d6e:	445a      	add	r2, fp
 8005d70:	9209      	str	r2, [sp, #36]	; 0x24
 8005d72:	f89a 3000 	ldrb.w	r3, [sl]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 80a2 	beq.w	8005ec0 <_svfiprintf_r+0x1c8>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d86:	f10a 0a01 	add.w	sl, sl, #1
 8005d8a:	9304      	str	r3, [sp, #16]
 8005d8c:	9307      	str	r3, [sp, #28]
 8005d8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d92:	931a      	str	r3, [sp, #104]	; 0x68
 8005d94:	4654      	mov	r4, sl
 8005d96:	2205      	movs	r2, #5
 8005d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9c:	4851      	ldr	r0, [pc, #324]	; (8005ee4 <_svfiprintf_r+0x1ec>)
 8005d9e:	f7fa fa6f 	bl	8000280 <memchr>
 8005da2:	9a04      	ldr	r2, [sp, #16]
 8005da4:	b9d8      	cbnz	r0, 8005dde <_svfiprintf_r+0xe6>
 8005da6:	06d0      	lsls	r0, r2, #27
 8005da8:	bf44      	itt	mi
 8005daa:	2320      	movmi	r3, #32
 8005dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005db0:	0711      	lsls	r1, r2, #28
 8005db2:	bf44      	itt	mi
 8005db4:	232b      	movmi	r3, #43	; 0x2b
 8005db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dba:	f89a 3000 	ldrb.w	r3, [sl]
 8005dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8005dc0:	d015      	beq.n	8005dee <_svfiprintf_r+0xf6>
 8005dc2:	9a07      	ldr	r2, [sp, #28]
 8005dc4:	4654      	mov	r4, sl
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	f04f 0c0a 	mov.w	ip, #10
 8005dcc:	4621      	mov	r1, r4
 8005dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dd2:	3b30      	subs	r3, #48	; 0x30
 8005dd4:	2b09      	cmp	r3, #9
 8005dd6:	d94e      	bls.n	8005e76 <_svfiprintf_r+0x17e>
 8005dd8:	b1b0      	cbz	r0, 8005e08 <_svfiprintf_r+0x110>
 8005dda:	9207      	str	r2, [sp, #28]
 8005ddc:	e014      	b.n	8005e08 <_svfiprintf_r+0x110>
 8005dde:	eba0 0308 	sub.w	r3, r0, r8
 8005de2:	fa09 f303 	lsl.w	r3, r9, r3
 8005de6:	4313      	orrs	r3, r2
 8005de8:	9304      	str	r3, [sp, #16]
 8005dea:	46a2      	mov	sl, r4
 8005dec:	e7d2      	b.n	8005d94 <_svfiprintf_r+0x9c>
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	1d19      	adds	r1, r3, #4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	9103      	str	r1, [sp, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bfbb      	ittet	lt
 8005dfa:	425b      	neglt	r3, r3
 8005dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8005e00:	9307      	strge	r3, [sp, #28]
 8005e02:	9307      	strlt	r3, [sp, #28]
 8005e04:	bfb8      	it	lt
 8005e06:	9204      	strlt	r2, [sp, #16]
 8005e08:	7823      	ldrb	r3, [r4, #0]
 8005e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e0c:	d10c      	bne.n	8005e28 <_svfiprintf_r+0x130>
 8005e0e:	7863      	ldrb	r3, [r4, #1]
 8005e10:	2b2a      	cmp	r3, #42	; 0x2a
 8005e12:	d135      	bne.n	8005e80 <_svfiprintf_r+0x188>
 8005e14:	9b03      	ldr	r3, [sp, #12]
 8005e16:	1d1a      	adds	r2, r3, #4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	9203      	str	r2, [sp, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bfb8      	it	lt
 8005e20:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e24:	3402      	adds	r4, #2
 8005e26:	9305      	str	r3, [sp, #20]
 8005e28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ef4 <_svfiprintf_r+0x1fc>
 8005e2c:	7821      	ldrb	r1, [r4, #0]
 8005e2e:	2203      	movs	r2, #3
 8005e30:	4650      	mov	r0, sl
 8005e32:	f7fa fa25 	bl	8000280 <memchr>
 8005e36:	b140      	cbz	r0, 8005e4a <_svfiprintf_r+0x152>
 8005e38:	2340      	movs	r3, #64	; 0x40
 8005e3a:	eba0 000a 	sub.w	r0, r0, sl
 8005e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e42:	9b04      	ldr	r3, [sp, #16]
 8005e44:	4303      	orrs	r3, r0
 8005e46:	3401      	adds	r4, #1
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4e:	4826      	ldr	r0, [pc, #152]	; (8005ee8 <_svfiprintf_r+0x1f0>)
 8005e50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e54:	2206      	movs	r2, #6
 8005e56:	f7fa fa13 	bl	8000280 <memchr>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d038      	beq.n	8005ed0 <_svfiprintf_r+0x1d8>
 8005e5e:	4b23      	ldr	r3, [pc, #140]	; (8005eec <_svfiprintf_r+0x1f4>)
 8005e60:	bb1b      	cbnz	r3, 8005eaa <_svfiprintf_r+0x1b2>
 8005e62:	9b03      	ldr	r3, [sp, #12]
 8005e64:	3307      	adds	r3, #7
 8005e66:	f023 0307 	bic.w	r3, r3, #7
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	9303      	str	r3, [sp, #12]
 8005e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e70:	4433      	add	r3, r6
 8005e72:	9309      	str	r3, [sp, #36]	; 0x24
 8005e74:	e767      	b.n	8005d46 <_svfiprintf_r+0x4e>
 8005e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	e7a5      	b.n	8005dcc <_svfiprintf_r+0xd4>
 8005e80:	2300      	movs	r3, #0
 8005e82:	3401      	adds	r4, #1
 8005e84:	9305      	str	r3, [sp, #20]
 8005e86:	4619      	mov	r1, r3
 8005e88:	f04f 0c0a 	mov.w	ip, #10
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e92:	3a30      	subs	r2, #48	; 0x30
 8005e94:	2a09      	cmp	r2, #9
 8005e96:	d903      	bls.n	8005ea0 <_svfiprintf_r+0x1a8>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0c5      	beq.n	8005e28 <_svfiprintf_r+0x130>
 8005e9c:	9105      	str	r1, [sp, #20]
 8005e9e:	e7c3      	b.n	8005e28 <_svfiprintf_r+0x130>
 8005ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e7f0      	b.n	8005e8c <_svfiprintf_r+0x194>
 8005eaa:	ab03      	add	r3, sp, #12
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	462a      	mov	r2, r5
 8005eb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <_svfiprintf_r+0x1f8>)
 8005eb2:	a904      	add	r1, sp, #16
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	f3af 8000 	nop.w
 8005eba:	1c42      	adds	r2, r0, #1
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	d1d6      	bne.n	8005e6e <_svfiprintf_r+0x176>
 8005ec0:	89ab      	ldrh	r3, [r5, #12]
 8005ec2:	065b      	lsls	r3, r3, #25
 8005ec4:	f53f af2c 	bmi.w	8005d20 <_svfiprintf_r+0x28>
 8005ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eca:	b01d      	add	sp, #116	; 0x74
 8005ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed0:	ab03      	add	r3, sp, #12
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	462a      	mov	r2, r5
 8005ed6:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <_svfiprintf_r+0x1f8>)
 8005ed8:	a904      	add	r1, sp, #16
 8005eda:	4638      	mov	r0, r7
 8005edc:	f000 f87a 	bl	8005fd4 <_printf_i>
 8005ee0:	e7eb      	b.n	8005eba <_svfiprintf_r+0x1c2>
 8005ee2:	bf00      	nop
 8005ee4:	08006608 	.word	0x08006608
 8005ee8:	08006612 	.word	0x08006612
 8005eec:	00000000 	.word	0x00000000
 8005ef0:	08005c41 	.word	0x08005c41
 8005ef4:	0800660e 	.word	0x0800660e

08005ef8 <_printf_common>:
 8005ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005efc:	4616      	mov	r6, r2
 8005efe:	4699      	mov	r9, r3
 8005f00:	688a      	ldr	r2, [r1, #8]
 8005f02:	690b      	ldr	r3, [r1, #16]
 8005f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	bfb8      	it	lt
 8005f0c:	4613      	movlt	r3, r2
 8005f0e:	6033      	str	r3, [r6, #0]
 8005f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f14:	4607      	mov	r7, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	b10a      	cbz	r2, 8005f1e <_printf_common+0x26>
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	6033      	str	r3, [r6, #0]
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	0699      	lsls	r1, r3, #26
 8005f22:	bf42      	ittt	mi
 8005f24:	6833      	ldrmi	r3, [r6, #0]
 8005f26:	3302      	addmi	r3, #2
 8005f28:	6033      	strmi	r3, [r6, #0]
 8005f2a:	6825      	ldr	r5, [r4, #0]
 8005f2c:	f015 0506 	ands.w	r5, r5, #6
 8005f30:	d106      	bne.n	8005f40 <_printf_common+0x48>
 8005f32:	f104 0a19 	add.w	sl, r4, #25
 8005f36:	68e3      	ldr	r3, [r4, #12]
 8005f38:	6832      	ldr	r2, [r6, #0]
 8005f3a:	1a9b      	subs	r3, r3, r2
 8005f3c:	42ab      	cmp	r3, r5
 8005f3e:	dc26      	bgt.n	8005f8e <_printf_common+0x96>
 8005f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f44:	1e13      	subs	r3, r2, #0
 8005f46:	6822      	ldr	r2, [r4, #0]
 8005f48:	bf18      	it	ne
 8005f4a:	2301      	movne	r3, #1
 8005f4c:	0692      	lsls	r2, r2, #26
 8005f4e:	d42b      	bmi.n	8005fa8 <_printf_common+0xb0>
 8005f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f54:	4649      	mov	r1, r9
 8005f56:	4638      	mov	r0, r7
 8005f58:	47c0      	blx	r8
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d01e      	beq.n	8005f9c <_printf_common+0xa4>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	68e5      	ldr	r5, [r4, #12]
 8005f62:	6832      	ldr	r2, [r6, #0]
 8005f64:	f003 0306 	and.w	r3, r3, #6
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	bf08      	it	eq
 8005f6c:	1aad      	subeq	r5, r5, r2
 8005f6e:	68a3      	ldr	r3, [r4, #8]
 8005f70:	6922      	ldr	r2, [r4, #16]
 8005f72:	bf0c      	ite	eq
 8005f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f78:	2500      	movne	r5, #0
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	bfc4      	itt	gt
 8005f7e:	1a9b      	subgt	r3, r3, r2
 8005f80:	18ed      	addgt	r5, r5, r3
 8005f82:	2600      	movs	r6, #0
 8005f84:	341a      	adds	r4, #26
 8005f86:	42b5      	cmp	r5, r6
 8005f88:	d11a      	bne.n	8005fc0 <_printf_common+0xc8>
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	e008      	b.n	8005fa0 <_printf_common+0xa8>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	4652      	mov	r2, sl
 8005f92:	4649      	mov	r1, r9
 8005f94:	4638      	mov	r0, r7
 8005f96:	47c0      	blx	r8
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d103      	bne.n	8005fa4 <_printf_common+0xac>
 8005f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa4:	3501      	adds	r5, #1
 8005fa6:	e7c6      	b.n	8005f36 <_printf_common+0x3e>
 8005fa8:	18e1      	adds	r1, r4, r3
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	2030      	movs	r0, #48	; 0x30
 8005fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fb2:	4422      	add	r2, r4
 8005fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fbc:	3302      	adds	r3, #2
 8005fbe:	e7c7      	b.n	8005f50 <_printf_common+0x58>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	47c0      	blx	r8
 8005fca:	3001      	adds	r0, #1
 8005fcc:	d0e6      	beq.n	8005f9c <_printf_common+0xa4>
 8005fce:	3601      	adds	r6, #1
 8005fd0:	e7d9      	b.n	8005f86 <_printf_common+0x8e>
	...

08005fd4 <_printf_i>:
 8005fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd8:	460c      	mov	r4, r1
 8005fda:	4691      	mov	r9, r2
 8005fdc:	7e27      	ldrb	r7, [r4, #24]
 8005fde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005fe0:	2f78      	cmp	r7, #120	; 0x78
 8005fe2:	4680      	mov	r8, r0
 8005fe4:	469a      	mov	sl, r3
 8005fe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fea:	d807      	bhi.n	8005ffc <_printf_i+0x28>
 8005fec:	2f62      	cmp	r7, #98	; 0x62
 8005fee:	d80a      	bhi.n	8006006 <_printf_i+0x32>
 8005ff0:	2f00      	cmp	r7, #0
 8005ff2:	f000 80d8 	beq.w	80061a6 <_printf_i+0x1d2>
 8005ff6:	2f58      	cmp	r7, #88	; 0x58
 8005ff8:	f000 80a3 	beq.w	8006142 <_printf_i+0x16e>
 8005ffc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006004:	e03a      	b.n	800607c <_printf_i+0xa8>
 8006006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800600a:	2b15      	cmp	r3, #21
 800600c:	d8f6      	bhi.n	8005ffc <_printf_i+0x28>
 800600e:	a001      	add	r0, pc, #4	; (adr r0, 8006014 <_printf_i+0x40>)
 8006010:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006014:	0800606d 	.word	0x0800606d
 8006018:	08006081 	.word	0x08006081
 800601c:	08005ffd 	.word	0x08005ffd
 8006020:	08005ffd 	.word	0x08005ffd
 8006024:	08005ffd 	.word	0x08005ffd
 8006028:	08005ffd 	.word	0x08005ffd
 800602c:	08006081 	.word	0x08006081
 8006030:	08005ffd 	.word	0x08005ffd
 8006034:	08005ffd 	.word	0x08005ffd
 8006038:	08005ffd 	.word	0x08005ffd
 800603c:	08005ffd 	.word	0x08005ffd
 8006040:	0800618d 	.word	0x0800618d
 8006044:	080060b1 	.word	0x080060b1
 8006048:	0800616f 	.word	0x0800616f
 800604c:	08005ffd 	.word	0x08005ffd
 8006050:	08005ffd 	.word	0x08005ffd
 8006054:	080061af 	.word	0x080061af
 8006058:	08005ffd 	.word	0x08005ffd
 800605c:	080060b1 	.word	0x080060b1
 8006060:	08005ffd 	.word	0x08005ffd
 8006064:	08005ffd 	.word	0x08005ffd
 8006068:	08006177 	.word	0x08006177
 800606c:	680b      	ldr	r3, [r1, #0]
 800606e:	1d1a      	adds	r2, r3, #4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	600a      	str	r2, [r1, #0]
 8006074:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800607c:	2301      	movs	r3, #1
 800607e:	e0a3      	b.n	80061c8 <_printf_i+0x1f4>
 8006080:	6825      	ldr	r5, [r4, #0]
 8006082:	6808      	ldr	r0, [r1, #0]
 8006084:	062e      	lsls	r6, r5, #24
 8006086:	f100 0304 	add.w	r3, r0, #4
 800608a:	d50a      	bpl.n	80060a2 <_printf_i+0xce>
 800608c:	6805      	ldr	r5, [r0, #0]
 800608e:	600b      	str	r3, [r1, #0]
 8006090:	2d00      	cmp	r5, #0
 8006092:	da03      	bge.n	800609c <_printf_i+0xc8>
 8006094:	232d      	movs	r3, #45	; 0x2d
 8006096:	426d      	negs	r5, r5
 8006098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800609c:	485e      	ldr	r0, [pc, #376]	; (8006218 <_printf_i+0x244>)
 800609e:	230a      	movs	r3, #10
 80060a0:	e019      	b.n	80060d6 <_printf_i+0x102>
 80060a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80060a6:	6805      	ldr	r5, [r0, #0]
 80060a8:	600b      	str	r3, [r1, #0]
 80060aa:	bf18      	it	ne
 80060ac:	b22d      	sxthne	r5, r5
 80060ae:	e7ef      	b.n	8006090 <_printf_i+0xbc>
 80060b0:	680b      	ldr	r3, [r1, #0]
 80060b2:	6825      	ldr	r5, [r4, #0]
 80060b4:	1d18      	adds	r0, r3, #4
 80060b6:	6008      	str	r0, [r1, #0]
 80060b8:	0628      	lsls	r0, r5, #24
 80060ba:	d501      	bpl.n	80060c0 <_printf_i+0xec>
 80060bc:	681d      	ldr	r5, [r3, #0]
 80060be:	e002      	b.n	80060c6 <_printf_i+0xf2>
 80060c0:	0669      	lsls	r1, r5, #25
 80060c2:	d5fb      	bpl.n	80060bc <_printf_i+0xe8>
 80060c4:	881d      	ldrh	r5, [r3, #0]
 80060c6:	4854      	ldr	r0, [pc, #336]	; (8006218 <_printf_i+0x244>)
 80060c8:	2f6f      	cmp	r7, #111	; 0x6f
 80060ca:	bf0c      	ite	eq
 80060cc:	2308      	moveq	r3, #8
 80060ce:	230a      	movne	r3, #10
 80060d0:	2100      	movs	r1, #0
 80060d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060d6:	6866      	ldr	r6, [r4, #4]
 80060d8:	60a6      	str	r6, [r4, #8]
 80060da:	2e00      	cmp	r6, #0
 80060dc:	bfa2      	ittt	ge
 80060de:	6821      	ldrge	r1, [r4, #0]
 80060e0:	f021 0104 	bicge.w	r1, r1, #4
 80060e4:	6021      	strge	r1, [r4, #0]
 80060e6:	b90d      	cbnz	r5, 80060ec <_printf_i+0x118>
 80060e8:	2e00      	cmp	r6, #0
 80060ea:	d04d      	beq.n	8006188 <_printf_i+0x1b4>
 80060ec:	4616      	mov	r6, r2
 80060ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80060f2:	fb03 5711 	mls	r7, r3, r1, r5
 80060f6:	5dc7      	ldrb	r7, [r0, r7]
 80060f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060fc:	462f      	mov	r7, r5
 80060fe:	42bb      	cmp	r3, r7
 8006100:	460d      	mov	r5, r1
 8006102:	d9f4      	bls.n	80060ee <_printf_i+0x11a>
 8006104:	2b08      	cmp	r3, #8
 8006106:	d10b      	bne.n	8006120 <_printf_i+0x14c>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	07df      	lsls	r7, r3, #31
 800610c:	d508      	bpl.n	8006120 <_printf_i+0x14c>
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	6861      	ldr	r1, [r4, #4]
 8006112:	4299      	cmp	r1, r3
 8006114:	bfde      	ittt	le
 8006116:	2330      	movle	r3, #48	; 0x30
 8006118:	f806 3c01 	strble.w	r3, [r6, #-1]
 800611c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006120:	1b92      	subs	r2, r2, r6
 8006122:	6122      	str	r2, [r4, #16]
 8006124:	f8cd a000 	str.w	sl, [sp]
 8006128:	464b      	mov	r3, r9
 800612a:	aa03      	add	r2, sp, #12
 800612c:	4621      	mov	r1, r4
 800612e:	4640      	mov	r0, r8
 8006130:	f7ff fee2 	bl	8005ef8 <_printf_common>
 8006134:	3001      	adds	r0, #1
 8006136:	d14c      	bne.n	80061d2 <_printf_i+0x1fe>
 8006138:	f04f 30ff 	mov.w	r0, #4294967295
 800613c:	b004      	add	sp, #16
 800613e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006142:	4835      	ldr	r0, [pc, #212]	; (8006218 <_printf_i+0x244>)
 8006144:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	680e      	ldr	r6, [r1, #0]
 800614c:	061f      	lsls	r7, r3, #24
 800614e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006152:	600e      	str	r6, [r1, #0]
 8006154:	d514      	bpl.n	8006180 <_printf_i+0x1ac>
 8006156:	07d9      	lsls	r1, r3, #31
 8006158:	bf44      	itt	mi
 800615a:	f043 0320 	orrmi.w	r3, r3, #32
 800615e:	6023      	strmi	r3, [r4, #0]
 8006160:	b91d      	cbnz	r5, 800616a <_printf_i+0x196>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	f023 0320 	bic.w	r3, r3, #32
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	2310      	movs	r3, #16
 800616c:	e7b0      	b.n	80060d0 <_printf_i+0xfc>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	f043 0320 	orr.w	r3, r3, #32
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	2378      	movs	r3, #120	; 0x78
 8006178:	4828      	ldr	r0, [pc, #160]	; (800621c <_printf_i+0x248>)
 800617a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800617e:	e7e3      	b.n	8006148 <_printf_i+0x174>
 8006180:	065e      	lsls	r6, r3, #25
 8006182:	bf48      	it	mi
 8006184:	b2ad      	uxthmi	r5, r5
 8006186:	e7e6      	b.n	8006156 <_printf_i+0x182>
 8006188:	4616      	mov	r6, r2
 800618a:	e7bb      	b.n	8006104 <_printf_i+0x130>
 800618c:	680b      	ldr	r3, [r1, #0]
 800618e:	6826      	ldr	r6, [r4, #0]
 8006190:	6960      	ldr	r0, [r4, #20]
 8006192:	1d1d      	adds	r5, r3, #4
 8006194:	600d      	str	r5, [r1, #0]
 8006196:	0635      	lsls	r5, r6, #24
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	d501      	bpl.n	80061a0 <_printf_i+0x1cc>
 800619c:	6018      	str	r0, [r3, #0]
 800619e:	e002      	b.n	80061a6 <_printf_i+0x1d2>
 80061a0:	0671      	lsls	r1, r6, #25
 80061a2:	d5fb      	bpl.n	800619c <_printf_i+0x1c8>
 80061a4:	8018      	strh	r0, [r3, #0]
 80061a6:	2300      	movs	r3, #0
 80061a8:	6123      	str	r3, [r4, #16]
 80061aa:	4616      	mov	r6, r2
 80061ac:	e7ba      	b.n	8006124 <_printf_i+0x150>
 80061ae:	680b      	ldr	r3, [r1, #0]
 80061b0:	1d1a      	adds	r2, r3, #4
 80061b2:	600a      	str	r2, [r1, #0]
 80061b4:	681e      	ldr	r6, [r3, #0]
 80061b6:	6862      	ldr	r2, [r4, #4]
 80061b8:	2100      	movs	r1, #0
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7fa f860 	bl	8000280 <memchr>
 80061c0:	b108      	cbz	r0, 80061c6 <_printf_i+0x1f2>
 80061c2:	1b80      	subs	r0, r0, r6
 80061c4:	6060      	str	r0, [r4, #4]
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	6123      	str	r3, [r4, #16]
 80061ca:	2300      	movs	r3, #0
 80061cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d0:	e7a8      	b.n	8006124 <_printf_i+0x150>
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	4632      	mov	r2, r6
 80061d6:	4649      	mov	r1, r9
 80061d8:	4640      	mov	r0, r8
 80061da:	47d0      	blx	sl
 80061dc:	3001      	adds	r0, #1
 80061de:	d0ab      	beq.n	8006138 <_printf_i+0x164>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	079b      	lsls	r3, r3, #30
 80061e4:	d413      	bmi.n	800620e <_printf_i+0x23a>
 80061e6:	68e0      	ldr	r0, [r4, #12]
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	4298      	cmp	r0, r3
 80061ec:	bfb8      	it	lt
 80061ee:	4618      	movlt	r0, r3
 80061f0:	e7a4      	b.n	800613c <_printf_i+0x168>
 80061f2:	2301      	movs	r3, #1
 80061f4:	4632      	mov	r2, r6
 80061f6:	4649      	mov	r1, r9
 80061f8:	4640      	mov	r0, r8
 80061fa:	47d0      	blx	sl
 80061fc:	3001      	adds	r0, #1
 80061fe:	d09b      	beq.n	8006138 <_printf_i+0x164>
 8006200:	3501      	adds	r5, #1
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	9903      	ldr	r1, [sp, #12]
 8006206:	1a5b      	subs	r3, r3, r1
 8006208:	42ab      	cmp	r3, r5
 800620a:	dcf2      	bgt.n	80061f2 <_printf_i+0x21e>
 800620c:	e7eb      	b.n	80061e6 <_printf_i+0x212>
 800620e:	2500      	movs	r5, #0
 8006210:	f104 0619 	add.w	r6, r4, #25
 8006214:	e7f5      	b.n	8006202 <_printf_i+0x22e>
 8006216:	bf00      	nop
 8006218:	08006619 	.word	0x08006619
 800621c:	0800662a 	.word	0x0800662a

08006220 <memmove>:
 8006220:	4288      	cmp	r0, r1
 8006222:	b510      	push	{r4, lr}
 8006224:	eb01 0402 	add.w	r4, r1, r2
 8006228:	d902      	bls.n	8006230 <memmove+0x10>
 800622a:	4284      	cmp	r4, r0
 800622c:	4623      	mov	r3, r4
 800622e:	d807      	bhi.n	8006240 <memmove+0x20>
 8006230:	1e43      	subs	r3, r0, #1
 8006232:	42a1      	cmp	r1, r4
 8006234:	d008      	beq.n	8006248 <memmove+0x28>
 8006236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800623a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800623e:	e7f8      	b.n	8006232 <memmove+0x12>
 8006240:	4402      	add	r2, r0
 8006242:	4601      	mov	r1, r0
 8006244:	428a      	cmp	r2, r1
 8006246:	d100      	bne.n	800624a <memmove+0x2a>
 8006248:	bd10      	pop	{r4, pc}
 800624a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800624e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006252:	e7f7      	b.n	8006244 <memmove+0x24>

08006254 <_free_r>:
 8006254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006256:	2900      	cmp	r1, #0
 8006258:	d048      	beq.n	80062ec <_free_r+0x98>
 800625a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800625e:	9001      	str	r0, [sp, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	f1a1 0404 	sub.w	r4, r1, #4
 8006266:	bfb8      	it	lt
 8006268:	18e4      	addlt	r4, r4, r3
 800626a:	f000 f8d3 	bl	8006414 <__malloc_lock>
 800626e:	4a20      	ldr	r2, [pc, #128]	; (80062f0 <_free_r+0x9c>)
 8006270:	9801      	ldr	r0, [sp, #4]
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	4615      	mov	r5, r2
 8006276:	b933      	cbnz	r3, 8006286 <_free_r+0x32>
 8006278:	6063      	str	r3, [r4, #4]
 800627a:	6014      	str	r4, [r2, #0]
 800627c:	b003      	add	sp, #12
 800627e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006282:	f000 b8cd 	b.w	8006420 <__malloc_unlock>
 8006286:	42a3      	cmp	r3, r4
 8006288:	d90b      	bls.n	80062a2 <_free_r+0x4e>
 800628a:	6821      	ldr	r1, [r4, #0]
 800628c:	1862      	adds	r2, r4, r1
 800628e:	4293      	cmp	r3, r2
 8006290:	bf04      	itt	eq
 8006292:	681a      	ldreq	r2, [r3, #0]
 8006294:	685b      	ldreq	r3, [r3, #4]
 8006296:	6063      	str	r3, [r4, #4]
 8006298:	bf04      	itt	eq
 800629a:	1852      	addeq	r2, r2, r1
 800629c:	6022      	streq	r2, [r4, #0]
 800629e:	602c      	str	r4, [r5, #0]
 80062a0:	e7ec      	b.n	800627c <_free_r+0x28>
 80062a2:	461a      	mov	r2, r3
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	b10b      	cbz	r3, 80062ac <_free_r+0x58>
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	d9fa      	bls.n	80062a2 <_free_r+0x4e>
 80062ac:	6811      	ldr	r1, [r2, #0]
 80062ae:	1855      	adds	r5, r2, r1
 80062b0:	42a5      	cmp	r5, r4
 80062b2:	d10b      	bne.n	80062cc <_free_r+0x78>
 80062b4:	6824      	ldr	r4, [r4, #0]
 80062b6:	4421      	add	r1, r4
 80062b8:	1854      	adds	r4, r2, r1
 80062ba:	42a3      	cmp	r3, r4
 80062bc:	6011      	str	r1, [r2, #0]
 80062be:	d1dd      	bne.n	800627c <_free_r+0x28>
 80062c0:	681c      	ldr	r4, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	6053      	str	r3, [r2, #4]
 80062c6:	4421      	add	r1, r4
 80062c8:	6011      	str	r1, [r2, #0]
 80062ca:	e7d7      	b.n	800627c <_free_r+0x28>
 80062cc:	d902      	bls.n	80062d4 <_free_r+0x80>
 80062ce:	230c      	movs	r3, #12
 80062d0:	6003      	str	r3, [r0, #0]
 80062d2:	e7d3      	b.n	800627c <_free_r+0x28>
 80062d4:	6825      	ldr	r5, [r4, #0]
 80062d6:	1961      	adds	r1, r4, r5
 80062d8:	428b      	cmp	r3, r1
 80062da:	bf04      	itt	eq
 80062dc:	6819      	ldreq	r1, [r3, #0]
 80062de:	685b      	ldreq	r3, [r3, #4]
 80062e0:	6063      	str	r3, [r4, #4]
 80062e2:	bf04      	itt	eq
 80062e4:	1949      	addeq	r1, r1, r5
 80062e6:	6021      	streq	r1, [r4, #0]
 80062e8:	6054      	str	r4, [r2, #4]
 80062ea:	e7c7      	b.n	800627c <_free_r+0x28>
 80062ec:	b003      	add	sp, #12
 80062ee:	bd30      	pop	{r4, r5, pc}
 80062f0:	2001439c 	.word	0x2001439c

080062f4 <_malloc_r>:
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	1ccd      	adds	r5, r1, #3
 80062f8:	f025 0503 	bic.w	r5, r5, #3
 80062fc:	3508      	adds	r5, #8
 80062fe:	2d0c      	cmp	r5, #12
 8006300:	bf38      	it	cc
 8006302:	250c      	movcc	r5, #12
 8006304:	2d00      	cmp	r5, #0
 8006306:	4606      	mov	r6, r0
 8006308:	db01      	blt.n	800630e <_malloc_r+0x1a>
 800630a:	42a9      	cmp	r1, r5
 800630c:	d903      	bls.n	8006316 <_malloc_r+0x22>
 800630e:	230c      	movs	r3, #12
 8006310:	6033      	str	r3, [r6, #0]
 8006312:	2000      	movs	r0, #0
 8006314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006316:	f000 f87d 	bl	8006414 <__malloc_lock>
 800631a:	4921      	ldr	r1, [pc, #132]	; (80063a0 <_malloc_r+0xac>)
 800631c:	680a      	ldr	r2, [r1, #0]
 800631e:	4614      	mov	r4, r2
 8006320:	b99c      	cbnz	r4, 800634a <_malloc_r+0x56>
 8006322:	4f20      	ldr	r7, [pc, #128]	; (80063a4 <_malloc_r+0xb0>)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	b923      	cbnz	r3, 8006332 <_malloc_r+0x3e>
 8006328:	4621      	mov	r1, r4
 800632a:	4630      	mov	r0, r6
 800632c:	f000 f862 	bl	80063f4 <_sbrk_r>
 8006330:	6038      	str	r0, [r7, #0]
 8006332:	4629      	mov	r1, r5
 8006334:	4630      	mov	r0, r6
 8006336:	f000 f85d 	bl	80063f4 <_sbrk_r>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	d123      	bne.n	8006386 <_malloc_r+0x92>
 800633e:	230c      	movs	r3, #12
 8006340:	6033      	str	r3, [r6, #0]
 8006342:	4630      	mov	r0, r6
 8006344:	f000 f86c 	bl	8006420 <__malloc_unlock>
 8006348:	e7e3      	b.n	8006312 <_malloc_r+0x1e>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	1b5b      	subs	r3, r3, r5
 800634e:	d417      	bmi.n	8006380 <_malloc_r+0x8c>
 8006350:	2b0b      	cmp	r3, #11
 8006352:	d903      	bls.n	800635c <_malloc_r+0x68>
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	441c      	add	r4, r3
 8006358:	6025      	str	r5, [r4, #0]
 800635a:	e004      	b.n	8006366 <_malloc_r+0x72>
 800635c:	6863      	ldr	r3, [r4, #4]
 800635e:	42a2      	cmp	r2, r4
 8006360:	bf0c      	ite	eq
 8006362:	600b      	streq	r3, [r1, #0]
 8006364:	6053      	strne	r3, [r2, #4]
 8006366:	4630      	mov	r0, r6
 8006368:	f000 f85a 	bl	8006420 <__malloc_unlock>
 800636c:	f104 000b 	add.w	r0, r4, #11
 8006370:	1d23      	adds	r3, r4, #4
 8006372:	f020 0007 	bic.w	r0, r0, #7
 8006376:	1ac2      	subs	r2, r0, r3
 8006378:	d0cc      	beq.n	8006314 <_malloc_r+0x20>
 800637a:	1a1b      	subs	r3, r3, r0
 800637c:	50a3      	str	r3, [r4, r2]
 800637e:	e7c9      	b.n	8006314 <_malloc_r+0x20>
 8006380:	4622      	mov	r2, r4
 8006382:	6864      	ldr	r4, [r4, #4]
 8006384:	e7cc      	b.n	8006320 <_malloc_r+0x2c>
 8006386:	1cc4      	adds	r4, r0, #3
 8006388:	f024 0403 	bic.w	r4, r4, #3
 800638c:	42a0      	cmp	r0, r4
 800638e:	d0e3      	beq.n	8006358 <_malloc_r+0x64>
 8006390:	1a21      	subs	r1, r4, r0
 8006392:	4630      	mov	r0, r6
 8006394:	f000 f82e 	bl	80063f4 <_sbrk_r>
 8006398:	3001      	adds	r0, #1
 800639a:	d1dd      	bne.n	8006358 <_malloc_r+0x64>
 800639c:	e7cf      	b.n	800633e <_malloc_r+0x4a>
 800639e:	bf00      	nop
 80063a0:	2001439c 	.word	0x2001439c
 80063a4:	200143a0 	.word	0x200143a0

080063a8 <_realloc_r>:
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	4607      	mov	r7, r0
 80063ac:	4614      	mov	r4, r2
 80063ae:	460e      	mov	r6, r1
 80063b0:	b921      	cbnz	r1, 80063bc <_realloc_r+0x14>
 80063b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063b6:	4611      	mov	r1, r2
 80063b8:	f7ff bf9c 	b.w	80062f4 <_malloc_r>
 80063bc:	b922      	cbnz	r2, 80063c8 <_realloc_r+0x20>
 80063be:	f7ff ff49 	bl	8006254 <_free_r>
 80063c2:	4625      	mov	r5, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c8:	f000 f830 	bl	800642c <_malloc_usable_size_r>
 80063cc:	42a0      	cmp	r0, r4
 80063ce:	d20f      	bcs.n	80063f0 <_realloc_r+0x48>
 80063d0:	4621      	mov	r1, r4
 80063d2:	4638      	mov	r0, r7
 80063d4:	f7ff ff8e 	bl	80062f4 <_malloc_r>
 80063d8:	4605      	mov	r5, r0
 80063da:	2800      	cmp	r0, #0
 80063dc:	d0f2      	beq.n	80063c4 <_realloc_r+0x1c>
 80063de:	4631      	mov	r1, r6
 80063e0:	4622      	mov	r2, r4
 80063e2:	f7ff fbe3 	bl	8005bac <memcpy>
 80063e6:	4631      	mov	r1, r6
 80063e8:	4638      	mov	r0, r7
 80063ea:	f7ff ff33 	bl	8006254 <_free_r>
 80063ee:	e7e9      	b.n	80063c4 <_realloc_r+0x1c>
 80063f0:	4635      	mov	r5, r6
 80063f2:	e7e7      	b.n	80063c4 <_realloc_r+0x1c>

080063f4 <_sbrk_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4d06      	ldr	r5, [pc, #24]	; (8006410 <_sbrk_r+0x1c>)
 80063f8:	2300      	movs	r3, #0
 80063fa:	4604      	mov	r4, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	f000 f81e 	bl	8006440 <_sbrk>
 8006404:	1c43      	adds	r3, r0, #1
 8006406:	d102      	bne.n	800640e <_sbrk_r+0x1a>
 8006408:	682b      	ldr	r3, [r5, #0]
 800640a:	b103      	cbz	r3, 800640e <_sbrk_r+0x1a>
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	2001449c 	.word	0x2001449c

08006414 <__malloc_lock>:
 8006414:	4801      	ldr	r0, [pc, #4]	; (800641c <__malloc_lock+0x8>)
 8006416:	f000 b811 	b.w	800643c <__retarget_lock_acquire_recursive>
 800641a:	bf00      	nop
 800641c:	200144a4 	.word	0x200144a4

08006420 <__malloc_unlock>:
 8006420:	4801      	ldr	r0, [pc, #4]	; (8006428 <__malloc_unlock+0x8>)
 8006422:	f000 b80c 	b.w	800643e <__retarget_lock_release_recursive>
 8006426:	bf00      	nop
 8006428:	200144a4 	.word	0x200144a4

0800642c <_malloc_usable_size_r>:
 800642c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006430:	1f18      	subs	r0, r3, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	bfbc      	itt	lt
 8006436:	580b      	ldrlt	r3, [r1, r0]
 8006438:	18c0      	addlt	r0, r0, r3
 800643a:	4770      	bx	lr

0800643c <__retarget_lock_acquire_recursive>:
 800643c:	4770      	bx	lr

0800643e <__retarget_lock_release_recursive>:
 800643e:	4770      	bx	lr

08006440 <_sbrk>:
 8006440:	4b04      	ldr	r3, [pc, #16]	; (8006454 <_sbrk+0x14>)
 8006442:	6819      	ldr	r1, [r3, #0]
 8006444:	4602      	mov	r2, r0
 8006446:	b909      	cbnz	r1, 800644c <_sbrk+0xc>
 8006448:	4903      	ldr	r1, [pc, #12]	; (8006458 <_sbrk+0x18>)
 800644a:	6019      	str	r1, [r3, #0]
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	4402      	add	r2, r0
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	4770      	bx	lr
 8006454:	200143a4 	.word	0x200143a4
 8006458:	200144b0 	.word	0x200144b0

0800645c <_init>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr

08006468 <_fini>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	bf00      	nop
 800646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646e:	bc08      	pop	{r3}
 8006470:	469e      	mov	lr, r3
 8006472:	4770      	bx	lr
