
11_freertos_queues_2tasks_keypad_tm1638.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f28  08006f28  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f28  08006f28  00016f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f30  08006f30  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08006f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000138dc  2000003c  08006f74  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013918  08006f74  00023918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adca  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003669  00000000  00000000  0003ae36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0003e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  0003f920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001972b  00000000  00000000  00040c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176db  00000000  00000000  0005a333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cb97  00000000  00000000  00071a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e5a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b8  00000000  00000000  0010e5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000003c 	.word	0x2000003c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d48 	.word	0x08006d48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000040 	.word	0x20000040
 80001dc:	08006d48 	.word	0x08006d48

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20013870 	.word	0x20013870

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fb79 	bl	8000c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f865 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f905 	bl	8000788 <MX_GPIO_Init>
  MX_SPI1_Init();
 800057e:	f000 f8cb 	bl	8000718 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	//Enable the CYCCNT counter.
	DWT_CTRL |= (1 << 0);
 8000582:	4b25      	ldr	r3, [pc, #148]	; (8000618 <main+0xac>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a24      	ldr	r2, [pc, #144]	; (8000618 <main+0xac>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 800058e:	f003 fe79 	bl	8004284 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8000592:	f005 fc93 	bl	8005ebc <SEGGER_SYSVIEW_Start>

	SEGGER_UART_init(500000);
 8000596:	4821      	ldr	r0, [pc, #132]	; (800061c <main+0xb0>)
 8000598:	f004 f842 	bl	8004620 <SEGGER_UART_init>

	status = xTaskCreate(handle_led_green, "led_green", 200,
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <main+0xb4>)
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	2303      	movs	r3, #3
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <main+0xb8>)
 80005a6:	22c8      	movs	r2, #200	; 0xc8
 80005a8:	491f      	ldr	r1, [pc, #124]	; (8000628 <main+0xbc>)
 80005aa:	4820      	ldr	r0, [pc, #128]	; (800062c <main+0xc0>)
 80005ac:	f002 faec 	bl	8002b88 <xTaskCreate>
 80005b0:	60f8      	str	r0, [r7, #12]
			"this is task led green", 3, &led_green);
	configASSERT(status == pdPASS);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d00a      	beq.n	80005ce <main+0x62>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005bc:	f383 8811 	msr	BASEPRI, r3
 80005c0:	f3bf 8f6f 	isb	sy
 80005c4:	f3bf 8f4f 	dsb	sy
 80005c8:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ca:	bf00      	nop
 80005cc:	e7fe      	b.n	80005cc <main+0x60>


	status = xTaskCreate(handle_keypad, "keypad_task", 200,
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <main+0xc4>)
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2302      	movs	r3, #2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <main+0xc8>)
 80005d8:	22c8      	movs	r2, #200	; 0xc8
 80005da:	4917      	ldr	r1, [pc, #92]	; (8000638 <main+0xcc>)
 80005dc:	4817      	ldr	r0, [pc, #92]	; (800063c <main+0xd0>)
 80005de:	f002 fad3 	bl	8002b88 <xTaskCreate>
 80005e2:	60f8      	str	r0, [r7, #12]
			"this is task keypad", 2, &keypad);
	configASSERT(status == pdPASS);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d00a      	beq.n	8000600 <main+0x94>
        __asm volatile
 80005ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ee:	f383 8811 	msr	BASEPRI, r3
 80005f2:	f3bf 8f6f 	isb	sy
 80005f6:	f3bf 8f4f 	dsb	sy
 80005fa:	607b      	str	r3, [r7, #4]
    }
 80005fc:	bf00      	nop
 80005fe:	e7fe      	b.n	80005fe <main+0x92>

	qdata_key = xQueueCreate(10, sizeof(struct data));
 8000600:	2200      	movs	r2, #0
 8000602:	2108      	movs	r1, #8
 8000604:	200a      	movs	r0, #10
 8000606:	f001 ff21 	bl	800244c <xQueueGenericCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <main+0xd4>)
 800060e:	6013      	str	r3, [r2, #0]
	if (qdata_key == NULL) {
		/* Queue was not created and must not be used. */
	}

	vTaskStartScheduler();
 8000610:	f002 fc56 	bl	8002ec0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000614:	e7fe      	b.n	8000614 <main+0xa8>
 8000616:	bf00      	nop
 8000618:	e0001000 	.word	0xe0001000
 800061c:	0007a120 	.word	0x0007a120
 8000620:	200137c0 	.word	0x200137c0
 8000624:	08006d60 	.word	0x08006d60
 8000628:	08006d78 	.word	0x08006d78
 800062c:	080008b5 	.word	0x080008b5
 8000630:	200137c8 	.word	0x200137c8
 8000634:	08006d84 	.word	0x08006d84
 8000638:	08006d98 	.word	0x08006d98
 800063c:	08000915 	.word	0x08000915
 8000640:	200137c4 	.word	0x200137c4

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 fb70 	bl	8006d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80006b8:	23c8      	movs	r3, #200	; 0xc8
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fe09 	bl	80012e0 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f994 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2103      	movs	r1, #3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f86a 	bl	80017d0 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f97d 	bl	8000a00 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_SPI1_Init+0x68>)
 800071e:	4a19      	ldr	r2, [pc, #100]	; (8000784 <MX_SPI1_Init+0x6c>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_SPI1_Init+0x68>)
 8000724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_SPI1_Init+0x68>)
 800072c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000730:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_SPI1_Init+0x68>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI1_Init+0x68>)
 800073a:	2202      	movs	r2, #2
 800073c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_SPI1_Init+0x68>)
 8000740:	2201      	movs	r2, #1
 8000742:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI1_Init+0x68>)
 8000746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI1_Init+0x68>)
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_SPI1_Init+0x68>)
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI1_Init+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_SPI1_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI1_Init+0x68>)
 8000766:	220a      	movs	r2, #10
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_SPI1_Init+0x68>)
 800076c:	f001 fa4a 	bl	8001c04 <HAL_SPI_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000776:	f000 f943 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200137cc 	.word	0x200137cc
 8000784:	40013000 	.word	0x40013000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <MX_GPIO_Init+0x120>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a40      	ldr	r2, [pc, #256]	; (80008a8 <MX_GPIO_Init+0x120>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <MX_GPIO_Init+0x120>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <MX_GPIO_Init+0x120>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a39      	ldr	r2, [pc, #228]	; (80008a8 <MX_GPIO_Init+0x120>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <MX_GPIO_Init+0x120>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <MX_GPIO_Init+0x120>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a32      	ldr	r2, [pc, #200]	; (80008a8 <MX_GPIO_Init+0x120>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <MX_GPIO_Init+0x120>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2110      	movs	r1, #16
 80007f6:	482d      	ldr	r0, [pc, #180]	; (80008ac <MX_GPIO_Init+0x124>)
 80007f8:	f000 fd1a 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD4_Pin|LD5_Pin|LD6_Pin
 80007fc:	2200      	movs	r2, #0
 80007fe:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 8000802:	482b      	ldr	r0, [pc, #172]	; (80008b0 <MX_GPIO_Init+0x128>)
 8000804:	f000 fd14 	bl	8001230 <HAL_GPIO_WritePin>
                          |ROW_0_Pin|ROW_1_Pin|ROW_2_Pin|ROW_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000808:	2301      	movs	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000812:	2302      	movs	r3, #2
 8000814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	4823      	ldr	r0, [pc, #140]	; (80008ac <MX_GPIO_Init+0x124>)
 800081e:	f000 fb6b 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000822:	2310      	movs	r3, #16
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800082a:	2302      	movs	r3, #2
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	481c      	ldr	r0, [pc, #112]	; (80008ac <MX_GPIO_Init+0x124>)
 800083a:	f000 fb5d 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin|LD5_Pin|LD6_Pin;
 800083e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084c:	2302      	movs	r3, #2
 800084e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4619      	mov	r1, r3
 8000856:	4816      	ldr	r0, [pc, #88]	; (80008b0 <MX_GPIO_Init+0x128>)
 8000858:	f000 fb4e 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_0_Pin COL_1_Pin COL_2_Pin COL_3_Pin */
  GPIO_InitStruct.Pin = COL_0_Pin|COL_1_Pin|COL_2_Pin|COL_3_Pin;
 800085c:	230f      	movs	r3, #15
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4619      	mov	r1, r3
 800086e:	4810      	ldr	r0, [pc, #64]	; (80008b0 <MX_GPIO_Init+0x128>)
 8000870:	f000 fb42 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_0_Pin ROW_1_Pin ROW_2_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_0_Pin|ROW_1_Pin|ROW_2_Pin|ROW_3_Pin;
 8000874:	23f0      	movs	r3, #240	; 0xf0
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800087c:	2302      	movs	r3, #2
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000880:	2302      	movs	r3, #2
 8000882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <MX_GPIO_Init+0x128>)
 800088c:	f000 fb34 	bl	8000ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2107      	movs	r1, #7
 8000894:	2006      	movs	r0, #6
 8000896:	f000 fb05 	bl	8000ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800089a:	2006      	movs	r0, #6
 800089c:	f000 fb1e 	bl	8000edc <HAL_NVIC_EnableIRQ>

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40020c00 	.word	0x40020c00

080008b4 <handle_led_green>:

/* USER CODE BEGIN 4 */
void handle_led_green(void *parameters) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	struct data data_receive = { 0, 0 };
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
	while (1) {
		if (qdata_key != NULL) {
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <handle_led_green+0x50>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d0fb      	beq.n	80008c4 <handle_led_green+0x10>
			if (xQueueReceive(qdata_key, &data_receive,
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <handle_led_green+0x50>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f107 0108 	add.w	r1, r7, #8
 80008d4:	220a      	movs	r2, #10
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 ff4e 	bl	8002778 <xQueueReceive>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d1f0      	bne.n	80008c4 <handle_led_green+0x10>
					(TickType_t) 10) == pdPASS) {
				/* *pxRxedPointer now points to xMessage. */
				SEGGER_SYSVIEW_PrintfTarget("have received data");
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <handle_led_green+0x54>)
 80008e4:	f006 f85c 	bl	80069a0 <SEGGER_SYSVIEW_PrintfTarget>

				if (data_receive.id == 1111) {
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	f240 4257 	movw	r2, #1111	; 0x457
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d1e8      	bne.n	80008c4 <handle_led_green+0x10>
					SEGGER_SYSVIEW_PrintfTarget(
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <handle_led_green+0x58>)
 80008f4:	f006 f854 	bl	80069a0 <SEGGER_SYSVIEW_PrintfTarget>
							"execute print number in task 1");
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80008f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <handle_led_green+0x5c>)
 80008fe:	f000 fcb0 	bl	8001262 <HAL_GPIO_TogglePin>
		if (qdata_key != NULL) {
 8000902:	e7df      	b.n	80008c4 <handle_led_green+0x10>
 8000904:	200137c4 	.word	0x200137c4
 8000908:	08006da4 	.word	0x08006da4
 800090c:	08006db8 	.word	0x08006db8
 8000910:	40020c00 	.word	0x40020c00

08000914 <handle_keypad>:
			}
		}
	}
}

void handle_keypad(void *parameters) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	char key;
	struct data data_trans;
	while (1) {
		key = keypad_read();
 800091c:	f006 f8de 	bl	8006adc <keypad_read>
 8000920:	4603      	mov	r3, r0
 8000922:	75fb      	strb	r3, [r7, #23]
		switch (key) {
 8000924:	7dfb      	ldrb	r3, [r7, #23]
 8000926:	3b30      	subs	r3, #48	; 0x30
 8000928:	2b04      	cmp	r3, #4
 800092a:	d845      	bhi.n	80009b8 <handle_keypad+0xa4>
 800092c:	a201      	add	r2, pc, #4	; (adr r2, 8000934 <handle_keypad+0x20>)
 800092e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000932:	bf00      	nop
 8000934:	080009b9 	.word	0x080009b9
 8000938:	08000949 	.word	0x08000949
 800093c:	080009a1 	.word	0x080009a1
 8000940:	080009a9 	.word	0x080009a9
 8000944:	080009b1 	.word	0x080009b1
		case '0':

			break;
		case '1':
			SEGGER_SYSVIEW_PrintfTarget("toggle led green ");
 8000948:	481e      	ldr	r0, [pc, #120]	; (80009c4 <handle_keypad+0xb0>)
 800094a:	f006 f829 	bl	80069a0 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000954:	481c      	ldr	r0, [pc, #112]	; (80009c8 <handle_keypad+0xb4>)
 8000956:	f000 fc6b 	bl	8001230 <HAL_GPIO_WritePin>
			data_trans.id = keypad_enter();
 800095a:	f006 f911 	bl	8006b80 <keypad_enter>
 800095e:	4603      	mov	r3, r0
 8000960:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000968:	4817      	ldr	r0, [pc, #92]	; (80009c8 <handle_keypad+0xb4>)
 800096a:	f000 fc61 	bl	8001230 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000974:	4814      	ldr	r0, [pc, #80]	; (80009c8 <handle_keypad+0xb4>)
 8000976:	f000 fc5b 	bl	8001230 <HAL_GPIO_WritePin>
			data_trans.number = keypad_enter();
 800097a:	f006 f901 	bl	8006b80 <keypad_enter>
 800097e:	4603      	mov	r3, r0
 8000980:	613b      	str	r3, [r7, #16]
			HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <handle_keypad+0xb4>)
 800098a:	f000 fc51 	bl	8001230 <HAL_GPIO_WritePin>

			xQueueSend(qdata_key, (void* )&data_trans, (TickType_t ) 0);
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <handle_keypad+0xb8>)
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	f107 010c 	add.w	r1, r7, #12
 8000996:	2300      	movs	r3, #0
 8000998:	2200      	movs	r2, #0
 800099a:	f001 fddf 	bl	800255c <xQueueGenericSend>
			break;
 800099e:	e00c      	b.n	80009ba <handle_keypad+0xa6>
		case '2':
			SEGGER_SYSVIEW_PrintfTarget("toggle led_orange ");
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <handle_keypad+0xbc>)
 80009a2:	f005 fffd 	bl	80069a0 <SEGGER_SYSVIEW_PrintfTarget>

			break;
 80009a6:	e008      	b.n	80009ba <handle_keypad+0xa6>
		case '3':
			SEGGER_SYSVIEW_PrintfTarget("toggle led_red ");
 80009a8:	480a      	ldr	r0, [pc, #40]	; (80009d4 <handle_keypad+0xc0>)
 80009aa:	f005 fff9 	bl	80069a0 <SEGGER_SYSVIEW_PrintfTarget>

			break;
 80009ae:	e004      	b.n	80009ba <handle_keypad+0xa6>
		case '4':
			SEGGER_SYSVIEW_PrintfTarget("toggle led_blue ");
 80009b0:	4809      	ldr	r0, [pc, #36]	; (80009d8 <handle_keypad+0xc4>)
 80009b2:	f005 fff5 	bl	80069a0 <SEGGER_SYSVIEW_PrintfTarget>

			break;
 80009b6:	e000      	b.n	80009ba <handle_keypad+0xa6>
		default:
			break;
 80009b8:	bf00      	nop
		}
		vTaskDelay(pdMS_TO_TICKS(10));
 80009ba:	200a      	movs	r0, #10
 80009bc:	f002 fa48 	bl	8002e50 <vTaskDelay>
		key = keypad_read();
 80009c0:	e7ac      	b.n	800091c <handle_keypad+0x8>
 80009c2:	bf00      	nop
 80009c4:	08006dd8 	.word	0x08006dd8
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	200137c4 	.word	0x200137c4
 80009d0:	08006dec 	.word	0x08006dec
 80009d4:	08006e00 	.word	0x08006e00
 80009d8:	08006e10 	.word	0x08006e10

080009dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d101      	bne.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ee:	f000 f95d 	bl	8000cac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40000c00 	.word	0x40000c00

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000a4a:	f003 f865 	bl	8003b18 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_SPI_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12b      	bne.n	8000ad6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ab6:	23a0      	movs	r3, #160	; 0xa0
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000ad2:	f000 fa11 	bl	8000ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40013000 	.word	0x40013000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000

08000aec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	; 0x30
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	2032      	movs	r0, #50	; 0x32
 8000b02:	f000 f9cf 	bl	8000ea4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b06:	2032      	movs	r0, #50	; 0x32
 8000b08:	f000 f9e8 	bl	8000edc <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <HAL_InitTick+0xa4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a1e      	ldr	r2, [pc, #120]	; (8000b90 <HAL_InitTick+0xa4>)
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <HAL_InitTick+0xa4>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f003 0308 	and.w	r3, r3, #8
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b28:	f107 0210 	add.w	r2, r7, #16
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f834 	bl	8001ba0 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b38:	f001 f81e 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b44:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <HAL_InitTick+0xa8>)
 8000b46:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4a:	0c9b      	lsrs	r3, r3, #18
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_InitTick+0xac>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <HAL_InitTick+0xb0>)
 8000b54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_InitTick+0xac>)
 8000b58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b5c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_InitTick+0xac>)
 8000b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b62:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_InitTick+0xac>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_InitTick+0xac>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <HAL_InitTick+0xac>)
 8000b72:	f001 f8d0 	bl	8001d16 <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d104      	bne.n	8000b86 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <HAL_InitTick+0xac>)
 8000b7e:	f001 f923 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
 8000b82:	4603      	mov	r3, r0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3730      	adds	r7, #48	; 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	431bde83 	.word	0x431bde83
 8000b98:	20013824 	.word	0x20013824
 8000b9c:	40000c00 	.word	0x40000c00

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
//	btn_user();

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 fb61 	bl	8001298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM5_IRQHandler+0x10>)
 8000be2:	f001 f953 	bl	8001e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20013824 	.word	0x20013824

08000bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <SystemInit+0x20>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <SystemInit+0x20>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c1a:	490e      	ldr	r1, [pc, #56]	; (8000c54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c1c:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c30:	4c0b      	ldr	r4, [pc, #44]	; (8000c60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c3e:	f7ff ffd7 	bl	8000bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c42:	f006 f839 	bl	8006cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c46:	f7ff fc91 	bl	800056c <main>
  bx  lr    
 8000c4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000c58:	08006f38 	.word	0x08006f38
  ldr r2, =_sbss
 8000c5c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000c60:	20013918 	.word	0x20013918

08000c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC_IRQHandler>
	...

08000c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <HAL_Init+0x40>)
 8000c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_Init+0x40>)
 8000c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_Init+0x40>)
 8000c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f8fc 	bl	8000e8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	200f      	movs	r0, #15
 8000c98:	f7ff ff28 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9c:	f7ff feb6 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023c00 	.word	0x40023c00

08000cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	2001386c 	.word	0x2001386c

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	2001386c 	.word	0x2001386c

08000cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff ffee 	bl	8000cd4 <HAL_GetTick>
 8000cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d04:	d005      	beq.n	8000d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_Delay+0x44>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d12:	bf00      	nop
 8000d14:	f7ff ffde 	bl	8000cd4 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8f7      	bhi.n	8000d14 <HAL_Delay+0x28>
  {
  }
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff4c 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb6:	f7ff ff61 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000eba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	6978      	ldr	r0, [r7, #20]
 8000ec2:	f7ff ffb1 	bl	8000e28 <NVIC_EncodePriority>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff80 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff54 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e159      	b.n	80011c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 8148 	bne.w	80011c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80a2 	beq.w	80011c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b57      	ldr	r3, [pc, #348]	; (80011e0 <HAL_GPIO_Init+0x2e8>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a56      	ldr	r2, [pc, #344]	; (80011e0 <HAL_GPIO_Init+0x2e8>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b54      	ldr	r3, [pc, #336]	; (80011e0 <HAL_GPIO_Init+0x2e8>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a52      	ldr	r2, [pc, #328]	; (80011e4 <HAL_GPIO_Init+0x2ec>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a49      	ldr	r2, [pc, #292]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d019      	beq.n	80010fa <HAL_GPIO_Init+0x202>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a48      	ldr	r2, [pc, #288]	; (80011ec <HAL_GPIO_Init+0x2f4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0x1fe>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a47      	ldr	r2, [pc, #284]	; (80011f0 <HAL_GPIO_Init+0x2f8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00d      	beq.n	80010f2 <HAL_GPIO_Init+0x1fa>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a46      	ldr	r2, [pc, #280]	; (80011f4 <HAL_GPIO_Init+0x2fc>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d007      	beq.n	80010ee <HAL_GPIO_Init+0x1f6>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a45      	ldr	r2, [pc, #276]	; (80011f8 <HAL_GPIO_Init+0x300>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_GPIO_Init+0x1f2>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x204>
 80010ea:	2307      	movs	r3, #7
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x204>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x204>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x204>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x204>
 80010fa:	2300      	movs	r3, #0
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	; (80011e4 <HAL_GPIO_Init+0x2ec>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111a:	4b38      	ldr	r3, [pc, #224]	; (80011fc <HAL_GPIO_Init+0x304>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800113e:	4a2f      	ldr	r2, [pc, #188]	; (80011fc <HAL_GPIO_Init+0x304>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_GPIO_Init+0x304>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001168:	4a24      	ldr	r2, [pc, #144]	; (80011fc <HAL_GPIO_Init+0x304>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_GPIO_Init+0x304>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001192:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <HAL_GPIO_Init+0x304>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_GPIO_Init+0x304>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011bc:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <HAL_GPIO_Init+0x304>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	f67f aea2 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40013c00 	.word	0x40013c00

08001200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001218:	2301      	movs	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e001      	b.n	8001222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
 800123c:	4613      	mov	r3, r2
 800123e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001240:	787b      	ldrb	r3, [r7, #1]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800124c:	e003      	b.n	8001256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	041a      	lsls	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	619a      	str	r2, [r3, #24]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001262:	b480      	push	{r7}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001274:	887a      	ldrh	r2, [r7, #2]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	041a      	lsls	r2, r3, #16
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43d9      	mvns	r1, r3
 8001280:	887b      	ldrh	r3, [r7, #2]
 8001282:	400b      	ands	r3, r1
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f806 	bl	80012c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40013c00 	.word	0x40013c00

080012c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e264      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d075      	beq.n	80013ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fe:	4ba3      	ldr	r3, [pc, #652]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b04      	cmp	r3, #4
 8001308:	d00c      	beq.n	8001324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130a:	4ba0      	ldr	r3, [pc, #640]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001312:	2b08      	cmp	r3, #8
 8001314:	d112      	bne.n	800133c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001316:	4b9d      	ldr	r3, [pc, #628]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001322:	d10b      	bne.n	800133c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	4b99      	ldr	r3, [pc, #612]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d05b      	beq.n	80013e8 <HAL_RCC_OscConfig+0x108>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d157      	bne.n	80013e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e23f      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d106      	bne.n	8001354 <HAL_RCC_OscConfig+0x74>
 8001346:	4b91      	ldr	r3, [pc, #580]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a90      	ldr	r2, [pc, #576]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e01d      	b.n	8001390 <HAL_RCC_OscConfig+0xb0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x98>
 800135e:	4b8b      	ldr	r3, [pc, #556]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a8a      	ldr	r2, [pc, #552]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b88      	ldr	r3, [pc, #544]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a87      	ldr	r2, [pc, #540]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0xb0>
 8001378:	4b84      	ldr	r3, [pc, #528]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a83      	ldr	r2, [pc, #524]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800137e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b81      	ldr	r3, [pc, #516]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a80      	ldr	r2, [pc, #512]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fc9c 	bl	8000cd4 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fc98 	bl	8000cd4 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e204      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0xc0>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc88 	bl	8000cd4 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fc84 	bl	8000cd4 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1f0      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	4b6c      	ldr	r3, [pc, #432]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0xe8>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d063      	beq.n	80014be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00b      	beq.n	800141a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140a:	2b08      	cmp	r3, #8
 800140c:	d11c      	bne.n	8001448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d116      	bne.n	8001448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	4b5c      	ldr	r3, [pc, #368]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_RCC_OscConfig+0x152>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e1c4      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b56      	ldr	r3, [pc, #344]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4952      	ldr	r1, [pc, #328]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	e03a      	b.n	80014be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001450:	4b4f      	ldr	r3, [pc, #316]	; (8001590 <HAL_RCC_OscConfig+0x2b0>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff fc3d 	bl	8000cd4 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fc39 	bl	8000cd4 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1a5      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	4b46      	ldr	r3, [pc, #280]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4940      	ldr	r1, [pc, #256]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
 8001490:	e015      	b.n	80014be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_RCC_OscConfig+0x2b0>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fc1c 	bl	8000cd4 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc18 	bl	8000cd4 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e184      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d030      	beq.n	800152c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d016      	beq.n	8001500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d2:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_RCC_OscConfig+0x2b4>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fbfc 	bl	8000cd4 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff fbf8 	bl	8000cd4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e164      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x200>
 80014fe:	e015      	b.n	800152c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_RCC_OscConfig+0x2b4>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff fbe5 	bl	8000cd4 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150e:	f7ff fbe1 	bl	8000cd4 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e14d      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f0      	bne.n	800150e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80a0 	beq.w	800167a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10f      	bne.n	800156a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_RCC_OscConfig+0x2b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d121      	bne.n	80015ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_RCC_OscConfig+0x2b8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_RCC_OscConfig+0x2b8>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001582:	f7ff fba7 	bl	8000cd4 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	e011      	b.n	80015ae <HAL_RCC_OscConfig+0x2ce>
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	42470000 	.word	0x42470000
 8001594:	42470e80 	.word	0x42470e80
 8001598:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159c:	f7ff fb9a 	bl	8000cd4 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e106      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	4b85      	ldr	r3, [pc, #532]	; (80017c4 <HAL_RCC_OscConfig+0x4e4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
 80015c2:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a80      	ldr	r2, [pc, #512]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	e01c      	b.n	800160a <HAL_RCC_OscConfig+0x32a>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d10c      	bne.n	80015f2 <HAL_RCC_OscConfig+0x312>
 80015d8:	4b7b      	ldr	r3, [pc, #492]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a7a      	ldr	r2, [pc, #488]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
 80015e4:	4b78      	ldr	r3, [pc, #480]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e8:	4a77      	ldr	r2, [pc, #476]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6713      	str	r3, [r2, #112]	; 0x70
 80015f0:	e00b      	b.n	800160a <HAL_RCC_OscConfig+0x32a>
 80015f2:	4b75      	ldr	r3, [pc, #468]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	4a74      	ldr	r2, [pc, #464]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6713      	str	r3, [r2, #112]	; 0x70
 80015fe:	4b72      	ldr	r3, [pc, #456]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	4a71      	ldr	r2, [pc, #452]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d015      	beq.n	800163e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff fb5f 	bl	8000cd4 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff fb5b 	bl	8000cd4 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e0c5      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001630:	4b65      	ldr	r3, [pc, #404]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ee      	beq.n	800161a <HAL_RCC_OscConfig+0x33a>
 800163c:	e014      	b.n	8001668 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff fb49 	bl	8000cd4 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001646:	f7ff fb45 	bl	8000cd4 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f241 3288 	movw	r2, #5000	; 0x1388
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e0af      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165c:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1ee      	bne.n	8001646 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d105      	bne.n	800167a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166e:	4b56      	ldr	r3, [pc, #344]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a55      	ldr	r2, [pc, #340]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 809b 	beq.w	80017ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001684:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b08      	cmp	r3, #8
 800168e:	d05c      	beq.n	800174a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d141      	bne.n	800171c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001698:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <HAL_RCC_OscConfig+0x4ec>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff fb19 	bl	8000cd4 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff fb15 	bl	8000cd4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e081      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b8:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69da      	ldr	r2, [r3, #28]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	019b      	lsls	r3, r3, #6
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	3b01      	subs	r3, #1
 80016de:	041b      	lsls	r3, r3, #16
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	061b      	lsls	r3, r3, #24
 80016e8:	4937      	ldr	r1, [pc, #220]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ee:	4b37      	ldr	r3, [pc, #220]	; (80017cc <HAL_RCC_OscConfig+0x4ec>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff faee 	bl	8000cd4 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff faea 	bl	8000cd4 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e056      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x41c>
 800171a:	e04e      	b.n	80017ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_RCC_OscConfig+0x4ec>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fad7 	bl	8000cd4 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff fad3 	bl	8000cd4 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e03f      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x44a>
 8001748:	e037      	b.n	80017ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e032      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d028      	beq.n	80017b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d121      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d11a      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001786:	4013      	ands	r3, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800178c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800178e:	4293      	cmp	r3, r2
 8001790:	d111      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	3b01      	subs	r3, #1
 80017a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40007000 	.word	0x40007000
 80017c8:	40023800 	.word	0x40023800
 80017cc:	42470060 	.word	0x42470060

080017d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0cc      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e4:	4b68      	ldr	r3, [pc, #416]	; (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d90c      	bls.n	800180c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b65      	ldr	r3, [pc, #404]	; (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b63      	ldr	r3, [pc, #396]	; (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0b8      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001824:	4b59      	ldr	r3, [pc, #356]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a58      	ldr	r2, [pc, #352]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800182e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800183c:	4b53      	ldr	r3, [pc, #332]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a52      	ldr	r2, [pc, #328]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001848:	4b50      	ldr	r3, [pc, #320]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	494d      	ldr	r1, [pc, #308]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d044      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186e:	4b47      	ldr	r3, [pc, #284]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d119      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e07f      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d003      	beq.n	800188e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188a:	2b03      	cmp	r3, #3
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188e:	4b3f      	ldr	r3, [pc, #252]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e06f      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e067      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 0203 	bic.w	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4934      	ldr	r1, [pc, #208]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c0:	f7ff fa08 	bl	8000cd4 <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	e00a      	b.n	80018de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c8:	f7ff fa04 	bl	8000cd4 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e04f      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	4b2b      	ldr	r3, [pc, #172]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 020c 	and.w	r2, r3, #12
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d1eb      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f0:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d20c      	bcs.n	8001918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e032      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4916      	ldr	r1, [pc, #88]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	490e      	ldr	r1, [pc, #56]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001956:	f000 f821 	bl	800199c <HAL_RCC_GetSysClockFreq>
 800195a:	4602      	mov	r2, r0
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	490a      	ldr	r1, [pc, #40]	; (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	5ccb      	ldrb	r3, [r1, r3]
 800196a:	fa22 f303 	lsr.w	r3, r2, r3
 800196e:	4a09      	ldr	r2, [pc, #36]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff f8b8 	bl	8000aec <HAL_InitTick>

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023c00 	.word	0x40023c00
 800198c:	40023800 	.word	0x40023800
 8001990:	08006ee8 	.word	0x08006ee8
 8001994:	20000000 	.word	0x20000000
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800199c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	2300      	movs	r3, #0
 80019ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b4:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d00d      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x40>
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	f200 80bd 	bhi.w	8001b40 <HAL_RCC_GetSysClockFreq+0x1a4>
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x34>
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ce:	e0b7      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d0:	4b61      	ldr	r3, [pc, #388]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019d2:	60bb      	str	r3, [r7, #8]
       break;
 80019d4:	e0b7      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019d6:	4b61      	ldr	r3, [pc, #388]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019d8:	60bb      	str	r3, [r7, #8]
      break;
 80019da:	e0b4      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019dc:	4b5d      	ldr	r3, [pc, #372]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e6:	4b5b      	ldr	r3, [pc, #364]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d04d      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f2:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	099b      	lsrs	r3, r3, #6
 80019f8:	461a      	mov	r2, r3
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	ea02 0800 	and.w	r8, r2, r0
 8001a0a:	ea03 0901 	and.w	r9, r3, r1
 8001a0e:	4640      	mov	r0, r8
 8001a10:	4649      	mov	r1, r9
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	014b      	lsls	r3, r1, #5
 8001a1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a20:	0142      	lsls	r2, r0, #5
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	ebb0 0008 	subs.w	r0, r0, r8
 8001a2a:	eb61 0109 	sbc.w	r1, r1, r9
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	018b      	lsls	r3, r1, #6
 8001a38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a3c:	0182      	lsls	r2, r0, #6
 8001a3e:	1a12      	subs	r2, r2, r0
 8001a40:	eb63 0301 	sbc.w	r3, r3, r1
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	00d9      	lsls	r1, r3, #3
 8001a4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a52:	00d0      	lsls	r0, r2, #3
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	eb12 0208 	adds.w	r2, r2, r8
 8001a5c:	eb43 0309 	adc.w	r3, r3, r9
 8001a60:	f04f 0000 	mov.w	r0, #0
 8001a64:	f04f 0100 	mov.w	r1, #0
 8001a68:	0259      	lsls	r1, r3, #9
 8001a6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a6e:	0250      	lsls	r0, r2, #9
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	f7fe fbf8 	bl	8000274 <__aeabi_uldivmod>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4613      	mov	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	e04a      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8e:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	099b      	lsrs	r3, r3, #6
 8001a94:	461a      	mov	r2, r3
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a9e:	f04f 0100 	mov.w	r1, #0
 8001aa2:	ea02 0400 	and.w	r4, r2, r0
 8001aa6:	ea03 0501 	and.w	r5, r3, r1
 8001aaa:	4620      	mov	r0, r4
 8001aac:	4629      	mov	r1, r5
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	014b      	lsls	r3, r1, #5
 8001ab8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001abc:	0142      	lsls	r2, r0, #5
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	1b00      	subs	r0, r0, r4
 8001ac4:	eb61 0105 	sbc.w	r1, r1, r5
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	018b      	lsls	r3, r1, #6
 8001ad2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ad6:	0182      	lsls	r2, r0, #6
 8001ad8:	1a12      	subs	r2, r2, r0
 8001ada:	eb63 0301 	sbc.w	r3, r3, r1
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	00d9      	lsls	r1, r3, #3
 8001ae8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aec:	00d0      	lsls	r0, r2, #3
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	1912      	adds	r2, r2, r4
 8001af4:	eb45 0303 	adc.w	r3, r5, r3
 8001af8:	f04f 0000 	mov.w	r0, #0
 8001afc:	f04f 0100 	mov.w	r1, #0
 8001b00:	0299      	lsls	r1, r3, #10
 8001b02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b06:	0290      	lsls	r0, r2, #10
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	461a      	mov	r2, r3
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	f7fe fbac 	bl	8000274 <__aeabi_uldivmod>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4613      	mov	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	0c1b      	lsrs	r3, r3, #16
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	60bb      	str	r3, [r7, #8]
      break;
 8001b3e:	e002      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b42:	60bb      	str	r3, [r7, #8]
      break;
 8001b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b46:	68bb      	ldr	r3, [r7, #8]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	00f42400 	.word	0x00f42400
 8001b5c:	007a1200 	.word	0x007a1200

08001b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000000 	.word	0x20000000

08001b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b7c:	f7ff fff0 	bl	8001b60 <HAL_RCC_GetHCLKFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	0a9b      	lsrs	r3, r3, #10
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4903      	ldr	r1, [pc, #12]	; (8001b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	08006ef8 	.word	0x08006ef8

08001ba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	220f      	movs	r2, #15
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_RCC_GetClockConfig+0x60>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0207 	and.w	r2, r3, #7
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e07b      	b.n	8001d0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d108      	bne.n	8001c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c26:	d009      	beq.n	8001c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
 8001c2e:	e005      	b.n	8001c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7fe ff00 	bl	8000a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc0:	ea42 0103 	orr.w	r1, r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	f003 0104 	and.w	r1, r3, #4
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	f003 0210 	and.w	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	69da      	ldr	r2, [r3, #28]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e041      	b.n	8001dac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d106      	bne.n	8001d42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f839 	bl	8001db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2202      	movs	r2, #2
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3304      	adds	r3, #4
 8001d52:	4619      	mov	r1, r3
 8001d54:	4610      	mov	r0, r2
 8001d56:	f000 f9c9 	bl	80020ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e044      	b.n	8001e6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <HAL_TIM_Base_Start_IT+0xb0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d018      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x6c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0a:	d013      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x6c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <HAL_TIM_Base_Start_IT+0xb4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00e      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x6c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x6c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d004      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x6c>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d111      	bne.n	8001e58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d010      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e56:	e007      	b.n	8001e68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	40000c00 	.word	0x40000c00
 8001e88:	40014000 	.word	0x40014000

08001e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d122      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d11b      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0202 	mvn.w	r2, #2
 8001eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8ee 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001ed4:	e005      	b.n	8001ee2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f8e0 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f8f1 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d122      	bne.n	8001f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d11b      	bne.n	8001f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0204 	mvn.w	r2, #4
 8001f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8c4 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8b6 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f8c7 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d122      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d11b      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0208 	mvn.w	r2, #8
 8001f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2204      	movs	r2, #4
 8001f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f89a 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001f7c:	e005      	b.n	8001f8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f88c 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f89d 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d122      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b10      	cmp	r3, #16
 8001faa:	d11b      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0210 	mvn.w	r2, #16
 8001fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2208      	movs	r2, #8
 8001fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f870 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001fd0:	e005      	b.n	8001fde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f862 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f873 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d107      	bne.n	8002010 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0201 	mvn.w	r2, #1
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fce6 	bl	80009dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201a:	2b80      	cmp	r3, #128	; 0x80
 800201c:	d10e      	bne.n	800203c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002028:	2b80      	cmp	r3, #128	; 0x80
 800202a:	d107      	bne.n	800203c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8e2 	bl	8002200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	2b40      	cmp	r3, #64	; 0x40
 8002048:	d10e      	bne.n	8002068 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002054:	2b40      	cmp	r3, #64	; 0x40
 8002056:	d107      	bne.n	8002068 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f838 	bl	80020d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b20      	cmp	r3, #32
 8002074:	d10e      	bne.n	8002094 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b20      	cmp	r3, #32
 8002082:	d107      	bne.n	8002094 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0220 	mvn.w	r2, #32
 800208c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8ac 	bl	80021ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a34      	ldr	r2, [pc, #208]	; (80021d0 <TIM_Base_SetConfig+0xe4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00f      	beq.n	8002124 <TIM_Base_SetConfig+0x38>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210a:	d00b      	beq.n	8002124 <TIM_Base_SetConfig+0x38>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a31      	ldr	r2, [pc, #196]	; (80021d4 <TIM_Base_SetConfig+0xe8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d007      	beq.n	8002124 <TIM_Base_SetConfig+0x38>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a30      	ldr	r2, [pc, #192]	; (80021d8 <TIM_Base_SetConfig+0xec>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d003      	beq.n	8002124 <TIM_Base_SetConfig+0x38>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a2f      	ldr	r2, [pc, #188]	; (80021dc <TIM_Base_SetConfig+0xf0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d108      	bne.n	8002136 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <TIM_Base_SetConfig+0xe4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d01b      	beq.n	8002176 <TIM_Base_SetConfig+0x8a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002144:	d017      	beq.n	8002176 <TIM_Base_SetConfig+0x8a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <TIM_Base_SetConfig+0xe8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <TIM_Base_SetConfig+0x8a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a21      	ldr	r2, [pc, #132]	; (80021d8 <TIM_Base_SetConfig+0xec>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00f      	beq.n	8002176 <TIM_Base_SetConfig+0x8a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a20      	ldr	r2, [pc, #128]	; (80021dc <TIM_Base_SetConfig+0xf0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00b      	beq.n	8002176 <TIM_Base_SetConfig+0x8a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a1f      	ldr	r2, [pc, #124]	; (80021e0 <TIM_Base_SetConfig+0xf4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d007      	beq.n	8002176 <TIM_Base_SetConfig+0x8a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <TIM_Base_SetConfig+0xf8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d003      	beq.n	8002176 <TIM_Base_SetConfig+0x8a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <TIM_Base_SetConfig+0xfc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d108      	bne.n	8002188 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800217c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <TIM_Base_SetConfig+0xe4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d103      	bne.n	80021bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	615a      	str	r2, [r3, #20]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40010000 	.word	0x40010000
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40000800 	.word	0x40000800
 80021dc:	40000c00 	.word	0x40000c00
 80021e0:	40014000 	.word	0x40014000
 80021e4:	40014400 	.word	0x40014400
 80021e8:	40014800 	.word	0x40014800

080021ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f103 0208 	add.w	r2, r3, #8
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f04f 32ff 	mov.w	r2, #4294967295
 800222c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f103 0208 	add.w	r2, r3, #8
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f103 0208 	add.w	r2, r3, #8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	601a      	str	r2, [r3, #0]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d103      	bne.n	80022d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	e00c      	b.n	80022f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3308      	adds	r3, #8
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	e002      	b.n	80022e4 <vListInsert+0x2e>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d2f6      	bcs.n	80022de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	601a      	str	r2, [r3, #0]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6892      	ldr	r2, [r2, #8]
 800233e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6852      	ldr	r2, [r2, #4]
 8002348:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	d103      	bne.n	800235c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	1e5a      	subs	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10a      	bne.n	80023a6 <xQueueGenericReset+0x2a>
        __asm volatile
 8002390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	60bb      	str	r3, [r7, #8]
    }
 80023a2:	bf00      	nop
 80023a4:	e7fe      	b.n	80023a4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80023a6:	f001 fc35 	bl	8003c14 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b2:	68f9      	ldr	r1, [r7, #12]
 80023b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	441a      	add	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	3b01      	subs	r3, #1
 80023d8:	68f9      	ldr	r1, [r7, #12]
 80023da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	441a      	add	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	22ff      	movs	r2, #255	; 0xff
 80023ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	22ff      	movs	r2, #255	; 0xff
 80023f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d114      	bne.n	8002426 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01a      	beq.n	800243a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3310      	adds	r3, #16
 8002408:	4618      	mov	r0, r3
 800240a:	f000 ffbf 	bl	800338c <xTaskRemoveFromEventList>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d012      	beq.n	800243a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <xQueueGenericReset+0xcc>)
 8002416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	e009      	b.n	800243a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3310      	adds	r3, #16
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fef2 	bl	8002214 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3324      	adds	r3, #36	; 0x24
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff feed 	bl	8002214 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800243a:	f001 fc1b 	bl	8003c74 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	e000ed04 	.word	0xe000ed04

0800244c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	61bb      	str	r3, [r7, #24]
    }
 8002472:	bf00      	nop
 8002474:	e7fe      	b.n	8002474 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <xQueueGenericCreate+0x48>
 8002486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d101      	bne.n	8002498 <xQueueGenericCreate+0x4c>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <xQueueGenericCreate+0x4e>
 8002498:	2300      	movs	r3, #0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10a      	bne.n	80024b4 <xQueueGenericCreate+0x68>
        __asm volatile
 800249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	617b      	str	r3, [r7, #20]
    }
 80024b0:	bf00      	nop
 80024b2:	e7fe      	b.n	80024b2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80024ba:	d90a      	bls.n	80024d2 <xQueueGenericCreate+0x86>
        __asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	613b      	str	r3, [r7, #16]
    }
 80024ce:	bf00      	nop
 80024d0:	e7fe      	b.n	80024d0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	3350      	adds	r3, #80	; 0x50
 80024d6:	4618      	mov	r0, r3
 80024d8:	f001 fcc8 	bl	8003e6c <pvPortMalloc>
 80024dc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00d      	beq.n	8002500 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	3350      	adds	r3, #80	; 0x50
 80024ec:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024ee:	79fa      	ldrb	r2, [r7, #7]
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f805 	bl	800250a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002500:	6a3b      	ldr	r3, [r7, #32]
    }
 8002502:	4618      	mov	r0, r3
 8002504:	3728      	adds	r7, #40	; 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e002      	b.n	800252c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002538:	2101      	movs	r1, #1
 800253a:	69b8      	ldr	r0, [r7, #24]
 800253c:	f7ff ff1e 	bl	800237c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	2073      	movs	r0, #115	; 0x73
 8002550:	f003 fbac 	bl	8005cac <SEGGER_SYSVIEW_RecordU32x3>
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08e      	sub	sp, #56	; 0x38
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800256a:	2300      	movs	r3, #0
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <xQueueGenericSend+0x32>
        __asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	623b      	str	r3, [r7, #32]
    }
 800258a:	bf00      	nop
 800258c:	e7fe      	b.n	800258c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d103      	bne.n	800259c <xQueueGenericSend+0x40>
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <xQueueGenericSend+0x44>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <xQueueGenericSend+0x46>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <xQueueGenericSend+0x60>
        __asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	61fb      	str	r3, [r7, #28]
    }
 80025b8:	bf00      	nop
 80025ba:	e7fe      	b.n	80025ba <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d103      	bne.n	80025ca <xQueueGenericSend+0x6e>
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <xQueueGenericSend+0x72>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <xQueueGenericSend+0x74>
 80025ce:	2300      	movs	r3, #0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <xQueueGenericSend+0x8e>
        __asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	61bb      	str	r3, [r7, #24]
    }
 80025e6:	bf00      	nop
 80025e8:	e7fe      	b.n	80025e8 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025ea:	f001 fb13 	bl	8003c14 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <xQueueGenericSend+0xa4>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d136      	bne.n	800266e <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	4618      	mov	r0, r3
 8002604:	f004 f8e0 	bl	80067c8 <SEGGER_SYSVIEW_ShrinkId>
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	460b      	mov	r3, r1
 8002612:	4601      	mov	r1, r0
 8002614:	205a      	movs	r0, #90	; 0x5a
 8002616:	f003 fbbf 	bl	8005d98 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002620:	f000 f9a2 	bl	8002968 <prvCopyDataToQueue>
 8002624:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2b00      	cmp	r3, #0
 800262c:	d010      	beq.n	8002650 <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	3324      	adds	r3, #36	; 0x24
 8002632:	4618      	mov	r0, r3
 8002634:	f000 feaa 	bl	800338c <xTaskRemoveFromEventList>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d013      	beq.n	8002666 <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800263e:	4b4d      	ldr	r3, [pc, #308]	; (8002774 <xQueueGenericSend+0x218>)
 8002640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	f3bf 8f4f 	dsb	sy
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	e00a      	b.n	8002666 <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002656:	4b47      	ldr	r3, [pc, #284]	; (8002774 <xQueueGenericSend+0x218>)
 8002658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002666:	f001 fb05 	bl	8003c74 <vPortExitCritical>
                return pdPASS;
 800266a:	2301      	movs	r3, #1
 800266c:	e07d      	b.n	800276a <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d110      	bne.n	8002696 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002674:	f001 fafe 	bl	8003c74 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	4618      	mov	r0, r3
 800267c:	f004 f8a4 	bl	80067c8 <SEGGER_SYSVIEW_ShrinkId>
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	460b      	mov	r3, r1
 800268a:	4601      	mov	r1, r0
 800268c:	205a      	movs	r0, #90	; 0x5a
 800268e:	f003 fb83 	bl	8005d98 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002692:	2300      	movs	r3, #0
 8002694:	e069      	b.n	800276a <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fed9 	bl	8003458 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026a6:	2301      	movs	r3, #1
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026aa:	f001 fae3 	bl	8003c74 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026ae:	f000 fc63 	bl	8002f78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026b2:	f001 faaf 	bl	8003c14 <vPortEnterCritical>
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d103      	bne.n	80026cc <xQueueGenericSend+0x170>
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d103      	bne.n	80026e2 <xQueueGenericSend+0x186>
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026e2:	f001 fac7 	bl	8003c74 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026e6:	1d3a      	adds	r2, r7, #4
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fec8 	bl	8003484 <xTaskCheckForTimeOut>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d124      	bne.n	8002744 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026fc:	f000 fa2c 	bl	8002b58 <prvIsQueueFull>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d018      	beq.n	8002738 <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	3310      	adds	r3, #16
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fe18 	bl	8003344 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002716:	f000 f9b7 	bl	8002a88 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800271a:	f000 fc3b 	bl	8002f94 <xTaskResumeAll>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	f47f af62 	bne.w	80025ea <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <xQueueGenericSend+0x218>)
 8002728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	e758      	b.n	80025ea <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800273a:	f000 f9a5 	bl	8002a88 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800273e:	f000 fc29 	bl	8002f94 <xTaskResumeAll>
 8002742:	e752      	b.n	80025ea <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002746:	f000 f99f 	bl	8002a88 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800274a:	f000 fc23 	bl	8002f94 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	4618      	mov	r0, r3
 8002752:	f004 f839 	bl	80067c8 <SEGGER_SYSVIEW_ShrinkId>
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	460b      	mov	r3, r1
 8002760:	4601      	mov	r1, r0
 8002762:	205a      	movs	r0, #90	; 0x5a
 8002764:	f003 fb18 	bl	8005d98 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002768:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800276a:	4618      	mov	r0, r3
 800276c:	3730      	adds	r7, #48	; 0x30
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	e000ed04 	.word	0xe000ed04

08002778 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b08f      	sub	sp, #60	; 0x3c
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002784:	2300      	movs	r3, #0
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <xQueueReceive+0x30>
        __asm volatile
 8002792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002796:	f383 8811 	msr	BASEPRI, r3
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	623b      	str	r3, [r7, #32]
    }
 80027a4:	bf00      	nop
 80027a6:	e7fe      	b.n	80027a6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d103      	bne.n	80027b6 <xQueueReceive+0x3e>
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <xQueueReceive+0x42>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <xQueueReceive+0x44>
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <xQueueReceive+0x5e>
        __asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	61fb      	str	r3, [r7, #28]
    }
 80027d2:	bf00      	nop
 80027d4:	e7fe      	b.n	80027d4 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027d6:	f001 fa1d 	bl	8003c14 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d02f      	beq.n	8002846 <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ea:	f000 f927 	bl	8002a3c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 ffe9 	bl	80067c8 <SEGGER_SYSVIEW_ShrinkId>
 80027f6:	4604      	mov	r4, r0
 80027f8:	2000      	movs	r0, #0
 80027fa:	f003 ffe5 	bl	80067c8 <SEGGER_SYSVIEW_ShrinkId>
 80027fe:	4602      	mov	r2, r0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2101      	movs	r1, #1
 8002804:	9100      	str	r1, [sp, #0]
 8002806:	4621      	mov	r1, r4
 8002808:	205c      	movs	r0, #92	; 0x5c
 800280a:	f003 fac5 	bl	8005d98 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00f      	beq.n	800283e <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	3310      	adds	r3, #16
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fdb2 	bl	800338c <xTaskRemoveFromEventList>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <xQueueReceive+0xc6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800282e:	4b4d      	ldr	r3, [pc, #308]	; (8002964 <xQueueReceive+0x1ec>)
 8002830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800283e:	f001 fa19 	bl	8003c74 <vPortExitCritical>
                return pdPASS;
 8002842:	2301      	movs	r3, #1
 8002844:	e08a      	b.n	800295c <xQueueReceive+0x1e4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d113      	bne.n	8002874 <xQueueReceive+0xfc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800284c:	f001 fa12 	bl	8003c74 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	4618      	mov	r0, r3
 8002854:	f003 ffb8 	bl	80067c8 <SEGGER_SYSVIEW_ShrinkId>
 8002858:	4604      	mov	r4, r0
 800285a:	2000      	movs	r0, #0
 800285c:	f003 ffb4 	bl	80067c8 <SEGGER_SYSVIEW_ShrinkId>
 8002860:	4602      	mov	r2, r0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2101      	movs	r1, #1
 8002866:	9100      	str	r1, [sp, #0]
 8002868:	4621      	mov	r1, r4
 800286a:	205c      	movs	r0, #92	; 0x5c
 800286c:	f003 fa94 	bl	8005d98 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002870:	2300      	movs	r3, #0
 8002872:	e073      	b.n	800295c <xQueueReceive+0x1e4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <xQueueReceive+0x110>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fdea 	bl	8003458 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002884:	2301      	movs	r3, #1
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002888:	f001 f9f4 	bl	8003c74 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800288c:	f000 fb74 	bl	8002f78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002890:	f001 f9c0 	bl	8003c14 <vPortEnterCritical>
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800289a:	b25b      	sxtb	r3, r3
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d103      	bne.n	80028aa <xQueueReceive+0x132>
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028b0:	b25b      	sxtb	r3, r3
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d103      	bne.n	80028c0 <xQueueReceive+0x148>
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028c0:	f001 f9d8 	bl	8003c74 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028c4:	1d3a      	adds	r2, r7, #4
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fdd9 	bl	8003484 <xTaskCheckForTimeOut>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d124      	bne.n	8002922 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028da:	f000 f927 	bl	8002b2c <prvIsQueueEmpty>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d018      	beq.n	8002916 <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	3324      	adds	r3, #36	; 0x24
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fd29 	bl	8003344 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80028f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f4:	f000 f8c8 	bl	8002a88 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80028f8:	f000 fb4c 	bl	8002f94 <xTaskResumeAll>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f47f af69 	bne.w	80027d6 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <xQueueReceive+0x1ec>)
 8002906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	e75f      	b.n	80027d6 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002918:	f000 f8b6 	bl	8002a88 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800291c:	f000 fb3a 	bl	8002f94 <xTaskResumeAll>
 8002920:	e759      	b.n	80027d6 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002924:	f000 f8b0 	bl	8002a88 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002928:	f000 fb34 	bl	8002f94 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800292c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800292e:	f000 f8fd 	bl	8002b2c <prvIsQueueEmpty>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	f43f af4e 	beq.w	80027d6 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	4618      	mov	r0, r3
 800293e:	f003 ff43 	bl	80067c8 <SEGGER_SYSVIEW_ShrinkId>
 8002942:	4604      	mov	r4, r0
 8002944:	2000      	movs	r0, #0
 8002946:	f003 ff3f 	bl	80067c8 <SEGGER_SYSVIEW_ShrinkId>
 800294a:	4602      	mov	r2, r0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2101      	movs	r1, #1
 8002950:	9100      	str	r1, [sp, #0]
 8002952:	4621      	mov	r1, r4
 8002954:	205c      	movs	r0, #92	; 0x5c
 8002956:	f003 fa1f 	bl	8005d98 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800295a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800295c:	4618      	mov	r0, r3
 800295e:	3734      	adds	r7, #52	; 0x34
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	e000ed04 	.word	0xe000ed04

08002968 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10d      	bne.n	80029a2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d14d      	bne.n	8002a2a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fe9a 	bl	80036cc <xTaskPriorityDisinherit>
 8002998:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	e043      	b.n	8002a2a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d119      	bne.n	80029dc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6858      	ldr	r0, [r3, #4]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	461a      	mov	r2, r3
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	f004 f9b2 	bl	8006d1c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	441a      	add	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d32b      	bcc.n	8002a2a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	e026      	b.n	8002a2a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	68d8      	ldr	r0, [r3, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	461a      	mov	r2, r3
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	f004 f998 	bl	8006d1c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	425b      	negs	r3, r3
 80029f6:	441a      	add	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d207      	bcs.n	8002a18 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	425b      	negs	r3, r3
 8002a12:	441a      	add	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d105      	bne.n	8002a2a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002a32:	697b      	ldr	r3, [r7, #20]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d018      	beq.n	8002a80 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	441a      	add	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d303      	bcc.n	8002a70 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68d9      	ldr	r1, [r3, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6838      	ldr	r0, [r7, #0]
 8002a7c:	f004 f94e 	bl	8006d1c <memcpy>
    }
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a90:	f001 f8c0 	bl	8003c14 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a9a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a9c:	e011      	b.n	8002ac2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d012      	beq.n	8002acc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3324      	adds	r3, #36	; 0x24
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fc6e 	bl	800338c <xTaskRemoveFromEventList>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002ab6:	f000 fd4b 	bl	8003550 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	dce9      	bgt.n	8002a9e <prvUnlockQueue+0x16>
 8002aca:	e000      	b.n	8002ace <prvUnlockQueue+0x46>
                        break;
 8002acc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	22ff      	movs	r2, #255	; 0xff
 8002ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002ad6:	f001 f8cd 	bl	8003c74 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002ada:	f001 f89b 	bl	8003c14 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ae4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ae6:	e011      	b.n	8002b0c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d012      	beq.n	8002b16 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3310      	adds	r3, #16
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fc49 	bl	800338c <xTaskRemoveFromEventList>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b00:	f000 fd26 	bl	8003550 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b04:	7bbb      	ldrb	r3, [r7, #14]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	dce9      	bgt.n	8002ae8 <prvUnlockQueue+0x60>
 8002b14:	e000      	b.n	8002b18 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b16:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	22ff      	movs	r2, #255	; 0xff
 8002b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b20:	f001 f8a8 	bl	8003c74 <vPortExitCritical>
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b34:	f001 f86e 	bl	8003c14 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b40:	2301      	movs	r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	e001      	b.n	8002b4a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b4a:	f001 f893 	bl	8003c74 <vPortExitCritical>

    return xReturn;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b60:	f001 f858 	bl	8003c14 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d102      	bne.n	8002b76 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002b70:	2301      	movs	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e001      	b.n	8002b7a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b7a:	f001 f87b 	bl	8003c74 <vPortExitCritical>

    return xReturn;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08c      	sub	sp, #48	; 0x30
 8002b8c:	af04      	add	r7, sp, #16
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 f965 	bl	8003e6c <pvPortMalloc>
 8002ba2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00e      	beq.n	8002bc8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002baa:	205c      	movs	r0, #92	; 0x5c
 8002bac:	f001 f95e 	bl	8003e6c <pvPortMalloc>
 8002bb0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8002bbe:	e005      	b.n	8002bcc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002bc0:	6978      	ldr	r0, [r7, #20]
 8002bc2:	f001 fa33 	bl	800402c <vPortFree>
 8002bc6:	e001      	b.n	8002bcc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d013      	beq.n	8002bfa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bd2:	88fa      	ldrh	r2, [r7, #6]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	9303      	str	r3, [sp, #12]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f80e 	bl	8002c0a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002bee:	69f8      	ldr	r0, [r7, #28]
 8002bf0:	f000 f8a2 	bl	8002d38 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	61bb      	str	r3, [r7, #24]
 8002bf8:	e002      	b.n	8002c00 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c00:	69bb      	ldr	r3, [r7, #24]
    }
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b088      	sub	sp, #32
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	461a      	mov	r2, r3
 8002c22:	21a5      	movs	r1, #165	; 0xa5
 8002c24:	f004 f888 	bl	8006d38 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c32:	3b01      	subs	r3, #1
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	f023 0307 	bic.w	r3, r3, #7
 8002c40:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	617b      	str	r3, [r7, #20]
    }
 8002c5e:	bf00      	nop
 8002c60:	e7fe      	b.n	8002c60 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01f      	beq.n	8002ca8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	e012      	b.n	8002c94 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	4413      	add	r3, r2
 8002c74:	7819      	ldrb	r1, [r3, #0]
 8002c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3334      	adds	r3, #52	; 0x34
 8002c7e:	460a      	mov	r2, r1
 8002c80:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	4413      	add	r3, r2
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3301      	adds	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b0e      	cmp	r3, #14
 8002c98:	d9e9      	bls.n	8002c6e <prvInitialiseNewTask+0x64>
 8002c9a:	e000      	b.n	8002c9e <prvInitialiseNewTask+0x94>
            {
                break;
 8002c9c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca6:	e003      	b.n	8002cb0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	2b09      	cmp	r3, #9
 8002cb4:	d901      	bls.n	8002cba <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cb6:	2309      	movs	r3, #9
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc4:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	2200      	movs	r2, #0
 8002cca:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fabf 	bl	8002254 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	3318      	adds	r3, #24
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff faba 	bl	8002254 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	f1c3 020a 	rsb	r2, r3, #10
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	3354      	adds	r3, #84	; 0x54
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 f81a 	bl	8006d38 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	3358      	adds	r3, #88	; 0x58
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 f813 	bl	8006d38 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	69b8      	ldr	r0, [r7, #24]
 8002d18:	f000 fdd0 	bl	80038bc <pxPortInitialiseStack>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d2c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d2e:	bf00      	nop
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d38:	b5b0      	push	{r4, r5, r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d40:	f000 ff68 	bl	8003c14 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d44:	4b3b      	ldr	r3, [pc, #236]	; (8002e34 <prvAddNewTaskToReadyList+0xfc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	4a3a      	ldr	r2, [pc, #232]	; (8002e34 <prvAddNewTaskToReadyList+0xfc>)
 8002d4c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d4e:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <prvAddNewTaskToReadyList+0x100>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d56:	4a38      	ldr	r2, [pc, #224]	; (8002e38 <prvAddNewTaskToReadyList+0x100>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d5c:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <prvAddNewTaskToReadyList+0xfc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d110      	bne.n	8002d86 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d64:	f000 fc18 	bl	8003598 <prvInitialiseTaskLists>
 8002d68:	e00d      	b.n	8002d86 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d6a:	4b34      	ldr	r3, [pc, #208]	; (8002e3c <prvAddNewTaskToReadyList+0x104>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <prvAddNewTaskToReadyList+0x100>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d802      	bhi.n	8002d86 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d80:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <prvAddNewTaskToReadyList+0x100>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d86:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <prvAddNewTaskToReadyList+0x108>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	4a2c      	ldr	r2, [pc, #176]	; (8002e40 <prvAddNewTaskToReadyList+0x108>)
 8002d8e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d90:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <prvAddNewTaskToReadyList+0x108>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d016      	beq.n	8002dcc <prvAddNewTaskToReadyList+0x94>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 fbeb 	bl	800657c <SEGGER_SYSVIEW_OnTaskCreate>
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	461d      	mov	r5, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	461c      	mov	r4, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	1ae3      	subs	r3, r4, r3
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	462b      	mov	r3, r5
 8002dc8:	f001 faf6 	bl	80043b8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fc58 	bl	8006684 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <prvAddNewTaskToReadyList+0x10c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <prvAddNewTaskToReadyList+0x10c>)
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4a15      	ldr	r2, [pc, #84]	; (8002e48 <prvAddNewTaskToReadyList+0x110>)
 8002df4:	441a      	add	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f7ff fa36 	bl	800226e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e02:	f000 ff37 	bl	8003c74 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <prvAddNewTaskToReadyList+0x104>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00e      	beq.n	8002e2c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <prvAddNewTaskToReadyList+0x100>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d207      	bcs.n	8002e2c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <prvAddNewTaskToReadyList+0x114>)
 8002e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bdb0      	pop	{r4, r5, r7, pc}
 8002e34:	20000194 	.word	0x20000194
 8002e38:	20000058 	.word	0x20000058
 8002e3c:	200001a0 	.word	0x200001a0
 8002e40:	200001b0 	.word	0x200001b0
 8002e44:	2000019c 	.word	0x2000019c
 8002e48:	2000005c 	.word	0x2000005c
 8002e4c:	e000ed04 	.word	0xe000ed04

08002e50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01b      	beq.n	8002e9a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <vTaskDelay+0x68>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <vTaskDelay+0x30>
        __asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	60bb      	str	r3, [r7, #8]
    }
 8002e7c:	bf00      	nop
 8002e7e:	e7fe      	b.n	8002e7e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002e80:	f000 f87a 	bl	8002f78 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	2023      	movs	r0, #35	; 0x23
 8002e88:	f002 fe7a 	bl	8005b80 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fc9c 	bl	80037cc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002e94:	f000 f87e 	bl	8002f94 <xTaskResumeAll>
 8002e98:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d107      	bne.n	8002eb0 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <vTaskDelay+0x6c>)
 8002ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	200001bc 	.word	0x200001bc
 8002ebc:	e000ed04 	.word	0xe000ed04

08002ec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <vTaskStartScheduler+0x98>)
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2282      	movs	r2, #130	; 0x82
 8002ed2:	4922      	ldr	r1, [pc, #136]	; (8002f5c <vTaskStartScheduler+0x9c>)
 8002ed4:	4822      	ldr	r0, [pc, #136]	; (8002f60 <vTaskStartScheduler+0xa0>)
 8002ed6:	f7ff fe57 	bl	8002b88 <xTaskCreate>
 8002eda:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d124      	bne.n	8002f2c <vTaskStartScheduler+0x6c>
        __asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	60bb      	str	r3, [r7, #8]
    }
 8002ef4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <vTaskStartScheduler+0xa4>)
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8002efc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002efe:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <vTaskStartScheduler+0xa8>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <vTaskStartScheduler+0xac>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f0a:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <vTaskStartScheduler+0xb0>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <vTaskStartScheduler+0x98>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d102      	bne.n	8002f1c <vTaskStartScheduler+0x5c>
 8002f16:	f003 fb15 	bl	8006544 <SEGGER_SYSVIEW_OnIdle>
 8002f1a:	e004      	b.n	8002f26 <vTaskStartScheduler+0x66>
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <vTaskStartScheduler+0xb0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 fb6d 	bl	8006600 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002f26:	f000 fd55 	bl	80039d4 <xPortStartScheduler>
 8002f2a:	e00e      	b.n	8002f4a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d10a      	bne.n	8002f4a <vTaskStartScheduler+0x8a>
        __asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	607b      	str	r3, [r7, #4]
    }
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <vTaskStartScheduler+0xb4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200001b8 	.word	0x200001b8
 8002f5c:	08006e24 	.word	0x08006e24
 8002f60:	08003569 	.word	0x08003569
 8002f64:	200001b4 	.word	0x200001b4
 8002f68:	200001a0 	.word	0x200001a0
 8002f6c:	20000198 	.word	0x20000198
 8002f70:	20000058 	.word	0x20000058
 8002f74:	2000000c 	.word	0x2000000c

08002f78 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <vTaskSuspendAll+0x18>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	4a03      	ldr	r2, [pc, #12]	; (8002f90 <vTaskSuspendAll+0x18>)
 8002f84:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f86:	bf00      	nop
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	200001bc 	.word	0x200001bc

08002f94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002fa2:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <xTaskResumeAll+0x11c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10a      	bne.n	8002fc0 <xTaskResumeAll+0x2c>
        __asm volatile
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	603b      	str	r3, [r7, #0]
    }
 8002fbc:	bf00      	nop
 8002fbe:	e7fe      	b.n	8002fbe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002fc0:	f000 fe28 	bl	8003c14 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002fc4:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <xTaskResumeAll+0x11c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	4a39      	ldr	r2, [pc, #228]	; (80030b0 <xTaskResumeAll+0x11c>)
 8002fcc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fce:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <xTaskResumeAll+0x11c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d165      	bne.n	80030a2 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fd6:	4b37      	ldr	r3, [pc, #220]	; (80030b4 <xTaskResumeAll+0x120>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d061      	beq.n	80030a2 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fde:	e032      	b.n	8003046 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fe0:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <xTaskResumeAll+0x124>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3318      	adds	r3, #24
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff f99b 	bl	8002328 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff f996 	bl	8002328 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 fb40 	bl	8006684 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	2201      	movs	r2, #1
 800300a:	409a      	lsls	r2, r3
 800300c:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <xTaskResumeAll+0x128>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4313      	orrs	r3, r2
 8003012:	4a2a      	ldr	r2, [pc, #168]	; (80030bc <xTaskResumeAll+0x128>)
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <xTaskResumeAll+0x12c>)
 8003024:	441a      	add	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3304      	adds	r3, #4
 800302a:	4619      	mov	r1, r3
 800302c:	4610      	mov	r0, r2
 800302e:	f7ff f91e 	bl	800226e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003036:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <xTaskResumeAll+0x130>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	429a      	cmp	r2, r3
 800303e:	d302      	bcc.n	8003046 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003040:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <xTaskResumeAll+0x134>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <xTaskResumeAll+0x124>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1c8      	bne.n	8002fe0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003054:	f000 fb1e 	bl	8003694 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003058:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <xTaskResumeAll+0x138>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d010      	beq.n	8003086 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003064:	f000 f848 	bl	80030f8 <xTaskIncrementTick>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800306e:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <xTaskResumeAll+0x134>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3b01      	subs	r3, #1
 8003078:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f1      	bne.n	8003064 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <xTaskResumeAll+0x138>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003086:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <xTaskResumeAll+0x134>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800308e:	2301      	movs	r3, #1
 8003090:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003092:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <xTaskResumeAll+0x13c>)
 8003094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80030a2:	f000 fde7 	bl	8003c74 <vPortExitCritical>

    return xAlreadyYielded;
 80030a6:	68bb      	ldr	r3, [r7, #8]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200001bc 	.word	0x200001bc
 80030b4:	20000194 	.word	0x20000194
 80030b8:	20000154 	.word	0x20000154
 80030bc:	2000019c 	.word	0x2000019c
 80030c0:	2000005c 	.word	0x2000005c
 80030c4:	20000058 	.word	0x20000058
 80030c8:	200001a8 	.word	0x200001a8
 80030cc:	200001a4 	.word	0x200001a4
 80030d0:	e000ed04 	.word	0xe000ed04

080030d4 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030da:	f000 fe87 	bl	8003dec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80030e2:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <xTaskGetTickCountFromISR+0x20>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80030e8:	683b      	ldr	r3, [r7, #0]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000198 	.word	0x20000198

080030f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003102:	4b50      	ldr	r3, [pc, #320]	; (8003244 <xTaskIncrementTick+0x14c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 8092 	bne.w	8003230 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800310c:	4b4e      	ldr	r3, [pc, #312]	; (8003248 <xTaskIncrementTick+0x150>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3301      	adds	r3, #1
 8003112:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003114:	4a4c      	ldr	r2, [pc, #304]	; (8003248 <xTaskIncrementTick+0x150>)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d120      	bne.n	8003162 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003120:	4b4a      	ldr	r3, [pc, #296]	; (800324c <xTaskIncrementTick+0x154>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <xTaskIncrementTick+0x48>
        __asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	603b      	str	r3, [r7, #0]
    }
 800313c:	bf00      	nop
 800313e:	e7fe      	b.n	800313e <xTaskIncrementTick+0x46>
 8003140:	4b42      	ldr	r3, [pc, #264]	; (800324c <xTaskIncrementTick+0x154>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	4b42      	ldr	r3, [pc, #264]	; (8003250 <xTaskIncrementTick+0x158>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a40      	ldr	r2, [pc, #256]	; (800324c <xTaskIncrementTick+0x154>)
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4a40      	ldr	r2, [pc, #256]	; (8003250 <xTaskIncrementTick+0x158>)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <xTaskIncrementTick+0x15c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	4a3e      	ldr	r2, [pc, #248]	; (8003254 <xTaskIncrementTick+0x15c>)
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	f000 fa99 	bl	8003694 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003162:	4b3d      	ldr	r3, [pc, #244]	; (8003258 <xTaskIncrementTick+0x160>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	429a      	cmp	r2, r3
 800316a:	d34c      	bcc.n	8003206 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800316c:	4b37      	ldr	r3, [pc, #220]	; (800324c <xTaskIncrementTick+0x154>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d104      	bne.n	8003180 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003176:	4b38      	ldr	r3, [pc, #224]	; (8003258 <xTaskIncrementTick+0x160>)
 8003178:	f04f 32ff 	mov.w	r2, #4294967295
 800317c:	601a      	str	r2, [r3, #0]
                    break;
 800317e:	e042      	b.n	8003206 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003180:	4b32      	ldr	r3, [pc, #200]	; (800324c <xTaskIncrementTick+0x154>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d203      	bcs.n	80031a0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003198:	4a2f      	ldr	r2, [pc, #188]	; (8003258 <xTaskIncrementTick+0x160>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800319e:	e032      	b.n	8003206 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	3304      	adds	r3, #4
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff f8bf 	bl	8002328 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d004      	beq.n	80031bc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3318      	adds	r3, #24
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff f8b6 	bl	8002328 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 fa60 	bl	8006684 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	2201      	movs	r2, #1
 80031ca:	409a      	lsls	r2, r3
 80031cc:	4b23      	ldr	r3, [pc, #140]	; (800325c <xTaskIncrementTick+0x164>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	4a22      	ldr	r2, [pc, #136]	; (800325c <xTaskIncrementTick+0x164>)
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <xTaskIncrementTick+0x168>)
 80031e4:	441a      	add	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f7ff f83e 	bl	800226e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f6:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <xTaskIncrementTick+0x16c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d3b5      	bcc.n	800316c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003200:	2301      	movs	r3, #1
 8003202:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003204:	e7b2      	b.n	800316c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003206:	4b17      	ldr	r3, [pc, #92]	; (8003264 <xTaskIncrementTick+0x16c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	4914      	ldr	r1, [pc, #80]	; (8003260 <xTaskIncrementTick+0x168>)
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d901      	bls.n	8003222 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800321e:	2301      	movs	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <xTaskIncrementTick+0x170>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800322a:	2301      	movs	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	e004      	b.n	800323a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <xTaskIncrementTick+0x174>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	4a0d      	ldr	r2, [pc, #52]	; (800326c <xTaskIncrementTick+0x174>)
 8003238:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800323a:	697b      	ldr	r3, [r7, #20]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	200001bc 	.word	0x200001bc
 8003248:	20000198 	.word	0x20000198
 800324c:	2000014c 	.word	0x2000014c
 8003250:	20000150 	.word	0x20000150
 8003254:	200001ac 	.word	0x200001ac
 8003258:	200001b4 	.word	0x200001b4
 800325c:	2000019c 	.word	0x2000019c
 8003260:	2000005c 	.word	0x2000005c
 8003264:	20000058 	.word	0x20000058
 8003268:	200001a8 	.word	0x200001a8
 800326c:	200001a4 	.word	0x200001a4

08003270 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003276:	4b2d      	ldr	r3, [pc, #180]	; (800332c <vTaskSwitchContext+0xbc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <vTaskSwitchContext+0xc0>)
 8003280:	2201      	movs	r2, #1
 8003282:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003284:	e04d      	b.n	8003322 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003286:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <vTaskSwitchContext+0xc0>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <vTaskSwitchContext+0xc4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800329a:	7afb      	ldrb	r3, [r7, #11]
 800329c:	f1c3 031f 	rsb	r3, r3, #31
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	4925      	ldr	r1, [pc, #148]	; (8003338 <vTaskSwitchContext+0xc8>)
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <vTaskSwitchContext+0x5c>
        __asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	607b      	str	r3, [r7, #4]
    }
 80032c8:	bf00      	nop
 80032ca:	e7fe      	b.n	80032ca <vTaskSwitchContext+0x5a>
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <vTaskSwitchContext+0xc8>)
 80032d8:	4413      	add	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	3308      	adds	r3, #8
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d104      	bne.n	80032fc <vTaskSwitchContext+0x8c>
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	605a      	str	r2, [r3, #4]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <vTaskSwitchContext+0xcc>)
 8003304:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <vTaskSwitchContext+0xcc>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <vTaskSwitchContext+0xd0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d102      	bne.n	8003318 <vTaskSwitchContext+0xa8>
 8003312:	f003 f917 	bl	8006544 <SEGGER_SYSVIEW_OnIdle>
}
 8003316:	e004      	b.n	8003322 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <vTaskSwitchContext+0xcc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f003 f96f 	bl	8006600 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200001bc 	.word	0x200001bc
 8003330:	200001a8 	.word	0x200001a8
 8003334:	2000019c 	.word	0x2000019c
 8003338:	2000005c 	.word	0x2000005c
 800333c:	20000058 	.word	0x20000058
 8003340:	200001b8 	.word	0x200001b8

08003344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	60fb      	str	r3, [r7, #12]
    }
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <vTaskPlaceOnEventList+0x44>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3318      	adds	r3, #24
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe ff9f 	bl	80022b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003378:	2101      	movs	r1, #1
 800337a:	6838      	ldr	r0, [r7, #0]
 800337c:	f000 fa26 	bl	80037cc <prvAddCurrentTaskToDelayedList>
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000058 	.word	0x20000058

0800338c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	60fb      	str	r3, [r7, #12]
    }
 80033b4:	bf00      	nop
 80033b6:	e7fe      	b.n	80033b6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	3318      	adds	r3, #24
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe ffb3 	bl	8002328 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033c2:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <xTaskRemoveFromEventList+0xb4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d120      	bne.n	800340c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	3304      	adds	r3, #4
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe ffaa 	bl	8002328 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f003 f954 	bl	8006684 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	2201      	movs	r2, #1
 80033e2:	409a      	lsls	r2, r3
 80033e4:	4b17      	ldr	r3, [pc, #92]	; (8003444 <xTaskRemoveFromEventList+0xb8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	4a16      	ldr	r2, [pc, #88]	; (8003444 <xTaskRemoveFromEventList+0xb8>)
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4a13      	ldr	r2, [pc, #76]	; (8003448 <xTaskRemoveFromEventList+0xbc>)
 80033fc:	441a      	add	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	3304      	adds	r3, #4
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f7fe ff32 	bl	800226e <vListInsertEnd>
 800340a:	e005      	b.n	8003418 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	3318      	adds	r3, #24
 8003410:	4619      	mov	r1, r3
 8003412:	480e      	ldr	r0, [pc, #56]	; (800344c <xTaskRemoveFromEventList+0xc0>)
 8003414:	f7fe ff2b 	bl	800226e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <xTaskRemoveFromEventList+0xc4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	429a      	cmp	r2, r3
 8003424:	d905      	bls.n	8003432 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003426:	2301      	movs	r3, #1
 8003428:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <xTaskRemoveFromEventList+0xc8>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e001      	b.n	8003436 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003436:	697b      	ldr	r3, [r7, #20]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200001bc 	.word	0x200001bc
 8003444:	2000019c 	.word	0x2000019c
 8003448:	2000005c 	.word	0x2000005c
 800344c:	20000154 	.word	0x20000154
 8003450:	20000058 	.word	0x20000058
 8003454:	200001a8 	.word	0x200001a8

08003458 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <vTaskInternalSetTimeOutState+0x24>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <vTaskInternalSetTimeOutState+0x28>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	605a      	str	r2, [r3, #4]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	200001ac 	.word	0x200001ac
 8003480:	20000198 	.word	0x20000198

08003484 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	613b      	str	r3, [r7, #16]
    }
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	60fb      	str	r3, [r7, #12]
    }
 80034c2:	bf00      	nop
 80034c4:	e7fe      	b.n	80034c4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80034c6:	f000 fba5 	bl	8003c14 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <xTaskCheckForTimeOut+0xc4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e2:	d102      	bne.n	80034ea <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	e026      	b.n	8003538 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4b17      	ldr	r3, [pc, #92]	; (800354c <xTaskCheckForTimeOut+0xc8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d00a      	beq.n	800350c <xTaskCheckForTimeOut+0x88>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d305      	bcc.n	800350c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003500:	2301      	movs	r3, #1
 8003502:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e015      	b.n	8003538 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	429a      	cmp	r2, r3
 8003514:	d20b      	bcs.n	800352e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	1ad2      	subs	r2, r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ff98 	bl	8003458 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	e004      	b.n	8003538 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003534:	2301      	movs	r3, #1
 8003536:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003538:	f000 fb9c 	bl	8003c74 <vPortExitCritical>

    return xReturn;
 800353c:	69fb      	ldr	r3, [r7, #28]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000198 	.word	0x20000198
 800354c:	200001ac 	.word	0x200001ac

08003550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <vTaskMissedYield+0x14>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	200001a8 	.word	0x200001a8

08003568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003570:	f000 f852 	bl	8003618 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <prvIdleTask+0x28>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d9f9      	bls.n	8003570 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <prvIdleTask+0x2c>)
 800357e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800358c:	e7f0      	b.n	8003570 <prvIdleTask+0x8>
 800358e:	bf00      	nop
 8003590:	2000005c 	.word	0x2000005c
 8003594:	e000ed04 	.word	0xe000ed04

08003598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	e00c      	b.n	80035be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <prvInitialiseTaskLists+0x60>)
 80035b0:	4413      	add	r3, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fe2e 	bl	8002214 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3301      	adds	r3, #1
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b09      	cmp	r3, #9
 80035c2:	d9ef      	bls.n	80035a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80035c4:	480d      	ldr	r0, [pc, #52]	; (80035fc <prvInitialiseTaskLists+0x64>)
 80035c6:	f7fe fe25 	bl	8002214 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80035ca:	480d      	ldr	r0, [pc, #52]	; (8003600 <prvInitialiseTaskLists+0x68>)
 80035cc:	f7fe fe22 	bl	8002214 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80035d0:	480c      	ldr	r0, [pc, #48]	; (8003604 <prvInitialiseTaskLists+0x6c>)
 80035d2:	f7fe fe1f 	bl	8002214 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80035d6:	480c      	ldr	r0, [pc, #48]	; (8003608 <prvInitialiseTaskLists+0x70>)
 80035d8:	f7fe fe1c 	bl	8002214 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80035dc:	480b      	ldr	r0, [pc, #44]	; (800360c <prvInitialiseTaskLists+0x74>)
 80035de:	f7fe fe19 	bl	8002214 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <prvInitialiseTaskLists+0x78>)
 80035e4:	4a05      	ldr	r2, [pc, #20]	; (80035fc <prvInitialiseTaskLists+0x64>)
 80035e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <prvInitialiseTaskLists+0x7c>)
 80035ea:	4a05      	ldr	r2, [pc, #20]	; (8003600 <prvInitialiseTaskLists+0x68>)
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	2000005c 	.word	0x2000005c
 80035fc:	20000124 	.word	0x20000124
 8003600:	20000138 	.word	0x20000138
 8003604:	20000154 	.word	0x20000154
 8003608:	20000168 	.word	0x20000168
 800360c:	20000180 	.word	0x20000180
 8003610:	2000014c 	.word	0x2000014c
 8003614:	20000150 	.word	0x20000150

08003618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800361e:	e019      	b.n	8003654 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003620:	f000 faf8 	bl	8003c14 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <prvCheckTasksWaitingTermination+0x50>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fe79 	bl	8002328 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003636:	4b0d      	ldr	r3, [pc, #52]	; (800366c <prvCheckTasksWaitingTermination+0x54>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3b01      	subs	r3, #1
 800363c:	4a0b      	ldr	r2, [pc, #44]	; (800366c <prvCheckTasksWaitingTermination+0x54>)
 800363e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <prvCheckTasksWaitingTermination+0x58>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3b01      	subs	r3, #1
 8003646:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <prvCheckTasksWaitingTermination+0x58>)
 8003648:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800364a:	f000 fb13 	bl	8003c74 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f810 	bl	8003674 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <prvCheckTasksWaitingTermination+0x58>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e1      	bne.n	8003620 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000168 	.word	0x20000168
 800366c:	20000194 	.word	0x20000194
 8003670:	2000017c 	.word	0x2000017c

08003674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fcd3 	bl	800402c <vPortFree>
                vPortFree( pxTCB );
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fcd0 	bl	800402c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <prvResetNextTaskUnblockTime+0x30>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <prvResetNextTaskUnblockTime+0x34>)
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295
 80036a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80036aa:	e005      	b.n	80036b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <prvResetNextTaskUnblockTime+0x30>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <prvResetNextTaskUnblockTime+0x34>)
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	2000014c 	.word	0x2000014c
 80036c8:	200001b4 	.word	0x200001b4

080036cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d068      	beq.n	80037b4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80036e2:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <xTaskPriorityDisinherit+0xf4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d00a      	beq.n	8003702 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	60fb      	str	r3, [r7, #12]
    }
 80036fe:	bf00      	nop
 8003700:	e7fe      	b.n	8003700 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	60bb      	str	r3, [r7, #8]
    }
 800371c:	bf00      	nop
 800371e:	e7fe      	b.n	800371e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003724:	1e5a      	subs	r2, r3, #1
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	429a      	cmp	r2, r3
 8003734:	d03e      	beq.n	80037b4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373a:	2b00      	cmp	r3, #0
 800373c:	d13a      	bne.n	80037b4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	3304      	adds	r3, #4
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fdf0 	bl	8002328 <uxListRemove>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	2201      	movs	r2, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43da      	mvns	r2, r3
 800375a:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <xTaskPriorityDisinherit+0xf8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4013      	ands	r3, r2
 8003760:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <xTaskPriorityDisinherit+0xf8>)
 8003762:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4619      	mov	r1, r3
 8003768:	204a      	movs	r0, #74	; 0x4a
 800376a:	f002 fa09 	bl	8005b80 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	f1c3 020a 	rsb	r2, r3, #10
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	2201      	movs	r2, #1
 8003788:	409a      	lsls	r2, r3
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <xTaskPriorityDisinherit+0xf8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4313      	orrs	r3, r2
 8003790:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <xTaskPriorityDisinherit+0xf8>)
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <xTaskPriorityDisinherit+0xfc>)
 80037a2:	441a      	add	r2, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f7fe fd5f 	bl	800226e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80037b0:	2301      	movs	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80037b4:	697b      	ldr	r3, [r7, #20]
    }
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000058 	.word	0x20000058
 80037c4:	2000019c 	.word	0x2000019c
 80037c8:	2000005c 	.word	0x2000005c

080037cc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80037d6:	4b32      	ldr	r3, [pc, #200]	; (80038a0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037dc:	4b31      	ldr	r3, [pc, #196]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fda0 	bl	8002328 <uxListRemove>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037ee:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	2201      	movs	r2, #1
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43da      	mvns	r2, r3
 80037fc:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <prvAddCurrentTaskToDelayedList+0xdc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4013      	ands	r3, r2
 8003802:	4a29      	ldr	r2, [pc, #164]	; (80038a8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003804:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d110      	bne.n	8003830 <prvAddCurrentTaskToDelayedList+0x64>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00d      	beq.n	8003830 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003814:	4b23      	ldr	r3, [pc, #140]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	211b      	movs	r1, #27
 800381a:	4618      	mov	r0, r3
 800381c:	f002 ff74 	bl	8006708 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003820:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3304      	adds	r3, #4
 8003826:	4619      	mov	r1, r3
 8003828:	4820      	ldr	r0, [pc, #128]	; (80038ac <prvAddCurrentTaskToDelayedList+0xe0>)
 800382a:	f7fe fd20 	bl	800226e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800382e:	e032      	b.n	8003896 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003838:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	429a      	cmp	r2, r3
 8003846:	d20f      	bcs.n	8003868 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2104      	movs	r1, #4
 800384e:	4618      	mov	r0, r3
 8003850:	f002 ff5a 	bl	8006708 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003854:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3304      	adds	r3, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7fe fd28 	bl	80022b6 <vListInsert>
}
 8003866:	e016      	b.n	8003896 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003868:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2104      	movs	r1, #4
 800386e:	4618      	mov	r0, r3
 8003870:	f002 ff4a 	bl	8006708 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3304      	adds	r3, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7fe fd18 	bl	80022b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d202      	bcs.n	8003896 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003890:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	6013      	str	r3, [r2, #0]
}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000198 	.word	0x20000198
 80038a4:	20000058 	.word	0x20000058
 80038a8:	2000019c 	.word	0x2000019c
 80038ac:	20000180 	.word	0x20000180
 80038b0:	20000150 	.word	0x20000150
 80038b4:	2000014c 	.word	0x2000014c
 80038b8:	200001b4 	.word	0x200001b4

080038bc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3b04      	subs	r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3b04      	subs	r3, #4
 80038da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f023 0201 	bic.w	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3b04      	subs	r3, #4
 80038ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80038ec:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <pxPortInitialiseStack+0x64>)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3b14      	subs	r3, #20
 80038f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3b04      	subs	r3, #4
 8003902:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f06f 0202 	mvn.w	r2, #2
 800390a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3b20      	subs	r3, #32
 8003910:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003912:	68fb      	ldr	r3, [r7, #12]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	08003925 	.word	0x08003925

08003924 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <prvTaskExitError+0x54>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d00a      	beq.n	800394e <prvTaskExitError+0x2a>
        __asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	60fb      	str	r3, [r7, #12]
    }
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <prvTaskExitError+0x28>
        __asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	60bb      	str	r3, [r7, #8]
    }
 8003960:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003962:	bf00      	nop
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0fc      	beq.n	8003964 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	20000010 	.word	0x20000010
 800397c:	00000000 	.word	0x00000000

08003980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <pxCurrentTCBConst2>)
 8003982:	6819      	ldr	r1, [r3, #0]
 8003984:	6808      	ldr	r0, [r1, #0]
 8003986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398a:	f380 8809 	msr	PSP, r0
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f04f 0000 	mov.w	r0, #0
 8003996:	f380 8811 	msr	BASEPRI, r0
 800399a:	4770      	bx	lr
 800399c:	f3af 8000 	nop.w

080039a0 <pxCurrentTCBConst2>:
 80039a0:	20000058 	.word	0x20000058
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop

080039a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80039a8:	4808      	ldr	r0, [pc, #32]	; (80039cc <prvPortStartFirstTask+0x24>)
 80039aa:	6800      	ldr	r0, [r0, #0]
 80039ac:	6800      	ldr	r0, [r0, #0]
 80039ae:	f380 8808 	msr	MSP, r0
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f380 8814 	msr	CONTROL, r0
 80039ba:	b662      	cpsie	i
 80039bc:	b661      	cpsie	f
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	df00      	svc	0
 80039c8:	bf00      	nop
 80039ca:	0000      	.short	0x0000
 80039cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop

080039d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80039da:	4b46      	ldr	r3, [pc, #280]	; (8003af4 <xPortStartScheduler+0x120>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a46      	ldr	r2, [pc, #280]	; (8003af8 <xPortStartScheduler+0x124>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d10a      	bne.n	80039fa <xPortStartScheduler+0x26>
        __asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	613b      	str	r3, [r7, #16]
    }
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80039fa:	4b3e      	ldr	r3, [pc, #248]	; (8003af4 <xPortStartScheduler+0x120>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a3f      	ldr	r2, [pc, #252]	; (8003afc <xPortStartScheduler+0x128>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10a      	bne.n	8003a1a <xPortStartScheduler+0x46>
        __asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	60fb      	str	r3, [r7, #12]
    }
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a1a:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <xPortStartScheduler+0x12c>)
 8003a1c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	22ff      	movs	r2, #255	; 0xff
 8003a2a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4b31      	ldr	r3, [pc, #196]	; (8003b04 <xPortStartScheduler+0x130>)
 8003a40:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a42:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <xPortStartScheduler+0x134>)
 8003a44:	2207      	movs	r2, #7
 8003a46:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a48:	e009      	b.n	8003a5e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003a4a:	4b2f      	ldr	r3, [pc, #188]	; (8003b08 <xPortStartScheduler+0x134>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	4a2d      	ldr	r2, [pc, #180]	; (8003b08 <xPortStartScheduler+0x134>)
 8003a52:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d0ef      	beq.n	8003a4a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a6a:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <xPortStartScheduler+0x134>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1c3 0307 	rsb	r3, r3, #7
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d00a      	beq.n	8003a8c <xPortStartScheduler+0xb8>
        __asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	60bb      	str	r3, [r7, #8]
    }
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <xPortStartScheduler+0x134>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <xPortStartScheduler+0x134>)
 8003a94:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a96:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <xPortStartScheduler+0x134>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a9e:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <xPortStartScheduler+0x134>)
 8003aa0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003aaa:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <xPortStartScheduler+0x138>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <xPortStartScheduler+0x138>)
 8003ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <xPortStartScheduler+0x138>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <xPortStartScheduler+0x138>)
 8003abc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ac0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ac2:	f000 f963 	bl	8003d8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ac6:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <xPortStartScheduler+0x13c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003acc:	f000 f982 	bl	8003dd4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ad0:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <xPortStartScheduler+0x140>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0f      	ldr	r2, [pc, #60]	; (8003b14 <xPortStartScheduler+0x140>)
 8003ad6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ada:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003adc:	f7ff ff64 	bl	80039a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ae0:	f7ff fbc6 	bl	8003270 <vTaskSwitchContext>
    prvTaskExitError();
 8003ae4:	f7ff ff1e 	bl	8003924 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	e000ed00 	.word	0xe000ed00
 8003af8:	410fc271 	.word	0x410fc271
 8003afc:	410fc270 	.word	0x410fc270
 8003b00:	e000e400 	.word	0xe000e400
 8003b04:	200001c0 	.word	0x200001c0
 8003b08:	200001c4 	.word	0x200001c4
 8003b0c:	e000ed20 	.word	0xe000ed20
 8003b10:	20000010 	.word	0x20000010
 8003b14:	e000ef34 	.word	0xe000ef34

08003b18 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b1e:	4b37      	ldr	r3, [pc, #220]	; (8003bfc <vInitPrioGroupValue+0xe4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a37      	ldr	r2, [pc, #220]	; (8003c00 <vInitPrioGroupValue+0xe8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d10a      	bne.n	8003b3e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	613b      	str	r3, [r7, #16]
    }
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b3e:	4b2f      	ldr	r3, [pc, #188]	; (8003bfc <vInitPrioGroupValue+0xe4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a30      	ldr	r2, [pc, #192]	; (8003c04 <vInitPrioGroupValue+0xec>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d10a      	bne.n	8003b5e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	60fb      	str	r3, [r7, #12]
    }
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b5e:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <vInitPrioGroupValue+0xf0>)
 8003b60:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	22ff      	movs	r2, #255	; 0xff
 8003b6e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <vInitPrioGroupValue+0xf4>)
 8003b84:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b86:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <vInitPrioGroupValue+0xf8>)
 8003b88:	2207      	movs	r2, #7
 8003b8a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b8c:	e009      	b.n	8003ba2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <vInitPrioGroupValue+0xf8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	4a1e      	ldr	r2, [pc, #120]	; (8003c10 <vInitPrioGroupValue+0xf8>)
 8003b96:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d0ef      	beq.n	8003b8e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bae:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <vInitPrioGroupValue+0xf8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f1c3 0307 	rsb	r3, r3, #7
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d00a      	beq.n	8003bd0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	60bb      	str	r3, [r7, #8]
    }
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <vInitPrioGroupValue+0xf8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	4a0e      	ldr	r2, [pc, #56]	; (8003c10 <vInitPrioGroupValue+0xf8>)
 8003bd8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bda:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <vInitPrioGroupValue+0xf8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003be2:	4a0b      	ldr	r2, [pc, #44]	; (8003c10 <vInitPrioGroupValue+0xf8>)
 8003be4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	e000ed00 	.word	0xe000ed00
 8003c00:	410fc271 	.word	0x410fc271
 8003c04:	410fc270 	.word	0x410fc270
 8003c08:	e000e400 	.word	0xe000e400
 8003c0c:	200001c0 	.word	0x200001c0
 8003c10:	200001c4 	.word	0x200001c4

08003c14 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
        __asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	607b      	str	r3, [r7, #4]
    }
 8003c2c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <vPortEnterCritical+0x58>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3301      	adds	r3, #1
 8003c34:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <vPortEnterCritical+0x58>)
 8003c36:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <vPortEnterCritical+0x58>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d10f      	bne.n	8003c60 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <vPortEnterCritical+0x5c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <vPortEnterCritical+0x4c>
        __asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	603b      	str	r3, [r7, #0]
    }
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <vPortEnterCritical+0x4a>
    }
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	20000010 	.word	0x20000010
 8003c70:	e000ed04 	.word	0xe000ed04

08003c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003c7a:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <vPortExitCritical+0x50>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <vPortExitCritical+0x24>
        __asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	607b      	str	r3, [r7, #4]
    }
 8003c94:	bf00      	nop
 8003c96:	e7fe      	b.n	8003c96 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <vPortExitCritical+0x50>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <vPortExitCritical+0x50>)
 8003ca0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003ca2:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <vPortExitCritical+0x50>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d105      	bne.n	8003cb6 <vPortExitCritical+0x42>
 8003caa:	2300      	movs	r3, #0
 8003cac:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003cb4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20000010 	.word	0x20000010
	...

08003cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003cd0:	f3ef 8009 	mrs	r0, PSP
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <pxCurrentTCBConst>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	f01e 0f10 	tst.w	lr, #16
 8003ce0:	bf08      	it	eq
 8003ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cea:	6010      	str	r0, [r2, #0]
 8003cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003cf4:	f380 8811 	msr	BASEPRI, r0
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f7ff fab6 	bl	8003270 <vTaskSwitchContext>
 8003d04:	f04f 0000 	mov.w	r0, #0
 8003d08:	f380 8811 	msr	BASEPRI, r0
 8003d0c:	bc09      	pop	{r0, r3}
 8003d0e:	6819      	ldr	r1, [r3, #0]
 8003d10:	6808      	ldr	r0, [r1, #0]
 8003d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d16:	f01e 0f10 	tst.w	lr, #16
 8003d1a:	bf08      	it	eq
 8003d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d20:	f380 8809 	msr	PSP, r0
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	f3af 8000 	nop.w

08003d30 <pxCurrentTCBConst>:
 8003d30:	20000058 	.word	0x20000058
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop

08003d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
        __asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	607b      	str	r3, [r7, #4]
    }
 8003d50:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003d52:	f002 fb7d 	bl	8006450 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003d56:	f7ff f9cf 	bl	80030f8 <xTaskIncrementTick>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d006      	beq.n	8003d6e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003d60:	f002 fbd4 	bl	800650c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <SysTick_Handler+0x50>)
 8003d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e001      	b.n	8003d72 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003d6e:	f002 fbb1 	bl	80064d4 <SEGGER_SYSVIEW_RecordExitISR>
 8003d72:	2300      	movs	r3, #0
 8003d74:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	f383 8811 	msr	BASEPRI, r3
    }
 8003d7c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <vPortSetupTimerInterrupt+0x34>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d96:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <vPortSetupTimerInterrupt+0x38>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <vPortSetupTimerInterrupt+0x3c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <vPortSetupTimerInterrupt+0x40>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <vPortSetupTimerInterrupt+0x44>)
 8003daa:	3b01      	subs	r3, #1
 8003dac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <vPortSetupTimerInterrupt+0x34>)
 8003db0:	2207      	movs	r2, #7
 8003db2:	601a      	str	r2, [r3, #0]
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	e000e010 	.word	0xe000e010
 8003dc4:	e000e018 	.word	0xe000e018
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	10624dd3 	.word	0x10624dd3
 8003dd0:	e000e014 	.word	0xe000e014

08003dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003de4 <vPortEnableVFP+0x10>
 8003dd8:	6801      	ldr	r1, [r0, #0]
 8003dda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003dde:	6001      	str	r1, [r0, #0]
 8003de0:	4770      	bx	lr
 8003de2:	0000      	.short	0x0000
 8003de4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003de8:	bf00      	nop
 8003dea:	bf00      	nop

08003dec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003df2:	f3ef 8305 	mrs	r3, IPSR
 8003df6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b0f      	cmp	r3, #15
 8003dfc:	d914      	bls.n	8003e28 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003dfe:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <vPortValidateInterruptPriority+0x70>)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e08:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <vPortValidateInterruptPriority+0x74>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	7afa      	ldrb	r2, [r7, #11]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d20a      	bcs.n	8003e28 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	607b      	str	r3, [r7, #4]
    }
 8003e24:	bf00      	nop
 8003e26:	e7fe      	b.n	8003e26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e28:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <vPortValidateInterruptPriority+0x78>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e30:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <vPortValidateInterruptPriority+0x7c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d90a      	bls.n	8003e4e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	603b      	str	r3, [r7, #0]
    }
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <vPortValidateInterruptPriority+0x60>
    }
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000e3f0 	.word	0xe000e3f0
 8003e60:	200001c0 	.word	0x200001c0
 8003e64:	e000ed0c 	.word	0xe000ed0c
 8003e68:	200001c4 	.word	0x200001c4

08003e6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	; 0x28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003e78:	f7ff f87e 	bl	8002f78 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003e7c:	4b65      	ldr	r3, [pc, #404]	; (8004014 <pvPortMalloc+0x1a8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003e84:	f000 f934 	bl	80040f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e88:	4b63      	ldr	r3, [pc, #396]	; (8004018 <pvPortMalloc+0x1ac>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f040 80a7 	bne.w	8003fe4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d02d      	beq.n	8003ef8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d227      	bcs.n	8003ef8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d021      	beq.n	8003efe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f023 0307 	bic.w	r3, r3, #7
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d214      	bcs.n	8003ef2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f023 0307 	bic.w	r3, r3, #7
 8003ece:	3308      	adds	r3, #8
 8003ed0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d010      	beq.n	8003efe <pvPortMalloc+0x92>
        __asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	617b      	str	r3, [r7, #20]
    }
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ef6:	e002      	b.n	8003efe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	e000      	b.n	8003f00 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003efe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d06e      	beq.n	8003fe4 <pvPortMalloc+0x178>
 8003f06:	4b45      	ldr	r3, [pc, #276]	; (800401c <pvPortMalloc+0x1b0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d869      	bhi.n	8003fe4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003f10:	4b43      	ldr	r3, [pc, #268]	; (8004020 <pvPortMalloc+0x1b4>)
 8003f12:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003f14:	4b42      	ldr	r3, [pc, #264]	; (8004020 <pvPortMalloc+0x1b4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f1a:	e004      	b.n	8003f26 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d903      	bls.n	8003f38 <pvPortMalloc+0xcc>
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f1      	bne.n	8003f1c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003f38:	4b36      	ldr	r3, [pc, #216]	; (8004014 <pvPortMalloc+0x1a8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d050      	beq.n	8003fe4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2208      	movs	r2, #8
 8003f48:	4413      	add	r3, r2
 8003f4a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	1ad2      	subs	r2, r2, r3
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d91f      	bls.n	8003fa4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4413      	add	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <pvPortMalloc+0x120>
        __asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	613b      	str	r3, [r7, #16]
    }
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	1ad2      	subs	r2, r2, r3
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f9e:	69b8      	ldr	r0, [r7, #24]
 8003fa0:	f000 f908 	bl	80041b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	; (800401c <pvPortMalloc+0x1b0>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	4a1b      	ldr	r2, [pc, #108]	; (800401c <pvPortMalloc+0x1b0>)
 8003fb0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <pvPortMalloc+0x1b0>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <pvPortMalloc+0x1b8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d203      	bcs.n	8003fc6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fbe:	4b17      	ldr	r3, [pc, #92]	; (800401c <pvPortMalloc+0x1b0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a18      	ldr	r2, [pc, #96]	; (8004024 <pvPortMalloc+0x1b8>)
 8003fc4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	4b13      	ldr	r3, [pc, #76]	; (8004018 <pvPortMalloc+0x1ac>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003fda:	4b13      	ldr	r3, [pc, #76]	; (8004028 <pvPortMalloc+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	4a11      	ldr	r2, [pc, #68]	; (8004028 <pvPortMalloc+0x1bc>)
 8003fe2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003fe4:	f7fe ffd6 	bl	8002f94 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <pvPortMalloc+0x19c>
        __asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	60fb      	str	r3, [r7, #12]
    }
 8004004:	bf00      	nop
 8004006:	e7fe      	b.n	8004006 <pvPortMalloc+0x19a>
    return pvReturn;
 8004008:	69fb      	ldr	r3, [r7, #28]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3728      	adds	r7, #40	; 0x28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20012dd0 	.word	0x20012dd0
 8004018:	20012de4 	.word	0x20012de4
 800401c:	20012dd4 	.word	0x20012dd4
 8004020:	20012dc8 	.word	0x20012dc8
 8004024:	20012dd8 	.word	0x20012dd8
 8004028:	20012ddc 	.word	0x20012ddc

0800402c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d04d      	beq.n	80040da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800403e:	2308      	movs	r3, #8
 8004040:	425b      	negs	r3, r3
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4413      	add	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <vPortFree+0xb8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <vPortFree+0x44>
        __asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	60fb      	str	r3, [r7, #12]
    }
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <vPortFree+0x62>
        __asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60bb      	str	r3, [r7, #8]
    }
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <vPortFree+0xb8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01e      	beq.n	80040da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11a      	bne.n	80040da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <vPortFree+0xb8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	401a      	ands	r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80040b4:	f7fe ff60 	bl	8002f78 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <vPortFree+0xbc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4413      	add	r3, r2
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <vPortFree+0xbc>)
 80040c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040c6:	6938      	ldr	r0, [r7, #16]
 80040c8:	f000 f874 	bl	80041b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <vPortFree+0xc0>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	4a06      	ldr	r2, [pc, #24]	; (80040ec <vPortFree+0xc0>)
 80040d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80040d6:	f7fe ff5d 	bl	8002f94 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80040da:	bf00      	nop
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20012de4 	.word	0x20012de4
 80040e8:	20012dd4 	.word	0x20012dd4
 80040ec:	20012de0 	.word	0x20012de0

080040f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040f6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80040fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80040fc:	4b27      	ldr	r3, [pc, #156]	; (800419c <prvHeapInit+0xac>)
 80040fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3307      	adds	r3, #7
 800410e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0307 	bic.w	r3, r3, #7
 8004116:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	4a1f      	ldr	r2, [pc, #124]	; (800419c <prvHeapInit+0xac>)
 8004120:	4413      	add	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004128:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <prvHeapInit+0xb0>)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800412e:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <prvHeapInit+0xb0>)
 8004130:	2200      	movs	r2, #0
 8004132:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	4413      	add	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800413c:	2208      	movs	r2, #8
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0307 	bic.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <prvHeapInit+0xb4>)
 8004150:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004152:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <prvHeapInit+0xb4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800415a:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <prvHeapInit+0xb4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	1ad2      	subs	r2, r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <prvHeapInit+0xb4>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <prvHeapInit+0xb8>)
 800417e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4a09      	ldr	r2, [pc, #36]	; (80041ac <prvHeapInit+0xbc>)
 8004186:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <prvHeapInit+0xc0>)
 800418a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800418e:	601a      	str	r2, [r3, #0]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	200001c8 	.word	0x200001c8
 80041a0:	20012dc8 	.word	0x20012dc8
 80041a4:	20012dd0 	.word	0x20012dd0
 80041a8:	20012dd8 	.word	0x20012dd8
 80041ac:	20012dd4 	.word	0x20012dd4
 80041b0:	20012de4 	.word	0x20012de4

080041b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041bc:	4b28      	ldr	r3, [pc, #160]	; (8004260 <prvInsertBlockIntoFreeList+0xac>)
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e002      	b.n	80041c8 <prvInsertBlockIntoFreeList+0x14>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d8f7      	bhi.n	80041c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	4413      	add	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d108      	bne.n	80041f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	441a      	add	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	441a      	add	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d118      	bne.n	800423c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <prvInsertBlockIntoFreeList+0xb0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d00d      	beq.n	8004232 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e008      	b.n	8004244 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <prvInsertBlockIntoFreeList+0xb0>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e003      	b.n	8004244 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	429a      	cmp	r2, r3
 800424a:	d002      	beq.n	8004252 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20012dc8 	.word	0x20012dc8
 8004264:	20012dd0 	.word	0x20012dd0

08004268 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800426c:	4803      	ldr	r0, [pc, #12]	; (800427c <_cbSendSystemDesc+0x14>)
 800426e:	f002 f899 	bl	80063a4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004272:	4803      	ldr	r0, [pc, #12]	; (8004280 <_cbSendSystemDesc+0x18>)
 8004274:	f002 f896 	bl	80063a4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004278:	bf00      	nop
 800427a:	bd80      	pop	{r7, pc}
 800427c:	08006e2c 	.word	0x08006e2c
 8004280:	08006e60 	.word	0x08006e60

08004284 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <SEGGER_SYSVIEW_Conf+0x20>)
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <SEGGER_SYSVIEW_Conf+0x20>)
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004292:	4a06      	ldr	r2, [pc, #24]	; (80042ac <SEGGER_SYSVIEW_Conf+0x28>)
 8004294:	f001 fc02 	bl	8005a9c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004298:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800429c:	f001 fc42 	bl	8005b24 <SEGGER_SYSVIEW_SetRAMBase>
}
 80042a0:	bf00      	nop
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000000 	.word	0x20000000
 80042a8:	08004269 	.word	0x08004269
 80042ac:	08006f00 	.word	0x08006f00

080042b0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80042b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	e033      	b.n	8004324 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80042bc:	491e      	ldr	r1, [pc, #120]	; (8004338 <_cbSendTaskList+0x88>)
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	491a      	ldr	r1, [pc, #104]	; (8004338 <_cbSendTaskList+0x88>)
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	3304      	adds	r3, #4
 80042dc:	6819      	ldr	r1, [r3, #0]
 80042de:	4c16      	ldr	r4, [pc, #88]	; (8004338 <_cbSendTaskList+0x88>)
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4423      	add	r3, r4
 80042ec:	3308      	adds	r3, #8
 80042ee:	681c      	ldr	r4, [r3, #0]
 80042f0:	4d11      	ldr	r5, [pc, #68]	; (8004338 <_cbSendTaskList+0x88>)
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	442b      	add	r3, r5
 80042fe:	330c      	adds	r3, #12
 8004300:	681d      	ldr	r5, [r3, #0]
 8004302:	4e0d      	ldr	r6, [pc, #52]	; (8004338 <_cbSendTaskList+0x88>)
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4433      	add	r3, r6
 8004310:	3310      	adds	r3, #16
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	462b      	mov	r3, r5
 8004318:	4622      	mov	r2, r4
 800431a:	f000 f8b5 	bl	8004488 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3301      	adds	r3, #1
 8004322:	607b      	str	r3, [r7, #4]
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <_cbSendTaskList+0x8c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	429a      	cmp	r2, r3
 800432c:	d3c6      	bcc.n	80042bc <_cbSendTaskList+0xc>
  }
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004338:	20012de8 	.word	0x20012de8
 800433c:	20012e88 	.word	0x20012e88

08004340 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004340:	b5b0      	push	{r4, r5, r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004346:	f7fe fec5 	bl	80030d4 <xTaskGetTickCountFromISR>
 800434a:	4603      	mov	r3, r0
 800434c:	461a      	mov	r2, r3
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	f04f 0400 	mov.w	r4, #0
 8004362:	f04f 0500 	mov.w	r5, #0
 8004366:	015d      	lsls	r5, r3, #5
 8004368:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800436c:	0154      	lsls	r4, r2, #5
 800436e:	4622      	mov	r2, r4
 8004370:	462b      	mov	r3, r5
 8004372:	1a12      	subs	r2, r2, r0
 8004374:	eb63 0301 	sbc.w	r3, r3, r1
 8004378:	f04f 0400 	mov.w	r4, #0
 800437c:	f04f 0500 	mov.w	r5, #0
 8004380:	009d      	lsls	r5, r3, #2
 8004382:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004386:	0094      	lsls	r4, r2, #2
 8004388:	4622      	mov	r2, r4
 800438a:	462b      	mov	r3, r5
 800438c:	1812      	adds	r2, r2, r0
 800438e:	eb41 0303 	adc.w	r3, r1, r3
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	00d9      	lsls	r1, r3, #3
 800439c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043a0:	00d0      	lsls	r0, r2, #3
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80043aa:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80043ae:	4610      	mov	r0, r2
 80043b0:	4619      	mov	r1, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bdb0      	pop	{r4, r5, r7, pc}

080043b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80043c6:	2205      	movs	r2, #5
 80043c8:	492b      	ldr	r1, [pc, #172]	; (8004478 <SYSVIEW_AddTask+0xc0>)
 80043ca:	68b8      	ldr	r0, [r7, #8]
 80043cc:	f002 fc98 	bl	8006d00 <memcmp>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d04b      	beq.n	800446e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80043d6:	4b29      	ldr	r3, [pc, #164]	; (800447c <SYSVIEW_AddTask+0xc4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b07      	cmp	r3, #7
 80043dc:	d903      	bls.n	80043e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80043de:	4828      	ldr	r0, [pc, #160]	; (8004480 <SYSVIEW_AddTask+0xc8>)
 80043e0:	f002 faf2 	bl	80069c8 <SEGGER_SYSVIEW_Warn>
    return;
 80043e4:	e044      	b.n	8004470 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80043e6:	4b25      	ldr	r3, [pc, #148]	; (800447c <SYSVIEW_AddTask+0xc4>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4926      	ldr	r1, [pc, #152]	; (8004484 <SYSVIEW_AddTask+0xcc>)
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80043fa:	4b20      	ldr	r3, [pc, #128]	; (800447c <SYSVIEW_AddTask+0xc4>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4921      	ldr	r1, [pc, #132]	; (8004484 <SYSVIEW_AddTask+0xcc>)
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	3304      	adds	r3, #4
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004410:	4b1a      	ldr	r3, [pc, #104]	; (800447c <SYSVIEW_AddTask+0xc4>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	491b      	ldr	r1, [pc, #108]	; (8004484 <SYSVIEW_AddTask+0xcc>)
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	3308      	adds	r3, #8
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <SYSVIEW_AddTask+0xc4>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4916      	ldr	r1, [pc, #88]	; (8004484 <SYSVIEW_AddTask+0xcc>)
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	330c      	adds	r3, #12
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <SYSVIEW_AddTask+0xc4>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4910      	ldr	r1, [pc, #64]	; (8004484 <SYSVIEW_AddTask+0xcc>)
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3310      	adds	r3, #16
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <SYSVIEW_AddTask+0xc4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3301      	adds	r3, #1
 8004458:	4a08      	ldr	r2, [pc, #32]	; (800447c <SYSVIEW_AddTask+0xc4>)
 800445a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f80e 	bl	8004488 <SYSVIEW_SendTaskInfo>
 800446c:	e000      	b.n	8004470 <SYSVIEW_AddTask+0xb8>
    return;
 800446e:	bf00      	nop

}
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	08006e70 	.word	0x08006e70
 800447c:	20012e88 	.word	0x20012e88
 8004480:	08006e78 	.word	0x08006e78
 8004484:	20012de8 	.word	0x20012de8

08004488 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004496:	f107 0314 	add.w	r3, r7, #20
 800449a:	2214      	movs	r2, #20
 800449c:	2100      	movs	r1, #0
 800449e:	4618      	mov	r0, r3
 80044a0:	f002 fc4a 	bl	8006d38 <memset>
  TaskInfo.TaskID     = TaskID;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80044b8:	f107 0314 	add.w	r3, r7, #20
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 fe79 	bl	80061b4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80044c2:	bf00      	nop
 80044c4:	3728      	adds	r7, #40	; 0x28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <__NVIC_EnableIRQ>:
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	db0b      	blt.n	80044f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044de:	79fb      	ldrb	r3, [r7, #7]
 80044e0:	f003 021f 	and.w	r2, r3, #31
 80044e4:	4907      	ldr	r1, [pc, #28]	; (8004504 <__NVIC_EnableIRQ+0x38>)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	2001      	movs	r0, #1
 80044ee:	fa00 f202 	lsl.w	r2, r0, r2
 80044f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	e000e100 	.word	0xe000e100

08004508 <__NVIC_SetPriority>:
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	6039      	str	r1, [r7, #0]
 8004512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004518:	2b00      	cmp	r3, #0
 800451a:	db0a      	blt.n	8004532 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	b2da      	uxtb	r2, r3
 8004520:	490c      	ldr	r1, [pc, #48]	; (8004554 <__NVIC_SetPriority+0x4c>)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	0112      	lsls	r2, r2, #4
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	440b      	add	r3, r1
 800452c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004530:	e00a      	b.n	8004548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	4908      	ldr	r1, [pc, #32]	; (8004558 <__NVIC_SetPriority+0x50>)
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	3b04      	subs	r3, #4
 8004540:	0112      	lsls	r2, r2, #4
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	440b      	add	r3, r1
 8004546:	761a      	strb	r2, [r3, #24]
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000e100 	.word	0xe000e100
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004562:	f002 fa8d 	bl	8006a80 <SEGGER_SYSVIEW_IsStarted>
 8004566:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800456e:	f001 fca5 	bl	8005ebc <SEGGER_SYSVIEW_Start>
  }
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <_cbOnUARTRx+0x3c>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d806      	bhi.n	800459c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <_cbOnUARTRx+0x3c>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	3301      	adds	r3, #1
 8004594:	b2da      	uxtb	r2, r3
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <_cbOnUARTRx+0x3c>)
 8004598:	701a      	strb	r2, [r3, #0]
    goto Done;
 800459a:	e009      	b.n	80045b0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800459c:	f7ff ffde 	bl	800455c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <_cbOnUARTRx+0x3c>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	1dfb      	adds	r3, r7, #7
 80045a8:	2201      	movs	r2, #1
 80045aa:	4619      	mov	r1, r3
 80045ac:	f000 fb9a 	bl	8004ce4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80045b0:	bf00      	nop
}
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000014 	.word	0x20000014

080045bc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80045c4:	4b14      	ldr	r3, [pc, #80]	; (8004618 <_cbOnUARTTx+0x5c>)
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d80f      	bhi.n	80045ec <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80045cc:	4b12      	ldr	r3, [pc, #72]	; (8004618 <_cbOnUARTTx+0x5c>)
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	461a      	mov	r2, r3
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <_cbOnUARTTx+0x60>)
 80045d4:	5c9a      	ldrb	r2, [r3, r2]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80045da:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <_cbOnUARTTx+0x5c>)
 80045dc:	785b      	ldrb	r3, [r3, #1]
 80045de:	3301      	adds	r3, #1
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <_cbOnUARTTx+0x5c>)
 80045e4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80045e6:	2301      	movs	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80045ea:	e00f      	b.n	800460c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <_cbOnUARTTx+0x5c>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fa19 	bl	8004a2c <SEGGER_RTT_ReadUpBufferNoLock>
 80045fa:	4603      	mov	r3, r0
 80045fc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	da02      	bge.n	800460a <_cbOnUARTTx+0x4e>
    r = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e000      	b.n	800460c <_cbOnUARTTx+0x50>
  }
Done:
 800460a:	bf00      	nop
  return r;
 800460c:	68fb      	ldr	r3, [r7, #12]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000014 	.word	0x20000014
 800461c:	08006f08 	.word	0x08006f08

08004620 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004628:	4a04      	ldr	r2, [pc, #16]	; (800463c <SEGGER_UART_init+0x1c>)
 800462a:	4905      	ldr	r1, [pc, #20]	; (8004640 <SEGGER_UART_init+0x20>)
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f863 	bl	80046f8 <HIF_UART_Init>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	0800457d 	.word	0x0800457d
 8004640:	080045bd 	.word	0x080045bd

08004644 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800464a:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <USART2_IRQHandler+0x80>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d011      	beq.n	800467e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800465a:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <USART2_IRQHandler+0x84>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 030b 	and.w	r3, r3, #11
 8004668:	2b00      	cmp	r3, #0
 800466a:	d108      	bne.n	800467e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800466c:	4b17      	ldr	r3, [pc, #92]	; (80046cc <USART2_IRQHandler+0x88>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004674:	4b15      	ldr	r3, [pc, #84]	; (80046cc <USART2_IRQHandler+0x88>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	79fa      	ldrb	r2, [r7, #7]
 800467a:	4610      	mov	r0, r2
 800467c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01a      	beq.n	80046be <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <USART2_IRQHandler+0x8c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d015      	beq.n	80046bc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004690:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <USART2_IRQHandler+0x8c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	1dfa      	adds	r2, r7, #7
 8004696:	4610      	mov	r0, r2
 8004698:	4798      	blx	r3
 800469a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80046a2:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <USART2_IRQHandler+0x90>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a0b      	ldr	r2, [pc, #44]	; (80046d4 <USART2_IRQHandler+0x90>)
 80046a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e006      	b.n	80046be <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80046b0:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <USART2_IRQHandler+0x80>)
 80046b2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80046b4:	79fa      	ldrb	r2, [r7, #7]
 80046b6:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <USART2_IRQHandler+0x84>)
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e000      	b.n	80046be <USART2_IRQHandler+0x7a>
      return;
 80046bc:	bf00      	nop
    }
  }
}
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40004400 	.word	0x40004400
 80046c8:	40004404 	.word	0x40004404
 80046cc:	20012e8c 	.word	0x20012e8c
 80046d0:	20012e90 	.word	0x20012e90
 80046d4:	4000440c 	.word	0x4000440c

080046d8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80046e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e6:	6013      	str	r3, [r2, #0]
}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	4000440c 	.word	0x4000440c

080046f8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004704:	4b2e      	ldr	r3, [pc, #184]	; (80047c0 <HIF_UART_Init+0xc8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a2d      	ldr	r2, [pc, #180]	; (80047c0 <HIF_UART_Init+0xc8>)
 800470a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800470e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004710:	4b2c      	ldr	r3, [pc, #176]	; (80047c4 <HIF_UART_Init+0xcc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a2b      	ldr	r2, [pc, #172]	; (80047c4 <HIF_UART_Init+0xcc>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800471c:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <HIF_UART_Init+0xd0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004728:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004730:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004732:	4a25      	ldr	r2, [pc, #148]	; (80047c8 <HIF_UART_Init+0xd0>)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004738:	4b24      	ldr	r3, [pc, #144]	; (80047cc <HIF_UART_Init+0xd4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004744:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800474c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800474e:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <HIF_UART_Init+0xd4>)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004754:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <HIF_UART_Init+0xd8>)
 8004756:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800475a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800475c:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <HIF_UART_Init+0xdc>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <HIF_UART_Init+0xe0>)
 8004764:	2280      	movs	r2, #128	; 0x80
 8004766:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800476e:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <HIF_UART_Init+0xe4>)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	fbb2 f3f3 	udiv	r3, r2, r3
 8004776:	3301      	adds	r3, #1
 8004778:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004786:	d302      	bcc.n	800478e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004788:	f640 73ff 	movw	r3, #4095	; 0xfff
 800478c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <HIF_UART_Init+0xe8>)
 800479a:	b29b      	uxth	r3, r3
 800479c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800479e:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <HIF_UART_Init+0xec>)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80047a4:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <HIF_UART_Init+0xf0>)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80047aa:	2106      	movs	r1, #6
 80047ac:	2026      	movs	r0, #38	; 0x26
 80047ae:	f7ff feab 	bl	8004508 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80047b2:	2026      	movs	r0, #38	; 0x26
 80047b4:	f7ff fe8a 	bl	80044cc <__NVIC_EnableIRQ>
}
 80047b8:	bf00      	nop
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40023840 	.word	0x40023840
 80047c4:	40023830 	.word	0x40023830
 80047c8:	40020020 	.word	0x40020020
 80047cc:	40020000 	.word	0x40020000
 80047d0:	4000440c 	.word	0x4000440c
 80047d4:	40004410 	.word	0x40004410
 80047d8:	40004414 	.word	0x40004414
 80047dc:	05f5e100 	.word	0x05f5e100
 80047e0:	40004408 	.word	0x40004408
 80047e4:	20012e8c 	.word	0x20012e8c
 80047e8:	20012e90 	.word	0x20012e90

080047ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <_DoInit+0x98>)
 80047f4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2203      	movs	r2, #3
 80047fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2203      	movs	r2, #3
 8004800:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a20      	ldr	r2, [pc, #128]	; (8004888 <_DoInit+0x9c>)
 8004806:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a20      	ldr	r2, [pc, #128]	; (800488c <_DoInit+0xa0>)
 800480c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004814:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a17      	ldr	r2, [pc, #92]	; (8004888 <_DoInit+0x9c>)
 800482c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a17      	ldr	r2, [pc, #92]	; (8004890 <_DoInit+0xa4>)
 8004832:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2210      	movs	r2, #16
 8004838:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3307      	adds	r3, #7
 8004850:	4a10      	ldr	r2, [pc, #64]	; (8004894 <_DoInit+0xa8>)
 8004852:	6810      	ldr	r0, [r2, #0]
 8004854:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004856:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a0e      	ldr	r2, [pc, #56]	; (8004898 <_DoInit+0xac>)
 800485e:	6810      	ldr	r0, [r2, #0]
 8004860:	6018      	str	r0, [r3, #0]
 8004862:	8891      	ldrh	r1, [r2, #4]
 8004864:	7992      	ldrb	r2, [r2, #6]
 8004866:	8099      	strh	r1, [r3, #4]
 8004868:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800486a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004874:	f3bf 8f5f 	dmb	sy
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20013870 	.word	0x20013870
 8004888:	08006ec8 	.word	0x08006ec8
 800488c:	20012e94 	.word	0x20012e94
 8004890:	20013294 	.word	0x20013294
 8004894:	08006ed4 	.word	0x08006ed4
 8004898:	08006ed8 	.word	0x08006ed8

0800489c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80048a8:	2300      	movs	r3, #0
 80048aa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d905      	bls.n	80048cc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	e007      	b.n	80048dc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	69b9      	ldr	r1, [r7, #24]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	1acb      	subs	r3, r1, r3
 80048d6:	4413      	add	r3, r2
 80048d8:	3b01      	subs	r3, #1
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e6:	4293      	cmp	r3, r2
 80048e8:	bf28      	it	cs
 80048ea:	4613      	movcs	r3, r2
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80048ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4293      	cmp	r3, r2
 80048f4:	bf28      	it	cs
 80048f6:	4613      	movcs	r3, r2
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	6978      	ldr	r0, [r7, #20]
 800490a:	f002 fa07 	bl	8006d1c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800490e:	6a3a      	ldr	r2, [r7, #32]
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	4413      	add	r3, r2
 8004914:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	4413      	add	r3, r2
 800491c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	4413      	add	r3, r2
 800492c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	429a      	cmp	r2, r3
 8004936:	d101      	bne.n	800493c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004938:	2300      	movs	r3, #0
 800493a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800493c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1b2      	bne.n	80048b2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800494c:	6a3b      	ldr	r3, [r7, #32]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3728      	adds	r7, #40	; 0x28
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004956:	b580      	push	{r7, lr}
 8004958:	b088      	sub	sp, #32
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	429a      	cmp	r2, r3
 8004978:	d911      	bls.n	800499e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	6938      	ldr	r0, [r7, #16]
 800498a:	f002 f9c7 	bl	8006d1c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800498e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	441a      	add	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800499c:	e01f      	b.n	80049de <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	6938      	ldr	r0, [r7, #16]
 80049b2:	f002 f9b3 	bl	8006d1c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	4413      	add	r3, r2
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4619      	mov	r1, r3
 80049ce:	6938      	ldr	r0, [r7, #16]
 80049d0:	f002 f9a4 	bl	8006d1c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80049d4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	60da      	str	r2, [r3, #12]
}
 80049de:	bf00      	nop
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80049e6:	b480      	push	{r7}
 80049e8:	b087      	sub	sp, #28
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d808      	bhi.n	8004a14 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad2      	subs	r2, r2, r3
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e004      	b.n	8004a1e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004a1e:	697b      	ldr	r3, [r7, #20]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08c      	sub	sp, #48	; 0x30
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004a38:	4b3e      	ldr	r3, [pc, #248]	; (8004b34 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004a3a:	623b      	str	r3, [r7, #32]
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004a46:	f7ff fed1 	bl	80047ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	4613      	mov	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4413      	add	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4a37      	ldr	r2, [pc, #220]	; (8004b34 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004a58:	4413      	add	r3, r2
 8004a5a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d92b      	bls.n	8004ad0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4293      	cmp	r3, r2
 8004a88:	bf28      	it	cs
 8004a8a:	4613      	movcs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	4413      	add	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	6939      	ldr	r1, [r7, #16]
 8004a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a9e:	f002 f93d 	bl	8006d1c <memcpy>
    NumBytesRead += NumBytesRem;
 8004aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	4413      	add	r3, r2
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	4413      	add	r3, r2
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d101      	bne.n	8004ad0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004acc:	2300      	movs	r3, #0
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4293      	cmp	r3, r2
 8004ade:	bf28      	it	cs
 8004ae0:	4613      	movcs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d019      	beq.n	8004b1e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	4413      	add	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	6939      	ldr	r1, [r7, #16]
 8004af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004afa:	f002 f90f 	bl	8006d1c <memcpy>
    NumBytesRead += NumBytesRem;
 8004afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	4413      	add	r3, r2
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b28:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3730      	adds	r7, #48	; 0x30
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20013870 	.word	0x20013870

08004b38 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08c      	sub	sp, #48	; 0x30
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004b44:	4b3e      	ldr	r3, [pc, #248]	; (8004c40 <SEGGER_RTT_ReadNoLock+0x108>)
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <SEGGER_RTT_ReadNoLock+0x1e>
 8004b52:	f7ff fe4b 	bl	80047ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4413      	add	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	3360      	adds	r3, #96	; 0x60
 8004b62:	4a37      	ldr	r2, [pc, #220]	; (8004c40 <SEGGER_RTT_ReadNoLock+0x108>)
 8004b64:	4413      	add	r3, r2
 8004b66:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d92b      	bls.n	8004bdc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4293      	cmp	r3, r2
 8004b94:	bf28      	it	cs
 8004b96:	4613      	movcs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	4413      	add	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	6939      	ldr	r1, [r7, #16]
 8004ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004baa:	f002 f8b7 	bl	8006d1c <memcpy>
    NumBytesRead += NumBytesRem;
 8004bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	4413      	add	r3, r2
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	4413      	add	r3, r2
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d101      	bne.n	8004bdc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4293      	cmp	r3, r2
 8004bea:	bf28      	it	cs
 8004bec:	4613      	movcs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d019      	beq.n	8004c2a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	4413      	add	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	6939      	ldr	r1, [r7, #16]
 8004c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c06:	f002 f889 	bl	8006d1c <memcpy>
    NumBytesRead += NumBytesRem;
 8004c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4413      	add	r3, r2
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	4413      	add	r3, r2
 8004c28:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c34:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3730      	adds	r7, #48	; 0x30
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20013870 	.word	0x20013870

08004c44 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4613      	mov	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	3360      	adds	r3, #96	; 0x60
 8004c60:	4a1f      	ldr	r2, [pc, #124]	; (8004ce0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004c62:	4413      	add	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d029      	beq.n	8004cc2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d82e      	bhi.n	8004cd0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d013      	beq.n	8004ca2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004c7a:	e029      	b.n	8004cd0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004c7c:	6978      	ldr	r0, [r7, #20]
 8004c7e:	f7ff feb2 	bl	80049e6 <_GetAvailWriteSpace>
 8004c82:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d202      	bcs.n	8004c92 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004c90:	e021      	b.n	8004cd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	69b9      	ldr	r1, [r7, #24]
 8004c9a:	6978      	ldr	r0, [r7, #20]
 8004c9c:	f7ff fe5b 	bl	8004956 <_WriteNoCheck>
    break;
 8004ca0:	e019      	b.n	8004cd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004ca2:	6978      	ldr	r0, [r7, #20]
 8004ca4:	f7ff fe9f 	bl	80049e6 <_GetAvailWriteSpace>
 8004ca8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	bf28      	it	cs
 8004cb2:	4613      	movcs	r3, r2
 8004cb4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	69b9      	ldr	r1, [r7, #24]
 8004cba:	6978      	ldr	r0, [r7, #20]
 8004cbc:	f7ff fe4b 	bl	8004956 <_WriteNoCheck>
    break;
 8004cc0:	e009      	b.n	8004cd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	69b9      	ldr	r1, [r7, #24]
 8004cc6:	6978      	ldr	r0, [r7, #20]
 8004cc8:	f7ff fde8 	bl	800489c <_WriteBlocking>
 8004ccc:	61f8      	str	r0, [r7, #28]
    break;
 8004cce:	e002      	b.n	8004cd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
    break;
 8004cd4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004cd6:	69fb      	ldr	r3, [r7, #28]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20013870 	.word	0x20013870

08004ce4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004cf0:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004cf2:	61fb      	str	r3, [r7, #28]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004cfe:	f7ff fd75 	bl	80047ec <_DoInit>
  SEGGER_RTT_LOCK();
 8004d02:	f3ef 8311 	mrs	r3, BASEPRI
 8004d06:	f04f 0120 	mov.w	r1, #32
 8004d0a:	f381 8811 	msr	BASEPRI, r1
 8004d0e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff ff95 	bl	8004c44 <SEGGER_RTT_WriteDownBufferNoLock>
 8004d1a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004d22:	697b      	ldr	r3, [r7, #20]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20013870 	.word	0x20013870

08004d30 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004d4c:	f7ff fd4e 	bl	80047ec <_DoInit>
  SEGGER_RTT_LOCK();
 8004d50:	f3ef 8311 	mrs	r3, BASEPRI
 8004d54:	f04f 0120 	mov.w	r1, #32
 8004d58:	f381 8811 	msr	BASEPRI, r1
 8004d5c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d5e:	4b35      	ldr	r3, [pc, #212]	; (8004e34 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004d60:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004d66:	6939      	ldr	r1, [r7, #16]
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	4413      	add	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	440b      	add	r3, r1
 8004d76:	3304      	adds	r3, #4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	3301      	adds	r3, #1
 8004d82:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	dbeb      	blt.n	8004d66 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004d8e:	e000      	b.n	8004d92 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004d90:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	da3f      	bge.n	8004e1c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004d9c:	6939      	ldr	r1, [r7, #16]
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	4613      	mov	r3, r2
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	4413      	add	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	440b      	add	r3, r1
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004db0:	6939      	ldr	r1, [r7, #16]
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	4613      	mov	r3, r2
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	4413      	add	r3, r2
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	440b      	add	r3, r1
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004dc6:	6939      	ldr	r1, [r7, #16]
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	4413      	add	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	440b      	add	r3, r1
 8004dd4:	3320      	adds	r3, #32
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004dda:	6939      	ldr	r1, [r7, #16]
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	4613      	mov	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	440b      	add	r3, r1
 8004de8:	3328      	adds	r3, #40	; 0x28
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004dee:	6939      	ldr	r1, [r7, #16]
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	4613      	mov	r3, r2
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	4413      	add	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	440b      	add	r3, r1
 8004dfc:	3324      	adds	r3, #36	; 0x24
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004e02:	6939      	ldr	r1, [r7, #16]
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	4613      	mov	r3, r2
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	4413      	add	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	440b      	add	r3, r1
 8004e10:	332c      	adds	r3, #44	; 0x2c
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e16:	f3bf 8f5f 	dmb	sy
 8004e1a:	e002      	b.n	8004e22 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e20:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004e28:	69fb      	ldr	r3, [r7, #28]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20013870 	.word	0x20013870

08004e38 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004e46:	4b33      	ldr	r3, [pc, #204]	; (8004f14 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004e54:	f7ff fcca 	bl	80047ec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e58:	4b2e      	ldr	r3, [pc, #184]	; (8004f14 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004e5a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	461a      	mov	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d24d      	bcs.n	8004f04 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004e68:	f3ef 8311 	mrs	r3, BASEPRI
 8004e6c:	f04f 0120 	mov.w	r1, #32
 8004e70:	f381 8811 	msr	BASEPRI, r1
 8004e74:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d031      	beq.n	8004ee0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004e7c:	6979      	ldr	r1, [r7, #20]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4613      	mov	r3, r2
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4413      	add	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	440b      	add	r3, r1
 8004e8a:	3360      	adds	r3, #96	; 0x60
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004e90:	6979      	ldr	r1, [r7, #20]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4613      	mov	r3, r2
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	4413      	add	r3, r2
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	440b      	add	r3, r1
 8004e9e:	3364      	adds	r3, #100	; 0x64
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4413      	add	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3368      	adds	r3, #104	; 0x68
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004eb8:	6979      	ldr	r1, [r7, #20]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	4413      	add	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	440b      	add	r3, r1
 8004ec6:	3370      	adds	r3, #112	; 0x70
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004ecc:	6979      	ldr	r1, [r7, #20]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	4413      	add	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	440b      	add	r3, r1
 8004eda:	336c      	adds	r3, #108	; 0x6c
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004ee0:	6979      	ldr	r1, [r7, #20]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	4413      	add	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	440b      	add	r3, r1
 8004eee:	3374      	adds	r3, #116	; 0x74
 8004ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ef2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ef4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	e002      	b.n	8004f0a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004f04:	f04f 33ff 	mov.w	r3, #4294967295
 8004f08:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3720      	adds	r7, #32
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20013870 	.word	0x20013870

08004f18 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004f28:	e002      	b.n	8004f30 <_EncodeStr+0x18>
    Len++;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4413      	add	r3, r2
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f6      	bne.n	8004f2a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d901      	bls.n	8004f48 <_EncodeStr+0x30>
    Len = Limit;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2bfe      	cmp	r3, #254	; 0xfe
 8004f4c:	d806      	bhi.n	8004f5c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	60fa      	str	r2, [r7, #12]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	e011      	b.n	8004f80 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	60fa      	str	r2, [r7, #12]
 8004f62:	22ff      	movs	r2, #255	; 0xff
 8004f64:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	60fa      	str	r2, [r7, #12]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	0a19      	lsrs	r1, r3, #8
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	60fa      	str	r2, [r7, #12]
 8004f7c:	b2ca      	uxtb	r2, r1
 8004f7e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004f84:	e00a      	b.n	8004f9c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	1c53      	adds	r3, r2, #1
 8004f8a:	60bb      	str	r3, [r7, #8]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1c59      	adds	r1, r3, #1
 8004f90:	60f9      	str	r1, [r7, #12]
 8004f92:	7812      	ldrb	r2, [r2, #0]
 8004f94:	701a      	strb	r2, [r3, #0]
    n++;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d3f0      	bcc.n	8004f86 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3304      	adds	r3, #4
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004fd2:	4b36      	ldr	r3, [pc, #216]	; (80050ac <_HandleIncomingPacket+0xe0>)
 8004fd4:	7e1b      	ldrb	r3, [r3, #24]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	1cfb      	adds	r3, r7, #3
 8004fda:	2201      	movs	r2, #1
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f7ff fdab 	bl	8004b38 <SEGGER_RTT_ReadNoLock>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	dd54      	ble.n	8005096 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d032      	beq.n	8005058 <_HandleIncomingPacket+0x8c>
 8004ff2:	2b80      	cmp	r3, #128	; 0x80
 8004ff4:	dc42      	bgt.n	800507c <_HandleIncomingPacket+0xb0>
 8004ff6:	2b07      	cmp	r3, #7
 8004ff8:	dc16      	bgt.n	8005028 <_HandleIncomingPacket+0x5c>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	dd3e      	ble.n	800507c <_HandleIncomingPacket+0xb0>
 8004ffe:	3b01      	subs	r3, #1
 8005000:	2b06      	cmp	r3, #6
 8005002:	d83b      	bhi.n	800507c <_HandleIncomingPacket+0xb0>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <_HandleIncomingPacket+0x40>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	0800502f 	.word	0x0800502f
 8005010:	08005035 	.word	0x08005035
 8005014:	0800503b 	.word	0x0800503b
 8005018:	08005041 	.word	0x08005041
 800501c:	08005047 	.word	0x08005047
 8005020:	0800504d 	.word	0x0800504d
 8005024:	08005053 	.word	0x08005053
 8005028:	2b7f      	cmp	r3, #127	; 0x7f
 800502a:	d036      	beq.n	800509a <_HandleIncomingPacket+0xce>
 800502c:	e026      	b.n	800507c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800502e:	f000 ff45 	bl	8005ebc <SEGGER_SYSVIEW_Start>
      break;
 8005032:	e037      	b.n	80050a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005034:	f000 fffe 	bl	8006034 <SEGGER_SYSVIEW_Stop>
      break;
 8005038:	e034      	b.n	80050a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800503a:	f001 f9d7 	bl	80063ec <SEGGER_SYSVIEW_RecordSystime>
      break;
 800503e:	e031      	b.n	80050a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005040:	f001 f99c 	bl	800637c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005044:	e02e      	b.n	80050a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005046:	f001 f81b 	bl	8006080 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800504a:	e02b      	b.n	80050a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800504c:	f001 fc6a 	bl	8006924 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005050:	e028      	b.n	80050a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005052:	f001 fc49 	bl	80068e8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005056:	e025      	b.n	80050a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005058:	4b14      	ldr	r3, [pc, #80]	; (80050ac <_HandleIncomingPacket+0xe0>)
 800505a:	7e1b      	ldrb	r3, [r3, #24]
 800505c:	4618      	mov	r0, r3
 800505e:	1cfb      	adds	r3, r7, #3
 8005060:	2201      	movs	r2, #1
 8005062:	4619      	mov	r1, r3
 8005064:	f7ff fd68 	bl	8004b38 <SEGGER_RTT_ReadNoLock>
 8005068:	4603      	mov	r3, r0
 800506a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	dd15      	ble.n	800509e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	4618      	mov	r0, r3
 8005076:	f001 fbb7 	bl	80067e8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800507a:	e010      	b.n	800509e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	b25b      	sxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	da0e      	bge.n	80050a2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005084:	4b09      	ldr	r3, [pc, #36]	; (80050ac <_HandleIncomingPacket+0xe0>)
 8005086:	7e1b      	ldrb	r3, [r3, #24]
 8005088:	4618      	mov	r0, r3
 800508a:	1cfb      	adds	r3, r7, #3
 800508c:	2201      	movs	r2, #1
 800508e:	4619      	mov	r1, r3
 8005090:	f7ff fd52 	bl	8004b38 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005094:	e005      	b.n	80050a2 <_HandleIncomingPacket+0xd6>
    }
  }
 8005096:	bf00      	nop
 8005098:	e004      	b.n	80050a4 <_HandleIncomingPacket+0xd8>
      break;
 800509a:	bf00      	nop
 800509c:	e002      	b.n	80050a4 <_HandleIncomingPacket+0xd8>
      break;
 800509e:	bf00      	nop
 80050a0:	e000      	b.n	80050a4 <_HandleIncomingPacket+0xd8>
      break;
 80050a2:	bf00      	nop
}
 80050a4:	bf00      	nop
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	200136ac 	.word	0x200136ac

080050b0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08c      	sub	sp, #48	; 0x30
 80050b4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80050b6:	2301      	movs	r3, #1
 80050b8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80050ba:	1d3b      	adds	r3, r7, #4
 80050bc:	3301      	adds	r3, #1
 80050be:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c4:	4b32      	ldr	r3, [pc, #200]	; (8005190 <_TrySendOverflowPacket+0xe0>)
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ca:	e00b      	b.n	80050e4 <_TrySendOverflowPacket+0x34>
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	1c59      	adds	r1, r3, #1
 80050d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	09db      	lsrs	r3, r3, #7
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	2b7f      	cmp	r3, #127	; 0x7f
 80050e8:	d8f0      	bhi.n	80050cc <_TrySendOverflowPacket+0x1c>
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80050fa:	4b26      	ldr	r3, [pc, #152]	; (8005194 <_TrySendOverflowPacket+0xe4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005100:	4b23      	ldr	r3, [pc, #140]	; (8005190 <_TrySendOverflowPacket+0xe0>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	623b      	str	r3, [r7, #32]
 8005112:	e00b      	b.n	800512c <_TrySendOverflowPacket+0x7c>
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	b2da      	uxtb	r2, r3
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	1c59      	adds	r1, r3, #1
 800511c:	6279      	str	r1, [r7, #36]	; 0x24
 800511e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	09db      	lsrs	r3, r3, #7
 800512a:	623b      	str	r3, [r7, #32]
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	2b7f      	cmp	r3, #127	; 0x7f
 8005130:	d8f0      	bhi.n	8005114 <_TrySendOverflowPacket+0x64>
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	627a      	str	r2, [r7, #36]	; 0x24
 8005138:	6a3a      	ldr	r2, [r7, #32]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005142:	4b13      	ldr	r3, [pc, #76]	; (8005190 <_TrySendOverflowPacket+0xe0>)
 8005144:	785b      	ldrb	r3, [r3, #1]
 8005146:	4618      	mov	r0, r3
 8005148:	1d3b      	adds	r3, r7, #4
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	461a      	mov	r2, r3
 8005150:	1d3b      	adds	r3, r7, #4
 8005152:	4619      	mov	r1, r3
 8005154:	f7fb f844 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005158:	4603      	mov	r3, r0
 800515a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800515c:	f7ff fabc 	bl	80046d8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005166:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <_TrySendOverflowPacket+0xe0>)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800516c:	4b08      	ldr	r3, [pc, #32]	; (8005190 <_TrySendOverflowPacket+0xe0>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	3b01      	subs	r3, #1
 8005172:	b2da      	uxtb	r2, r3
 8005174:	4b06      	ldr	r3, [pc, #24]	; (8005190 <_TrySendOverflowPacket+0xe0>)
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	e004      	b.n	8005184 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <_TrySendOverflowPacket+0xe0>)
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	3301      	adds	r3, #1
 8005180:	4a03      	ldr	r2, [pc, #12]	; (8005190 <_TrySendOverflowPacket+0xe0>)
 8005182:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005184:	693b      	ldr	r3, [r7, #16]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3730      	adds	r7, #48	; 0x30
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	200136ac 	.word	0x200136ac
 8005194:	e0001004 	.word	0xe0001004

08005198 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	; 0x28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80051a4:	4b6d      	ldr	r3, [pc, #436]	; (800535c <_SendPacket+0x1c4>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d010      	beq.n	80051ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80051ac:	4b6b      	ldr	r3, [pc, #428]	; (800535c <_SendPacket+0x1c4>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80a5 	beq.w	8005300 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80051b6:	4b69      	ldr	r3, [pc, #420]	; (800535c <_SendPacket+0x1c4>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d109      	bne.n	80051d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80051be:	f7ff ff77 	bl	80050b0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80051c2:	4b66      	ldr	r3, [pc, #408]	; (800535c <_SendPacket+0x1c4>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	f040 809c 	bne.w	8005304 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80051cc:	e001      	b.n	80051d2 <_SendPacket+0x3a>
    goto Send;
 80051ce:	bf00      	nop
 80051d0:	e000      	b.n	80051d4 <_SendPacket+0x3c>
Send:
 80051d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b1f      	cmp	r3, #31
 80051d8:	d809      	bhi.n	80051ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80051da:	4b60      	ldr	r3, [pc, #384]	; (800535c <_SendPacket+0x1c4>)
 80051dc:	69da      	ldr	r2, [r3, #28]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f040 808d 	bne.w	8005308 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b17      	cmp	r3, #23
 80051f2:	d807      	bhi.n	8005204 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e03d      	b.n	8005280 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b7f      	cmp	r3, #127	; 0x7f
 8005210:	d912      	bls.n	8005238 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	09da      	lsrs	r2, r3, #7
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b01      	subs	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	3a01      	subs	r2, #1
 800522a:	60fa      	str	r2, [r7, #12]
 800522c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005230:	b2da      	uxtb	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	e006      	b.n	8005246 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3b01      	subs	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b7f      	cmp	r3, #127	; 0x7f
 800524a:	d912      	bls.n	8005272 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	09da      	lsrs	r2, r3, #7
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3b01      	subs	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	3a01      	subs	r2, #1
 8005264:	60fa      	str	r2, [r7, #12]
 8005266:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800526a:	b2da      	uxtb	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e006      	b.n	8005280 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3b01      	subs	r3, #1
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005280:	4b37      	ldr	r3, [pc, #220]	; (8005360 <_SendPacket+0x1c8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005286:	4b35      	ldr	r3, [pc, #212]	; (800535c <_SendPacket+0x1c4>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	623b      	str	r3, [r7, #32]
 8005298:	e00b      	b.n	80052b2 <_SendPacket+0x11a>
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	1c59      	adds	r1, r3, #1
 80052a2:	6279      	str	r1, [r7, #36]	; 0x24
 80052a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	09db      	lsrs	r3, r3, #7
 80052b0:	623b      	str	r3, [r7, #32]
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	2b7f      	cmp	r3, #127	; 0x7f
 80052b6:	d8f0      	bhi.n	800529a <_SendPacket+0x102>
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	627a      	str	r2, [r7, #36]	; 0x24
 80052be:	6a3a      	ldr	r2, [r7, #32]
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80052c8:	4b24      	ldr	r3, [pc, #144]	; (800535c <_SendPacket+0x1c4>)
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	4618      	mov	r0, r3
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	f7fa ff82 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80052dc:	4603      	mov	r3, r0
 80052de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80052e0:	f7ff f9fa 	bl	80046d8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80052ea:	4a1c      	ldr	r2, [pc, #112]	; (800535c <_SendPacket+0x1c4>)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	60d3      	str	r3, [r2, #12]
 80052f0:	e00b      	b.n	800530a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80052f2:	4b1a      	ldr	r3, [pc, #104]	; (800535c <_SendPacket+0x1c4>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	3301      	adds	r3, #1
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	4b18      	ldr	r3, [pc, #96]	; (800535c <_SendPacket+0x1c4>)
 80052fc:	701a      	strb	r2, [r3, #0]
 80052fe:	e004      	b.n	800530a <_SendPacket+0x172>
    goto SendDone;
 8005300:	bf00      	nop
 8005302:	e002      	b.n	800530a <_SendPacket+0x172>
      goto SendDone;
 8005304:	bf00      	nop
 8005306:	e000      	b.n	800530a <_SendPacket+0x172>
      goto SendDone;
 8005308:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800530a:	4b14      	ldr	r3, [pc, #80]	; (800535c <_SendPacket+0x1c4>)
 800530c:	7e1b      	ldrb	r3, [r3, #24]
 800530e:	4619      	mov	r1, r3
 8005310:	4a14      	ldr	r2, [pc, #80]	; (8005364 <_SendPacket+0x1cc>)
 8005312:	460b      	mov	r3, r1
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	440b      	add	r3, r1
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4413      	add	r3, r2
 800531c:	336c      	adds	r3, #108	; 0x6c
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4b0e      	ldr	r3, [pc, #56]	; (800535c <_SendPacket+0x1c4>)
 8005322:	7e1b      	ldrb	r3, [r3, #24]
 8005324:	4618      	mov	r0, r3
 8005326:	490f      	ldr	r1, [pc, #60]	; (8005364 <_SendPacket+0x1cc>)
 8005328:	4603      	mov	r3, r0
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	4403      	add	r3, r0
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	440b      	add	r3, r1
 8005332:	3370      	adds	r3, #112	; 0x70
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d00b      	beq.n	8005352 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800533a:	4b08      	ldr	r3, [pc, #32]	; (800535c <_SendPacket+0x1c4>)
 800533c:	789b      	ldrb	r3, [r3, #2]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d107      	bne.n	8005352 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <_SendPacket+0x1c4>)
 8005344:	2201      	movs	r2, #1
 8005346:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005348:	f7ff fe40 	bl	8004fcc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <_SendPacket+0x1c4>)
 800534e:	2200      	movs	r2, #0
 8005350:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005352:	bf00      	nop
 8005354:	3728      	adds	r7, #40	; 0x28
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	200136ac 	.word	0x200136ac
 8005360:	e0001004 	.word	0xe0001004
 8005364:	20013870 	.word	0x20013870

08005368 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	3301      	adds	r3, #1
 800537e:	2b80      	cmp	r3, #128	; 0x80
 8005380:	d80a      	bhi.n	8005398 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	1c59      	adds	r1, r3, #1
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6051      	str	r1, [r2, #4]
 800538c:	78fa      	ldrb	r2, [r7, #3]
 800538e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	2b80      	cmp	r3, #128	; 0x80
 800539e:	d15a      	bne.n	8005456 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	b2d2      	uxtb	r2, r2
 80053aa:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	623b      	str	r3, [r7, #32]
 80053c0:	e00b      	b.n	80053da <_StoreChar+0x72>
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	1c59      	adds	r1, r3, #1
 80053ca:	6279      	str	r1, [r7, #36]	; 0x24
 80053cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	09db      	lsrs	r3, r3, #7
 80053d8:	623b      	str	r3, [r7, #32]
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	2b7f      	cmp	r3, #127	; 0x7f
 80053de:	d8f0      	bhi.n	80053c2 <_StoreChar+0x5a>
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	627a      	str	r2, [r7, #36]	; 0x24
 80053e6:	6a3a      	ldr	r2, [r7, #32]
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	2300      	movs	r3, #0
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	e00b      	b.n	8005412 <_StoreChar+0xaa>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	1c59      	adds	r1, r3, #1
 8005402:	61f9      	str	r1, [r7, #28]
 8005404:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	09db      	lsrs	r3, r3, #7
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	2b7f      	cmp	r3, #127	; 0x7f
 8005416:	d8f0      	bhi.n	80053fa <_StoreChar+0x92>
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	61fa      	str	r2, [r7, #28]
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	221a      	movs	r2, #26
 800542e:	6939      	ldr	r1, [r7, #16]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff feb1 	bl	8005198 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff fdb9 	bl	8004fb2 <_PreparePacket>
 8005440:	4602      	mov	r2, r0
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	611a      	str	r2, [r3, #16]
  }
}
 8005456:	bf00      	nop
 8005458:	3728      	adds	r7, #40	; 0x28
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	; 0x28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005472:	2301      	movs	r3, #1
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005476:	2301      	movs	r3, #1
 8005478:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800547a:	e007      	b.n	800548c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800547c:	6a3a      	ldr	r2, [r7, #32]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	623b      	str	r3, [r7, #32]
    Width++;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	3301      	adds	r3, #1
 800548a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800548c:	6a3a      	ldr	r2, [r7, #32]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d2f3      	bcs.n	800547c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	429a      	cmp	r2, r3
 800549a:	d901      	bls.n	80054a0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80054a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d11f      	bne.n	80054ea <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01c      	beq.n	80054ea <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80054b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <_PrintUnsigned+0x66>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <_PrintUnsigned+0x66>
        c = '0';
 80054c0:	2330      	movs	r3, #48	; 0x30
 80054c2:	76fb      	strb	r3, [r7, #27]
 80054c4:	e001      	b.n	80054ca <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80054c6:	2320      	movs	r3, #32
 80054c8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80054ca:	e007      	b.n	80054dc <_PrintUnsigned+0x7c>
        FieldWidth--;
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	3b01      	subs	r3, #1
 80054d0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80054d2:	7efb      	ldrb	r3, [r7, #27]
 80054d4:	4619      	mov	r1, r3
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f7ff ff46 	bl	8005368 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <_PrintUnsigned+0x8a>
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d3f0      	bcc.n	80054cc <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d903      	bls.n	80054f8 <_PrintUnsigned+0x98>
      NumDigits--;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	603b      	str	r3, [r7, #0]
 80054f6:	e009      	b.n	800550c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	429a      	cmp	r2, r3
 8005508:	d200      	bcs.n	800550c <_PrintUnsigned+0xac>
        break;
 800550a:	e005      	b.n	8005518 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	fb02 f303 	mul.w	r3, r2, r3
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005516:	e7e8      	b.n	80054ea <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005526:	fb02 f303 	mul.w	r3, r2, r3
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005530:	4a15      	ldr	r2, [pc, #84]	; (8005588 <_PrintUnsigned+0x128>)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	4413      	add	r3, r2
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	4619      	mov	r1, r3
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff ff14 	bl	8005368 <_StoreChar>
    Digit /= Base;
 8005540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e3      	bne.n	8005518 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d011      	beq.n	800557e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00e      	beq.n	800557e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005560:	e006      	b.n	8005570 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	3b01      	subs	r3, #1
 8005566:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005568:	2120      	movs	r1, #32
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f7ff fefc 	bl	8005368 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <_PrintUnsigned+0x11e>
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	429a      	cmp	r2, r3
 800557c:	d3f1      	bcc.n	8005562 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800557e:	bf00      	nop
 8005580:	3728      	adds	r7, #40	; 0x28
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	08006f18 	.word	0x08006f18

0800558c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	bfb8      	it	lt
 80055a0:	425b      	neglt	r3, r3
 80055a2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80055a4:	2301      	movs	r3, #1
 80055a6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80055a8:	e007      	b.n	80055ba <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80055b2:	613b      	str	r3, [r7, #16]
    Width++;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	3301      	adds	r3, #1
 80055b8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	429a      	cmp	r2, r3
 80055c0:	daf3      	bge.n	80055aa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d901      	bls.n	80055ce <_PrintInt+0x42>
    Width = NumDigits;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <_PrintInt+0x5e>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	db04      	blt.n	80055e4 <_PrintInt+0x58>
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <_PrintInt+0x5e>
    FieldWidth--;
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <_PrintInt+0x6e>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d016      	beq.n	8005628 <_PrintInt+0x9c>
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d111      	bne.n	8005628 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00e      	beq.n	8005628 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800560a:	e006      	b.n	800561a <_PrintInt+0x8e>
        FieldWidth--;
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	3b01      	subs	r3, #1
 8005610:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005612:	2120      	movs	r1, #32
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff fea7 	bl	8005368 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <_PrintInt+0x9c>
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	429a      	cmp	r2, r3
 8005626:	d3f1      	bcc.n	800560c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	da07      	bge.n	800563e <_PrintInt+0xb2>
    v = -v;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	425b      	negs	r3, r3
 8005632:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005634:	212d      	movs	r1, #45	; 0x2d
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f7ff fe96 	bl	8005368 <_StoreChar>
 800563c:	e008      	b.n	8005650 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005648:	212b      	movs	r1, #43	; 0x2b
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff fe8c 	bl	8005368 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d019      	beq.n	800568e <_PrintInt+0x102>
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d114      	bne.n	800568e <_PrintInt+0x102>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d111      	bne.n	800568e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00e      	beq.n	800568e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005670:	e006      	b.n	8005680 <_PrintInt+0xf4>
        FieldWidth--;
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	3b01      	subs	r3, #1
 8005676:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005678:	2130      	movs	r1, #48	; 0x30
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f7ff fe74 	bl	8005368 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <_PrintInt+0x102>
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	429a      	cmp	r2, r3
 800568c:	d3f1      	bcc.n	8005672 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff fedf 	bl	8005460 <_PrintUnsigned>
}
 80056a2:	bf00      	nop
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b098      	sub	sp, #96	; 0x60
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80056b8:	f3ef 8311 	mrs	r3, BASEPRI
 80056bc:	f04f 0120 	mov.w	r1, #32
 80056c0:	f381 8811 	msr	BASEPRI, r1
 80056c4:	633b      	str	r3, [r7, #48]	; 0x30
 80056c6:	48b7      	ldr	r0, [pc, #732]	; (80059a4 <_VPrintTarget+0x2f8>)
 80056c8:	f7ff fc73 	bl	8004fb2 <_PreparePacket>
 80056cc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80056ce:	4bb5      	ldr	r3, [pc, #724]	; (80059a4 <_VPrintTarget+0x2f8>)
 80056d0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	3301      	adds	r3, #1
 80056de:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80056f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8183 	beq.w	8005a02 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80056fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005700:	2b25      	cmp	r3, #37	; 0x25
 8005702:	f040 8170 	bne.w	80059e6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005706:	2300      	movs	r3, #0
 8005708:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800570a:	2301      	movs	r3, #1
 800570c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005716:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800571a:	3b23      	subs	r3, #35	; 0x23
 800571c:	2b0d      	cmp	r3, #13
 800571e:	d83f      	bhi.n	80057a0 <_VPrintTarget+0xf4>
 8005720:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <_VPrintTarget+0x7c>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	08005791 	.word	0x08005791
 800572c:	080057a1 	.word	0x080057a1
 8005730:	080057a1 	.word	0x080057a1
 8005734:	080057a1 	.word	0x080057a1
 8005738:	080057a1 	.word	0x080057a1
 800573c:	080057a1 	.word	0x080057a1
 8005740:	080057a1 	.word	0x080057a1
 8005744:	080057a1 	.word	0x080057a1
 8005748:	08005781 	.word	0x08005781
 800574c:	080057a1 	.word	0x080057a1
 8005750:	08005761 	.word	0x08005761
 8005754:	080057a1 	.word	0x080057a1
 8005758:	080057a1 	.word	0x080057a1
 800575c:	08005771 	.word	0x08005771
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005762:	f043 0301 	orr.w	r3, r3, #1
 8005766:	64bb      	str	r3, [r7, #72]	; 0x48
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3301      	adds	r3, #1
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	e01a      	b.n	80057a6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005772:	f043 0302 	orr.w	r3, r3, #2
 8005776:	64bb      	str	r3, [r7, #72]	; 0x48
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3301      	adds	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	e012      	b.n	80057a6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005782:	f043 0304 	orr.w	r3, r3, #4
 8005786:	64bb      	str	r3, [r7, #72]	; 0x48
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e00a      	b.n	80057a6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005792:	f043 0308 	orr.w	r3, r3, #8
 8005796:	64bb      	str	r3, [r7, #72]	; 0x48
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3301      	adds	r3, #1
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	e002      	b.n	80057a6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80057a0:	2300      	movs	r3, #0
 80057a2:	653b      	str	r3, [r7, #80]	; 0x50
 80057a4:	bf00      	nop
        }
      } while (v);
 80057a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1b0      	bne.n	800570e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80057ac:	2300      	movs	r3, #0
 80057ae:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80057b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057bc:	2b2f      	cmp	r3, #47	; 0x2f
 80057be:	d912      	bls.n	80057e6 <_VPrintTarget+0x13a>
 80057c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057c4:	2b39      	cmp	r3, #57	; 0x39
 80057c6:	d80e      	bhi.n	80057e6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80057ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	461a      	mov	r2, r3
 80057da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057de:	4413      	add	r3, r2
 80057e0:	3b30      	subs	r3, #48	; 0x30
 80057e2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80057e4:	e7e4      	b.n	80057b0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80057e6:	2300      	movs	r3, #0
 80057e8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80057f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057f6:	2b2e      	cmp	r3, #46	; 0x2e
 80057f8:	d11d      	bne.n	8005836 <_VPrintTarget+0x18a>
        sFormat++;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3301      	adds	r3, #1
 80057fe:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005808:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800580c:	2b2f      	cmp	r3, #47	; 0x2f
 800580e:	d912      	bls.n	8005836 <_VPrintTarget+0x18a>
 8005810:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005814:	2b39      	cmp	r3, #57	; 0x39
 8005816:	d80e      	bhi.n	8005836 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3301      	adds	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800581e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	461a      	mov	r2, r3
 800582a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800582e:	4413      	add	r3, r2
 8005830:	3b30      	subs	r3, #48	; 0x30
 8005832:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005834:	e7e4      	b.n	8005800 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800583e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005842:	2b6c      	cmp	r3, #108	; 0x6c
 8005844:	d003      	beq.n	800584e <_VPrintTarget+0x1a2>
 8005846:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800584a:	2b68      	cmp	r3, #104	; 0x68
 800584c:	d107      	bne.n	800585e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3301      	adds	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800585c:	e7ef      	b.n	800583e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800585e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005862:	2b25      	cmp	r3, #37	; 0x25
 8005864:	f000 80b3 	beq.w	80059ce <_VPrintTarget+0x322>
 8005868:	2b25      	cmp	r3, #37	; 0x25
 800586a:	f2c0 80b7 	blt.w	80059dc <_VPrintTarget+0x330>
 800586e:	2b78      	cmp	r3, #120	; 0x78
 8005870:	f300 80b4 	bgt.w	80059dc <_VPrintTarget+0x330>
 8005874:	2b58      	cmp	r3, #88	; 0x58
 8005876:	f2c0 80b1 	blt.w	80059dc <_VPrintTarget+0x330>
 800587a:	3b58      	subs	r3, #88	; 0x58
 800587c:	2b20      	cmp	r3, #32
 800587e:	f200 80ad 	bhi.w	80059dc <_VPrintTarget+0x330>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <_VPrintTarget+0x1dc>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	0800597f 	.word	0x0800597f
 800588c:	080059dd 	.word	0x080059dd
 8005890:	080059dd 	.word	0x080059dd
 8005894:	080059dd 	.word	0x080059dd
 8005898:	080059dd 	.word	0x080059dd
 800589c:	080059dd 	.word	0x080059dd
 80058a0:	080059dd 	.word	0x080059dd
 80058a4:	080059dd 	.word	0x080059dd
 80058a8:	080059dd 	.word	0x080059dd
 80058ac:	080059dd 	.word	0x080059dd
 80058b0:	080059dd 	.word	0x080059dd
 80058b4:	0800590d 	.word	0x0800590d
 80058b8:	08005933 	.word	0x08005933
 80058bc:	080059dd 	.word	0x080059dd
 80058c0:	080059dd 	.word	0x080059dd
 80058c4:	080059dd 	.word	0x080059dd
 80058c8:	080059dd 	.word	0x080059dd
 80058cc:	080059dd 	.word	0x080059dd
 80058d0:	080059dd 	.word	0x080059dd
 80058d4:	080059dd 	.word	0x080059dd
 80058d8:	080059dd 	.word	0x080059dd
 80058dc:	080059dd 	.word	0x080059dd
 80058e0:	080059dd 	.word	0x080059dd
 80058e4:	080059dd 	.word	0x080059dd
 80058e8:	080059a9 	.word	0x080059a9
 80058ec:	080059dd 	.word	0x080059dd
 80058f0:	080059dd 	.word	0x080059dd
 80058f4:	080059dd 	.word	0x080059dd
 80058f8:	080059dd 	.word	0x080059dd
 80058fc:	08005959 	.word	0x08005959
 8005900:	080059dd 	.word	0x080059dd
 8005904:	080059dd 	.word	0x080059dd
 8005908:	0800597f 	.word	0x0800597f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	1d19      	adds	r1, r3, #4
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6011      	str	r1, [r2, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800591a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800591c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005920:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005924:	f107 0314 	add.w	r3, r7, #20
 8005928:	4611      	mov	r1, r2
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fd1c 	bl	8005368 <_StoreChar>
        break;
 8005930:	e055      	b.n	80059de <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	1d19      	adds	r1, r3, #4
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6011      	str	r1, [r2, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005940:	f107 0014 	add.w	r0, r7, #20
 8005944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800594e:	220a      	movs	r2, #10
 8005950:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005952:	f7ff fe1b 	bl	800558c <_PrintInt>
        break;
 8005956:	e042      	b.n	80059de <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	1d19      	adds	r1, r3, #4
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6011      	str	r1, [r2, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005966:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005968:	f107 0014 	add.w	r0, r7, #20
 800596c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800596e:	9301      	str	r3, [sp, #4]
 8005970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005976:	220a      	movs	r2, #10
 8005978:	f7ff fd72 	bl	8005460 <_PrintUnsigned>
        break;
 800597c:	e02f      	b.n	80059de <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	1d19      	adds	r1, r3, #4
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6011      	str	r1, [r2, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800598c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800598e:	f107 0014 	add.w	r0, r7, #20
 8005992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800599c:	2210      	movs	r2, #16
 800599e:	f7ff fd5f 	bl	8005460 <_PrintUnsigned>
        break;
 80059a2:	e01c      	b.n	80059de <_VPrintTarget+0x332>
 80059a4:	200136dc 	.word	0x200136dc
      case 'p':
        v = va_arg(*pParamList, int);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	1d19      	adds	r1, r3, #4
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6011      	str	r1, [r2, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80059b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059b8:	f107 0014 	add.w	r0, r7, #20
 80059bc:	2300      	movs	r3, #0
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	2308      	movs	r3, #8
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	2308      	movs	r3, #8
 80059c6:	2210      	movs	r2, #16
 80059c8:	f7ff fd4a 	bl	8005460 <_PrintUnsigned>
        break;
 80059cc:	e007      	b.n	80059de <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80059ce:	f107 0314 	add.w	r3, r7, #20
 80059d2:	2125      	movs	r1, #37	; 0x25
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fcc7 	bl	8005368 <_StoreChar>
        break;
 80059da:	e000      	b.n	80059de <_VPrintTarget+0x332>
      default:
        break;
 80059dc:	bf00      	nop
      }
      sFormat++;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	e007      	b.n	80059f6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80059e6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80059ea:	f107 0314 	add.w	r3, r7, #20
 80059ee:	4611      	mov	r1, r2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff fcb9 	bl	8005368 <_StoreChar>
    }
  } while (*sFormat);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f47f ae72 	bne.w	80056e4 <_VPrintTarget+0x38>
 8005a00:	e000      	b.n	8005a04 <_VPrintTarget+0x358>
      break;
 8005a02:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d041      	beq.n	8005a8e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	643b      	str	r3, [r7, #64]	; 0x40
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a1a:	e00b      	b.n	8005a34 <_VPrintTarget+0x388>
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a22:	1c59      	adds	r1, r3, #1
 8005a24:	6439      	str	r1, [r7, #64]	; 0x40
 8005a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a30:	09db      	lsrs	r3, r3, #7
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a36:	2b7f      	cmp	r3, #127	; 0x7f
 8005a38:	d8f0      	bhi.n	8005a1c <_VPrintTarget+0x370>
 8005a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	643a      	str	r2, [r7, #64]	; 0x40
 8005a40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a48:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a4e:	2300      	movs	r3, #0
 8005a50:	637b      	str	r3, [r7, #52]	; 0x34
 8005a52:	e00b      	b.n	8005a6c <_VPrintTarget+0x3c0>
 8005a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	1c59      	adds	r1, r3, #1
 8005a5c:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a68:	09db      	lsrs	r3, r3, #7
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a70:	d8f0      	bhi.n	8005a54 <_VPrintTarget+0x3a8>
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	221a      	movs	r2, #26
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff fb85 	bl	8005198 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005a94:	bf00      	nop
 8005a96:	3758      	adds	r7, #88	; 0x58
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ab0:	4917      	ldr	r1, [pc, #92]	; (8005b10 <SEGGER_SYSVIEW_Init+0x74>)
 8005ab2:	4818      	ldr	r0, [pc, #96]	; (8005b14 <SEGGER_SYSVIEW_Init+0x78>)
 8005ab4:	f7ff f93c 	bl	8004d30 <SEGGER_RTT_AllocUpBuffer>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	4b16      	ldr	r3, [pc, #88]	; (8005b18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005abe:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005ac0:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ac2:	785a      	ldrb	r2, [r3, #1]
 8005ac4:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ac6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ac8:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005aca:	7e1b      	ldrb	r3, [r3, #24]
 8005acc:	4618      	mov	r0, r3
 8005ace:	2300      	movs	r3, #0
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	2308      	movs	r3, #8
 8005ad4:	4a11      	ldr	r2, [pc, #68]	; (8005b1c <SEGGER_SYSVIEW_Init+0x80>)
 8005ad6:	490f      	ldr	r1, [pc, #60]	; (8005b14 <SEGGER_SYSVIEW_Init+0x78>)
 8005ad8:	f7ff f9ae 	bl	8004e38 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005adc:	4b0e      	ldr	r3, [pc, #56]	; (8005b18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ae2:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <SEGGER_SYSVIEW_Init+0x84>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a0c      	ldr	r2, [pc, #48]	; (8005b18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ae8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005aea:	4a0b      	ldr	r2, [pc, #44]	; (8005b18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005af0:	4a09      	ldr	r2, [pc, #36]	; (8005b18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005af6:	4a08      	ldr	r2, [pc, #32]	; (8005b18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005afc:	4a06      	ldr	r2, [pc, #24]	; (8005b18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	200132a4 	.word	0x200132a4
 8005b14:	08006ee0 	.word	0x08006ee0
 8005b18:	200136ac 	.word	0x200136ac
 8005b1c:	200136a4 	.word	0x200136a4
 8005b20:	e0001004 	.word	0xe0001004

08005b24 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005b2c:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6113      	str	r3, [r2, #16]
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	200136ac 	.word	0x200136ac

08005b44 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b50:	f04f 0120 	mov.w	r1, #32
 8005b54:	f381 8811 	msr	BASEPRI, r1
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	4808      	ldr	r0, [pc, #32]	; (8005b7c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005b5c:	f7ff fa29 	bl	8004fb2 <_PreparePacket>
 8005b60:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	68b8      	ldr	r0, [r7, #8]
 8005b68:	f7ff fb16 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f383 8811 	msr	BASEPRI, r3
}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200136dc 	.word	0x200136dc

08005b80 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b8e:	f04f 0120 	mov.w	r1, #32
 8005b92:	f381 8811 	msr	BASEPRI, r1
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	4816      	ldr	r0, [pc, #88]	; (8005bf4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005b9a:	f7ff fa0a 	bl	8004fb2 <_PreparePacket>
 8005b9e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	e00b      	b.n	8005bc6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	1c59      	adds	r1, r3, #1
 8005bb6:	61f9      	str	r1, [r7, #28]
 8005bb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	09db      	lsrs	r3, r3, #7
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bca:	d8f0      	bhi.n	8005bae <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	61fa      	str	r2, [r7, #28]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	68f9      	ldr	r1, [r7, #12]
 8005be0:	6938      	ldr	r0, [r7, #16]
 8005be2:	f7ff fad9 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f383 8811 	msr	BASEPRI, r3
}
 8005bec:	bf00      	nop
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	200136dc 	.word	0x200136dc

08005bf8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08c      	sub	sp, #48	; 0x30
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c04:	f3ef 8311 	mrs	r3, BASEPRI
 8005c08:	f04f 0120 	mov.w	r1, #32
 8005c0c:	f381 8811 	msr	BASEPRI, r1
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	4825      	ldr	r0, [pc, #148]	; (8005ca8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005c14:	f7ff f9cd 	bl	8004fb2 <_PreparePacket>
 8005c18:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c26:	e00b      	b.n	8005c40 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	1c59      	adds	r1, r3, #1
 8005c30:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	09db      	lsrs	r3, r3, #7
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	2b7f      	cmp	r3, #127	; 0x7f
 8005c44:	d8f0      	bhi.n	8005c28 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	623b      	str	r3, [r7, #32]
 8005c5e:	e00b      	b.n	8005c78 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	1c59      	adds	r1, r3, #1
 8005c68:	6279      	str	r1, [r7, #36]	; 0x24
 8005c6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	09db      	lsrs	r3, r3, #7
 8005c76:	623b      	str	r3, [r7, #32]
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c7c:	d8f0      	bhi.n	8005c60 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	627a      	str	r2, [r7, #36]	; 0x24
 8005c84:	6a3a      	ldr	r2, [r7, #32]
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	6979      	ldr	r1, [r7, #20]
 8005c92:	69b8      	ldr	r0, [r7, #24]
 8005c94:	f7ff fa80 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f383 8811 	msr	BASEPRI, r3
}
 8005c9e:	bf00      	nop
 8005ca0:	3730      	adds	r7, #48	; 0x30
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	200136dc 	.word	0x200136dc

08005cac <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08e      	sub	sp, #56	; 0x38
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cba:	f3ef 8311 	mrs	r3, BASEPRI
 8005cbe:	f04f 0120 	mov.w	r1, #32
 8005cc2:	f381 8811 	msr	BASEPRI, r1
 8005cc6:	61fb      	str	r3, [r7, #28]
 8005cc8:	4832      	ldr	r0, [pc, #200]	; (8005d94 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005cca:	f7ff f972 	bl	8004fb2 <_PreparePacket>
 8005cce:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	633b      	str	r3, [r7, #48]	; 0x30
 8005cdc:	e00b      	b.n	8005cf6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce4:	1c59      	adds	r1, r3, #1
 8005ce6:	6379      	str	r1, [r7, #52]	; 0x34
 8005ce8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	09db      	lsrs	r3, r3, #7
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cfa:	d8f0      	bhi.n	8005cde <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	637a      	str	r2, [r7, #52]	; 0x34
 8005d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d14:	e00b      	b.n	8005d2e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	1c59      	adds	r1, r3, #1
 8005d1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	09db      	lsrs	r3, r3, #7
 8005d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	2b7f      	cmp	r3, #127	; 0x7f
 8005d32:	d8f0      	bhi.n	8005d16 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	623b      	str	r3, [r7, #32]
 8005d4c:	e00b      	b.n	8005d66 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	1c59      	adds	r1, r3, #1
 8005d56:	6279      	str	r1, [r7, #36]	; 0x24
 8005d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	09db      	lsrs	r3, r3, #7
 8005d64:	623b      	str	r3, [r7, #32]
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	2b7f      	cmp	r3, #127	; 0x7f
 8005d6a:	d8f0      	bhi.n	8005d4e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	627a      	str	r2, [r7, #36]	; 0x24
 8005d72:	6a3a      	ldr	r2, [r7, #32]
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	6979      	ldr	r1, [r7, #20]
 8005d80:	69b8      	ldr	r0, [r7, #24]
 8005d82:	f7ff fa09 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	f383 8811 	msr	BASEPRI, r3
}
 8005d8c:	bf00      	nop
 8005d8e:	3738      	adds	r7, #56	; 0x38
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	200136dc 	.word	0x200136dc

08005d98 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b090      	sub	sp, #64	; 0x40
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005da6:	f3ef 8311 	mrs	r3, BASEPRI
 8005daa:	f04f 0120 	mov.w	r1, #32
 8005dae:	f381 8811 	msr	BASEPRI, r1
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	4840      	ldr	r0, [pc, #256]	; (8005eb8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005db6:	f7ff f8fc 	bl	8004fb2 <_PreparePacket>
 8005dba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dc8:	e00b      	b.n	8005de2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd0:	1c59      	adds	r1, r3, #1
 8005dd2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	09db      	lsrs	r3, r3, #7
 8005de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	2b7f      	cmp	r3, #127	; 0x7f
 8005de6:	d8f0      	bhi.n	8005dca <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8005e00:	e00b      	b.n	8005e1a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e08:	1c59      	adds	r1, r3, #1
 8005e0a:	6379      	str	r1, [r7, #52]	; 0x34
 8005e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	09db      	lsrs	r3, r3, #7
 8005e18:	633b      	str	r3, [r7, #48]	; 0x30
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e1e:	d8f0      	bhi.n	8005e02 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	637a      	str	r2, [r7, #52]	; 0x34
 8005e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e38:	e00b      	b.n	8005e52 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e40:	1c59      	adds	r1, r3, #1
 8005e42:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	09db      	lsrs	r3, r3, #7
 8005e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	2b7f      	cmp	r3, #127	; 0x7f
 8005e56:	d8f0      	bhi.n	8005e3a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e6e:	623b      	str	r3, [r7, #32]
 8005e70:	e00b      	b.n	8005e8a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	1c59      	adds	r1, r3, #1
 8005e7a:	6279      	str	r1, [r7, #36]	; 0x24
 8005e7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	09db      	lsrs	r3, r3, #7
 8005e88:	623b      	str	r3, [r7, #32]
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8e:	d8f0      	bhi.n	8005e72 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	627a      	str	r2, [r7, #36]	; 0x24
 8005e96:	6a3a      	ldr	r2, [r7, #32]
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	6979      	ldr	r1, [r7, #20]
 8005ea4:	69b8      	ldr	r0, [r7, #24]
 8005ea6:	f7ff f977 	bl	8005198 <_SendPacket>
  RECORD_END();
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f383 8811 	msr	BASEPRI, r3
}
 8005eb0:	bf00      	nop
 8005eb2:	3740      	adds	r7, #64	; 0x40
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	200136dc 	.word	0x200136dc

08005ebc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08c      	sub	sp, #48	; 0x30
 8005ec0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005ec2:	4b59      	ldr	r3, [pc, #356]	; (8006028 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005ec8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ecc:	f04f 0120 	mov.w	r1, #32
 8005ed0:	f381 8811 	msr	BASEPRI, r1
 8005ed4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005ed6:	4b54      	ldr	r3, [pc, #336]	; (8006028 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ed8:	785b      	ldrb	r3, [r3, #1]
 8005eda:	220a      	movs	r2, #10
 8005edc:	4953      	ldr	r1, [pc, #332]	; (800602c <SEGGER_SYSVIEW_Start+0x170>)
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fa f97e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005eea:	f7fe fbf5 	bl	80046d8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005eee:	200a      	movs	r0, #10
 8005ef0:	f7ff fe28 	bl	8005b44 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ef4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ef8:	f04f 0120 	mov.w	r1, #32
 8005efc:	f381 8811 	msr	BASEPRI, r1
 8005f00:	60bb      	str	r3, [r7, #8]
 8005f02:	484b      	ldr	r0, [pc, #300]	; (8006030 <SEGGER_SYSVIEW_Start+0x174>)
 8005f04:	f7ff f855 	bl	8004fb2 <_PreparePacket>
 8005f08:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f12:	4b45      	ldr	r3, [pc, #276]	; (8006028 <SEGGER_SYSVIEW_Start+0x16c>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f18:	e00b      	b.n	8005f32 <SEGGER_SYSVIEW_Start+0x76>
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	1c59      	adds	r1, r3, #1
 8005f22:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	09db      	lsrs	r3, r3, #7
 8005f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	2b7f      	cmp	r3, #127	; 0x7f
 8005f36:	d8f0      	bhi.n	8005f1a <SEGGER_SYSVIEW_Start+0x5e>
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f4c:	4b36      	ldr	r3, [pc, #216]	; (8006028 <SEGGER_SYSVIEW_Start+0x16c>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	623b      	str	r3, [r7, #32]
 8005f52:	e00b      	b.n	8005f6c <SEGGER_SYSVIEW_Start+0xb0>
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	1c59      	adds	r1, r3, #1
 8005f5c:	6279      	str	r1, [r7, #36]	; 0x24
 8005f5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	09db      	lsrs	r3, r3, #7
 8005f6a:	623b      	str	r3, [r7, #32]
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f70:	d8f0      	bhi.n	8005f54 <SEGGER_SYSVIEW_Start+0x98>
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	627a      	str	r2, [r7, #36]	; 0x24
 8005f78:	6a3a      	ldr	r2, [r7, #32]
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	61fb      	str	r3, [r7, #28]
 8005f86:	4b28      	ldr	r3, [pc, #160]	; (8006028 <SEGGER_SYSVIEW_Start+0x16c>)
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	61bb      	str	r3, [r7, #24]
 8005f8c:	e00b      	b.n	8005fa6 <SEGGER_SYSVIEW_Start+0xea>
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	1c59      	adds	r1, r3, #1
 8005f96:	61f9      	str	r1, [r7, #28]
 8005f98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	09db      	lsrs	r3, r3, #7
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8005faa:	d8f0      	bhi.n	8005f8e <SEGGER_SYSVIEW_Start+0xd2>
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	61fa      	str	r2, [r7, #28]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	e00b      	b.n	8005fde <SEGGER_SYSVIEW_Start+0x122>
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	1c59      	adds	r1, r3, #1
 8005fce:	6179      	str	r1, [r7, #20]
 8005fd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	09db      	lsrs	r3, r3, #7
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe2:	d8f0      	bhi.n	8005fc6 <SEGGER_SYSVIEW_Start+0x10a>
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	617a      	str	r2, [r7, #20]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ff4:	2218      	movs	r2, #24
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff f8cd 	bl	8005198 <_SendPacket>
      RECORD_END();
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006004:	4b08      	ldr	r3, [pc, #32]	; (8006028 <SEGGER_SYSVIEW_Start+0x16c>)
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800600c:	4b06      	ldr	r3, [pc, #24]	; (8006028 <SEGGER_SYSVIEW_Start+0x16c>)
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006012:	f000 f9eb 	bl	80063ec <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006016:	f000 f9b1 	bl	800637c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800601a:	f000 fc83 	bl	8006924 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800601e:	bf00      	nop
 8006020:	3730      	adds	r7, #48	; 0x30
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	200136ac 	.word	0x200136ac
 800602c:	08006f0c 	.word	0x08006f0c
 8006030:	200136dc 	.word	0x200136dc

08006034 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800603a:	f3ef 8311 	mrs	r3, BASEPRI
 800603e:	f04f 0120 	mov.w	r1, #32
 8006042:	f381 8811 	msr	BASEPRI, r1
 8006046:	607b      	str	r3, [r7, #4]
 8006048:	480b      	ldr	r0, [pc, #44]	; (8006078 <SEGGER_SYSVIEW_Stop+0x44>)
 800604a:	f7fe ffb2 	bl	8004fb2 <_PreparePacket>
 800604e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <SEGGER_SYSVIEW_Stop+0x48>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006058:	220b      	movs	r2, #11
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	6838      	ldr	r0, [r7, #0]
 800605e:	f7ff f89b 	bl	8005198 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006062:	4b06      	ldr	r3, [pc, #24]	; (800607c <SEGGER_SYSVIEW_Stop+0x48>)
 8006064:	2200      	movs	r2, #0
 8006066:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f383 8811 	msr	BASEPRI, r3
}
 800606e:	bf00      	nop
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	200136dc 	.word	0x200136dc
 800607c:	200136ac 	.word	0x200136ac

08006080 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006080:	b580      	push	{r7, lr}
 8006082:	b08c      	sub	sp, #48	; 0x30
 8006084:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006086:	f3ef 8311 	mrs	r3, BASEPRI
 800608a:	f04f 0120 	mov.w	r1, #32
 800608e:	f381 8811 	msr	BASEPRI, r1
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	4845      	ldr	r0, [pc, #276]	; (80061ac <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006096:	f7fe ff8c 	bl	8004fb2 <_PreparePacket>
 800609a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a4:	4b42      	ldr	r3, [pc, #264]	; (80061b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060aa:	e00b      	b.n	80060c4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	1c59      	adds	r1, r3, #1
 80060b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	09db      	lsrs	r3, r3, #7
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	2b7f      	cmp	r3, #127	; 0x7f
 80060c8:	d8f0      	bhi.n	80060ac <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
 80060de:	4b34      	ldr	r3, [pc, #208]	; (80061b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	623b      	str	r3, [r7, #32]
 80060e4:	e00b      	b.n	80060fe <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	1c59      	adds	r1, r3, #1
 80060ee:	6279      	str	r1, [r7, #36]	; 0x24
 80060f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	09db      	lsrs	r3, r3, #7
 80060fc:	623b      	str	r3, [r7, #32]
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	2b7f      	cmp	r3, #127	; 0x7f
 8006102:	d8f0      	bhi.n	80060e6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	627a      	str	r2, [r7, #36]	; 0x24
 800610a:	6a3a      	ldr	r2, [r7, #32]
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	4b25      	ldr	r3, [pc, #148]	; (80061b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	e00b      	b.n	8006138 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	b2da      	uxtb	r2, r3
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	1c59      	adds	r1, r3, #1
 8006128:	61f9      	str	r1, [r7, #28]
 800612a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	09db      	lsrs	r3, r3, #7
 8006136:	61bb      	str	r3, [r7, #24]
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	2b7f      	cmp	r3, #127	; 0x7f
 800613c:	d8f0      	bhi.n	8006120 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	61fa      	str	r2, [r7, #28]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	e00b      	b.n	8006170 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	b2da      	uxtb	r2, r3
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	1c59      	adds	r1, r3, #1
 8006160:	6179      	str	r1, [r7, #20]
 8006162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	09db      	lsrs	r3, r3, #7
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b7f      	cmp	r3, #127	; 0x7f
 8006174:	d8f0      	bhi.n	8006158 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	617a      	str	r2, [r7, #20]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006186:	2218      	movs	r2, #24
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	68b8      	ldr	r0, [r7, #8]
 800618c:	f7ff f804 	bl	8005198 <_SendPacket>
  RECORD_END();
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006196:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	4798      	blx	r3
  }
}
 80061a4:	bf00      	nop
 80061a6:	3730      	adds	r7, #48	; 0x30
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	200136dc 	.word	0x200136dc
 80061b0:	200136ac 	.word	0x200136ac

080061b4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b092      	sub	sp, #72	; 0x48
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80061bc:	f3ef 8311 	mrs	r3, BASEPRI
 80061c0:	f04f 0120 	mov.w	r1, #32
 80061c4:	f381 8811 	msr	BASEPRI, r1
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	486a      	ldr	r0, [pc, #424]	; (8006374 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80061cc:	f7fe fef1 	bl	8004fb2 <_PreparePacket>
 80061d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	647b      	str	r3, [r7, #68]	; 0x44
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	4b66      	ldr	r3, [pc, #408]	; (8006378 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	643b      	str	r3, [r7, #64]	; 0x40
 80061e6:	e00b      	b.n	8006200 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80061e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ee:	1c59      	adds	r1, r3, #1
 80061f0:	6479      	str	r1, [r7, #68]	; 0x44
 80061f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fc:	09db      	lsrs	r3, r3, #7
 80061fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006202:	2b7f      	cmp	r3, #127	; 0x7f
 8006204:	d8f0      	bhi.n	80061e8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	647a      	str	r2, [r7, #68]	; 0x44
 800620c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006214:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006220:	e00b      	b.n	800623a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	b2da      	uxtb	r2, r3
 8006226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006228:	1c59      	adds	r1, r3, #1
 800622a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800622c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006236:	09db      	lsrs	r3, r3, #7
 8006238:	63bb      	str	r3, [r7, #56]	; 0x38
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	2b7f      	cmp	r3, #127	; 0x7f
 800623e:	d8f0      	bhi.n	8006222 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	701a      	strb	r2, [r3, #0]
 800624c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2220      	movs	r2, #32
 8006256:	4619      	mov	r1, r3
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f7fe fe5d 	bl	8004f18 <_EncodeStr>
 800625e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006260:	2209      	movs	r2, #9
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	6938      	ldr	r0, [r7, #16]
 8006266:	f7fe ff97 	bl	8005198 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	4b40      	ldr	r3, [pc, #256]	; (8006378 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	633b      	str	r3, [r7, #48]	; 0x30
 800627e:	e00b      	b.n	8006298 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	b2da      	uxtb	r2, r3
 8006284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006286:	1c59      	adds	r1, r3, #1
 8006288:	6379      	str	r1, [r7, #52]	; 0x34
 800628a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	09db      	lsrs	r3, r3, #7
 8006296:	633b      	str	r3, [r7, #48]	; 0x30
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	2b7f      	cmp	r3, #127	; 0x7f
 800629c:	d8f0      	bhi.n	8006280 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	637a      	str	r2, [r7, #52]	; 0x34
 80062a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b8:	e00b      	b.n	80062d2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	1c59      	adds	r1, r3, #1
 80062c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	09db      	lsrs	r3, r3, #7
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	2b7f      	cmp	r3, #127	; 0x7f
 80062d6:	d8f0      	bhi.n	80062ba <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	623b      	str	r3, [r7, #32]
 80062f2:	e00b      	b.n	800630c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	1c59      	adds	r1, r3, #1
 80062fc:	6279      	str	r1, [r7, #36]	; 0x24
 80062fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	09db      	lsrs	r3, r3, #7
 800630a:	623b      	str	r3, [r7, #32]
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	2b7f      	cmp	r3, #127	; 0x7f
 8006310:	d8f0      	bhi.n	80062f4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	627a      	str	r2, [r7, #36]	; 0x24
 8006318:	6a3a      	ldr	r2, [r7, #32]
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	61fb      	str	r3, [r7, #28]
 8006326:	2300      	movs	r3, #0
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	e00b      	b.n	8006344 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	b2da      	uxtb	r2, r3
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	1c59      	adds	r1, r3, #1
 8006334:	61f9      	str	r1, [r7, #28]
 8006336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	09db      	lsrs	r3, r3, #7
 8006342:	61bb      	str	r3, [r7, #24]
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b7f      	cmp	r3, #127	; 0x7f
 8006348:	d8f0      	bhi.n	800632c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	61fa      	str	r2, [r7, #28]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800635a:	2215      	movs	r2, #21
 800635c:	68f9      	ldr	r1, [r7, #12]
 800635e:	6938      	ldr	r0, [r7, #16]
 8006360:	f7fe ff1a 	bl	8005198 <_SendPacket>
  RECORD_END();
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f383 8811 	msr	BASEPRI, r3
}
 800636a:	bf00      	nop
 800636c:	3748      	adds	r7, #72	; 0x48
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	200136dc 	.word	0x200136dc
 8006378:	200136ac 	.word	0x200136ac

0800637c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006380:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006392:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	4798      	blx	r3
  }
}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	200136ac 	.word	0x200136ac

080063a4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063ac:	f3ef 8311 	mrs	r3, BASEPRI
 80063b0:	f04f 0120 	mov.w	r1, #32
 80063b4:	f381 8811 	msr	BASEPRI, r1
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	480b      	ldr	r0, [pc, #44]	; (80063e8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80063bc:	f7fe fdf9 	bl	8004fb2 <_PreparePacket>
 80063c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063c2:	2280      	movs	r2, #128	; 0x80
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	6938      	ldr	r0, [r7, #16]
 80063c8:	f7fe fda6 	bl	8004f18 <_EncodeStr>
 80063cc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80063ce:	220e      	movs	r2, #14
 80063d0:	68f9      	ldr	r1, [r7, #12]
 80063d2:	6938      	ldr	r0, [r7, #16]
 80063d4:	f7fe fee0 	bl	8005198 <_SendPacket>
  RECORD_END();
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f383 8811 	msr	BASEPRI, r3
}
 80063de:	bf00      	nop
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	200136dc 	.word	0x200136dc

080063ec <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80063ec:	b590      	push	{r4, r7, lr}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d01a      	beq.n	8006430 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80063fa:	4b13      	ldr	r3, [pc, #76]	; (8006448 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d015      	beq.n	8006430 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006404:	4b10      	ldr	r3, [pc, #64]	; (8006448 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4798      	blx	r3
 800640c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006410:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006412:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	000a      	movs	r2, r1
 8006420:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006422:	4613      	mov	r3, r2
 8006424:	461a      	mov	r2, r3
 8006426:	4621      	mov	r1, r4
 8006428:	200d      	movs	r0, #13
 800642a:	f7ff fbe5 	bl	8005bf8 <SEGGER_SYSVIEW_RecordU32x2>
 800642e:	e006      	b.n	800643e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006430:	4b06      	ldr	r3, [pc, #24]	; (800644c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4619      	mov	r1, r3
 8006436:	200c      	movs	r0, #12
 8006438:	f7ff fba2 	bl	8005b80 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	bd90      	pop	{r4, r7, pc}
 8006446:	bf00      	nop
 8006448:	200136ac 	.word	0x200136ac
 800644c:	e0001004 	.word	0xe0001004

08006450 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006456:	f3ef 8311 	mrs	r3, BASEPRI
 800645a:	f04f 0120 	mov.w	r1, #32
 800645e:	f381 8811 	msr	BASEPRI, r1
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	4819      	ldr	r0, [pc, #100]	; (80064cc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006466:	f7fe fda4 	bl	8004fb2 <_PreparePacket>
 800646a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006470:	4b17      	ldr	r3, [pc, #92]	; (80064d0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006478:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	e00b      	b.n	800649c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	1c59      	adds	r1, r3, #1
 800648c:	6179      	str	r1, [r7, #20]
 800648e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	09db      	lsrs	r3, r3, #7
 800649a:	613b      	str	r3, [r7, #16]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b7f      	cmp	r3, #127	; 0x7f
 80064a0:	d8f0      	bhi.n	8006484 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	617a      	str	r2, [r7, #20]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80064b2:	2202      	movs	r2, #2
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	68b8      	ldr	r0, [r7, #8]
 80064b8:	f7fe fe6e 	bl	8005198 <_SendPacket>
  RECORD_END();
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f383 8811 	msr	BASEPRI, r3
}
 80064c2:	bf00      	nop
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	200136dc 	.word	0x200136dc
 80064d0:	e000ed04 	.word	0xe000ed04

080064d4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064da:	f3ef 8311 	mrs	r3, BASEPRI
 80064de:	f04f 0120 	mov.w	r1, #32
 80064e2:	f381 8811 	msr	BASEPRI, r1
 80064e6:	607b      	str	r3, [r7, #4]
 80064e8:	4807      	ldr	r0, [pc, #28]	; (8006508 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80064ea:	f7fe fd62 	bl	8004fb2 <_PreparePacket>
 80064ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80064f0:	2203      	movs	r2, #3
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6838      	ldr	r0, [r7, #0]
 80064f6:	f7fe fe4f 	bl	8005198 <_SendPacket>
  RECORD_END();
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f383 8811 	msr	BASEPRI, r3
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	200136dc 	.word	0x200136dc

0800650c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006512:	f3ef 8311 	mrs	r3, BASEPRI
 8006516:	f04f 0120 	mov.w	r1, #32
 800651a:	f381 8811 	msr	BASEPRI, r1
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	4807      	ldr	r0, [pc, #28]	; (8006540 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006522:	f7fe fd46 	bl	8004fb2 <_PreparePacket>
 8006526:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006528:	2212      	movs	r2, #18
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6838      	ldr	r0, [r7, #0]
 800652e:	f7fe fe33 	bl	8005198 <_SendPacket>
  RECORD_END();
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f383 8811 	msr	BASEPRI, r3
}
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	200136dc 	.word	0x200136dc

08006544 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800654a:	f3ef 8311 	mrs	r3, BASEPRI
 800654e:	f04f 0120 	mov.w	r1, #32
 8006552:	f381 8811 	msr	BASEPRI, r1
 8006556:	607b      	str	r3, [r7, #4]
 8006558:	4807      	ldr	r0, [pc, #28]	; (8006578 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800655a:	f7fe fd2a 	bl	8004fb2 <_PreparePacket>
 800655e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006560:	2211      	movs	r2, #17
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6838      	ldr	r0, [r7, #0]
 8006566:	f7fe fe17 	bl	8005198 <_SendPacket>
  RECORD_END();
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f383 8811 	msr	BASEPRI, r3
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	200136dc 	.word	0x200136dc

0800657c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006584:	f3ef 8311 	mrs	r3, BASEPRI
 8006588:	f04f 0120 	mov.w	r1, #32
 800658c:	f381 8811 	msr	BASEPRI, r1
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	4819      	ldr	r0, [pc, #100]	; (80065f8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006594:	f7fe fd0d 	bl	8004fb2 <_PreparePacket>
 8006598:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800659e:	4b17      	ldr	r3, [pc, #92]	; (80065fc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	e00b      	b.n	80065ca <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	1c59      	adds	r1, r3, #1
 80065ba:	61f9      	str	r1, [r7, #28]
 80065bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	09db      	lsrs	r3, r3, #7
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	2b7f      	cmp	r3, #127	; 0x7f
 80065ce:	d8f0      	bhi.n	80065b2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	61fa      	str	r2, [r7, #28]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80065e0:	2208      	movs	r2, #8
 80065e2:	68f9      	ldr	r1, [r7, #12]
 80065e4:	6938      	ldr	r0, [r7, #16]
 80065e6:	f7fe fdd7 	bl	8005198 <_SendPacket>
  RECORD_END();
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f383 8811 	msr	BASEPRI, r3
}
 80065f0:	bf00      	nop
 80065f2:	3720      	adds	r7, #32
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	200136dc 	.word	0x200136dc
 80065fc:	200136ac 	.word	0x200136ac

08006600 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006608:	f3ef 8311 	mrs	r3, BASEPRI
 800660c:	f04f 0120 	mov.w	r1, #32
 8006610:	f381 8811 	msr	BASEPRI, r1
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	4819      	ldr	r0, [pc, #100]	; (800667c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006618:	f7fe fccb 	bl	8004fb2 <_PreparePacket>
 800661c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006622:	4b17      	ldr	r3, [pc, #92]	; (8006680 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	61fb      	str	r3, [r7, #28]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	e00b      	b.n	800664e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	1c59      	adds	r1, r3, #1
 800663e:	61f9      	str	r1, [r7, #28]
 8006640:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	09db      	lsrs	r3, r3, #7
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b7f      	cmp	r3, #127	; 0x7f
 8006652:	d8f0      	bhi.n	8006636 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	61fa      	str	r2, [r7, #28]
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006664:	2204      	movs	r2, #4
 8006666:	68f9      	ldr	r1, [r7, #12]
 8006668:	6938      	ldr	r0, [r7, #16]
 800666a:	f7fe fd95 	bl	8005198 <_SendPacket>
  RECORD_END();
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f383 8811 	msr	BASEPRI, r3
}
 8006674:	bf00      	nop
 8006676:	3720      	adds	r7, #32
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	200136dc 	.word	0x200136dc
 8006680:	200136ac 	.word	0x200136ac

08006684 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800668c:	f3ef 8311 	mrs	r3, BASEPRI
 8006690:	f04f 0120 	mov.w	r1, #32
 8006694:	f381 8811 	msr	BASEPRI, r1
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	4819      	ldr	r0, [pc, #100]	; (8006700 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800669c:	f7fe fc89 	bl	8004fb2 <_PreparePacket>
 80066a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066a6:	4b17      	ldr	r3, [pc, #92]	; (8006704 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	e00b      	b.n	80066d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	1c59      	adds	r1, r3, #1
 80066c2:	61f9      	str	r1, [r7, #28]
 80066c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	09db      	lsrs	r3, r3, #7
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b7f      	cmp	r3, #127	; 0x7f
 80066d6:	d8f0      	bhi.n	80066ba <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	61fa      	str	r2, [r7, #28]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80066e8:	2206      	movs	r2, #6
 80066ea:	68f9      	ldr	r1, [r7, #12]
 80066ec:	6938      	ldr	r0, [r7, #16]
 80066ee:	f7fe fd53 	bl	8005198 <_SendPacket>
  RECORD_END();
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f383 8811 	msr	BASEPRI, r3
}
 80066f8:	bf00      	nop
 80066fa:	3720      	adds	r7, #32
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	200136dc 	.word	0x200136dc
 8006704:	200136ac 	.word	0x200136ac

08006708 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b08a      	sub	sp, #40	; 0x28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006712:	f3ef 8311 	mrs	r3, BASEPRI
 8006716:	f04f 0120 	mov.w	r1, #32
 800671a:	f381 8811 	msr	BASEPRI, r1
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	4827      	ldr	r0, [pc, #156]	; (80067c0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006722:	f7fe fc46 	bl	8004fb2 <_PreparePacket>
 8006726:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800672c:	4b25      	ldr	r3, [pc, #148]	; (80067c4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	623b      	str	r3, [r7, #32]
 800673e:	e00b      	b.n	8006758 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	6279      	str	r1, [r7, #36]	; 0x24
 800674a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	09db      	lsrs	r3, r3, #7
 8006756:	623b      	str	r3, [r7, #32]
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	2b7f      	cmp	r3, #127	; 0x7f
 800675c:	d8f0      	bhi.n	8006740 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	627a      	str	r2, [r7, #36]	; 0x24
 8006764:	6a3a      	ldr	r2, [r7, #32]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	61fb      	str	r3, [r7, #28]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	e00b      	b.n	8006790 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	b2da      	uxtb	r2, r3
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	1c59      	adds	r1, r3, #1
 8006780:	61f9      	str	r1, [r7, #28]
 8006782:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	09db      	lsrs	r3, r3, #7
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2b7f      	cmp	r3, #127	; 0x7f
 8006794:	d8f0      	bhi.n	8006778 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	61fa      	str	r2, [r7, #28]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80067a6:	2207      	movs	r2, #7
 80067a8:	68f9      	ldr	r1, [r7, #12]
 80067aa:	6938      	ldr	r0, [r7, #16]
 80067ac:	f7fe fcf4 	bl	8005198 <_SendPacket>
  RECORD_END();
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f383 8811 	msr	BASEPRI, r3
}
 80067b6:	bf00      	nop
 80067b8:	3728      	adds	r7, #40	; 0x28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	200136dc 	.word	0x200136dc
 80067c4:	200136ac 	.word	0x200136ac

080067c8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80067d0:	4b04      	ldr	r3, [pc, #16]	; (80067e4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	1ad3      	subs	r3, r2, r3
}
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	200136ac 	.word	0x200136ac

080067e8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08c      	sub	sp, #48	; 0x30
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80067f2:	4b3b      	ldr	r3, [pc, #236]	; (80068e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d06d      	beq.n	80068d6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80067fa:	4b39      	ldr	r3, [pc, #228]	; (80068e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006800:	2300      	movs	r3, #0
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
 8006804:	e008      	b.n	8006818 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	3301      	adds	r3, #1
 8006816:	62bb      	str	r3, [r7, #40]	; 0x28
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800681c:	429a      	cmp	r2, r3
 800681e:	d3f2      	bcc.n	8006806 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006820:	e000      	b.n	8006824 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006822:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d055      	beq.n	80068d6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800682a:	f3ef 8311 	mrs	r3, BASEPRI
 800682e:	f04f 0120 	mov.w	r1, #32
 8006832:	f381 8811 	msr	BASEPRI, r1
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	482a      	ldr	r0, [pc, #168]	; (80068e4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800683a:	f7fe fbba 	bl	8004fb2 <_PreparePacket>
 800683e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	623b      	str	r3, [r7, #32]
 800684c:	e00b      	b.n	8006866 <SEGGER_SYSVIEW_SendModule+0x7e>
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	b2da      	uxtb	r2, r3
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	1c59      	adds	r1, r3, #1
 8006856:	6279      	str	r1, [r7, #36]	; 0x24
 8006858:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	09db      	lsrs	r3, r3, #7
 8006864:	623b      	str	r3, [r7, #32]
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	2b7f      	cmp	r3, #127	; 0x7f
 800686a:	d8f0      	bhi.n	800684e <SEGGER_SYSVIEW_SendModule+0x66>
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	627a      	str	r2, [r7, #36]	; 0x24
 8006872:	6a3a      	ldr	r2, [r7, #32]
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	e00b      	b.n	80068a0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	b2da      	uxtb	r2, r3
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	1c59      	adds	r1, r3, #1
 8006890:	61f9      	str	r1, [r7, #28]
 8006892:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	09db      	lsrs	r3, r3, #7
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b7f      	cmp	r3, #127	; 0x7f
 80068a4:	d8f0      	bhi.n	8006888 <SEGGER_SYSVIEW_SendModule+0xa0>
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	61fa      	str	r2, [r7, #28]
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2280      	movs	r2, #128	; 0x80
 80068bc:	4619      	mov	r1, r3
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7fe fb2a 	bl	8004f18 <_EncodeStr>
 80068c4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80068c6:	2216      	movs	r2, #22
 80068c8:	68f9      	ldr	r1, [r7, #12]
 80068ca:	6938      	ldr	r0, [r7, #16]
 80068cc:	f7fe fc64 	bl	8005198 <_SendPacket>
      RECORD_END();
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80068d6:	bf00      	nop
 80068d8:	3730      	adds	r7, #48	; 0x30
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	200136d4 	.word	0x200136d4
 80068e4:	200136dc 	.word	0x200136dc

080068e8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80068ee:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00f      	beq.n	8006916 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80068f6:	4b0a      	ldr	r3, [pc, #40]	; (8006920 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1f2      	bne.n	80068fc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	200136d4 	.word	0x200136d4

08006924 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800692a:	f3ef 8311 	mrs	r3, BASEPRI
 800692e:	f04f 0120 	mov.w	r1, #32
 8006932:	f381 8811 	msr	BASEPRI, r1
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	4817      	ldr	r0, [pc, #92]	; (8006998 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800693a:	f7fe fb3a 	bl	8004fb2 <_PreparePacket>
 800693e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	4b14      	ldr	r3, [pc, #80]	; (800699c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	e00b      	b.n	8006968 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	b2da      	uxtb	r2, r3
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	1c59      	adds	r1, r3, #1
 8006958:	6179      	str	r1, [r7, #20]
 800695a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	09db      	lsrs	r3, r3, #7
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	2b7f      	cmp	r3, #127	; 0x7f
 800696c:	d8f0      	bhi.n	8006950 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	617a      	str	r2, [r7, #20]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800697e:	221b      	movs	r2, #27
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	68b8      	ldr	r0, [r7, #8]
 8006984:	f7fe fc08 	bl	8005198 <_SendPacket>
  RECORD_END();
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f383 8811 	msr	BASEPRI, r3
}
 800698e:	bf00      	nop
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	200136dc 	.word	0x200136dc
 800699c:	200136d8 	.word	0x200136d8

080069a0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80069a0:	b40f      	push	{r0, r1, r2, r3}
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80069a8:	f107 0314 	add.w	r3, r7, #20
 80069ac:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80069ae:	1d3b      	adds	r3, r7, #4
 80069b0:	461a      	mov	r2, r3
 80069b2:	2100      	movs	r1, #0
 80069b4:	6938      	ldr	r0, [r7, #16]
 80069b6:	f7fe fe79 	bl	80056ac <_VPrintTarget>
  va_end(ParamList);
}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069c4:	b004      	add	sp, #16
 80069c6:	4770      	bx	lr

080069c8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069d0:	f3ef 8311 	mrs	r3, BASEPRI
 80069d4:	f04f 0120 	mov.w	r1, #32
 80069d8:	f381 8811 	msr	BASEPRI, r1
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	4827      	ldr	r0, [pc, #156]	; (8006a7c <SEGGER_SYSVIEW_Warn+0xb4>)
 80069e0:	f7fe fae7 	bl	8004fb2 <_PreparePacket>
 80069e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069e6:	2280      	movs	r2, #128	; 0x80
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f7fe fa94 	bl	8004f18 <_EncodeStr>
 80069f0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
 80069f6:	2301      	movs	r3, #1
 80069f8:	623b      	str	r3, [r7, #32]
 80069fa:	e00b      	b.n	8006a14 <SEGGER_SYSVIEW_Warn+0x4c>
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	1c59      	adds	r1, r3, #1
 8006a04:	6279      	str	r1, [r7, #36]	; 0x24
 8006a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	09db      	lsrs	r3, r3, #7
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	2b7f      	cmp	r3, #127	; 0x7f
 8006a18:	d8f0      	bhi.n	80069fc <SEGGER_SYSVIEW_Warn+0x34>
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	627a      	str	r2, [r7, #36]	; 0x24
 8006a20:	6a3a      	ldr	r2, [r7, #32]
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	61fb      	str	r3, [r7, #28]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61bb      	str	r3, [r7, #24]
 8006a32:	e00b      	b.n	8006a4c <SEGGER_SYSVIEW_Warn+0x84>
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	1c59      	adds	r1, r3, #1
 8006a3c:	61f9      	str	r1, [r7, #28]
 8006a3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	09db      	lsrs	r3, r3, #7
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a50:	d8f0      	bhi.n	8006a34 <SEGGER_SYSVIEW_Warn+0x6c>
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	61fa      	str	r2, [r7, #28]
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006a62:	221a      	movs	r2, #26
 8006a64:	68f9      	ldr	r1, [r7, #12]
 8006a66:	6938      	ldr	r0, [r7, #16]
 8006a68:	f7fe fb96 	bl	8005198 <_SendPacket>
  RECORD_END();
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f383 8811 	msr	BASEPRI, r3
}
 8006a72:	bf00      	nop
 8006a74:	3728      	adds	r7, #40	; 0x28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	200136dc 	.word	0x200136dc

08006a80 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006a84:	4b13      	ldr	r3, [pc, #76]	; (8006ad4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006a86:	7e1b      	ldrb	r3, [r3, #24]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4a13      	ldr	r2, [pc, #76]	; (8006ad8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	440b      	add	r3, r1
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	4413      	add	r3, r2
 8006a96:	336c      	adds	r3, #108	; 0x6c
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	4b0e      	ldr	r3, [pc, #56]	; (8006ad4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006a9c:	7e1b      	ldrb	r3, [r3, #24]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	490d      	ldr	r1, [pc, #52]	; (8006ad8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4403      	add	r3, r0
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	440b      	add	r3, r1
 8006aac:	3370      	adds	r3, #112	; 0x70
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d00b      	beq.n	8006acc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006ab4:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ab6:	789b      	ldrb	r3, [r3, #2]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d107      	bne.n	8006acc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006abe:	2201      	movs	r2, #1
 8006ac0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006ac2:	f7fe fa83 	bl	8004fcc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006ac6:	4b03      	ldr	r3, [pc, #12]	; (8006ad4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006acc:	4b01      	ldr	r3, [pc, #4]	; (8006ad4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	200136ac 	.word	0x200136ac
 8006ad8:	20013870 	.word	0x20013870

08006adc <keypad_read>:

char keypad_map[] = { '1', '2', '3', 'A', '4', '5', '6', 'B', '7', '8', '9',
		'C', '*', '0', '#', 'D' };
uint16_t row_pin[] = { ROW_0_Pin, ROW_1_Pin, ROW_2_Pin, ROW_3_Pin };
uint16_t col_pin[] = { COL_0_Pin, COL_1_Pin, COL_2_Pin, COL_3_Pin };
char keypad_read(void) {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
	HAL_Delay(150);
 8006ae2:	2096      	movs	r0, #150	; 0x96
 8006ae4:	f7fa f902 	bl	8000cec <HAL_Delay>
	for (int i = 0; i < 4; ++i) {
 8006ae8:	2300      	movs	r3, #0
 8006aea:	607b      	str	r3, [r7, #4]
 8006aec:	e038      	b.n	8006b60 <keypad_read+0x84>
		for (int j = 0; j < 4; ++j) {
 8006aee:	2300      	movs	r3, #0
 8006af0:	603b      	str	r3, [r7, #0]
 8006af2:	e02f      	b.n	8006b54 <keypad_read+0x78>
			HAL_GPIO_WritePin(GPIOD, row_pin[i], GPIO_PIN_SET);
 8006af4:	4a1e      	ldr	r2, [pc, #120]	; (8006b70 <keypad_read+0x94>)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006afc:	2201      	movs	r2, #1
 8006afe:	4619      	mov	r1, r3
 8006b00:	481c      	ldr	r0, [pc, #112]	; (8006b74 <keypad_read+0x98>)
 8006b02:	f7fa fb95 	bl	8001230 <HAL_GPIO_WritePin>
			if (HAL_GPIO_ReadPin(GPIOD, col_pin[j]) == 1) {
 8006b06:	4a1c      	ldr	r2, [pc, #112]	; (8006b78 <keypad_read+0x9c>)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4818      	ldr	r0, [pc, #96]	; (8006b74 <keypad_read+0x98>)
 8006b12:	f7fa fb75 	bl	8001200 <HAL_GPIO_ReadPin>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d10f      	bne.n	8006b3c <keypad_read+0x60>
				HAL_GPIO_WritePin(GPIOD, row_pin[i], GPIO_PIN_RESET);
 8006b1c:	4a14      	ldr	r2, [pc, #80]	; (8006b70 <keypad_read+0x94>)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b24:	2200      	movs	r2, #0
 8006b26:	4619      	mov	r1, r3
 8006b28:	4812      	ldr	r0, [pc, #72]	; (8006b74 <keypad_read+0x98>)
 8006b2a:	f7fa fb81 	bl	8001230 <HAL_GPIO_WritePin>
				return keypad_map[4 * i + j];
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	009a      	lsls	r2, r3, #2
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	4413      	add	r3, r2
 8006b36:	4a11      	ldr	r2, [pc, #68]	; (8006b7c <keypad_read+0xa0>)
 8006b38:	5cd3      	ldrb	r3, [r2, r3]
 8006b3a:	e015      	b.n	8006b68 <keypad_read+0x8c>
			}
			HAL_GPIO_WritePin(GPIOD, row_pin[i], GPIO_PIN_RESET);
 8006b3c:	4a0c      	ldr	r2, [pc, #48]	; (8006b70 <keypad_read+0x94>)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b44:	2200      	movs	r2, #0
 8006b46:	4619      	mov	r1, r3
 8006b48:	480a      	ldr	r0, [pc, #40]	; (8006b74 <keypad_read+0x98>)
 8006b4a:	f7fa fb71 	bl	8001230 <HAL_GPIO_WritePin>
		for (int j = 0; j < 4; ++j) {
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	3301      	adds	r3, #1
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	ddcc      	ble.n	8006af4 <keypad_read+0x18>
	for (int i = 0; i < 4; ++i) {
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	607b      	str	r3, [r7, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	ddc3      	ble.n	8006aee <keypad_read+0x12>
		}
	}
	return 'x';
 8006b66:	2378      	movs	r3, #120	; 0x78
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	2000002c 	.word	0x2000002c
 8006b74:	40020c00 	.word	0x40020c00
 8006b78:	20000034 	.word	0x20000034
 8006b7c:	2000001c 	.word	0x2000001c

08006b80 <keypad_enter>:

uint32_t keypad_enter(void) {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
	uint32_t number = 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]
	uint32_t number_temp = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	607b      	str	r3, [r7, #4]

	volatile char key;
//	tm1638_ctr_led(LED_ON, ADDR_15);
	for (int var = 0; var < 9; ++var) {
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60bb      	str	r3, [r7, #8]
 8006b92:	e04b      	b.n	8006c2c <keypad_enter+0xac>

		do {
			key = keypad_read();
 8006b94:	f7ff ffa2 	bl	8006adc <keypad_read>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	70fb      	strb	r3, [r7, #3]

		} while (key == 'x' || key == 'A' || key == 'B' || key == 'C'
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	b2db      	uxtb	r3, r3
				|| key == 'D');
 8006ba0:	2b78      	cmp	r3, #120	; 0x78
 8006ba2:	d0f7      	beq.n	8006b94 <keypad_enter+0x14>
		} while (key == 'x' || key == 'A' || key == 'B' || key == 'C'
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b41      	cmp	r3, #65	; 0x41
 8006baa:	d0f3      	beq.n	8006b94 <keypad_enter+0x14>
 8006bac:	78fb      	ldrb	r3, [r7, #3]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b42      	cmp	r3, #66	; 0x42
 8006bb2:	d0ef      	beq.n	8006b94 <keypad_enter+0x14>
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b43      	cmp	r3, #67	; 0x43
 8006bba:	d0eb      	beq.n	8006b94 <keypad_enter+0x14>
				|| key == 'D');
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b44      	cmp	r3, #68	; 0x44
 8006bc2:	d0e7      	beq.n	8006b94 <keypad_enter+0x14>

		if (var == 8) {
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d109      	bne.n	8006bde <keypad_enter+0x5e>
			if (key == '#') {
 8006bca:	78fb      	ldrb	r3, [r7, #3]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b23      	cmp	r3, #35	; 0x23
 8006bd0:	d101      	bne.n	8006bd6 <keypad_enter+0x56>
				return number;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	e02e      	b.n	8006c34 <keypad_enter+0xb4>

			} else {
				var--;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	60bb      	str	r3, [r7, #8]
 8006bdc:	e023      	b.n	8006c26 <keypad_enter+0xa6>
			}
		} else {
			if (key == '#') {
 8006bde:	78fb      	ldrb	r3, [r7, #3]
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b23      	cmp	r3, #35	; 0x23
 8006be4:	d101      	bne.n	8006bea <keypad_enter+0x6a>
				return number;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	e024      	b.n	8006c34 <keypad_enter+0xb4>
			}

			if (key == '*') {
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf0:	d109      	bne.n	8006c06 <keypad_enter+0x86>
				var -= 2;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	3b02      	subs	r3, #2
 8006bf6:	60bb      	str	r3, [r7, #8]
				number /= 10;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4a10      	ldr	r2, [pc, #64]	; (8006c3c <keypad_enter+0xbc>)
 8006bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006c00:	08db      	lsrs	r3, r3, #3
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e00f      	b.n	8006c26 <keypad_enter+0xa6>
//				tm1638_clear_display();

			} else {
				number_temp = check_key(key);
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 f818 	bl	8006c40 <check_key>
 8006c10:	4603      	mov	r3, r0
 8006c12:	607b      	str	r3, [r7, #4]
				number = number * 10 + number_temp;
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4613      	mov	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	461a      	mov	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
	for (int var = 0; var < 9; ++var) {
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	60bb      	str	r3, [r7, #8]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	ddb0      	ble.n	8006b94 <keypad_enter+0x14>

//			tm1638_write_multi_number(number);
		}
	}
//	tm1638_ctr_led(LED_OFF, ADDR_15);
	return number;
 8006c32:	68fb      	ldr	r3, [r7, #12]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	cccccccd 	.word	0xcccccccd

08006c40 <check_key>:

uint8_t check_key(char key) {
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	4603      	mov	r3, r0
 8006c48:	71fb      	strb	r3, [r7, #7]
	switch (key) {
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	3b30      	subs	r3, #48	; 0x30
 8006c4e:	2b09      	cmp	r3, #9
 8006c50:	d82a      	bhi.n	8006ca8 <check_key+0x68>
 8006c52:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <check_key+0x18>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006c81 	.word	0x08006c81
 8006c5c:	08006c85 	.word	0x08006c85
 8006c60:	08006c89 	.word	0x08006c89
 8006c64:	08006c8d 	.word	0x08006c8d
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c95 	.word	0x08006c95
 8006c70:	08006c99 	.word	0x08006c99
 8006c74:	08006c9d 	.word	0x08006c9d
 8006c78:	08006ca1 	.word	0x08006ca1
 8006c7c:	08006ca5 	.word	0x08006ca5
	case '0':
		return 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	e012      	b.n	8006caa <check_key+0x6a>
		break;
	case '1':
		return 1;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e010      	b.n	8006caa <check_key+0x6a>
		break;
	case '2':
		return 2;
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e00e      	b.n	8006caa <check_key+0x6a>
		break;
	case '3':
		return 3;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e00c      	b.n	8006caa <check_key+0x6a>
		break;
	case '4':
		return 4;
 8006c90:	2304      	movs	r3, #4
 8006c92:	e00a      	b.n	8006caa <check_key+0x6a>
		break;
	case '5':
		return 5;
 8006c94:	2305      	movs	r3, #5
 8006c96:	e008      	b.n	8006caa <check_key+0x6a>
		break;
	case '6':
		return 6;
 8006c98:	2306      	movs	r3, #6
 8006c9a:	e006      	b.n	8006caa <check_key+0x6a>
		break;
	case '7':
		return 7;
 8006c9c:	2307      	movs	r3, #7
 8006c9e:	e004      	b.n	8006caa <check_key+0x6a>
		break;
	case '8':
		return 8;
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	e002      	b.n	8006caa <check_key+0x6a>
		break;
	case '9':
		return 9;
 8006ca4:	2309      	movs	r3, #9
 8006ca6:	e000      	b.n	8006caa <check_key+0x6a>
		break;
	}
	return -1;
 8006ca8:	23ff      	movs	r3, #255	; 0xff
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop

08006cb8 <__libc_init_array>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4d0d      	ldr	r5, [pc, #52]	; (8006cf0 <__libc_init_array+0x38>)
 8006cbc:	4c0d      	ldr	r4, [pc, #52]	; (8006cf4 <__libc_init_array+0x3c>)
 8006cbe:	1b64      	subs	r4, r4, r5
 8006cc0:	10a4      	asrs	r4, r4, #2
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	42a6      	cmp	r6, r4
 8006cc6:	d109      	bne.n	8006cdc <__libc_init_array+0x24>
 8006cc8:	4d0b      	ldr	r5, [pc, #44]	; (8006cf8 <__libc_init_array+0x40>)
 8006cca:	4c0c      	ldr	r4, [pc, #48]	; (8006cfc <__libc_init_array+0x44>)
 8006ccc:	f000 f83c 	bl	8006d48 <_init>
 8006cd0:	1b64      	subs	r4, r4, r5
 8006cd2:	10a4      	asrs	r4, r4, #2
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	42a6      	cmp	r6, r4
 8006cd8:	d105      	bne.n	8006ce6 <__libc_init_array+0x2e>
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce0:	4798      	blx	r3
 8006ce2:	3601      	adds	r6, #1
 8006ce4:	e7ee      	b.n	8006cc4 <__libc_init_array+0xc>
 8006ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cea:	4798      	blx	r3
 8006cec:	3601      	adds	r6, #1
 8006cee:	e7f2      	b.n	8006cd6 <__libc_init_array+0x1e>
 8006cf0:	08006f30 	.word	0x08006f30
 8006cf4:	08006f30 	.word	0x08006f30
 8006cf8:	08006f30 	.word	0x08006f30
 8006cfc:	08006f34 	.word	0x08006f34

08006d00 <memcmp>:
 8006d00:	b530      	push	{r4, r5, lr}
 8006d02:	3901      	subs	r1, #1
 8006d04:	2400      	movs	r4, #0
 8006d06:	42a2      	cmp	r2, r4
 8006d08:	d101      	bne.n	8006d0e <memcmp+0xe>
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	e005      	b.n	8006d1a <memcmp+0x1a>
 8006d0e:	5d03      	ldrb	r3, [r0, r4]
 8006d10:	3401      	adds	r4, #1
 8006d12:	5d0d      	ldrb	r5, [r1, r4]
 8006d14:	42ab      	cmp	r3, r5
 8006d16:	d0f6      	beq.n	8006d06 <memcmp+0x6>
 8006d18:	1b58      	subs	r0, r3, r5
 8006d1a:	bd30      	pop	{r4, r5, pc}

08006d1c <memcpy>:
 8006d1c:	440a      	add	r2, r1
 8006d1e:	4291      	cmp	r1, r2
 8006d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d24:	d100      	bne.n	8006d28 <memcpy+0xc>
 8006d26:	4770      	bx	lr
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d32:	4291      	cmp	r1, r2
 8006d34:	d1f9      	bne.n	8006d2a <memcpy+0xe>
 8006d36:	bd10      	pop	{r4, pc}

08006d38 <memset>:
 8006d38:	4402      	add	r2, r0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d100      	bne.n	8006d42 <memset+0xa>
 8006d40:	4770      	bx	lr
 8006d42:	f803 1b01 	strb.w	r1, [r3], #1
 8006d46:	e7f9      	b.n	8006d3c <memset+0x4>

08006d48 <_init>:
 8006d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4a:	bf00      	nop
 8006d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4e:	bc08      	pop	{r3}
 8006d50:	469e      	mov	lr, r3
 8006d52:	4770      	bx	lr

08006d54 <_fini>:
 8006d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d56:	bf00      	nop
 8006d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5a:	bc08      	pop	{r3}
 8006d5c:	469e      	mov	lr, r3
 8006d5e:	4770      	bx	lr
