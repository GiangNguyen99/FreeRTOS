
12_freertos_3tasks_keypad_lcd_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08008d00  08008d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eec  08008eec  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008eec  08008eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ef4  08008ef4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef4  08008ef4  00018ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000171a0  20000098  08008f94  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20017238  08008f94  00027238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022488  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042d3  00000000  00000000  00042550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  00046828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a0  00000000  00000000  00047f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4f5  00000000  00000000  00049518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c32d  00000000  00000000  00064a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f64d  00000000  00000000  00080d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c4  00000000  00000000  001203dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ce8 	.word	0x08008ce8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08008ce8 	.word	0x08008ce8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20017180 	.word	0x20017180

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

	BaseType_t status;
	current_time.hours = 1;
 8000572:	4b51      	ldr	r3, [pc, #324]	; (80006b8 <main+0x14c>)
 8000574:	2201      	movs	r2, #1
 8000576:	709a      	strb	r2, [r3, #2]
	current_time.minutes = 1;
 8000578:	4b4f      	ldr	r3, [pc, #316]	; (80006b8 <main+0x14c>)
 800057a:	2201      	movs	r2, #1
 800057c:	705a      	strb	r2, [r3, #1]
	current_time.seconds = 1;
 800057e:	4b4e      	ldr	r3, [pc, #312]	; (80006b8 <main+0x14c>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
	current_time.am_pm = 1;
 8000584:	4b4c      	ldr	r3, [pc, #304]	; (80006b8 <main+0x14c>)
 8000586:	2201      	movs	r2, #1
 8000588:	711a      	strb	r2, [r3, #4]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 800058a:	4b4b      	ldr	r3, [pc, #300]	; (80006b8 <main+0x14c>)
 800058c:	2201      	movs	r2, #1
 800058e:	70da      	strb	r2, [r3, #3]

	time_alarm1.hours = 1;
 8000590:	4b4a      	ldr	r3, [pc, #296]	; (80006bc <main+0x150>)
 8000592:	2201      	movs	r2, #1
 8000594:	709a      	strb	r2, [r3, #2]
	time_alarm1.minutes = 1;
 8000596:	4b49      	ldr	r3, [pc, #292]	; (80006bc <main+0x150>)
 8000598:	2201      	movs	r2, #1
 800059a:	705a      	strb	r2, [r3, #1]
	time_alarm1.seconds = 1;
 800059c:	4b47      	ldr	r3, [pc, #284]	; (80006bc <main+0x150>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
	time_alarm1.am_pm = 1;
 80005a2:	4b46      	ldr	r3, [pc, #280]	; (80006bc <main+0x150>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	711a      	strb	r2, [r3, #4]
	time_alarm1.time_format = TIME_FORMAT_12HRS_PM;
 80005a8:	4b44      	ldr	r3, [pc, #272]	; (80006bc <main+0x150>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	70da      	strb	r2, [r3, #3]
	date_alarm1.day = SUNDAY
 80005ae:	4b44      	ldr	r3, [pc, #272]	; (80006c0 <main+0x154>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	70da      	strb	r2, [r3, #3]
	;

	current_date.day = SUNDAY
 80005b4:	4b43      	ldr	r3, [pc, #268]	; (80006c4 <main+0x158>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	70da      	strb	r2, [r3, #3]
	;
	current_date.date = 1;
 80005ba:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <main+0x158>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
	current_date.month = 1;
 80005c0:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <main+0x158>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	705a      	strb	r2, [r3, #1]
	current_date.year = 1;
 80005c6:	4b3f      	ldr	r3, [pc, #252]	; (80006c4 <main+0x158>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	709a      	strb	r2, [r3, #2]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005cc:	f001 fb0e 	bl	8001bec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005d0:	f000 f898 	bl	8000704 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005d4:	f000 f950 	bl	8000878 <MX_GPIO_Init>
	MX_I2C1_Init();
 80005d8:	f000 f8f2 	bl	80007c0 <MX_I2C1_Init>
	MX_I2C2_Init();
 80005dc:	f000 f91e 	bl	800081c <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */

	//Enable the CYCCNT counter.
	DWT_CTRL |= (1 << 0);
 80005e0:	4b39      	ldr	r3, [pc, #228]	; (80006c8 <main+0x15c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a38      	ldr	r2, [pc, #224]	; (80006c8 <main+0x15c>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	6013      	str	r3, [r2, #0]

//	SEGGER_SYSVIEW_Conf();
//	SEGGER_SYSVIEW_Start();
//
//	SEGGER_UART_init(500000);
	lcd_init_i2c();
 80005ec:	f007 fe2f 	bl	800824e <lcd_init_i2c>
	lcd_display_clear_i2c();
 80005f0:	f007 fd92 	bl	8008118 <lcd_display_clear_i2c>

	if (ds3231_init()) {
 80005f4:	f007 fa87 	bl	8007b06 <ds3231_init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d003      	beq.n	8000606 <main+0x9a>
		printf("RTC init has failed\n");
 80005fe:	4833      	ldr	r0, [pc, #204]	; (80006cc <main+0x160>)
 8000600:	f007 ff2c 	bl	800845c <puts>
		while (1)
 8000604:	e7fe      	b.n	8000604 <main+0x98>
			;
	}

	status = xTaskCreate(handle_keypad, "keypad_task", 500,
 8000606:	4b32      	ldr	r3, [pc, #200]	; (80006d0 <main+0x164>)
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2303      	movs	r3, #3
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	4b31      	ldr	r3, [pc, #196]	; (80006d4 <main+0x168>)
 8000610:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000614:	4930      	ldr	r1, [pc, #192]	; (80006d8 <main+0x16c>)
 8000616:	4831      	ldr	r0, [pc, #196]	; (80006dc <main+0x170>)
 8000618:	f004 f96c 	bl	80048f4 <xTaskCreate>
 800061c:	60f8      	str	r0, [r7, #12]
			"this is task keypad", 3, &keypad);
	configASSERT(status == pdPASS);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d00a      	beq.n	800063a <main+0xce>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000628:	f383 8811 	msr	BASEPRI, r3
 800062c:	f3bf 8f6f 	isb	sy
 8000630:	f3bf 8f4f 	dsb	sy
 8000634:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000636:	bf00      	nop
 8000638:	e7fe      	b.n	8000638 <main+0xcc>

	status = xTaskCreate(handle_lcd, "lcd_task", 500, "this is task lcd", 3,
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <main+0x174>)
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2303      	movs	r3, #3
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <main+0x178>)
 8000644:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000648:	4927      	ldr	r1, [pc, #156]	; (80006e8 <main+0x17c>)
 800064a:	4828      	ldr	r0, [pc, #160]	; (80006ec <main+0x180>)
 800064c:	f004 f952 	bl	80048f4 <xTaskCreate>
 8000650:	60f8      	str	r0, [r7, #12]
			&lcd);
	configASSERT(status == pdPASS);
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00a      	beq.n	800066e <main+0x102>
        __asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065c:	f383 8811 	msr	BASEPRI, r3
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	f3bf 8f4f 	dsb	sy
 8000668:	607b      	str	r3, [r7, #4]
    }
 800066a:	bf00      	nop
 800066c:	e7fe      	b.n	800066c <main+0x100>

	status = xTaskCreate(handle_rtc, "rtc_task", 500, "this is task rtc", 2,
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <main+0x184>)
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	2302      	movs	r3, #2
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <main+0x188>)
 8000678:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800067c:	491e      	ldr	r1, [pc, #120]	; (80006f8 <main+0x18c>)
 800067e:	481f      	ldr	r0, [pc, #124]	; (80006fc <main+0x190>)
 8000680:	f004 f938 	bl	80048f4 <xTaskCreate>
 8000684:	60f8      	str	r0, [r7, #12]
			&rtc);
	configASSERT(status == pdPASS);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d00a      	beq.n	80006a2 <main+0x136>
        __asm volatile
 800068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	603b      	str	r3, [r7, #0]
    }
 800069e:	bf00      	nop
 80006a0:	e7fe      	b.n	80006a0 <main+0x134>

	qdata_key = xQueueCreate(1, sizeof(struct state_machine));
 80006a2:	2200      	movs	r2, #0
 80006a4:	2105      	movs	r1, #5
 80006a6:	2001      	movs	r0, #1
 80006a8:	f003 fd86 	bl	80041b8 <xQueueGenericCreate>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <main+0x194>)
 80006b0:	6013      	str	r3, [r2, #0]
	if (qdata_key == NULL) {
		/* Queue was not created and must not be used. */
	}

	vTaskStartScheduler();
 80006b2:	f004 fc05 	bl	8004ec0 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006b6:	e7fe      	b.n	80006b6 <main+0x14a>
 80006b8:	200170a0 	.word	0x200170a0
 80006bc:	2001712c 	.word	0x2001712c
 80006c0:	20017048 	.word	0x20017048
 80006c4:	20017044 	.word	0x20017044
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	08008d00 	.word	0x08008d00
 80006d0:	20017124 	.word	0x20017124
 80006d4:	08008d14 	.word	0x08008d14
 80006d8:	08008d28 	.word	0x08008d28
 80006dc:	080009f1 	.word	0x080009f1
 80006e0:	20017040 	.word	0x20017040
 80006e4:	08008d34 	.word	0x08008d34
 80006e8:	08008d48 	.word	0x08008d48
 80006ec:	08000d4d 	.word	0x08000d4d
 80006f0:	20017128 	.word	0x20017128
 80006f4:	08008d54 	.word	0x08008d54
 80006f8:	08008d68 	.word	0x08008d68
 80006fc:	08001491 	.word	0x08001491
 8000700:	20017120 	.word	0x20017120

08000704 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	; 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f007 fe2c 	bl	8008370 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <SystemClock_Config+0xb4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <SystemClock_Config+0xb4>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <SystemClock_Config+0xb4>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <SystemClock_Config+0xb8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <SystemClock_Config+0xb8>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <SystemClock_Config+0xb8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800076a:	2300      	movs	r3, #0
 800076c:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fcf2 	bl	800315c <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x7e>
		Error_Handler();
 800077e:	f001 f82b 	bl	80017d8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000786:	2301      	movs	r3, #1
 8000788:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 ff53 	bl	800364c <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xac>
		Error_Handler();
 80007ac:	f001 f814 	bl	80017d8 <Error_Handler>
	}
}
 80007b0:	bf00      	nop
 80007b2:	3750      	adds	r7, #80	; 0x50
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C1_Init+0x50>)
 80007c6:	4a13      	ldr	r2, [pc, #76]	; (8000814 <MX_I2C1_Init+0x54>)
 80007c8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C1_Init+0x50>)
 80007cc:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_I2C1_Init+0x58>)
 80007ce:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_I2C1_Init+0x50>)
 80007de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_I2C1_Init+0x50>)
 80007fe:	f001 fd17 	bl	8002230 <HAL_I2C_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000808:	f000 ffe6 	bl	80017d8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2001704c 	.word	0x2001704c
 8000814:	40005400 	.word	0x40005400
 8000818:	000186a0 	.word	0x000186a0

0800081c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_I2C2_Init+0x50>)
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_I2C2_Init+0x54>)
 8000824:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_I2C2_Init+0x50>)
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_I2C2_Init+0x58>)
 800082a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_I2C2_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_I2C2_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_I2C2_Init+0x50>)
 800083a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_I2C2_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_I2C2_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_I2C2_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_I2C2_Init+0x50>)
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_I2C2_Init+0x50>)
 800085a:	f001 fce9 	bl	8002230 <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8000864:	f000 ffb8 	bl	80017d8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200170a8 	.word	0x200170a8
 8000870:	40005800 	.word	0x40005800
 8000874:	000186a0 	.word	0x000186a0

08000878 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b53      	ldr	r3, [pc, #332]	; (80009e0 <MX_GPIO_Init+0x168>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a52      	ldr	r2, [pc, #328]	; (80009e0 <MX_GPIO_Init+0x168>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b50      	ldr	r3, [pc, #320]	; (80009e0 <MX_GPIO_Init+0x168>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b4c      	ldr	r3, [pc, #304]	; (80009e0 <MX_GPIO_Init+0x168>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a4b      	ldr	r2, [pc, #300]	; (80009e0 <MX_GPIO_Init+0x168>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <MX_GPIO_Init+0x168>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b45      	ldr	r3, [pc, #276]	; (80009e0 <MX_GPIO_Init+0x168>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a44      	ldr	r2, [pc, #272]	; (80009e0 <MX_GPIO_Init+0x168>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <MX_GPIO_Init+0x168>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <MX_GPIO_Init+0x168>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a3d      	ldr	r2, [pc, #244]	; (80009e0 <MX_GPIO_Init+0x168>)
 80008ec:	f043 0308 	orr.w	r3, r3, #8
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <MX_GPIO_Init+0x168>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0308 	and.w	r3, r3, #8
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2110      	movs	r1, #16
 8000902:	4838      	ldr	r0, [pc, #224]	; (80009e4 <MX_GPIO_Init+0x16c>)
 8000904:	f001 fc56 	bl	80021b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000908:	2200      	movs	r2, #0
 800090a:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 800090e:	4836      	ldr	r0, [pc, #216]	; (80009e8 <MX_GPIO_Init+0x170>)
 8000910:	f001 fc50 	bl	80021b4 <HAL_GPIO_WritePin>
			LD3_Pin | LD4_Pin | LD5_Pin | LD6_Pin | ROW_0_Pin | ROW_1_Pin
					| ROW_2_Pin | ROW_3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : BTN_Pin */
	GPIO_InitStruct.Pin = BTN_Pin;
 8000914:	2301      	movs	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000918:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800091c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	482e      	ldr	r0, [pc, #184]	; (80009e4 <MX_GPIO_Init+0x16c>)
 800092a:	f001 faa7 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_NSS_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800092e:	2310      	movs	r3, #16
 8000930:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000936:	2302      	movs	r3, #2
 8000938:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	4827      	ldr	r0, [pc, #156]	; (80009e4 <MX_GPIO_Init+0x16c>)
 8000946:	f001 fa99 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin | LD5_Pin | LD6_Pin;
 800094a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800094e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4821      	ldr	r0, [pc, #132]	; (80009e8 <MX_GPIO_Init+0x170>)
 8000964:	f001 fa8a 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pins : COL_0_Pin COL_1_Pin COL_2_Pin COL_3_Pin */
	GPIO_InitStruct.Pin = COL_0_Pin | COL_1_Pin | COL_2_Pin | COL_3_Pin;
 8000968:	230f      	movs	r3, #15
 800096a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000970:	2302      	movs	r3, #2
 8000972:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	481b      	ldr	r0, [pc, #108]	; (80009e8 <MX_GPIO_Init+0x170>)
 800097c:	f001 fa7e 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pins : ROW_0_Pin ROW_1_Pin ROW_2_Pin ROW_3_Pin */
	GPIO_InitStruct.Pin = ROW_0_Pin | ROW_1_Pin | ROW_2_Pin | ROW_3_Pin;
 8000980:	23f0      	movs	r3, #240	; 0xf0
 8000982:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000988:	2302      	movs	r3, #2
 800098a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4814      	ldr	r0, [pc, #80]	; (80009e8 <MX_GPIO_Init+0x170>)
 8000998:	f001 fa70 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pin : ALARM_Pin */
	GPIO_InitStruct.Pin = ALARM_Pin;
 800099c:	2320      	movs	r3, #32
 800099e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ALARM_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	480e      	ldr	r0, [pc, #56]	; (80009ec <MX_GPIO_Init+0x174>)
 80009b2:	f001 fa63 	bl	8001e7c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 8, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2108      	movs	r1, #8
 80009ba:	2006      	movs	r0, #6
 80009bc:	f001 fa34 	bl	8001e28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009c0:	2006      	movs	r0, #6
 80009c2:	f001 fa4d 	bl	8001e60 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 9, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2109      	movs	r1, #9
 80009ca:	2017      	movs	r0, #23
 80009cc:	f001 fa2c 	bl	8001e28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009d0:	2017      	movs	r0, #23
 80009d2:	f001 fa45 	bl	8001e60 <HAL_NVIC_EnableIRQ>

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020c00 	.word	0x40020c00
 80009ec:	40020400 	.word	0x40020400

080009f0 <handle_keypad>:

/* USER CODE BEGIN 4 */

void handle_keypad(void *parameters) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	state.level = 0;
 80009f8:	4b98      	ldr	r3, [pc, #608]	; (8000c5c <handle_keypad+0x26c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	state.en_send_number = 0;
 80009fe:	4b97      	ldr	r3, [pc, #604]	; (8000c5c <handle_keypad+0x26c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	705a      	strb	r2, [r3, #1]
	state.scroll = 0;
 8000a04:	4b95      	ldr	r3, [pc, #596]	; (8000c5c <handle_keypad+0x26c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	709a      	strb	r2, [r3, #2]
	state.position_cursor = 0;
 8000a0a:	4b94      	ldr	r3, [pc, #592]	; (8000c5c <handle_keypad+0x26c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	70da      	strb	r2, [r3, #3]
	char key_read;
	while (1) {
		key_read = keypad_read();
 8000a10:	f007 faf4 	bl	8007ffc <keypad_read>
 8000a14:	4603      	mov	r3, r0
 8000a16:	73fb      	strb	r3, [r7, #15]
		if (key_read == 'A') {
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	2b41      	cmp	r3, #65	; 0x41
 8000a1c:	d113      	bne.n	8000a46 <handle_keypad+0x56>
			if (state.level < 3) {
 8000a1e:	4b8f      	ldr	r3, [pc, #572]	; (8000c5c <handle_keypad+0x26c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	f200 8187 	bhi.w	8000d36 <handle_keypad+0x346>
				state.level = state.level + 1;
 8000a28:	4b8c      	ldr	r3, [pc, #560]	; (8000c5c <handle_keypad+0x26c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b8a      	ldr	r3, [pc, #552]	; (8000c5c <handle_keypad+0x26c>)
 8000a32:	701a      	strb	r2, [r3, #0]
				xQueueSend(qdata_key, (void* )&state, portMAX_DELAY);
 8000a34:	4b8a      	ldr	r3, [pc, #552]	; (8000c60 <handle_keypad+0x270>)
 8000a36:	6818      	ldr	r0, [r3, #0]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3e:	4987      	ldr	r1, [pc, #540]	; (8000c5c <handle_keypad+0x26c>)
 8000a40:	f003 fc42 	bl	80042c8 <xQueueGenericSend>
 8000a44:	e177      	b.n	8000d36 <handle_keypad+0x346>
			}

		} else if (key_read == 'B') {
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	2b42      	cmp	r3, #66	; 0x42
 8000a4a:	d113      	bne.n	8000a74 <handle_keypad+0x84>
			if (state.level > 0) {
 8000a4c:	4b83      	ldr	r3, [pc, #524]	; (8000c5c <handle_keypad+0x26c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f000 8170 	beq.w	8000d36 <handle_keypad+0x346>
				state.level = state.level - 1;
 8000a56:	4b81      	ldr	r3, [pc, #516]	; (8000c5c <handle_keypad+0x26c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b7f      	ldr	r3, [pc, #508]	; (8000c5c <handle_keypad+0x26c>)
 8000a60:	701a      	strb	r2, [r3, #0]
				xQueueSend(qdata_key, (void* )&state, portMAX_DELAY);
 8000a62:	4b7f      	ldr	r3, [pc, #508]	; (8000c60 <handle_keypad+0x270>)
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	2300      	movs	r3, #0
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	497b      	ldr	r1, [pc, #492]	; (8000c5c <handle_keypad+0x26c>)
 8000a6e:	f003 fc2b 	bl	80042c8 <xQueueGenericSend>
 8000a72:	e160      	b.n	8000d36 <handle_keypad+0x346>
			}
		} else if (key_read == 'C') {
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b43      	cmp	r3, #67	; 0x43
 8000a78:	d11c      	bne.n	8000ab4 <handle_keypad+0xc4>
			if (state.level == 2) {
 8000a7a:	4b78      	ldr	r3, [pc, #480]	; (8000c5c <handle_keypad+0x26c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	f040 8159 	bne.w	8000d36 <handle_keypad+0x346>
				state.scroll = (state.scroll + 1) % 3;
 8000a84:	4b75      	ldr	r3, [pc, #468]	; (8000c5c <handle_keypad+0x26c>)
 8000a86:	789b      	ldrb	r3, [r3, #2]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	4b76      	ldr	r3, [pc, #472]	; (8000c64 <handle_keypad+0x274>)
 8000a8c:	fb83 3102 	smull	r3, r1, r3, r2
 8000a90:	17d3      	asrs	r3, r2, #31
 8000a92:	1ac9      	subs	r1, r1, r3
 8000a94:	460b      	mov	r3, r1
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	440b      	add	r3, r1
 8000a9a:	1ad1      	subs	r1, r2, r3
 8000a9c:	b2ca      	uxtb	r2, r1
 8000a9e:	4b6f      	ldr	r3, [pc, #444]	; (8000c5c <handle_keypad+0x26c>)
 8000aa0:	709a      	strb	r2, [r3, #2]
				xQueueSend(qdata_key, (void* )&state, portMAX_DELAY);
 8000aa2:	4b6f      	ldr	r3, [pc, #444]	; (8000c60 <handle_keypad+0x270>)
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	496b      	ldr	r1, [pc, #428]	; (8000c5c <handle_keypad+0x26c>)
 8000aae:	f003 fc0b 	bl	80042c8 <xQueueGenericSend>
 8000ab2:	e140      	b.n	8000d36 <handle_keypad+0x346>
			}
		} else if (key_read == 'D') {
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	2b44      	cmp	r3, #68	; 0x44
 8000ab8:	d11c      	bne.n	8000af4 <handle_keypad+0x104>
			if (state.level == 2) {
 8000aba:	4b68      	ldr	r3, [pc, #416]	; (8000c5c <handle_keypad+0x26c>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	f040 8139 	bne.w	8000d36 <handle_keypad+0x346>
				state.scroll = (state.scroll + 2) % 3;
 8000ac4:	4b65      	ldr	r3, [pc, #404]	; (8000c5c <handle_keypad+0x26c>)
 8000ac6:	789b      	ldrb	r3, [r3, #2]
 8000ac8:	1c9a      	adds	r2, r3, #2
 8000aca:	4b66      	ldr	r3, [pc, #408]	; (8000c64 <handle_keypad+0x274>)
 8000acc:	fb83 3102 	smull	r3, r1, r3, r2
 8000ad0:	17d3      	asrs	r3, r2, #31
 8000ad2:	1ac9      	subs	r1, r1, r3
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	440b      	add	r3, r1
 8000ada:	1ad1      	subs	r1, r2, r3
 8000adc:	b2ca      	uxtb	r2, r1
 8000ade:	4b5f      	ldr	r3, [pc, #380]	; (8000c5c <handle_keypad+0x26c>)
 8000ae0:	709a      	strb	r2, [r3, #2]
				xQueueSend(qdata_key, (void* )&state, portMAX_DELAY);
 8000ae2:	4b5f      	ldr	r3, [pc, #380]	; (8000c60 <handle_keypad+0x270>)
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aec:	495b      	ldr	r1, [pc, #364]	; (8000c5c <handle_keypad+0x26c>)
 8000aee:	f003 fbeb 	bl	80042c8 <xQueueGenericSend>
 8000af2:	e120      	b.n	8000d36 <handle_keypad+0x346>
			}
		} else if (key_read == '*') {
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b2a      	cmp	r3, #42	; 0x2a
 8000af8:	d156      	bne.n	8000ba8 <handle_keypad+0x1b8>
			if (state.level == 3) {
 8000afa:	4b58      	ldr	r3, [pc, #352]	; (8000c5c <handle_keypad+0x26c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	f040 8119 	bne.w	8000d36 <handle_keypad+0x346>
				if (state.position_cursor == 3 || state.position_cursor == 6) {
 8000b04:	4b55      	ldr	r3, [pc, #340]	; (8000c5c <handle_keypad+0x26c>)
 8000b06:	78db      	ldrb	r3, [r3, #3]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d003      	beq.n	8000b14 <handle_keypad+0x124>
 8000b0c:	4b53      	ldr	r3, [pc, #332]	; (8000c5c <handle_keypad+0x26c>)
 8000b0e:	78db      	ldrb	r3, [r3, #3]
 8000b10:	2b06      	cmp	r3, #6
 8000b12:	d112      	bne.n	8000b3a <handle_keypad+0x14a>
					state.position_cursor = (state.position_cursor - 2) % 13;
 8000b14:	4b51      	ldr	r3, [pc, #324]	; (8000c5c <handle_keypad+0x26c>)
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	1e99      	subs	r1, r3, #2
 8000b1a:	4b53      	ldr	r3, [pc, #332]	; (8000c68 <handle_keypad+0x278>)
 8000b1c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b20:	109a      	asrs	r2, r3, #2
 8000b22:	17cb      	asrs	r3, r1, #31
 8000b24:	1ad2      	subs	r2, r2, r3
 8000b26:	4613      	mov	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	1aca      	subs	r2, r1, r3
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	4b49      	ldr	r3, [pc, #292]	; (8000c5c <handle_keypad+0x26c>)
 8000b36:	70da      	strb	r2, [r3, #3]
 8000b38:	e02d      	b.n	8000b96 <handle_keypad+0x1a6>

				} else if (state.position_cursor == 10
 8000b3a:	4b48      	ldr	r3, [pc, #288]	; (8000c5c <handle_keypad+0x26c>)
 8000b3c:	78db      	ldrb	r3, [r3, #3]
 8000b3e:	2b0a      	cmp	r3, #10
 8000b40:	d003      	beq.n	8000b4a <handle_keypad+0x15a>
						|| state.position_cursor == 0) {
 8000b42:	4b46      	ldr	r3, [pc, #280]	; (8000c5c <handle_keypad+0x26c>)
 8000b44:	78db      	ldrb	r3, [r3, #3]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d113      	bne.n	8000b72 <handle_keypad+0x182>
					state.position_cursor = (state.position_cursor + 10) % 13;
 8000b4a:	4b44      	ldr	r3, [pc, #272]	; (8000c5c <handle_keypad+0x26c>)
 8000b4c:	78db      	ldrb	r3, [r3, #3]
 8000b4e:	f103 010a 	add.w	r1, r3, #10
 8000b52:	4b45      	ldr	r3, [pc, #276]	; (8000c68 <handle_keypad+0x278>)
 8000b54:	fb83 2301 	smull	r2, r3, r3, r1
 8000b58:	109a      	asrs	r2, r3, #2
 8000b5a:	17cb      	asrs	r3, r1, #31
 8000b5c:	1ad2      	subs	r2, r2, r3
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	1aca      	subs	r2, r1, r3
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <handle_keypad+0x26c>)
 8000b6e:	70da      	strb	r2, [r3, #3]
 8000b70:	e011      	b.n	8000b96 <handle_keypad+0x1a6>

				} else {
					state.position_cursor = (state.position_cursor - 1) % 13;
 8000b72:	4b3a      	ldr	r3, [pc, #232]	; (8000c5c <handle_keypad+0x26c>)
 8000b74:	78db      	ldrb	r3, [r3, #3]
 8000b76:	1e59      	subs	r1, r3, #1
 8000b78:	4b3b      	ldr	r3, [pc, #236]	; (8000c68 <handle_keypad+0x278>)
 8000b7a:	fb83 2301 	smull	r2, r3, r3, r1
 8000b7e:	109a      	asrs	r2, r3, #2
 8000b80:	17cb      	asrs	r3, r1, #31
 8000b82:	1ad2      	subs	r2, r2, r3
 8000b84:	4613      	mov	r3, r2
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4413      	add	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4413      	add	r3, r2
 8000b8e:	1aca      	subs	r2, r1, r3
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <handle_keypad+0x26c>)
 8000b94:	70da      	strb	r2, [r3, #3]
				}
				xQueueSend(qdata_key, (void* )&state, portMAX_DELAY);
 8000b96:	4b32      	ldr	r3, [pc, #200]	; (8000c60 <handle_keypad+0x270>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	492e      	ldr	r1, [pc, #184]	; (8000c5c <handle_keypad+0x26c>)
 8000ba2:	f003 fb91 	bl	80042c8 <xQueueGenericSend>
 8000ba6:	e0c6      	b.n	8000d36 <handle_keypad+0x346>
			}
		} else if (key_read == '#') {
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	2b23      	cmp	r3, #35	; 0x23
 8000bac:	d15e      	bne.n	8000c6c <handle_keypad+0x27c>
			if (state.level == 3) {
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <handle_keypad+0x26c>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	f040 80bf 	bne.w	8000d36 <handle_keypad+0x346>
				if (state.position_cursor == 1 || state.position_cursor == 4) {
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <handle_keypad+0x26c>)
 8000bba:	78db      	ldrb	r3, [r3, #3]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d003      	beq.n	8000bc8 <handle_keypad+0x1d8>
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <handle_keypad+0x26c>)
 8000bc2:	78db      	ldrb	r3, [r3, #3]
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d112      	bne.n	8000bee <handle_keypad+0x1fe>
					state.position_cursor = (state.position_cursor + 2) % 13;
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <handle_keypad+0x26c>)
 8000bca:	78db      	ldrb	r3, [r3, #3]
 8000bcc:	1c99      	adds	r1, r3, #2
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <handle_keypad+0x278>)
 8000bd0:	fb83 2301 	smull	r2, r3, r3, r1
 8000bd4:	109a      	asrs	r2, r3, #2
 8000bd6:	17cb      	asrs	r3, r1, #31
 8000bd8:	1ad2      	subs	r2, r2, r3
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	1aca      	subs	r2, r1, r3
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <handle_keypad+0x26c>)
 8000bea:	70da      	strb	r2, [r3, #3]
 8000bec:	e02c      	b.n	8000c48 <handle_keypad+0x258>

				} else if (state.position_cursor == 7
 8000bee:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <handle_keypad+0x26c>)
 8000bf0:	78db      	ldrb	r3, [r3, #3]
 8000bf2:	2b07      	cmp	r3, #7
 8000bf4:	d003      	beq.n	8000bfe <handle_keypad+0x20e>
						|| state.position_cursor == 10) {
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <handle_keypad+0x26c>)
 8000bf8:	78db      	ldrb	r3, [r3, #3]
 8000bfa:	2b0a      	cmp	r3, #10
 8000bfc:	d112      	bne.n	8000c24 <handle_keypad+0x234>
					state.position_cursor = (state.position_cursor + 3) % 13;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <handle_keypad+0x26c>)
 8000c00:	78db      	ldrb	r3, [r3, #3]
 8000c02:	1cd9      	adds	r1, r3, #3
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <handle_keypad+0x278>)
 8000c06:	fb83 2301 	smull	r2, r3, r3, r1
 8000c0a:	109a      	asrs	r2, r3, #2
 8000c0c:	17cb      	asrs	r3, r1, #31
 8000c0e:	1ad2      	subs	r2, r2, r3
 8000c10:	4613      	mov	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	4413      	add	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	1aca      	subs	r2, r1, r3
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <handle_keypad+0x26c>)
 8000c20:	70da      	strb	r2, [r3, #3]
 8000c22:	e011      	b.n	8000c48 <handle_keypad+0x258>

				} else {
					state.position_cursor = (state.position_cursor + 1) % 13;
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <handle_keypad+0x26c>)
 8000c26:	78db      	ldrb	r3, [r3, #3]
 8000c28:	1c59      	adds	r1, r3, #1
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <handle_keypad+0x278>)
 8000c2c:	fb83 2301 	smull	r2, r3, r3, r1
 8000c30:	109a      	asrs	r2, r3, #2
 8000c32:	17cb      	asrs	r3, r1, #31
 8000c34:	1ad2      	subs	r2, r2, r3
 8000c36:	4613      	mov	r3, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	4413      	add	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	1aca      	subs	r2, r1, r3
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <handle_keypad+0x26c>)
 8000c46:	70da      	strb	r2, [r3, #3]
				}
				xQueueSend(qdata_key, (void* )&state, portMAX_DELAY);
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <handle_keypad+0x270>)
 8000c4a:	6818      	ldr	r0, [r3, #0]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c52:	4902      	ldr	r1, [pc, #8]	; (8000c5c <handle_keypad+0x26c>)
 8000c54:	f003 fb38 	bl	80042c8 <xQueueGenericSend>
 8000c58:	e06d      	b.n	8000d36 <handle_keypad+0x346>
 8000c5a:	bf00      	nop
 8000c5c:	20017118 	.word	0x20017118
 8000c60:	20017120 	.word	0x20017120
 8000c64:	55555556 	.word	0x55555556
 8000c68:	4ec4ec4f 	.word	0x4ec4ec4f
			}
		} else if (key_read == 'x') {
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b78      	cmp	r3, #120	; 0x78
 8000c70:	d061      	beq.n	8000d36 <handle_keypad+0x346>

		} else {
			if (state.level == 3) {
 8000c72:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <handle_keypad+0x350>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d15d      	bne.n	8000d36 <handle_keypad+0x346>
				state.number = check_key(key_read);
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f007 fa0f 	bl	80080a0 <check_key>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <handle_keypad+0x350>)
 8000c88:	711a      	strb	r2, [r3, #4]
				state.en_send_number = 1;
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <handle_keypad+0x350>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	705a      	strb	r2, [r3, #1]
				xQueueSend(qdata_key, (void* )&state, portMAX_DELAY);
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <handle_keypad+0x354>)
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	2300      	movs	r3, #0
 8000c96:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9a:	4929      	ldr	r1, [pc, #164]	; (8000d40 <handle_keypad+0x350>)
 8000c9c:	f003 fb14 	bl	80042c8 <xQueueGenericSend>

				if (state.position_cursor == 1 || state.position_cursor == 4) {
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <handle_keypad+0x350>)
 8000ca2:	78db      	ldrb	r3, [r3, #3]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d003      	beq.n	8000cb0 <handle_keypad+0x2c0>
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <handle_keypad+0x350>)
 8000caa:	78db      	ldrb	r3, [r3, #3]
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d112      	bne.n	8000cd6 <handle_keypad+0x2e6>
					state.position_cursor = (state.position_cursor + 2) % 13;
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <handle_keypad+0x350>)
 8000cb2:	78db      	ldrb	r3, [r3, #3]
 8000cb4:	1c99      	adds	r1, r3, #2
 8000cb6:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <handle_keypad+0x358>)
 8000cb8:	fb83 2301 	smull	r2, r3, r3, r1
 8000cbc:	109a      	asrs	r2, r3, #2
 8000cbe:	17cb      	asrs	r3, r1, #31
 8000cc0:	1ad2      	subs	r2, r2, r3
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	1aca      	subs	r2, r1, r3
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <handle_keypad+0x350>)
 8000cd2:	70da      	strb	r2, [r3, #3]
 8000cd4:	e02c      	b.n	8000d30 <handle_keypad+0x340>

				} else if (state.position_cursor == 7
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <handle_keypad+0x350>)
 8000cd8:	78db      	ldrb	r3, [r3, #3]
 8000cda:	2b07      	cmp	r3, #7
 8000cdc:	d003      	beq.n	8000ce6 <handle_keypad+0x2f6>
						|| state.position_cursor == 10) {
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <handle_keypad+0x350>)
 8000ce0:	78db      	ldrb	r3, [r3, #3]
 8000ce2:	2b0a      	cmp	r3, #10
 8000ce4:	d112      	bne.n	8000d0c <handle_keypad+0x31c>
					state.position_cursor = (state.position_cursor + 3) % 13;
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <handle_keypad+0x350>)
 8000ce8:	78db      	ldrb	r3, [r3, #3]
 8000cea:	1cd9      	adds	r1, r3, #3
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <handle_keypad+0x358>)
 8000cee:	fb83 2301 	smull	r2, r3, r3, r1
 8000cf2:	109a      	asrs	r2, r3, #2
 8000cf4:	17cb      	asrs	r3, r1, #31
 8000cf6:	1ad2      	subs	r2, r2, r3
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	1aca      	subs	r2, r1, r3
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <handle_keypad+0x350>)
 8000d08:	70da      	strb	r2, [r3, #3]
 8000d0a:	e011      	b.n	8000d30 <handle_keypad+0x340>

				} else {
					state.position_cursor = (state.position_cursor + 1) % 13;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <handle_keypad+0x350>)
 8000d0e:	78db      	ldrb	r3, [r3, #3]
 8000d10:	1c59      	adds	r1, r3, #1
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <handle_keypad+0x358>)
 8000d14:	fb83 2301 	smull	r2, r3, r3, r1
 8000d18:	109a      	asrs	r2, r3, #2
 8000d1a:	17cb      	asrs	r3, r1, #31
 8000d1c:	1ad2      	subs	r2, r2, r3
 8000d1e:	4613      	mov	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	1aca      	subs	r2, r1, r3
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <handle_keypad+0x350>)
 8000d2e:	70da      	strb	r2, [r3, #3]
				}
				state.en_send_number = 0;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <handle_keypad+0x350>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	705a      	strb	r2, [r3, #1]
			}
		}
		vTaskDelay(pdMS_TO_TICKS(50));
 8000d36:	2032      	movs	r0, #50	; 0x32
 8000d38:	f003 ff40 	bl	8004bbc <vTaskDelay>
		key_read = keypad_read();
 8000d3c:	e668      	b.n	8000a10 <handle_keypad+0x20>
 8000d3e:	bf00      	nop
 8000d40:	20017118 	.word	0x20017118
 8000d44:	20017120 	.word	0x20017120
 8000d48:	4ec4ec4f 	.word	0x4ec4ec4f

08000d4c <handle_lcd>:
	}
}

void handle_lcd(void *parameters) {
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	b0ae      	sub	sp, #184	; 0xb8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	struct state_machine data_receive;

	//current time variable
	uint8_t number_array[7] = { 0 };
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000d5a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d5e:	2100      	movs	r1, #0
 8000d60:	460a      	mov	r2, r1
 8000d62:	801a      	strh	r2, [r3, #0]
 8000d64:	460a      	mov	r2, r1
 8000d66:	709a      	strb	r2, [r3, #2]
	uint8_t temp = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	//current day variable
	uint8_t number_array_day[7] = { 0 };
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000d74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d78:	2100      	movs	r1, #0
 8000d7a:	460a      	mov	r2, r1
 8000d7c:	801a      	strh	r2, [r3, #0]
 8000d7e:	460a      	mov	r2, r1
 8000d80:	709a      	strb	r2, [r3, #2]
	number_array_day[6] = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	uint8_t temp_day = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

	//alarm time variable
	uint8_t temp_al = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
	uint8_t number_array_al[7] = { 0 };
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000d9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d9e:	2100      	movs	r1, #0
 8000da0:	460a      	mov	r2, r1
 8000da2:	801a      	strh	r2, [r3, #0]
 8000da4:	460a      	mov	r2, r1
 8000da6:	709a      	strb	r2, [r3, #2]

	data_receive.level = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
	data_receive.en_send_number = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
	data_receive.scroll = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2

	char string_l1_r0[] = "A:set  B:return";
 8000dba:	4bc4      	ldr	r3, [pc, #784]	; (80010cc <handle_lcd+0x380>)
 8000dbc:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8000dc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char string_l1_r1[] = "C:left D:right";
 8000dc6:	4bc2      	ldr	r3, [pc, #776]	; (80010d0 <handle_lcd+0x384>)
 8000dc8:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000dcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dce:	c407      	stmia	r4!, {r0, r1, r2}
 8000dd0:	8023      	strh	r3, [r4, #0]
 8000dd2:	3402      	adds	r4, #2
 8000dd4:	0c1b      	lsrs	r3, r3, #16
 8000dd6:	7023      	strb	r3, [r4, #0]
	char string_l2_s0_r0[] = "set current time";
 8000dd8:	4bbe      	ldr	r3, [pc, #760]	; (80010d4 <handle_lcd+0x388>)
 8000dda:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000dde:	461d      	mov	r5, r3
 8000de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	7023      	strb	r3, [r4, #0]
//	char string_l2_s0_r1[] = "format 12 hours";

	char string_l2_s1_r0[] = "set day-date";
 8000de8:	4bbb      	ldr	r3, [pc, #748]	; (80010d8 <handle_lcd+0x38c>)
 8000dea:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df0:	c407      	stmia	r4!, {r0, r1, r2}
 8000df2:	7023      	strb	r3, [r4, #0]
	char string_l2_s2_r0[] = "set alarm time";
 8000df4:	4bb9      	ldr	r3, [pc, #740]	; (80010dc <handle_lcd+0x390>)
 8000df6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dfc:	c407      	stmia	r4!, {r0, r1, r2}
 8000dfe:	8023      	strh	r3, [r4, #0]
 8000e00:	3402      	adds	r4, #2
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	7023      	strb	r3, [r4, #0]
	char string_l3_s0_r0[] = "hh:mm:ss <AM/PM>";
 8000e06:	4bb6      	ldr	r3, [pc, #728]	; (80010e0 <handle_lcd+0x394>)
 8000e08:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000e0c:	461d      	mov	r5, r3
 8000e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e12:	682b      	ldr	r3, [r5, #0]
 8000e14:	7023      	strb	r3, [r4, #0]
	char string_l3_s1_r0[] = "dd:mm:yy <day>";
 8000e16:	4bb3      	ldr	r3, [pc, #716]	; (80010e4 <handle_lcd+0x398>)
 8000e18:	f107 0420 	add.w	r4, r7, #32
 8000e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e1e:	c407      	stmia	r4!, {r0, r1, r2}
 8000e20:	8023      	strh	r3, [r4, #0]
 8000e22:	3402      	adds	r4, #2
 8000e24:	0c1b      	lsrs	r3, r3, #16
 8000e26:	7023      	strb	r3, [r4, #0]
	char string_l3_s2_r0[] = "hh:mm:ss <AM/PM>";
 8000e28:	4bad      	ldr	r3, [pc, #692]	; (80010e0 <handle_lcd+0x394>)
 8000e2a:	f107 040c 	add.w	r4, r7, #12
 8000e2e:	461d      	mov	r5, r3
 8000e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e34:	682b      	ldr	r3, [r5, #0]
 8000e36:	7023      	strb	r3, [r4, #0]

	lcd_display_clear_i2c();
 8000e38:	f007 f96e 	bl	8008118 <lcd_display_clear_i2c>
	lcd_display_return_home_i2c();
 8000e3c:	f007 fa47 	bl	80082ce <lcd_display_return_home_i2c>

	ds3231_set_current_time(&current_time);
 8000e40:	48a9      	ldr	r0, [pc, #676]	; (80010e8 <handle_lcd+0x39c>)
 8000e42:	f006 fe77 	bl	8007b34 <ds3231_set_current_time>
	ds3231_set_current_date(&current_date);
 8000e46:	48a9      	ldr	r0, [pc, #676]	; (80010ec <handle_lcd+0x3a0>)
 8000e48:	f006 febd 	bl	8007bc6 <ds3231_set_current_date>

	ds3231_get_current_time(&current_time);
 8000e4c:	48a6      	ldr	r0, [pc, #664]	; (80010e8 <handle_lcd+0x39c>)
 8000e4e:	f006 fef0 	bl	8007c32 <ds3231_get_current_time>
	ds3231_get_current_date(&current_date);
 8000e52:	48a6      	ldr	r0, [pc, #664]	; (80010ec <handle_lcd+0x3a0>)
 8000e54:	f006 ff36 	bl	8007cc4 <ds3231_get_current_date>

	lcd_send_string(time_to_string(&current_time));
 8000e58:	48a3      	ldr	r0, [pc, #652]	; (80010e8 <handle_lcd+0x39c>)
 8000e5a:	f000 fc15 	bl	8001688 <time_to_string>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f007 fa1f 	bl	80082a4 <lcd_send_string>
	lcd_put_cur(2, 1);
 8000e66:	2101      	movs	r1, #1
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f007 f9c3 	bl	80081f4 <lcd_put_cur>
	lcd_send_string(date_to_string(&current_date));
 8000e6e:	489f      	ldr	r0, [pc, #636]	; (80010ec <handle_lcd+0x3a0>)
 8000e70:	f000 fc4a 	bl	8001708 <date_to_string>
 8000e74:	4603      	mov	r3, r0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f007 fa14 	bl	80082a4 <lcd_send_string>
	vTaskSuspend(rtc);
 8000e7c:	4b9c      	ldr	r3, [pc, #624]	; (80010f0 <handle_lcd+0x3a4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fed3 	bl	8004c2c <vTaskSuspend>

	while (1) {
		if (qdata_key != NULL) {
 8000e86:	4b9b      	ldr	r3, [pc, #620]	; (80010f4 <handle_lcd+0x3a8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0fb      	beq.n	8000e86 <handle_lcd+0x13a>
			if (xQueueReceive(qdata_key, &data_receive,
 8000e8e:	4b99      	ldr	r3, [pc, #612]	; (80010f4 <handle_lcd+0x3a8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000e96:	2264      	movs	r2, #100	; 0x64
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fb23 	bl	80044e4 <xQueueReceive>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d1f0      	bne.n	8000e86 <handle_lcd+0x13a>
					(TickType_t) 100) == pdPASS) {
				lcd_send_cmd(0x0C);
 8000ea4:	200c      	movs	r0, #12
 8000ea6:	f007 f941 	bl	800812c <lcd_send_cmd>

				if (data_receive.level == 0) {
 8000eaa:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d108      	bne.n	8000ec4 <handle_lcd+0x178>
					lcd_display_clear_i2c();
 8000eb2:	f007 f931 	bl	8008118 <lcd_display_clear_i2c>
					lcd_display_return_home_i2c();
 8000eb6:	f007 fa0a 	bl	80082ce <lcd_display_return_home_i2c>
					vTaskResume(rtc);
 8000eba:	4b8d      	ldr	r3, [pc, #564]	; (80010f0 <handle_lcd+0x3a4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 ff94 	bl	8004dec <vTaskResume>
				}
				if (data_receive.level == 1) {
 8000ec4:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d116      	bne.n	8000efa <handle_lcd+0x1ae>
					vTaskSuspend(rtc);
 8000ecc:	4b88      	ldr	r3, [pc, #544]	; (80010f0 <handle_lcd+0x3a4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 feab 	bl	8004c2c <vTaskSuspend>
					lcd_display_clear_i2c();
 8000ed6:	f007 f91f 	bl	8008118 <lcd_display_clear_i2c>
					lcd_display_return_home_i2c();
 8000eda:	f007 f9f8 	bl	80082ce <lcd_display_return_home_i2c>
					lcd_send_string(string_l1_r0);
 8000ede:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f007 f9de 	bl	80082a4 <lcd_send_string>
					lcd_put_cur(2, 1);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	2002      	movs	r0, #2
 8000eec:	f007 f982 	bl	80081f4 <lcd_put_cur>
					lcd_send_string(string_l1_r1);
 8000ef0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f007 f9d5 	bl	80082a4 <lcd_send_string>
				}
				if (data_receive.level == 2) {
 8000efa:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d11e      	bne.n	8000f40 <handle_lcd+0x1f4>
					lcd_display_clear_i2c();
 8000f02:	f007 f909 	bl	8008118 <lcd_display_clear_i2c>
					lcd_display_return_home_i2c();
 8000f06:	f007 f9e2 	bl	80082ce <lcd_display_return_home_i2c>
					if (data_receive.scroll == 0) {
 8000f0a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d104      	bne.n	8000f1c <handle_lcd+0x1d0>
						lcd_send_string(string_l2_s0_r0);
 8000f12:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f16:	4618      	mov	r0, r3
 8000f18:	f007 f9c4 	bl	80082a4 <lcd_send_string>
//						lcd_put_cur(2, 1);
//						lcd_send_string(string_l2_s0_r1);
					}
					if (data_receive.scroll == 1) {
 8000f1c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d104      	bne.n	8000f2e <handle_lcd+0x1e2>
						lcd_send_string(string_l2_s1_r0);
 8000f24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 f9bb 	bl	80082a4 <lcd_send_string>
					}
					if (data_receive.scroll == 2) {
 8000f2e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d104      	bne.n	8000f40 <handle_lcd+0x1f4>
						lcd_send_string(string_l2_s2_r0);
 8000f36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f007 f9b2 	bl	80082a4 <lcd_send_string>
					}
				}
				if (data_receive.level == 3) {
 8000f40:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d19e      	bne.n	8000e86 <handle_lcd+0x13a>
					lcd_display_clear_i2c();
 8000f48:	f007 f8e6 	bl	8008118 <lcd_display_clear_i2c>
					lcd_display_return_home_i2c();
 8000f4c:	f007 f9bf 	bl	80082ce <lcd_display_return_home_i2c>

					if (data_receive.scroll == 0) {
 8000f50:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f040 80e6 	bne.w	8001126 <handle_lcd+0x3da>
						lcd_send_string(string_l3_s0_r0);
 8000f5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f007 f9a0 	bl	80082a4 <lcd_send_string>
						lcd_put_cur(2, 1);
 8000f64:	2101      	movs	r1, #1
 8000f66:	2002      	movs	r0, #2
 8000f68:	f007 f944 	bl	80081f4 <lcd_put_cur>
						lcd_send_string(time_to_string(&current_time));
 8000f6c:	485e      	ldr	r0, [pc, #376]	; (80010e8 <handle_lcd+0x39c>)
 8000f6e:	f000 fb8b 	bl	8001688 <time_to_string>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f007 f995 	bl	80082a4 <lcd_send_string>
						temp = data_receive.position_cursor + 1;
 8000f7a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

						if (data_receive.en_send_number == 1) {
 8000f84:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	f040 80b5 	bne.w	80010f8 <handle_lcd+0x3ac>
							if (data_receive.position_cursor < 2) {
 8000f8e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d809      	bhi.n	8000faa <handle_lcd+0x25e>
								number_array[data_receive.position_cursor] =
 8000f96:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
										data_receive.number;
 8000f9a:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
								number_array[data_receive.position_cursor] =
 8000f9e:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000fa8:	e029      	b.n	8000ffe <handle_lcd+0x2b2>

							} else if (data_receive.position_cursor < 5
 8000faa:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d80e      	bhi.n	8000fd0 <handle_lcd+0x284>
									&& data_receive.position_cursor > 2) {
 8000fb2:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d90a      	bls.n	8000fd0 <handle_lcd+0x284>
								number_array[data_receive.position_cursor - 1] =
 8000fba:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000fbe:	3b01      	subs	r3, #1
										data_receive.number;
 8000fc0:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
								number_array[data_receive.position_cursor - 1] =
 8000fc4:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8000fc8:	440b      	add	r3, r1
 8000fca:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000fce:	e016      	b.n	8000ffe <handle_lcd+0x2b2>

							} else if (data_receive.position_cursor < 8
 8000fd0:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000fd4:	2b07      	cmp	r3, #7
 8000fd6:	d80e      	bhi.n	8000ff6 <handle_lcd+0x2aa>
									&& data_receive.position_cursor > 5) {
 8000fd8:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000fdc:	2b05      	cmp	r3, #5
 8000fde:	d90a      	bls.n	8000ff6 <handle_lcd+0x2aa>
								number_array[data_receive.position_cursor - 2] =
 8000fe0:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8000fe4:	3b02      	subs	r3, #2
										data_receive.number;
 8000fe6:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
								number_array[data_receive.position_cursor - 2] =
 8000fea:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8000fee:	440b      	add	r3, r1
 8000ff0:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000ff4:	e003      	b.n	8000ffe <handle_lcd+0x2b2>
							} else {
								number_array[6] = data_receive.number;
 8000ff6:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8000ffa:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
							}
							current_time.hours = number_array[0] * 10
 8000ffe:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
									+ number_array[1];
 8001002:	461a      	mov	r2, r3
 8001004:	0092      	lsls	r2, r2, #2
 8001006:	4413      	add	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001010:	4413      	add	r3, r2
 8001012:	b2da      	uxtb	r2, r3
							current_time.hours = number_array[0] * 10
 8001014:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <handle_lcd+0x39c>)
 8001016:	709a      	strb	r2, [r3, #2]
							current_time.minutes = number_array[2] * 10
 8001018:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
									+ number_array[3];
 800101c:	461a      	mov	r2, r3
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	4413      	add	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800102a:	4413      	add	r3, r2
 800102c:	b2da      	uxtb	r2, r3
							current_time.minutes = number_array[2] * 10
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <handle_lcd+0x39c>)
 8001030:	705a      	strb	r2, [r3, #1]
							current_time.seconds = number_array[4] * 10
 8001032:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
									+ number_array[5];
 8001036:	461a      	mov	r2, r3
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	4413      	add	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001044:	4413      	add	r3, r2
 8001046:	b2da      	uxtb	r2, r3
							current_time.seconds = number_array[4] * 10
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <handle_lcd+0x39c>)
 800104a:	701a      	strb	r2, [r3, #0]
							current_time.time_format = number_array[6];
 800104c:	f897 20ae 	ldrb.w	r2, [r7, #174]	; 0xae
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <handle_lcd+0x39c>)
 8001052:	70da      	strb	r2, [r3, #3]

							ds3231_set_current_time(&current_time);
 8001054:	4824      	ldr	r0, [pc, #144]	; (80010e8 <handle_lcd+0x39c>)
 8001056:	f006 fd6d 	bl	8007b34 <ds3231_set_current_time>

							lcd_put_cur(2, 1);
 800105a:	2101      	movs	r1, #1
 800105c:	2002      	movs	r0, #2
 800105e:	f007 f8c9 	bl	80081f4 <lcd_put_cur>
							lcd_send_string(time_to_string(&current_time));
 8001062:	4821      	ldr	r0, [pc, #132]	; (80010e8 <handle_lcd+0x39c>)
 8001064:	f000 fb10 	bl	8001688 <time_to_string>
 8001068:	4603      	mov	r3, r0
 800106a:	4618      	mov	r0, r3
 800106c:	f007 f91a 	bl	80082a4 <lcd_send_string>

							if (temp == 2 || temp == 5) {
 8001070:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001074:	2b02      	cmp	r3, #2
 8001076:	d003      	beq.n	8001080 <handle_lcd+0x334>
 8001078:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800107c:	2b05      	cmp	r3, #5
 800107e:	d107      	bne.n	8001090 <handle_lcd+0x344>
								lcd_put_cur(2, temp + 2);
 8001080:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001084:	3302      	adds	r3, #2
 8001086:	4619      	mov	r1, r3
 8001088:	2002      	movs	r0, #2
 800108a:	f007 f8b3 	bl	80081f4 <lcd_put_cur>
 800108e:	e044      	b.n	800111a <handle_lcd+0x3ce>
							} else if (temp == 8) {
 8001090:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001094:	2b08      	cmp	r3, #8
 8001096:	d107      	bne.n	80010a8 <handle_lcd+0x35c>
								lcd_put_cur(2, temp + 3);
 8001098:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800109c:	3303      	adds	r3, #3
 800109e:	4619      	mov	r1, r3
 80010a0:	2002      	movs	r0, #2
 80010a2:	f007 f8a7 	bl	80081f4 <lcd_put_cur>
 80010a6:	e038      	b.n	800111a <handle_lcd+0x3ce>
							} else if (temp == 11) {
 80010a8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80010ac:	2b0b      	cmp	r3, #11
 80010ae:	d104      	bne.n	80010ba <handle_lcd+0x36e>
								lcd_put_cur(2, 1);
 80010b0:	2101      	movs	r1, #1
 80010b2:	2002      	movs	r0, #2
 80010b4:	f007 f89e 	bl	80081f4 <lcd_put_cur>
 80010b8:	e02f      	b.n	800111a <handle_lcd+0x3ce>
							} else {
								lcd_put_cur(2, temp + 1);
 80010ba:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80010be:	3301      	adds	r3, #1
 80010c0:	4619      	mov	r1, r3
 80010c2:	2002      	movs	r0, #2
 80010c4:	f007 f896 	bl	80081f4 <lcd_put_cur>
 80010c8:	e027      	b.n	800111a <handle_lcd+0x3ce>
 80010ca:	bf00      	nop
 80010cc:	08008d74 	.word	0x08008d74
 80010d0:	08008d84 	.word	0x08008d84
 80010d4:	08008d94 	.word	0x08008d94
 80010d8:	08008da8 	.word	0x08008da8
 80010dc:	08008db8 	.word	0x08008db8
 80010e0:	08008dc8 	.word	0x08008dc8
 80010e4:	08008ddc 	.word	0x08008ddc
 80010e8:	200170a0 	.word	0x200170a0
 80010ec:	20017044 	.word	0x20017044
 80010f0:	20017128 	.word	0x20017128
 80010f4:	20017120 	.word	0x20017120
							}
						} else {

							lcd_put_cur(2, 1);
 80010f8:	2101      	movs	r1, #1
 80010fa:	2002      	movs	r0, #2
 80010fc:	f007 f87a 	bl	80081f4 <lcd_put_cur>
							lcd_send_string(time_to_string(&current_time));
 8001100:	48d2      	ldr	r0, [pc, #840]	; (800144c <handle_lcd+0x700>)
 8001102:	f000 fac1 	bl	8001688 <time_to_string>
 8001106:	4603      	mov	r3, r0
 8001108:	4618      	mov	r0, r3
 800110a:	f007 f8cb 	bl	80082a4 <lcd_send_string>
							lcd_put_cur(2, temp);
 800110e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001112:	4619      	mov	r1, r3
 8001114:	2002      	movs	r0, #2
 8001116:	f007 f86d 	bl	80081f4 <lcd_put_cur>

						}

						data_receive.en_send_number = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
						//blink cursor on lcd
						lcd_send_cmd(0x0F);
 8001120:	200f      	movs	r0, #15
 8001122:	f007 f803 	bl	800812c <lcd_send_cmd>
					}

					if (data_receive.scroll == 1) {
 8001126:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800112a:	2b01      	cmp	r3, #1
 800112c:	f040 80cf 	bne.w	80012ce <handle_lcd+0x582>
						lcd_send_string(string_l3_s1_r0);
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	4618      	mov	r0, r3
 8001136:	f007 f8b5 	bl	80082a4 <lcd_send_string>
						lcd_put_cur(2, 1);
 800113a:	2101      	movs	r1, #1
 800113c:	2002      	movs	r0, #2
 800113e:	f007 f859 	bl	80081f4 <lcd_put_cur>
						lcd_send_string(date_to_string(&current_date));
 8001142:	48c3      	ldr	r0, [pc, #780]	; (8001450 <handle_lcd+0x704>)
 8001144:	f000 fae0 	bl	8001708 <date_to_string>
 8001148:	4603      	mov	r3, r0
 800114a:	4618      	mov	r0, r3
 800114c:	f007 f8aa 	bl	80082a4 <lcd_send_string>
						temp_day = data_receive.position_cursor + 1;
 8001150:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001154:	3301      	adds	r3, #1
 8001156:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

						if (data_receive.en_send_number == 1) {
 800115a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800115e:	2b01      	cmp	r3, #1
 8001160:	f040 809e 	bne.w	80012a0 <handle_lcd+0x554>
							if (data_receive.position_cursor < 2) {
 8001164:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001168:	2b01      	cmp	r3, #1
 800116a:	d809      	bhi.n	8001180 <handle_lcd+0x434>
								number_array_day[data_receive.position_cursor] =
 800116c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
										data_receive.number;
 8001170:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
								number_array_day[data_receive.position_cursor] =
 8001174:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001178:	440b      	add	r3, r1
 800117a:	f803 2c18 	strb.w	r2, [r3, #-24]
 800117e:	e029      	b.n	80011d4 <handle_lcd+0x488>
							} else if (data_receive.position_cursor < 5
 8001180:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001184:	2b04      	cmp	r3, #4
 8001186:	d80e      	bhi.n	80011a6 <handle_lcd+0x45a>
									&& data_receive.position_cursor > 2) {
 8001188:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d90a      	bls.n	80011a6 <handle_lcd+0x45a>
								number_array_day[data_receive.position_cursor
 8001190:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
										- 1] = data_receive.number;
 8001194:	3b01      	subs	r3, #1
 8001196:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 800119a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800119e:	440b      	add	r3, r1
 80011a0:	f803 2c18 	strb.w	r2, [r3, #-24]
 80011a4:	e016      	b.n	80011d4 <handle_lcd+0x488>
							} else if (data_receive.position_cursor < 8
 80011a6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80011aa:	2b07      	cmp	r3, #7
 80011ac:	d80e      	bhi.n	80011cc <handle_lcd+0x480>
									&& data_receive.position_cursor > 5) {
 80011ae:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d90a      	bls.n	80011cc <handle_lcd+0x480>
								number_array_day[data_receive.position_cursor
 80011b6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
										- 2] = data_receive.number;
 80011ba:	3b02      	subs	r3, #2
 80011bc:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 80011c0:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80011c4:	440b      	add	r3, r1
 80011c6:	f803 2c18 	strb.w	r2, [r3, #-24]
 80011ca:	e003      	b.n	80011d4 <handle_lcd+0x488>
							} else {
								number_array_day[6] = data_receive.number;
 80011cc:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80011d0:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

							}

							current_date.date = number_array_day[0] * 10
 80011d4:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
									+ number_array_day[1];
 80011d8:	461a      	mov	r2, r3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4413      	add	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80011e6:	4413      	add	r3, r2
 80011e8:	b2da      	uxtb	r2, r3
							current_date.date = number_array_day[0] * 10
 80011ea:	4b99      	ldr	r3, [pc, #612]	; (8001450 <handle_lcd+0x704>)
 80011ec:	701a      	strb	r2, [r3, #0]
							current_date.month = number_array_day[2] * 10
 80011ee:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
									+ number_array_day[3];
 80011f2:	461a      	mov	r2, r3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001200:	4413      	add	r3, r2
 8001202:	b2da      	uxtb	r2, r3
							current_date.month = number_array_day[2] * 10
 8001204:	4b92      	ldr	r3, [pc, #584]	; (8001450 <handle_lcd+0x704>)
 8001206:	705a      	strb	r2, [r3, #1]
							current_date.year = number_array_day[4] * 10
 8001208:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
									+ number_array_day[5];
 800120c:	461a      	mov	r2, r3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4413      	add	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800121a:	4413      	add	r3, r2
 800121c:	b2da      	uxtb	r2, r3
							current_date.year = number_array_day[4] * 10
 800121e:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <handle_lcd+0x704>)
 8001220:	709a      	strb	r2, [r3, #2]
							current_date.day = number_array_day[6];
 8001222:	f897 20a6 	ldrb.w	r2, [r7, #166]	; 0xa6
 8001226:	4b8a      	ldr	r3, [pc, #552]	; (8001450 <handle_lcd+0x704>)
 8001228:	70da      	strb	r2, [r3, #3]
							ds3231_set_current_date(&current_date);
 800122a:	4889      	ldr	r0, [pc, #548]	; (8001450 <handle_lcd+0x704>)
 800122c:	f006 fccb 	bl	8007bc6 <ds3231_set_current_date>

							lcd_put_cur(2, 1);
 8001230:	2101      	movs	r1, #1
 8001232:	2002      	movs	r0, #2
 8001234:	f006 ffde 	bl	80081f4 <lcd_put_cur>
							lcd_send_string(date_to_string(&current_date));
 8001238:	4885      	ldr	r0, [pc, #532]	; (8001450 <handle_lcd+0x704>)
 800123a:	f000 fa65 	bl	8001708 <date_to_string>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	f007 f82f 	bl	80082a4 <lcd_send_string>
							if (temp_day == 2 || temp_day == 5) {
 8001246:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800124a:	2b02      	cmp	r3, #2
 800124c:	d003      	beq.n	8001256 <handle_lcd+0x50a>
 800124e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001252:	2b05      	cmp	r3, #5
 8001254:	d107      	bne.n	8001266 <handle_lcd+0x51a>
								lcd_put_cur(2, temp_day + 2);
 8001256:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800125a:	3302      	adds	r3, #2
 800125c:	4619      	mov	r1, r3
 800125e:	2002      	movs	r0, #2
 8001260:	f006 ffc8 	bl	80081f4 <lcd_put_cur>
 8001264:	e02d      	b.n	80012c2 <handle_lcd+0x576>
							} else if (temp_day == 8) {
 8001266:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800126a:	2b08      	cmp	r3, #8
 800126c:	d107      	bne.n	800127e <handle_lcd+0x532>
								lcd_put_cur(2, temp_day + 3);
 800126e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001272:	3303      	adds	r3, #3
 8001274:	4619      	mov	r1, r3
 8001276:	2002      	movs	r0, #2
 8001278:	f006 ffbc 	bl	80081f4 <lcd_put_cur>
 800127c:	e021      	b.n	80012c2 <handle_lcd+0x576>
							} else if (temp_day == 11) {
 800127e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001282:	2b0b      	cmp	r3, #11
 8001284:	d104      	bne.n	8001290 <handle_lcd+0x544>
								lcd_put_cur(2, 1);
 8001286:	2101      	movs	r1, #1
 8001288:	2002      	movs	r0, #2
 800128a:	f006 ffb3 	bl	80081f4 <lcd_put_cur>
 800128e:	e018      	b.n	80012c2 <handle_lcd+0x576>
							} else {
								lcd_put_cur(2, temp_day + 1);
 8001290:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001294:	3301      	adds	r3, #1
 8001296:	4619      	mov	r1, r3
 8001298:	2002      	movs	r0, #2
 800129a:	f006 ffab 	bl	80081f4 <lcd_put_cur>
 800129e:	e010      	b.n	80012c2 <handle_lcd+0x576>
							}
						} else {
							lcd_put_cur(2, 1);
 80012a0:	2101      	movs	r1, #1
 80012a2:	2002      	movs	r0, #2
 80012a4:	f006 ffa6 	bl	80081f4 <lcd_put_cur>
							lcd_send_string(date_to_string(&current_date));
 80012a8:	4869      	ldr	r0, [pc, #420]	; (8001450 <handle_lcd+0x704>)
 80012aa:	f000 fa2d 	bl	8001708 <date_to_string>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f006 fff7 	bl	80082a4 <lcd_send_string>
							lcd_put_cur(2, temp_day);
 80012b6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80012ba:	4619      	mov	r1, r3
 80012bc:	2002      	movs	r0, #2
 80012be:	f006 ff99 	bl	80081f4 <lcd_put_cur>
						}

						data_receive.en_send_number = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
						//blink cursor on lcd
						lcd_send_cmd(0x0F);
 80012c8:	200f      	movs	r0, #15
 80012ca:	f006 ff2f 	bl	800812c <lcd_send_cmd>
					}

					if (data_receive.scroll == 2) {
 80012ce:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	f47f add7 	bne.w	8000e86 <handle_lcd+0x13a>
						lcd_send_string(string_l3_s2_r0);
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4618      	mov	r0, r3
 80012de:	f006 ffe1 	bl	80082a4 <lcd_send_string>
						lcd_put_cur(2, 1);
 80012e2:	2101      	movs	r1, #1
 80012e4:	2002      	movs	r0, #2
 80012e6:	f006 ff85 	bl	80081f4 <lcd_put_cur>
						lcd_send_string(time_to_string(&time_alarm1));
 80012ea:	485a      	ldr	r0, [pc, #360]	; (8001454 <handle_lcd+0x708>)
 80012ec:	f000 f9cc 	bl	8001688 <time_to_string>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 ffd6 	bl	80082a4 <lcd_send_string>
						temp_al = data_receive.position_cursor + 1;
 80012f8:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80012fc:	3301      	adds	r3, #1
 80012fe:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5

						if (data_receive.en_send_number == 1) {
 8001302:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8001306:	2b01      	cmp	r3, #1
 8001308:	f040 80a8 	bne.w	800145c <handle_lcd+0x710>
							if (data_receive.position_cursor < 2) {
 800130c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001310:	2b01      	cmp	r3, #1
 8001312:	d809      	bhi.n	8001328 <handle_lcd+0x5dc>
								number_array_al[data_receive.position_cursor] =
 8001314:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
										data_receive.number;
 8001318:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
								number_array_al[data_receive.position_cursor] =
 800131c:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001320:	440b      	add	r3, r1
 8001322:	f803 2c20 	strb.w	r2, [r3, #-32]
 8001326:	e029      	b.n	800137c <handle_lcd+0x630>

							} else if (data_receive.position_cursor < 5
 8001328:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800132c:	2b04      	cmp	r3, #4
 800132e:	d80e      	bhi.n	800134e <handle_lcd+0x602>
									&& data_receive.position_cursor > 2) {
 8001330:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d90a      	bls.n	800134e <handle_lcd+0x602>
								number_array_al[data_receive.position_cursor - 1] =
 8001338:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800133c:	3b01      	subs	r3, #1
										data_receive.number;
 800133e:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
								number_array_al[data_receive.position_cursor - 1] =
 8001342:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001346:	440b      	add	r3, r1
 8001348:	f803 2c20 	strb.w	r2, [r3, #-32]
 800134c:	e016      	b.n	800137c <handle_lcd+0x630>

							} else if (data_receive.position_cursor < 8
 800134e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001352:	2b07      	cmp	r3, #7
 8001354:	d80e      	bhi.n	8001374 <handle_lcd+0x628>
									&& data_receive.position_cursor > 5) {
 8001356:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800135a:	2b05      	cmp	r3, #5
 800135c:	d90a      	bls.n	8001374 <handle_lcd+0x628>
								number_array_al[data_receive.position_cursor - 2] =
 800135e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001362:	3b02      	subs	r3, #2
										data_receive.number;
 8001364:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
								number_array_al[data_receive.position_cursor - 2] =
 8001368:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800136c:	440b      	add	r3, r1
 800136e:	f803 2c20 	strb.w	r2, [r3, #-32]
 8001372:	e003      	b.n	800137c <handle_lcd+0x630>

							} else {
								number_array_al[6] = data_receive.number;
 8001374:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8001378:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

							}

							time_alarm1.hours = number_array_al[0] * 10
 800137c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
									+ number_array_al[1];
 8001380:	461a      	mov	r2, r3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4413      	add	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800138e:	4413      	add	r3, r2
 8001390:	b2da      	uxtb	r2, r3
							time_alarm1.hours = number_array_al[0] * 10
 8001392:	4b30      	ldr	r3, [pc, #192]	; (8001454 <handle_lcd+0x708>)
 8001394:	709a      	strb	r2, [r3, #2]
							time_alarm1.minutes = number_array_al[2] * 10
 8001396:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
									+ number_array_al[3];
 800139a:	461a      	mov	r2, r3
 800139c:	0092      	lsls	r2, r2, #2
 800139e:	4413      	add	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80013a8:	4413      	add	r3, r2
 80013aa:	b2da      	uxtb	r2, r3
							time_alarm1.minutes = number_array_al[2] * 10
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <handle_lcd+0x708>)
 80013ae:	705a      	strb	r2, [r3, #1]
							time_alarm1.seconds = number_array_al[4] * 10
 80013b0:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
									+ number_array_al[5];
 80013b4:	461a      	mov	r2, r3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80013c2:	4413      	add	r3, r2
 80013c4:	b2da      	uxtb	r2, r3
							time_alarm1.seconds = number_array_al[4] * 10
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <handle_lcd+0x708>)
 80013c8:	701a      	strb	r2, [r3, #0]
							time_alarm1.am_pm = number_array_al[6];
 80013ca:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <handle_lcd+0x708>)
 80013d0:	711a      	strb	r2, [r3, #4]
							ds3231_set_time_alarm1(&time_alarm1, &date_alarm1,
 80013d2:	2208      	movs	r2, #8
 80013d4:	4920      	ldr	r1, [pc, #128]	; (8001458 <handle_lcd+0x70c>)
 80013d6:	481f      	ldr	r0, [pc, #124]	; (8001454 <handle_lcd+0x708>)
 80013d8:	f006 fd37 	bl	8007e4a <ds3231_set_time_alarm1>
									DS3231_MB_AL1_3);
							lcd_put_cur(2, 1);
 80013dc:	2101      	movs	r1, #1
 80013de:	2002      	movs	r0, #2
 80013e0:	f006 ff08 	bl	80081f4 <lcd_put_cur>
							lcd_send_string(time_to_string(&time_alarm1));
 80013e4:	481b      	ldr	r0, [pc, #108]	; (8001454 <handle_lcd+0x708>)
 80013e6:	f000 f94f 	bl	8001688 <time_to_string>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f006 ff59 	bl	80082a4 <lcd_send_string>

							if (temp_al == 2 || temp_al == 5) {
 80013f2:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d003      	beq.n	8001402 <handle_lcd+0x6b6>
 80013fa:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80013fe:	2b05      	cmp	r3, #5
 8001400:	d107      	bne.n	8001412 <handle_lcd+0x6c6>
								lcd_put_cur(2, temp_al + 2);
 8001402:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001406:	3302      	adds	r3, #2
 8001408:	4619      	mov	r1, r3
 800140a:	2002      	movs	r0, #2
 800140c:	f006 fef2 	bl	80081f4 <lcd_put_cur>
 8001410:	e035      	b.n	800147e <handle_lcd+0x732>
							} else if (temp_al == 8) {
 8001412:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001416:	2b08      	cmp	r3, #8
 8001418:	d107      	bne.n	800142a <handle_lcd+0x6de>
								lcd_put_cur(2, temp_al + 3);
 800141a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800141e:	3303      	adds	r3, #3
 8001420:	4619      	mov	r1, r3
 8001422:	2002      	movs	r0, #2
 8001424:	f006 fee6 	bl	80081f4 <lcd_put_cur>
 8001428:	e029      	b.n	800147e <handle_lcd+0x732>
							} else if (temp_al == 11) {
 800142a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800142e:	2b0b      	cmp	r3, #11
 8001430:	d104      	bne.n	800143c <handle_lcd+0x6f0>
								lcd_put_cur(2, 1);
 8001432:	2101      	movs	r1, #1
 8001434:	2002      	movs	r0, #2
 8001436:	f006 fedd 	bl	80081f4 <lcd_put_cur>
 800143a:	e020      	b.n	800147e <handle_lcd+0x732>
							} else {
								lcd_put_cur(2, temp_al + 1);
 800143c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001440:	3301      	adds	r3, #1
 8001442:	4619      	mov	r1, r3
 8001444:	2002      	movs	r0, #2
 8001446:	f006 fed5 	bl	80081f4 <lcd_put_cur>
 800144a:	e018      	b.n	800147e <handle_lcd+0x732>
 800144c:	200170a0 	.word	0x200170a0
 8001450:	20017044 	.word	0x20017044
 8001454:	2001712c 	.word	0x2001712c
 8001458:	20017048 	.word	0x20017048
							}
						} else {

							lcd_put_cur(2, 1);
 800145c:	2101      	movs	r1, #1
 800145e:	2002      	movs	r0, #2
 8001460:	f006 fec8 	bl	80081f4 <lcd_put_cur>
							lcd_send_string(time_to_string(&time_alarm1));
 8001464:	4809      	ldr	r0, [pc, #36]	; (800148c <handle_lcd+0x740>)
 8001466:	f000 f90f 	bl	8001688 <time_to_string>
 800146a:	4603      	mov	r3, r0
 800146c:	4618      	mov	r0, r3
 800146e:	f006 ff19 	bl	80082a4 <lcd_send_string>
							lcd_put_cur(2, temp_al);
 8001472:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001476:	4619      	mov	r1, r3
 8001478:	2002      	movs	r0, #2
 800147a:	f006 febb 	bl	80081f4 <lcd_put_cur>

						}

						data_receive.en_send_number = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
						//blink cursor on lcd
						lcd_send_cmd(0x0F);
 8001484:	200f      	movs	r0, #15
 8001486:	f006 fe51 	bl	800812c <lcd_send_cmd>
		if (qdata_key != NULL) {
 800148a:	e4fc      	b.n	8000e86 <handle_lcd+0x13a>
 800148c:	2001712c 	.word	0x2001712c

08001490 <handle_rtc>:
			}
		}

	}
}
void handle_rtc(void *parameters) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
//	TickType_t xLastWakeTime;
//	const TickType_t xFrequency = 1000;
//	xLastWakeTime = xTaskGetTickCount();

	while (1) {
		ds3231_get_current_time(&current_time);
 8001498:	480f      	ldr	r0, [pc, #60]	; (80014d8 <handle_rtc+0x48>)
 800149a:	f006 fbca 	bl	8007c32 <ds3231_get_current_time>
		ds3231_get_current_date(&current_date);
 800149e:	480f      	ldr	r0, [pc, #60]	; (80014dc <handle_rtc+0x4c>)
 80014a0:	f006 fc10 	bl	8007cc4 <ds3231_get_current_date>
		lcd_display_return_home_i2c();
 80014a4:	f006 ff13 	bl	80082ce <lcd_display_return_home_i2c>
		lcd_send_string(time_to_string(&current_time));
 80014a8:	480b      	ldr	r0, [pc, #44]	; (80014d8 <handle_rtc+0x48>)
 80014aa:	f000 f8ed 	bl	8001688 <time_to_string>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f006 fef7 	bl	80082a4 <lcd_send_string>
		lcd_put_cur(2, 1);
 80014b6:	2101      	movs	r1, #1
 80014b8:	2002      	movs	r0, #2
 80014ba:	f006 fe9b 	bl	80081f4 <lcd_put_cur>
		lcd_send_string(date_to_string(&current_date));
 80014be:	4807      	ldr	r0, [pc, #28]	; (80014dc <handle_rtc+0x4c>)
 80014c0:	f000 f922 	bl	8001708 <date_to_string>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f006 feec 	bl	80082a4 <lcd_send_string>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80014cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d0:	f003 fb74 	bl	8004bbc <vTaskDelay>
		ds3231_get_current_time(&current_time);
 80014d4:	e7e0      	b.n	8001498 <handle_rtc+0x8>
 80014d6:	bf00      	nop
 80014d8:	200170a0 	.word	0x200170a0
 80014dc:	20017044 	.word	0x20017044

080014e0 <number_to_string>:
	}
}

void number_to_string(uint8_t num, char *buf) {
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]

	if (num < 10) {
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b09      	cmp	r3, #9
 80014f0:	d809      	bhi.n	8001506 <number_to_string+0x26>
		buf[0] = '0';
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2230      	movs	r2, #48	; 0x30
 80014f6:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	3230      	adds	r2, #48	; 0x30
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	701a      	strb	r2, [r3, #0]
	} else if (num >= 10 && num <= 99) {
		buf[0] = (num / 10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 8001504:	e01f      	b.n	8001546 <number_to_string+0x66>
	} else if (num >= 10 && num <= 99) {
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2b09      	cmp	r3, #9
 800150a:	d91c      	bls.n	8001546 <number_to_string+0x66>
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b63      	cmp	r3, #99	; 0x63
 8001510:	d819      	bhi.n	8001546 <number_to_string+0x66>
		buf[0] = (num / 10) + 48;
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <number_to_string+0x74>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	3330      	adds	r3, #48	; 0x30
 8001520:	b2da      	uxtb	r2, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 8001526:	79fa      	ldrb	r2, [r7, #7]
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <number_to_string+0x74>)
 800152a:	fba3 1302 	umull	r1, r3, r3, r2
 800152e:	08d9      	lsrs	r1, r3, #3
 8001530:	460b      	mov	r3, r1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	b2da      	uxtb	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	3230      	adds	r2, #48	; 0x30
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	cccccccd 	.word	0xcccccccd

08001558 <am_pm_to_string>:
void am_pm_to_string(uint8_t am_pm, char *buf) {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]

	switch (am_pm) {
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <am_pm_to_string+0x18>
 800156a:	2b01      	cmp	r3, #1
 800156c:	d008      	beq.n	8001580 <am_pm_to_string+0x28>
	case 1:
		buf[0] = 'P';
		buf[1] = 'M';
		break;
	}
}
 800156e:	e00f      	b.n	8001590 <am_pm_to_string+0x38>
		buf[0] = 'A';
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2241      	movs	r2, #65	; 0x41
 8001574:	701a      	strb	r2, [r3, #0]
		buf[1] = 'M';
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	224d      	movs	r2, #77	; 0x4d
 800157c:	701a      	strb	r2, [r3, #0]
		break;
 800157e:	e007      	b.n	8001590 <am_pm_to_string+0x38>
		buf[0] = 'P';
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2250      	movs	r2, #80	; 0x50
 8001584:	701a      	strb	r2, [r3, #0]
		buf[1] = 'M';
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	224d      	movs	r2, #77	; 0x4d
 800158c:	701a      	strb	r2, [r3, #0]
		break;
 800158e:	bf00      	nop
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <day_to_string>:
void day_to_string(uint8_t day, char *buf) {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]

	switch (day) {
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	2b06      	cmp	r3, #6
 80015ae:	d865      	bhi.n	800167c <day_to_string+0xe0>
 80015b0:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <day_to_string+0x1c>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	080015d5 	.word	0x080015d5
 80015bc:	080015ed 	.word	0x080015ed
 80015c0:	08001605 	.word	0x08001605
 80015c4:	0800161d 	.word	0x0800161d
 80015c8:	08001635 	.word	0x08001635
 80015cc:	0800164d 	.word	0x0800164d
 80015d0:	08001665 	.word	0x08001665
	case 1:
		buf[0] = 'S';
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2253      	movs	r2, #83	; 0x53
 80015d8:	701a      	strb	r2, [r3, #0]
		buf[1] = 'u';
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	2275      	movs	r2, #117	; 0x75
 80015e0:	701a      	strb	r2, [r3, #0]
		buf[2] = 'n';
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	3302      	adds	r3, #2
 80015e6:	226e      	movs	r2, #110	; 0x6e
 80015e8:	701a      	strb	r2, [r3, #0]

		break;
 80015ea:	e047      	b.n	800167c <day_to_string+0xe0>
	case 2:
		buf[0] = 'M';
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	224d      	movs	r2, #77	; 0x4d
 80015f0:	701a      	strb	r2, [r3, #0]
		buf[1] = 'o';
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	226f      	movs	r2, #111	; 0x6f
 80015f8:	701a      	strb	r2, [r3, #0]
		buf[2] = 'n';
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	3302      	adds	r3, #2
 80015fe:	226e      	movs	r2, #110	; 0x6e
 8001600:	701a      	strb	r2, [r3, #0]
		break;
 8001602:	e03b      	b.n	800167c <day_to_string+0xe0>
	case 3:
		buf[0] = 'T';
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2254      	movs	r2, #84	; 0x54
 8001608:	701a      	strb	r2, [r3, #0]
		buf[1] = 'u';
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	2275      	movs	r2, #117	; 0x75
 8001610:	701a      	strb	r2, [r3, #0]
		buf[2] = 'e';
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	3302      	adds	r3, #2
 8001616:	2265      	movs	r2, #101	; 0x65
 8001618:	701a      	strb	r2, [r3, #0]
		break;
 800161a:	e02f      	b.n	800167c <day_to_string+0xe0>
	case 4:
		buf[0] = 'W';
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2257      	movs	r2, #87	; 0x57
 8001620:	701a      	strb	r2, [r3, #0]
		buf[1] = 'e';
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	2265      	movs	r2, #101	; 0x65
 8001628:	701a      	strb	r2, [r3, #0]
		buf[2] = 'd';
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	3302      	adds	r3, #2
 800162e:	2264      	movs	r2, #100	; 0x64
 8001630:	701a      	strb	r2, [r3, #0]

		break;
 8001632:	e023      	b.n	800167c <day_to_string+0xe0>
	case 5:
		buf[0] = 'T';
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2254      	movs	r2, #84	; 0x54
 8001638:	701a      	strb	r2, [r3, #0]
		buf[1] = 'h';
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	2268      	movs	r2, #104	; 0x68
 8001640:	701a      	strb	r2, [r3, #0]
		buf[2] = 'u';
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	3302      	adds	r3, #2
 8001646:	2275      	movs	r2, #117	; 0x75
 8001648:	701a      	strb	r2, [r3, #0]
		break;
 800164a:	e017      	b.n	800167c <day_to_string+0xe0>
	case 6:
		buf[0] = 'F';
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2246      	movs	r2, #70	; 0x46
 8001650:	701a      	strb	r2, [r3, #0]
		buf[1] = 'r';
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	2272      	movs	r2, #114	; 0x72
 8001658:	701a      	strb	r2, [r3, #0]
		buf[2] = 'i';
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	3302      	adds	r3, #2
 800165e:	2269      	movs	r2, #105	; 0x69
 8001660:	701a      	strb	r2, [r3, #0]
		break;
 8001662:	e00b      	b.n	800167c <day_to_string+0xe0>
	case 7:
		buf[0] = 'S';
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2253      	movs	r2, #83	; 0x53
 8001668:	701a      	strb	r2, [r3, #0]
		buf[1] = 'a';
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	2261      	movs	r2, #97	; 0x61
 8001670:	701a      	strb	r2, [r3, #0]
		buf[2] = 't';
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3302      	adds	r3, #2
 8001676:	2274      	movs	r2, #116	; 0x74
 8001678:	701a      	strb	r2, [r3, #0]
		break;
 800167a:	bf00      	nop
	}
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <time_to_string>:
//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	static char buf[14];

	buf[2] = ':';
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <time_to_string+0x70>)
 8001692:	223a      	movs	r2, #58	; 0x3a
 8001694:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <time_to_string+0x70>)
 8001698:	223a      	movs	r2, #58	; 0x3a
 800169a:	715a      	strb	r2, [r3, #5]
	buf[8] = ' ';
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <time_to_string+0x70>)
 800169e:	2220      	movs	r2, #32
 80016a0:	721a      	strb	r2, [r3, #8]
	buf[9] = '<';
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <time_to_string+0x70>)
 80016a4:	223c      	movs	r2, #60	; 0x3c
 80016a6:	725a      	strb	r2, [r3, #9]
	buf[12] = '>';
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <time_to_string+0x70>)
 80016aa:	223e      	movs	r2, #62	; 0x3e
 80016ac:	731a      	strb	r2, [r3, #12]
	number_to_string(rtc_time->hours, buf);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	789b      	ldrb	r3, [r3, #2]
 80016b2:	4911      	ldr	r1, [pc, #68]	; (80016f8 <time_to_string+0x70>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff13 	bl	80014e0 <number_to_string>
	number_to_string(rtc_time->minutes, &buf[3]);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	490f      	ldr	r1, [pc, #60]	; (80016fc <time_to_string+0x74>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff0d 	bl	80014e0 <number_to_string>
	number_to_string(rtc_time->seconds, &buf[6]);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	490d      	ldr	r1, [pc, #52]	; (8001700 <time_to_string+0x78>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff07 	bl	80014e0 <number_to_string>
	if (rtc_time->time_format != TIME_FORMAT_24HRS) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	78db      	ldrb	r3, [r3, #3]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d005      	beq.n	80016e6 <time_to_string+0x5e>
		am_pm_to_string(rtc_time->time_format, &buf[10]);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	78db      	ldrb	r3, [r3, #3]
 80016de:	4909      	ldr	r1, [pc, #36]	; (8001704 <time_to_string+0x7c>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff39 	bl	8001558 <am_pm_to_string>
	}
	buf[13] = '\0';
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <time_to_string+0x70>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	735a      	strb	r2, [r3, #13]

	return buf;
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <time_to_string+0x70>)

}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200000b4 	.word	0x200000b4
 80016fc:	200000b7 	.word	0x200000b7
 8001700:	200000ba 	.word	0x200000ba
 8001704:	200000be 	.word	0x200000be

08001708 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	static char buf[15];

	buf[2] = '/';
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <date_to_string+0x68>)
 8001712:	222f      	movs	r2, #47	; 0x2f
 8001714:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <date_to_string+0x68>)
 8001718:	222f      	movs	r2, #47	; 0x2f
 800171a:	715a      	strb	r2, [r3, #5]
	buf[8] = ' ';
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <date_to_string+0x68>)
 800171e:	2220      	movs	r2, #32
 8001720:	721a      	strb	r2, [r3, #8]
	buf[9] = '<';
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <date_to_string+0x68>)
 8001724:	223c      	movs	r2, #60	; 0x3c
 8001726:	725a      	strb	r2, [r3, #9]
	buf[13] = '>';
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <date_to_string+0x68>)
 800172a:	223e      	movs	r2, #62	; 0x3e
 800172c:	735a      	strb	r2, [r3, #13]
	number_to_string(rtc_date->date, buf);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	490f      	ldr	r1, [pc, #60]	; (8001770 <date_to_string+0x68>)
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fed3 	bl	80014e0 <number_to_string>
	number_to_string(rtc_date->month, &buf[3]);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	785b      	ldrb	r3, [r3, #1]
 800173e:	490d      	ldr	r1, [pc, #52]	; (8001774 <date_to_string+0x6c>)
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fecd 	bl	80014e0 <number_to_string>
	number_to_string(rtc_date->year, &buf[6]);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	789b      	ldrb	r3, [r3, #2]
 800174a:	490b      	ldr	r1, [pc, #44]	; (8001778 <date_to_string+0x70>)
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fec7 	bl	80014e0 <number_to_string>
	day_to_string(rtc_date->day, &buf[10]);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	78db      	ldrb	r3, [r3, #3]
 8001756:	4909      	ldr	r1, [pc, #36]	; (800177c <date_to_string+0x74>)
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff1f 	bl	800159c <day_to_string>
	buf[14] = '\0';
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <date_to_string+0x68>)
 8001760:	2200      	movs	r2, #0
 8001762:	739a      	strb	r2, [r3, #14]

	return buf;
 8001764:	4b02      	ldr	r3, [pc, #8]	; (8001770 <date_to_string+0x68>)

}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200000c4 	.word	0x200000c4
 8001774:	200000c7 	.word	0x200000c7
 8001778:	200000ca 	.word	0x200000ca
 800177c:	200000ce 	.word	0x200000ce

08001780 <alarm>:

void alarm(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <alarm+0x18>)
 800178c:	f000 fd12 	bl	80021b4 <HAL_GPIO_WritePin>

	//RESET ALARM SIGNAL
	ds3231_clear_sr();
 8001790:	f006 fc2b 	bl	8007fea <ds3231_clear_sr>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40020c00 	.word	0x40020c00

0800179c <btn_off_alarm>:

void btn_off_alarm(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a6:	4802      	ldr	r0, [pc, #8]	; (80017b0 <btn_off_alarm+0x14>)
 80017a8:	f000 fd04 	bl	80021b4 <HAL_GPIO_WritePin>
//	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40020c00 	.word	0x40020c00

080017b4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80017c6:	f000 fa33 	bl	8001c30 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40000c00 	.word	0x40000c00

080017d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017e0:	e7fe      	b.n	80017e0 <Error_Handler+0x8>
	...

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <HAL_MspInit+0x4c>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_MspInit+0x4c>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8001822:	f004 f969 	bl	8005af8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a3a      	ldr	r2, [pc, #232]	; (800193c <HAL_I2C_MspInit+0x108>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d12c      	bne.n	80018b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	4b39      	ldr	r3, [pc, #228]	; (8001940 <HAL_I2C_MspInit+0x10c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a38      	ldr	r2, [pc, #224]	; (8001940 <HAL_I2C_MspInit+0x10c>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <HAL_I2C_MspInit+0x10c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001872:	23c0      	movs	r3, #192	; 0xc0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001876:	2312      	movs	r3, #18
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001882:	2304      	movs	r3, #4
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	482d      	ldr	r0, [pc, #180]	; (8001944 <HAL_I2C_MspInit+0x110>)
 800188e:	f000 faf5 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_I2C_MspInit+0x10c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a29      	ldr	r2, [pc, #164]	; (8001940 <HAL_I2C_MspInit+0x10c>)
 800189c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b27      	ldr	r3, [pc, #156]	; (8001940 <HAL_I2C_MspInit+0x10c>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018ae:	e041      	b.n	8001934 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a24      	ldr	r2, [pc, #144]	; (8001948 <HAL_I2C_MspInit+0x114>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d13c      	bne.n	8001934 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_I2C_MspInit+0x10c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a1f      	ldr	r2, [pc, #124]	; (8001940 <HAL_I2C_MspInit+0x10c>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_I2C_MspInit+0x10c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018dc:	2312      	movs	r3, #18
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018e8:	2304      	movs	r3, #4
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4814      	ldr	r0, [pc, #80]	; (8001944 <HAL_I2C_MspInit+0x110>)
 80018f4:	f000 fac2 	bl	8001e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018f8:	2308      	movs	r3, #8
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fc:	2312      	movs	r3, #18
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001900:	2301      	movs	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001908:	2309      	movs	r3, #9
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4619      	mov	r1, r3
 8001912:	480c      	ldr	r0, [pc, #48]	; (8001944 <HAL_I2C_MspInit+0x110>)
 8001914:	f000 fab2 	bl	8001e7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_I2C_MspInit+0x10c>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_I2C_MspInit+0x10c>)
 8001922:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001926:	6413      	str	r3, [r2, #64]	; 0x40
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_I2C_MspInit+0x10c>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	bf00      	nop
 8001936:	3730      	adds	r7, #48	; 0x30
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40005400 	.word	0x40005400
 8001940:	40023800 	.word	0x40023800
 8001944:	40020400 	.word	0x40020400
 8001948:	40005800 	.word	0x40005800

0800194c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	2032      	movs	r0, #50	; 0x32
 8001962:	f000 fa61 	bl	8001e28 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001966:	2032      	movs	r0, #50	; 0x32
 8001968:	f000 fa7a 	bl	8001e60 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <HAL_InitTick+0xa4>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	4a1e      	ldr	r2, [pc, #120]	; (80019f0 <HAL_InitTick+0xa4>)
 8001976:	f043 0308 	orr.w	r3, r3, #8
 800197a:	6413      	str	r3, [r2, #64]	; 0x40
 800197c:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <HAL_InitTick+0xa4>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001988:	f107 0210 	add.w	r2, r7, #16
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f002 f842 	bl	8003a1c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001998:	f002 f82c 	bl	80039f4 <HAL_RCC_GetPCLK1Freq>
 800199c:	4603      	mov	r3, r0
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a4:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <HAL_InitTick+0xa8>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	0c9b      	lsrs	r3, r3, #18
 80019ac:	3b01      	subs	r3, #1
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_InitTick+0xac>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <HAL_InitTick+0xb0>)
 80019b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_InitTick+0xac>)
 80019b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019bc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80019be:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_InitTick+0xac>)
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_InitTick+0xac>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_InitTick+0xac>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80019d0:	4809      	ldr	r0, [pc, #36]	; (80019f8 <HAL_InitTick+0xac>)
 80019d2:	f002 f855 	bl	8003a80 <HAL_TIM_Base_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d104      	bne.n	80019e6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80019dc:	4806      	ldr	r0, [pc, #24]	; (80019f8 <HAL_InitTick+0xac>)
 80019de:	f002 f8a9 	bl	8003b34 <HAL_TIM_Base_Start_IT>
 80019e2:	4603      	mov	r3, r0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3730      	adds	r7, #48	; 0x30
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	431bde83 	.word	0x431bde83
 80019f8:	20017134 	.word	0x20017134
 80019fc:	40000c00 	.word	0x40000c00

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001a04:	e7fe      	b.n	8001a04 <NMI_Handler+0x4>

08001a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <MemManage_Handler+0x4>

08001a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f000 fbd9 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  btn_off_alarm();
 8001a36:	f7ff feb1 	bl	800179c <btn_off_alarm>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROW_1_Pin);
 8001a42:	2020      	movs	r0, #32
 8001a44:	f000 fbd0 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  alarm();
 8001a48:	f7ff fe9a 	bl	8001780 <alarm>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <TIM5_IRQHandler+0x10>)
 8001a56:	f002 f8cf 	bl	8003bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20017134 	.word	0x20017134

08001a64 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e00a      	b.n	8001a8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a76:	f3af 8000 	nop.w
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	60ba      	str	r2, [r7, #8]
 8001a82:	b2ca      	uxtb	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf0      	blt.n	8001a76 <_read+0x12>
	}

return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
	return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_isatty>:

int _isatty(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	return 1;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f006 fbd4 	bl	80082e4 <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20020000 	.word	0x20020000
 8001b68:	00000400 	.word	0x00000400
 8001b6c:	200000d4 	.word	0x200000d4
 8001b70:	20017238 	.word	0x20017238

08001b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <SystemInit+0x20>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <SystemInit+0x20>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9e:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb4:	4c0b      	ldr	r4, [pc, #44]	; (8001be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bc2:	f7ff ffd7 	bl	8001b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f006 fb93 	bl	80082f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bca:	f7fe fccf 	bl	800056c <main>
  bx  lr    
 8001bce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001bdc:	08008efc 	.word	0x08008efc
  ldr r2, =_sbss
 8001be0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001be4:	20017238 	.word	0x20017238

08001be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC_IRQHandler>
	...

08001bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <HAL_Init+0x40>)
 8001bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_Init+0x40>)
 8001c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_Init+0x40>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 f8fc 	bl	8001e12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1a:	200f      	movs	r0, #15
 8001c1c:	f7ff fe96 	bl	800194c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c20:	f7ff fde0 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00

08001c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x20>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x24>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_IncTick+0x24>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000008 	.word	0x20000008
 8001c54:	2001717c 	.word	0x2001717c

08001c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_GetTick+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	2001717c 	.word	0x2001717c

08001c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff ffee 	bl	8001c58 <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d005      	beq.n	8001c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_Delay+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c96:	bf00      	nop
 8001c98:	f7ff ffde 	bl	8001c58 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f7      	bhi.n	8001c98 <HAL_Delay+0x28>
  {
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008

08001cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cea:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <__NVIC_GetPriorityGrouping+0x18>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	f003 0307 	and.w	r3, r3, #7
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	db0b      	blt.n	8001d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	f003 021f 	and.w	r2, r3, #31
 8001d34:	4907      	ldr	r1, [pc, #28]	; (8001d54 <__NVIC_EnableIRQ+0x38>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff4c 	bl	8001cb8 <__NVIC_SetPriorityGrouping>
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3a:	f7ff ff61 	bl	8001d00 <__NVIC_GetPriorityGrouping>
 8001e3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	68b9      	ldr	r1, [r7, #8]
 8001e44:	6978      	ldr	r0, [r7, #20]
 8001e46:	f7ff ffb1 	bl	8001dac <NVIC_EncodePriority>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ff80 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e58:	bf00      	nop
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ff54 	bl	8001d1c <__NVIC_EnableIRQ>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e159      	b.n	800214c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8148 	bne.w	8002146 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d005      	beq.n	8001ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d017      	beq.n	8001f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a2 	beq.w	8002146 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b57      	ldr	r3, [pc, #348]	; (8002164 <HAL_GPIO_Init+0x2e8>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a56      	ldr	r2, [pc, #344]	; (8002164 <HAL_GPIO_Init+0x2e8>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b54      	ldr	r3, [pc, #336]	; (8002164 <HAL_GPIO_Init+0x2e8>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201e:	4a52      	ldr	r2, [pc, #328]	; (8002168 <HAL_GPIO_Init+0x2ec>)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a49      	ldr	r2, [pc, #292]	; (800216c <HAL_GPIO_Init+0x2f0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0x202>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a48      	ldr	r2, [pc, #288]	; (8002170 <HAL_GPIO_Init+0x2f4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x1fe>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a47      	ldr	r2, [pc, #284]	; (8002174 <HAL_GPIO_Init+0x2f8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x1fa>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a46      	ldr	r2, [pc, #280]	; (8002178 <HAL_GPIO_Init+0x2fc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x1f6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a45      	ldr	r2, [pc, #276]	; (800217c <HAL_GPIO_Init+0x300>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x1f2>
 800206a:	2304      	movs	r3, #4
 800206c:	e008      	b.n	8002080 <HAL_GPIO_Init+0x204>
 800206e:	2307      	movs	r3, #7
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x204>
 8002072:	2303      	movs	r3, #3
 8002074:	e004      	b.n	8002080 <HAL_GPIO_Init+0x204>
 8002076:	2302      	movs	r3, #2
 8002078:	e002      	b.n	8002080 <HAL_GPIO_Init+0x204>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x204>
 800207e:	2300      	movs	r3, #0
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	f002 0203 	and.w	r2, r2, #3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4093      	lsls	r3, r2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002090:	4935      	ldr	r1, [pc, #212]	; (8002168 <HAL_GPIO_Init+0x2ec>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c2:	4a2f      	ldr	r2, [pc, #188]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ec:	4a24      	ldr	r2, [pc, #144]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f2:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002116:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <HAL_GPIO_Init+0x304>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_GPIO_Init+0x304>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002140:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <HAL_GPIO_Init+0x304>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	f67f aea2 	bls.w	8001e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40013800 	.word	0x40013800
 800216c:	40020000 	.word	0x40020000
 8002170:	40020400 	.word	0x40020400
 8002174:	40020800 	.word	0x40020800
 8002178:	40020c00 	.word	0x40020c00
 800217c:	40021000 	.word	0x40021000
 8002180:	40013c00 	.word	0x40013c00

08002184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e001      	b.n	80021a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c4:	787b      	ldrb	r3, [r7, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d0:	e003      	b.n	80021da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	041a      	lsls	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	619a      	str	r2, [r3, #24]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f806 	bl	8002218 <HAL_GPIO_EXTI_Callback>
  }
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40013c00 	.word	0x40013c00

08002218 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e12b      	b.n	800249a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff faec 	bl	8001834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2224      	movs	r2, #36	; 0x24
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002294:	f001 fbae 	bl	80039f4 <HAL_RCC_GetPCLK1Freq>
 8002298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a81      	ldr	r2, [pc, #516]	; (80024a4 <HAL_I2C_Init+0x274>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d807      	bhi.n	80022b4 <HAL_I2C_Init+0x84>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4a80      	ldr	r2, [pc, #512]	; (80024a8 <HAL_I2C_Init+0x278>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	bf94      	ite	ls
 80022ac:	2301      	movls	r3, #1
 80022ae:	2300      	movhi	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e006      	b.n	80022c2 <HAL_I2C_Init+0x92>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a7d      	ldr	r2, [pc, #500]	; (80024ac <HAL_I2C_Init+0x27c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0e7      	b.n	800249a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4a78      	ldr	r2, [pc, #480]	; (80024b0 <HAL_I2C_Init+0x280>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0c9b      	lsrs	r3, r3, #18
 80022d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a6a      	ldr	r2, [pc, #424]	; (80024a4 <HAL_I2C_Init+0x274>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d802      	bhi.n	8002304 <HAL_I2C_Init+0xd4>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	3301      	adds	r3, #1
 8002302:	e009      	b.n	8002318 <HAL_I2C_Init+0xe8>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	4a69      	ldr	r2, [pc, #420]	; (80024b4 <HAL_I2C_Init+0x284>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	3301      	adds	r3, #1
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	430b      	orrs	r3, r1
 800231e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800232a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	495c      	ldr	r1, [pc, #368]	; (80024a4 <HAL_I2C_Init+0x274>)
 8002334:	428b      	cmp	r3, r1
 8002336:	d819      	bhi.n	800236c <HAL_I2C_Init+0x13c>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1e59      	subs	r1, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fbb1 f3f3 	udiv	r3, r1, r3
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	f640 73fc 	movw	r3, #4092	; 0xffc
 800234c:	400b      	ands	r3, r1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_I2C_Init+0x138>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1e59      	subs	r1, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002366:	e051      	b.n	800240c <HAL_I2C_Init+0x1dc>
 8002368:	2304      	movs	r3, #4
 800236a:	e04f      	b.n	800240c <HAL_I2C_Init+0x1dc>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d111      	bne.n	8002398 <HAL_I2C_Init+0x168>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	440b      	add	r3, r1
 8002382:	fbb0 f3f3 	udiv	r3, r0, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	e012      	b.n	80023be <HAL_I2C_Init+0x18e>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1e58      	subs	r0, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	0099      	lsls	r1, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Init+0x196>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e022      	b.n	800240c <HAL_I2C_Init+0x1dc>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10e      	bne.n	80023ec <HAL_I2C_Init+0x1bc>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1e58      	subs	r0, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	440b      	add	r3, r1
 80023dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ea:	e00f      	b.n	800240c <HAL_I2C_Init+0x1dc>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1e58      	subs	r0, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	0099      	lsls	r1, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002402:	3301      	adds	r3, #1
 8002404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	6809      	ldr	r1, [r1, #0]
 8002410:	4313      	orrs	r3, r2
 8002412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800243a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6911      	ldr	r1, [r2, #16]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68d2      	ldr	r2, [r2, #12]
 8002446:	4311      	orrs	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	430b      	orrs	r3, r1
 800244e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	000186a0 	.word	0x000186a0
 80024a8:	001e847f 	.word	0x001e847f
 80024ac:	003d08ff 	.word	0x003d08ff
 80024b0:	431bde83 	.word	0x431bde83
 80024b4:	10624dd3 	.word	0x10624dd3

080024b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	461a      	mov	r2, r3
 80024c4:	460b      	mov	r3, r1
 80024c6:	817b      	strh	r3, [r7, #10]
 80024c8:	4613      	mov	r3, r2
 80024ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff fbc4 	bl	8001c58 <HAL_GetTick>
 80024d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b20      	cmp	r3, #32
 80024dc:	f040 80e0 	bne.w	80026a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2319      	movs	r3, #25
 80024e6:	2201      	movs	r2, #1
 80024e8:	4970      	ldr	r1, [pc, #448]	; (80026ac <HAL_I2C_Master_Transmit+0x1f4>)
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fc58 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
 80024f8:	e0d3      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_I2C_Master_Transmit+0x50>
 8002504:	2302      	movs	r3, #2
 8002506:	e0cc      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d007      	beq.n	800252e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800253c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2221      	movs	r2, #33	; 0x21
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2210      	movs	r2, #16
 800254a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	893a      	ldrh	r2, [r7, #8]
 800255e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a50      	ldr	r2, [pc, #320]	; (80026b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fac2 	bl	8002b00 <I2C_MasterRequestWrite>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e08d      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800259c:	e066      	b.n	800266c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	6a39      	ldr	r1, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fcd2 	bl	8002f4c <I2C_WaitOnTXEFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d107      	bne.n	80025c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06b      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b04      	cmp	r3, #4
 8002606:	d11b      	bne.n	8002640 <HAL_I2C_Master_Transmit+0x188>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	2b00      	cmp	r3, #0
 800260e:	d017      	beq.n	8002640 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	6a39      	ldr	r1, [r7, #32]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fcc2 	bl	8002fce <I2C_WaitOnBTFFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	2b04      	cmp	r3, #4
 8002656:	d107      	bne.n	8002668 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e01a      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	d194      	bne.n	800259e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	00100002 	.word	0x00100002
 80026b0:	ffff0000 	.word	0xffff0000

080026b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08c      	sub	sp, #48	; 0x30
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	461a      	mov	r2, r3
 80026c0:	460b      	mov	r3, r1
 80026c2:	817b      	strh	r3, [r7, #10]
 80026c4:	4613      	mov	r3, r2
 80026c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff fac6 	bl	8001c58 <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	f040 820b 	bne.w	8002af2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2319      	movs	r3, #25
 80026e2:	2201      	movs	r2, #1
 80026e4:	497c      	ldr	r1, [pc, #496]	; (80028d8 <HAL_I2C_Master_Receive+0x224>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fb5a 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
 80026f4:	e1fe      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_I2C_Master_Receive+0x50>
 8002700:	2302      	movs	r3, #2
 8002702:	e1f7      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d007      	beq.n	800272a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002738:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2222      	movs	r2, #34	; 0x22
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2210      	movs	r2, #16
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	893a      	ldrh	r2, [r7, #8]
 800275a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a5c      	ldr	r2, [pc, #368]	; (80028dc <HAL_I2C_Master_Receive+0x228>)
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800276c:	8979      	ldrh	r1, [r7, #10]
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fa46 	bl	8002c04 <I2C_MasterRequestRead>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e1b8      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	d113      	bne.n	80027b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	623b      	str	r3, [r7, #32]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	623b      	str	r3, [r7, #32]
 800279e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e18c      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d11b      	bne.n	80027f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	e16c      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d11b      	bne.n	8002832 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002808:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002818:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	e14c      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002858:	e138      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	2b03      	cmp	r3, #3
 8002860:	f200 80f1 	bhi.w	8002a46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	2b01      	cmp	r3, #1
 800286a:	d123      	bne.n	80028b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fbed 	bl	8003050 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e139      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028b2:	e10b      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d14e      	bne.n	800295a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	2200      	movs	r2, #0
 80028c4:	4906      	ldr	r1, [pc, #24]	; (80028e0 <HAL_I2C_Master_Receive+0x22c>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fa6a 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e10e      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
 80028d6:	bf00      	nop
 80028d8:	00100002 	.word	0x00100002
 80028dc:	ffff0000 	.word	0xffff0000
 80028e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002958:	e0b8      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	2200      	movs	r2, #0
 8002962:	4966      	ldr	r1, [pc, #408]	; (8002afc <HAL_I2C_Master_Receive+0x448>)
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 fa1b 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0bf      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	2200      	movs	r2, #0
 80029be:	494f      	ldr	r1, [pc, #316]	; (8002afc <HAL_I2C_Master_Receive+0x448>)
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f9ed 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e091      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a44:	e042      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fb00 	bl	8003050 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e04c      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d118      	bne.n	8002acc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f47f aec2 	bne.w	800285a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3728      	adds	r7, #40	; 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	00010004 	.word	0x00010004

08002b00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d006      	beq.n	8002b2a <I2C_MasterRequestWrite+0x2a>
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d003      	beq.n	8002b2a <I2C_MasterRequestWrite+0x2a>
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b28:	d108      	bne.n	8002b3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e00b      	b.n	8002b54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	2b12      	cmp	r3, #18
 8002b42:	d107      	bne.n	8002b54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f91d 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00d      	beq.n	8002b88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b7a:	d103      	bne.n	8002b84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e035      	b.n	8002bf4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b90:	d108      	bne.n	8002ba4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b92:	897b      	ldrh	r3, [r7, #10]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ba0:	611a      	str	r2, [r3, #16]
 8002ba2:	e01b      	b.n	8002bdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ba4:	897b      	ldrh	r3, [r7, #10]
 8002ba6:	11db      	asrs	r3, r3, #7
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f003 0306 	and.w	r3, r3, #6
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f063 030f 	orn	r3, r3, #15
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	490e      	ldr	r1, [pc, #56]	; (8002bfc <I2C_MasterRequestWrite+0xfc>)
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f943 	bl	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e010      	b.n	8002bf4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bd2:	897b      	ldrh	r3, [r7, #10]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4907      	ldr	r1, [pc, #28]	; (8002c00 <I2C_MasterRequestWrite+0x100>)
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f933 	bl	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	00010008 	.word	0x00010008
 8002c00:	00010002 	.word	0x00010002

08002c04 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	460b      	mov	r3, r1
 8002c12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c28:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d006      	beq.n	8002c3e <I2C_MasterRequestRead+0x3a>
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d003      	beq.n	8002c3e <I2C_MasterRequestRead+0x3a>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c3c:	d108      	bne.n	8002c50 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	e00b      	b.n	8002c68 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	2b11      	cmp	r3, #17
 8002c56:	d107      	bne.n	8002c68 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f893 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00d      	beq.n	8002c9c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c8e:	d103      	bne.n	8002c98 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e079      	b.n	8002d90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca4:	d108      	bne.n	8002cb8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ca6:	897b      	ldrh	r3, [r7, #10]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	611a      	str	r2, [r3, #16]
 8002cb6:	e05f      	b.n	8002d78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cb8:	897b      	ldrh	r3, [r7, #10]
 8002cba:	11db      	asrs	r3, r3, #7
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f003 0306 	and.w	r3, r3, #6
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f063 030f 	orn	r3, r3, #15
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4930      	ldr	r1, [pc, #192]	; (8002d98 <I2C_MasterRequestRead+0x194>)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f8b9 	bl	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e054      	b.n	8002d90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ce6:	897b      	ldrh	r3, [r7, #10]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4929      	ldr	r1, [pc, #164]	; (8002d9c <I2C_MasterRequestRead+0x198>)
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f8a9 	bl	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e044      	b.n	8002d90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f831 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00d      	beq.n	8002d60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d52:	d103      	bne.n	8002d5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e017      	b.n	8002d90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d60:	897b      	ldrh	r3, [r7, #10]
 8002d62:	11db      	asrs	r3, r3, #7
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f003 0306 	and.w	r3, r3, #6
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f063 030e 	orn	r3, r3, #14
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4907      	ldr	r1, [pc, #28]	; (8002d9c <I2C_MasterRequestRead+0x198>)
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f865 	bl	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	00010008 	.word	0x00010008
 8002d9c:	00010002 	.word	0x00010002

08002da0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4613      	mov	r3, r2
 8002dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db0:	e025      	b.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d021      	beq.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dba:	f7fe ff4d 	bl	8001c58 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d302      	bcc.n	8002dd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d116      	bne.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f043 0220 	orr.w	r2, r3, #32
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e023      	b.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d10d      	bne.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4013      	ands	r3, r2
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bf0c      	ite	eq
 8002e1a:	2301      	moveq	r3, #1
 8002e1c:	2300      	movne	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	e00c      	b.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d0b6      	beq.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e5c:	e051      	b.n	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6c:	d123      	bne.n	8002eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f043 0204 	orr.w	r2, r3, #4
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e046      	b.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d021      	beq.n	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7fe fecb 	bl	8001c58 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d116      	bne.n	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0220 	orr.w	r2, r3, #32
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e020      	b.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d10c      	bne.n	8002f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	43da      	mvns	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4013      	ands	r3, r2
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	bf14      	ite	ne
 8002f1e:	2301      	movne	r3, #1
 8002f20:	2300      	moveq	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	e00b      	b.n	8002f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	43da      	mvns	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4013      	ands	r3, r2
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d18d      	bne.n	8002e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f58:	e02d      	b.n	8002fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f8ce 	bl	80030fc <I2C_IsAcknowledgeFailed>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e02d      	b.n	8002fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d021      	beq.n	8002fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7fe fe71 	bl	8001c58 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d116      	bne.n	8002fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e007      	b.n	8002fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc0:	2b80      	cmp	r3, #128	; 0x80
 8002fc2:	d1ca      	bne.n	8002f5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fda:	e02d      	b.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f88d 	bl	80030fc <I2C_IsAcknowledgeFailed>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e02d      	b.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d021      	beq.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff4:	f7fe fe30 	bl	8001c58 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	d302      	bcc.n	800300a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e007      	b.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d1ca      	bne.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800305c:	e042      	b.n	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b10      	cmp	r3, #16
 800306a:	d119      	bne.n	80030a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0210 	mvn.w	r2, #16
 8003074:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e029      	b.n	80030f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a0:	f7fe fdda 	bl	8001c58 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d302      	bcc.n	80030b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e007      	b.n	80030f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b40      	cmp	r3, #64	; 0x40
 80030f0:	d1b5      	bne.n	800305e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003112:	d11b      	bne.n	800314c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800311c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f043 0204 	orr.w	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e264      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d075      	beq.n	8003266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800317a:	4ba3      	ldr	r3, [pc, #652]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b04      	cmp	r3, #4
 8003184:	d00c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003186:	4ba0      	ldr	r3, [pc, #640]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800318e:	2b08      	cmp	r3, #8
 8003190:	d112      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003192:	4b9d      	ldr	r3, [pc, #628]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319e:	d10b      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	4b99      	ldr	r3, [pc, #612]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d05b      	beq.n	8003264 <HAL_RCC_OscConfig+0x108>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d157      	bne.n	8003264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e23f      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x74>
 80031c2:	4b91      	ldr	r3, [pc, #580]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a90      	ldr	r2, [pc, #576]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e01d      	b.n	800320c <HAL_RCC_OscConfig+0xb0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x98>
 80031da:	4b8b      	ldr	r3, [pc, #556]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a8a      	ldr	r2, [pc, #552]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b88      	ldr	r3, [pc, #544]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a87      	ldr	r2, [pc, #540]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0xb0>
 80031f4:	4b84      	ldr	r3, [pc, #528]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a83      	ldr	r2, [pc, #524]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b81      	ldr	r3, [pc, #516]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a80      	ldr	r2, [pc, #512]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fd20 	bl	8001c58 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321c:	f7fe fd1c 	bl	8001c58 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e204      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0xc0>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7fe fd0c 	bl	8001c58 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003244:	f7fe fd08 	bl	8001c58 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1f0      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003256:	4b6c      	ldr	r3, [pc, #432]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0xe8>
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d063      	beq.n	800333a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003272:	4b65      	ldr	r3, [pc, #404]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327e:	4b62      	ldr	r3, [pc, #392]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003286:	2b08      	cmp	r3, #8
 8003288:	d11c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328a:	4b5f      	ldr	r3, [pc, #380]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d116      	bne.n	80032c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	4b5c      	ldr	r3, [pc, #368]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_RCC_OscConfig+0x152>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d001      	beq.n	80032ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e1c4      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ae:	4b56      	ldr	r3, [pc, #344]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4952      	ldr	r1, [pc, #328]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	e03a      	b.n	800333a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d020      	beq.n	800330e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032cc:	4b4f      	ldr	r3, [pc, #316]	; (800340c <HAL_RCC_OscConfig+0x2b0>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7fe fcc1 	bl	8001c58 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032da:	f7fe fcbd 	bl	8001c58 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e1a5      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ec:	4b46      	ldr	r3, [pc, #280]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f8:	4b43      	ldr	r3, [pc, #268]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4940      	ldr	r1, [pc, #256]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]
 800330c:	e015      	b.n	800333a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330e:	4b3f      	ldr	r3, [pc, #252]	; (800340c <HAL_RCC_OscConfig+0x2b0>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe fca0 	bl	8001c58 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800331c:	f7fe fc9c 	bl	8001c58 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e184      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332e:	4b36      	ldr	r3, [pc, #216]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d030      	beq.n	80033a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334e:	4b30      	ldr	r3, [pc, #192]	; (8003410 <HAL_RCC_OscConfig+0x2b4>)
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7fe fc80 	bl	8001c58 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335c:	f7fe fc7c 	bl	8001c58 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e164      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336e:	4b26      	ldr	r3, [pc, #152]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x200>
 800337a:	e015      	b.n	80033a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337c:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_RCC_OscConfig+0x2b4>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7fe fc69 	bl	8001c58 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338a:	f7fe fc65 	bl	8001c58 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e14d      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339c:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 800339e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f0      	bne.n	800338a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a0 	beq.w	80034f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10f      	bne.n	80033e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	4a0e      	ldr	r2, [pc, #56]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d4:	6413      	str	r3, [r2, #64]	; 0x40
 80033d6:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_OscConfig+0x2b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d121      	bne.n	8003436 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <HAL_RCC_OscConfig+0x2b8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a07      	ldr	r2, [pc, #28]	; (8003414 <HAL_RCC_OscConfig+0x2b8>)
 80033f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fe:	f7fe fc2b 	bl	8001c58 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	e011      	b.n	800342a <HAL_RCC_OscConfig+0x2ce>
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	42470000 	.word	0x42470000
 8003410:	42470e80 	.word	0x42470e80
 8003414:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003418:	f7fe fc1e 	bl	8001c58 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e106      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342a:	4b85      	ldr	r3, [pc, #532]	; (8003640 <HAL_RCC_OscConfig+0x4e4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d106      	bne.n	800344c <HAL_RCC_OscConfig+0x2f0>
 800343e:	4b81      	ldr	r3, [pc, #516]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a80      	ldr	r2, [pc, #512]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6713      	str	r3, [r2, #112]	; 0x70
 800344a:	e01c      	b.n	8003486 <HAL_RCC_OscConfig+0x32a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b05      	cmp	r3, #5
 8003452:	d10c      	bne.n	800346e <HAL_RCC_OscConfig+0x312>
 8003454:	4b7b      	ldr	r3, [pc, #492]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a7a      	ldr	r2, [pc, #488]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 800345a:	f043 0304 	orr.w	r3, r3, #4
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	4b78      	ldr	r3, [pc, #480]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	4a77      	ldr	r2, [pc, #476]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6713      	str	r3, [r2, #112]	; 0x70
 800346c:	e00b      	b.n	8003486 <HAL_RCC_OscConfig+0x32a>
 800346e:	4b75      	ldr	r3, [pc, #468]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a74      	ldr	r2, [pc, #464]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
 800347a:	4b72      	ldr	r3, [pc, #456]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a71      	ldr	r2, [pc, #452]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 8003480:	f023 0304 	bic.w	r3, r3, #4
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d015      	beq.n	80034ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fe fbe3 	bl	8001c58 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003494:	e00a      	b.n	80034ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fe fbdf 	bl	8001c58 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e0c5      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ac:	4b65      	ldr	r3, [pc, #404]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ee      	beq.n	8003496 <HAL_RCC_OscConfig+0x33a>
 80034b8:	e014      	b.n	80034e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ba:	f7fe fbcd 	bl	8001c58 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fe fbc9 	bl	8001c58 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0af      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d8:	4b5a      	ldr	r3, [pc, #360]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ee      	bne.n	80034c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d105      	bne.n	80034f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ea:	4b56      	ldr	r3, [pc, #344]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a55      	ldr	r2, [pc, #340]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 80034f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 809b 	beq.w	8003636 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003500:	4b50      	ldr	r3, [pc, #320]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	2b08      	cmp	r3, #8
 800350a:	d05c      	beq.n	80035c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d141      	bne.n	8003598 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003514:	4b4c      	ldr	r3, [pc, #304]	; (8003648 <HAL_RCC_OscConfig+0x4ec>)
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351a:	f7fe fb9d 	bl	8001c58 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003522:	f7fe fb99 	bl	8001c58 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e081      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003534:	4b43      	ldr	r3, [pc, #268]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f0      	bne.n	8003522 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	019b      	lsls	r3, r3, #6
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	3b01      	subs	r3, #1
 800355a:	041b      	lsls	r3, r3, #16
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	061b      	lsls	r3, r3, #24
 8003564:	4937      	ldr	r1, [pc, #220]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 8003566:	4313      	orrs	r3, r2
 8003568:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800356a:	4b37      	ldr	r3, [pc, #220]	; (8003648 <HAL_RCC_OscConfig+0x4ec>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe fb72 	bl	8001c58 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe fb6e 	bl	8001c58 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e056      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358a:	4b2e      	ldr	r3, [pc, #184]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x41c>
 8003596:	e04e      	b.n	8003636 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_RCC_OscConfig+0x4ec>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359e:	f7fe fb5b 	bl	8001c58 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a6:	f7fe fb57 	bl	8001c58 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e03f      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b8:	4b22      	ldr	r3, [pc, #136]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f0      	bne.n	80035a6 <HAL_RCC_OscConfig+0x44a>
 80035c4:	e037      	b.n	8003636 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e032      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035d2:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <HAL_RCC_OscConfig+0x4e8>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d028      	beq.n	8003632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d121      	bne.n	8003632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d11a      	bne.n	8003632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003602:	4013      	ands	r3, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003608:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800360a:	4293      	cmp	r3, r2
 800360c:	d111      	bne.n	8003632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	3b01      	subs	r3, #1
 800361c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d107      	bne.n	8003632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40007000 	.word	0x40007000
 8003644:	40023800 	.word	0x40023800
 8003648:	42470060 	.word	0x42470060

0800364c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0cc      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003660:	4b68      	ldr	r3, [pc, #416]	; (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d90c      	bls.n	8003688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b65      	ldr	r3, [pc, #404]	; (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b63      	ldr	r3, [pc, #396]	; (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0b8      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d020      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a0:	4b59      	ldr	r3, [pc, #356]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a58      	ldr	r2, [pc, #352]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b8:	4b53      	ldr	r3, [pc, #332]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a52      	ldr	r2, [pc, #328]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c4:	4b50      	ldr	r3, [pc, #320]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	494d      	ldr	r1, [pc, #308]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d044      	beq.n	800376c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	4b47      	ldr	r3, [pc, #284]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d119      	bne.n	800372a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e07f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d003      	beq.n	800370a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003706:	2b03      	cmp	r3, #3
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370a:	4b3f      	ldr	r3, [pc, #252]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e06f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371a:	4b3b      	ldr	r3, [pc, #236]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e067      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372a:	4b37      	ldr	r3, [pc, #220]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f023 0203 	bic.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4934      	ldr	r1, [pc, #208]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	4313      	orrs	r3, r2
 800373a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800373c:	f7fe fa8c 	bl	8001c58 <HAL_GetTick>
 8003740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	e00a      	b.n	800375a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003744:	f7fe fa88 	bl	8001c58 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e04f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 020c 	and.w	r2, r3, #12
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	429a      	cmp	r2, r3
 800376a:	d1eb      	bne.n	8003744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800376c:	4b25      	ldr	r3, [pc, #148]	; (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d20c      	bcs.n	8003794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b22      	ldr	r3, [pc, #136]	; (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b20      	ldr	r3, [pc, #128]	; (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e032      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a0:	4b19      	ldr	r3, [pc, #100]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4916      	ldr	r1, [pc, #88]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037be:	4b12      	ldr	r3, [pc, #72]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	490e      	ldr	r1, [pc, #56]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037d2:	f000 f821 	bl	8003818 <HAL_RCC_GetSysClockFreq>
 80037d6:	4602      	mov	r2, r0
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	490a      	ldr	r1, [pc, #40]	; (800380c <HAL_RCC_ClockConfig+0x1c0>)
 80037e4:	5ccb      	ldrb	r3, [r1, r3]
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	4a09      	ldr	r2, [pc, #36]	; (8003810 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe f8aa 	bl	800194c <HAL_InitTick>

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023c00 	.word	0x40023c00
 8003808:	40023800 	.word	0x40023800
 800380c:	08008e64 	.word	0x08008e64
 8003810:	20000000 	.word	0x20000000
 8003814:	20000004 	.word	0x20000004

08003818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003818:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	607b      	str	r3, [r7, #4]
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	2300      	movs	r3, #0
 800382a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003830:	4b67      	ldr	r3, [pc, #412]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b08      	cmp	r3, #8
 800383a:	d00d      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0x40>
 800383c:	2b08      	cmp	r3, #8
 800383e:	f200 80bd 	bhi.w	80039bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x34>
 8003846:	2b04      	cmp	r3, #4
 8003848:	d003      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x3a>
 800384a:	e0b7      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800384c:	4b61      	ldr	r3, [pc, #388]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800384e:	60bb      	str	r3, [r7, #8]
       break;
 8003850:	e0b7      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003852:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003854:	60bb      	str	r3, [r7, #8]
      break;
 8003856:	e0b4      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003858:	4b5d      	ldr	r3, [pc, #372]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003860:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003862:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d04d      	beq.n	800390a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386e:	4b58      	ldr	r3, [pc, #352]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	099b      	lsrs	r3, r3, #6
 8003874:	461a      	mov	r2, r3
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800387e:	f04f 0100 	mov.w	r1, #0
 8003882:	ea02 0800 	and.w	r8, r2, r0
 8003886:	ea03 0901 	and.w	r9, r3, r1
 800388a:	4640      	mov	r0, r8
 800388c:	4649      	mov	r1, r9
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	014b      	lsls	r3, r1, #5
 8003898:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800389c:	0142      	lsls	r2, r0, #5
 800389e:	4610      	mov	r0, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	ebb0 0008 	subs.w	r0, r0, r8
 80038a6:	eb61 0109 	sbc.w	r1, r1, r9
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	018b      	lsls	r3, r1, #6
 80038b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038b8:	0182      	lsls	r2, r0, #6
 80038ba:	1a12      	subs	r2, r2, r0
 80038bc:	eb63 0301 	sbc.w	r3, r3, r1
 80038c0:	f04f 0000 	mov.w	r0, #0
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	00d9      	lsls	r1, r3, #3
 80038ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038ce:	00d0      	lsls	r0, r2, #3
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	eb12 0208 	adds.w	r2, r2, r8
 80038d8:	eb43 0309 	adc.w	r3, r3, r9
 80038dc:	f04f 0000 	mov.w	r0, #0
 80038e0:	f04f 0100 	mov.w	r1, #0
 80038e4:	0259      	lsls	r1, r3, #9
 80038e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038ea:	0250      	lsls	r0, r2, #9
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	f7fc fcba 	bl	8000274 <__aeabi_uldivmod>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4613      	mov	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e04a      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390a:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	099b      	lsrs	r3, r3, #6
 8003910:	461a      	mov	r2, r3
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	f240 10ff 	movw	r0, #511	; 0x1ff
 800391a:	f04f 0100 	mov.w	r1, #0
 800391e:	ea02 0400 	and.w	r4, r2, r0
 8003922:	ea03 0501 	and.w	r5, r3, r1
 8003926:	4620      	mov	r0, r4
 8003928:	4629      	mov	r1, r5
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	014b      	lsls	r3, r1, #5
 8003934:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003938:	0142      	lsls	r2, r0, #5
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	1b00      	subs	r0, r0, r4
 8003940:	eb61 0105 	sbc.w	r1, r1, r5
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	018b      	lsls	r3, r1, #6
 800394e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003952:	0182      	lsls	r2, r0, #6
 8003954:	1a12      	subs	r2, r2, r0
 8003956:	eb63 0301 	sbc.w	r3, r3, r1
 800395a:	f04f 0000 	mov.w	r0, #0
 800395e:	f04f 0100 	mov.w	r1, #0
 8003962:	00d9      	lsls	r1, r3, #3
 8003964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003968:	00d0      	lsls	r0, r2, #3
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	1912      	adds	r2, r2, r4
 8003970:	eb45 0303 	adc.w	r3, r5, r3
 8003974:	f04f 0000 	mov.w	r0, #0
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	0299      	lsls	r1, r3, #10
 800397e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003982:	0290      	lsls	r0, r2, #10
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4610      	mov	r0, r2
 800398a:	4619      	mov	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	461a      	mov	r2, r3
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	f7fc fc6e 	bl	8000274 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4613      	mov	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	3301      	adds	r3, #1
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	60bb      	str	r3, [r7, #8]
      break;
 80039ba:	e002      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039be:	60bb      	str	r3, [r7, #8]
      break;
 80039c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039c2:	68bb      	ldr	r3, [r7, #8]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800
 80039d4:	00f42400 	.word	0x00f42400
 80039d8:	007a1200 	.word	0x007a1200

080039dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000000 	.word	0x20000000

080039f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039f8:	f7ff fff0 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	0a9b      	lsrs	r3, r3, #10
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	4903      	ldr	r1, [pc, #12]	; (8003a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40023800 	.word	0x40023800
 8003a18:	08008e74 	.word	0x08008e74

08003a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	220f      	movs	r2, #15
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a2c:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_RCC_GetClockConfig+0x5c>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 0203 	and.w	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a38:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <HAL_RCC_GetClockConfig+0x5c>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <HAL_RCC_GetClockConfig+0x5c>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a50:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_RCC_GetClockConfig+0x5c>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	08db      	lsrs	r3, r3, #3
 8003a56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <HAL_RCC_GetClockConfig+0x60>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0207 	and.w	r2, r3, #7
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	601a      	str	r2, [r3, #0]
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40023c00 	.word	0x40023c00

08003a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e041      	b.n	8003b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f839 	bl	8003b1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	f000 f9ca 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d001      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e044      	b.n	8003bd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d018      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b76:	d013      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1a      	ldr	r2, [pc, #104]	; (8003be8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00e      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a19      	ldr	r2, [pc, #100]	; (8003bec <HAL_TIM_Base_Start_IT+0xb8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a17      	ldr	r2, [pc, #92]	; (8003bf0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a16      	ldr	r2, [pc, #88]	; (8003bf4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d111      	bne.n	8003bc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b06      	cmp	r3, #6
 8003bb0:	d010      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc2:	e007      	b.n	8003bd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40000c00 	.word	0x40000c00
 8003bf4:	40014000 	.word	0x40014000

08003bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d122      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d11b      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0202 	mvn.w	r2, #2
 8003c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8ee 	bl	8003e1c <HAL_TIM_IC_CaptureCallback>
 8003c40:	e005      	b.n	8003c4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f8e0 	bl	8003e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f8f1 	bl	8003e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d122      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d11b      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0204 	mvn.w	r2, #4
 8003c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f8c4 	bl	8003e1c <HAL_TIM_IC_CaptureCallback>
 8003c94:	e005      	b.n	8003ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f8b6 	bl	8003e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f8c7 	bl	8003e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d122      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d11b      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0208 	mvn.w	r2, #8
 8003ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f89a 	bl	8003e1c <HAL_TIM_IC_CaptureCallback>
 8003ce8:	e005      	b.n	8003cf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f88c 	bl	8003e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f89d 	bl	8003e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d122      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	d11b      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0210 	mvn.w	r2, #16
 8003d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2208      	movs	r2, #8
 8003d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f870 	bl	8003e1c <HAL_TIM_IC_CaptureCallback>
 8003d3c:	e005      	b.n	8003d4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f862 	bl	8003e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f873 	bl	8003e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d10e      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d107      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0201 	mvn.w	r2, #1
 8003d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd fd1c 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d86:	2b80      	cmp	r3, #128	; 0x80
 8003d88:	d10e      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d94:	2b80      	cmp	r3, #128	; 0x80
 8003d96:	d107      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f8e2 	bl	8003f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b40      	cmp	r3, #64	; 0x40
 8003db4:	d10e      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d107      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f838 	bl	8003e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d10e      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d107      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0220 	mvn.w	r2, #32
 8003df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f8ac 	bl	8003f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a34      	ldr	r2, [pc, #208]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00f      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d00b      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a31      	ldr	r2, [pc, #196]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a30      	ldr	r2, [pc, #192]	; (8003f44 <TIM_Base_SetConfig+0xec>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <TIM_Base_SetConfig+0xf0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d108      	bne.n	8003ea2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01b      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d017      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a21      	ldr	r2, [pc, #132]	; (8003f44 <TIM_Base_SetConfig+0xec>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00f      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <TIM_Base_SetConfig+0xf0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00b      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <TIM_Base_SetConfig+0xf4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <TIM_Base_SetConfig+0xf8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <TIM_Base_SetConfig+0xfc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d108      	bne.n	8003ef4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d103      	bne.n	8003f28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	615a      	str	r2, [r3, #20]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800

08003f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f103 0208 	add.w	r2, r3, #8
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f04f 32ff 	mov.w	r2, #4294967295
 8003f98:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f103 0208 	add.w	r2, r3, #8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f103 0208 	add.w	r2, r3, #8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	601a      	str	r2, [r3, #0]
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d103      	bne.n	8004042 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e00c      	b.n	800405c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3308      	adds	r3, #8
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	e002      	b.n	8004050 <vListInsert+0x2e>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	429a      	cmp	r2, r3
 800405a:	d2f6      	bcs.n	800404a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	601a      	str	r2, [r3, #0]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6892      	ldr	r2, [r2, #8]
 80040aa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6852      	ldr	r2, [r2, #4]
 80040b4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d103      	bne.n	80040c8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	1e5a      	subs	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <xQueueGenericReset+0x2a>
        __asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	60bb      	str	r3, [r7, #8]
    }
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004112:	f001 fd6f 	bl	8005bf4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004122:	fb01 f303 	mul.w	r3, r1, r3
 8004126:	441a      	add	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	3b01      	subs	r3, #1
 8004144:	68f9      	ldr	r1, [r7, #12]
 8004146:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	441a      	add	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	22ff      	movs	r2, #255	; 0xff
 8004156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	22ff      	movs	r2, #255	; 0xff
 800415e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d114      	bne.n	8004192 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01a      	beq.n	80041a6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3310      	adds	r3, #16
 8004174:	4618      	mov	r0, r3
 8004176:	f001 f8f7 	bl	8005368 <xTaskRemoveFromEventList>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d012      	beq.n	80041a6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <xQueueGenericReset+0xcc>)
 8004182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	e009      	b.n	80041a6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3310      	adds	r3, #16
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff fef2 	bl	8003f80 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3324      	adds	r3, #36	; 0x24
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff feed 	bl	8003f80 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80041a6:	f001 fd55 	bl	8005c54 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80041aa:	2301      	movs	r3, #1
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	e000ed04 	.word	0xe000ed04

080041b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08c      	sub	sp, #48	; 0x30
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	4613      	mov	r3, r2
 80041c4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	61bb      	str	r3, [r7, #24]
    }
 80041de:	bf00      	nop
 80041e0:	e7fe      	b.n	80041e0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	fb02 f303 	mul.w	r3, r2, r3
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d006      	beq.n	8004200 <xQueueGenericCreate+0x48>
 80041f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d101      	bne.n	8004204 <xQueueGenericCreate+0x4c>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <xQueueGenericCreate+0x4e>
 8004204:	2300      	movs	r3, #0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <xQueueGenericCreate+0x68>
        __asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	617b      	str	r3, [r7, #20]
    }
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004226:	d90a      	bls.n	800423e <xQueueGenericCreate+0x86>
        __asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	613b      	str	r3, [r7, #16]
    }
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	3350      	adds	r3, #80	; 0x50
 8004242:	4618      	mov	r0, r3
 8004244:	f001 fdc2 	bl	8005dcc <pvPortMalloc>
 8004248:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	3350      	adds	r3, #80	; 0x50
 8004258:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800425a:	79fa      	ldrb	r2, [r7, #7]
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f805 	bl	8004276 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800426c:	6a3b      	ldr	r3, [r7, #32]
    }
 800426e:	4618      	mov	r0, r3
 8004270:	3728      	adds	r7, #40	; 0x28
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e002      	b.n	8004298 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042a4:	2101      	movs	r1, #1
 80042a6:	69b8      	ldr	r0, [r7, #24]
 80042a8:	f7ff ff1e 	bl	80040e8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	68f9      	ldr	r1, [r7, #12]
 80042ba:	2073      	movs	r0, #115	; 0x73
 80042bc:	f002 fd60 	bl	8006d80 <SEGGER_SYSVIEW_RecordU32x3>
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08e      	sub	sp, #56	; 0x38
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042d6:	2300      	movs	r3, #0
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <xQueueGenericSend+0x32>
        __asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	623b      	str	r3, [r7, #32]
    }
 80042f6:	bf00      	nop
 80042f8:	e7fe      	b.n	80042f8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d103      	bne.n	8004308 <xQueueGenericSend+0x40>
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <xQueueGenericSend+0x44>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <xQueueGenericSend+0x46>
 800430c:	2300      	movs	r3, #0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <xQueueGenericSend+0x60>
        __asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	61fb      	str	r3, [r7, #28]
    }
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d103      	bne.n	8004336 <xQueueGenericSend+0x6e>
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <xQueueGenericSend+0x72>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <xQueueGenericSend+0x74>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <xQueueGenericSend+0x8e>
        __asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	61bb      	str	r3, [r7, #24]
    }
 8004352:	bf00      	nop
 8004354:	e7fe      	b.n	8004354 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004356:	f001 fc4d 	bl	8005bf4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	429a      	cmp	r2, r3
 8004364:	d302      	bcc.n	800436c <xQueueGenericSend+0xa4>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d136      	bne.n	80043da <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	4618      	mov	r0, r3
 8004370:	f003 fa70 	bl	8007854 <SEGGER_SYSVIEW_ShrinkId>
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	460b      	mov	r3, r1
 800437e:	4601      	mov	r1, r0
 8004380:	205a      	movs	r0, #90	; 0x5a
 8004382:	f002 fd73 	bl	8006e6c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800438c:	f000 f9a2 	bl	80046d4 <prvCopyDataToQueue>
 8004390:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b00      	cmp	r3, #0
 8004398:	d010      	beq.n	80043bc <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	3324      	adds	r3, #36	; 0x24
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 ffe2 	bl	8005368 <xTaskRemoveFromEventList>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d013      	beq.n	80043d2 <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80043aa:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <xQueueGenericSend+0x218>)
 80043ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	e00a      	b.n	80043d2 <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80043c2:	4b47      	ldr	r3, [pc, #284]	; (80044e0 <xQueueGenericSend+0x218>)
 80043c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80043d2:	f001 fc3f 	bl	8005c54 <vPortExitCritical>
                return pdPASS;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e07d      	b.n	80044d6 <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d110      	bne.n	8004402 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80043e0:	f001 fc38 	bl	8005c54 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	4618      	mov	r0, r3
 80043e8:	f003 fa34 	bl	8007854 <SEGGER_SYSVIEW_ShrinkId>
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	460b      	mov	r3, r1
 80043f6:	4601      	mov	r1, r0
 80043f8:	205a      	movs	r0, #90	; 0x5a
 80043fa:	f002 fd37 	bl	8006e6c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	e069      	b.n	80044d6 <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004408:	f107 0310 	add.w	r3, r7, #16
 800440c:	4618      	mov	r0, r3
 800440e:	f001 f811 	bl	8005434 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004412:	2301      	movs	r3, #1
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004416:	f001 fc1d 	bl	8005c54 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800441a:	f000 fdad 	bl	8004f78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800441e:	f001 fbe9 	bl	8005bf4 <vPortEnterCritical>
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004428:	b25b      	sxtb	r3, r3
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d103      	bne.n	8004438 <xQueueGenericSend+0x170>
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800443e:	b25b      	sxtb	r3, r3
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d103      	bne.n	800444e <xQueueGenericSend+0x186>
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800444e:	f001 fc01 	bl	8005c54 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004452:	1d3a      	adds	r2, r7, #4
 8004454:	f107 0310 	add.w	r3, r7, #16
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f001 f800 	bl	8005460 <xTaskCheckForTimeOut>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d124      	bne.n	80044b0 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004468:	f000 fa2c 	bl	80048c4 <prvIsQueueFull>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d018      	beq.n	80044a4 <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	3310      	adds	r3, #16
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	4611      	mov	r1, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f000 ff50 	bl	8005320 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004482:	f000 f9b7 	bl	80047f4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004486:	f000 fd85 	bl	8004f94 <xTaskResumeAll>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	f47f af62 	bne.w	8004356 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004492:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <xQueueGenericSend+0x218>)
 8004494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	e758      	b.n	8004356 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80044a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044a6:	f000 f9a5 	bl	80047f4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80044aa:	f000 fd73 	bl	8004f94 <xTaskResumeAll>
 80044ae:	e752      	b.n	8004356 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80044b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044b2:	f000 f99f 	bl	80047f4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80044b6:	f000 fd6d 	bl	8004f94 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	4618      	mov	r0, r3
 80044be:	f003 f9c9 	bl	8007854 <SEGGER_SYSVIEW_ShrinkId>
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	460b      	mov	r3, r1
 80044cc:	4601      	mov	r1, r0
 80044ce:	205a      	movs	r0, #90	; 0x5a
 80044d0:	f002 fccc 	bl	8006e6c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80044d4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3730      	adds	r7, #48	; 0x30
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	e000ed04 	.word	0xe000ed04

080044e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b08f      	sub	sp, #60	; 0x3c
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <xQueueReceive+0x30>
        __asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	623b      	str	r3, [r7, #32]
    }
 8004510:	bf00      	nop
 8004512:	e7fe      	b.n	8004512 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <xQueueReceive+0x3e>
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <xQueueReceive+0x42>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <xQueueReceive+0x44>
 8004526:	2300      	movs	r3, #0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <xQueueReceive+0x5e>
        __asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	61fb      	str	r3, [r7, #28]
    }
 800453e:	bf00      	nop
 8004540:	e7fe      	b.n	8004540 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004542:	f001 fb57 	bl	8005bf4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	d02f      	beq.n	80045b2 <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004556:	f000 f927 	bl	80047a8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	4618      	mov	r0, r3
 800455e:	f003 f979 	bl	8007854 <SEGGER_SYSVIEW_ShrinkId>
 8004562:	4604      	mov	r4, r0
 8004564:	2000      	movs	r0, #0
 8004566:	f003 f975 	bl	8007854 <SEGGER_SYSVIEW_ShrinkId>
 800456a:	4602      	mov	r2, r0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2101      	movs	r1, #1
 8004570:	9100      	str	r1, [sp, #0]
 8004572:	4621      	mov	r1, r4
 8004574:	205c      	movs	r0, #92	; 0x5c
 8004576:	f002 fc79 	bl	8006e6c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	1e5a      	subs	r2, r3, #1
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00f      	beq.n	80045aa <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	3310      	adds	r3, #16
 800458e:	4618      	mov	r0, r3
 8004590:	f000 feea 	bl	8005368 <xTaskRemoveFromEventList>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <xQueueReceive+0xc6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800459a:	4b4d      	ldr	r3, [pc, #308]	; (80046d0 <xQueueReceive+0x1ec>)
 800459c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80045aa:	f001 fb53 	bl	8005c54 <vPortExitCritical>
                return pdPASS;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e08a      	b.n	80046c8 <xQueueReceive+0x1e4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d113      	bne.n	80045e0 <xQueueReceive+0xfc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80045b8:	f001 fb4c 	bl	8005c54 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	4618      	mov	r0, r3
 80045c0:	f003 f948 	bl	8007854 <SEGGER_SYSVIEW_ShrinkId>
 80045c4:	4604      	mov	r4, r0
 80045c6:	2000      	movs	r0, #0
 80045c8:	f003 f944 	bl	8007854 <SEGGER_SYSVIEW_ShrinkId>
 80045cc:	4602      	mov	r2, r0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2101      	movs	r1, #1
 80045d2:	9100      	str	r1, [sp, #0]
 80045d4:	4621      	mov	r1, r4
 80045d6:	205c      	movs	r0, #92	; 0x5c
 80045d8:	f002 fc48 	bl	8006e6c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80045dc:	2300      	movs	r3, #0
 80045de:	e073      	b.n	80046c8 <xQueueReceive+0x1e4>
                }
                else if( xEntryTimeSet == pdFALSE )
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <xQueueReceive+0x110>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80045e6:	f107 0314 	add.w	r3, r7, #20
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 ff22 	bl	8005434 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80045f4:	f001 fb2e 	bl	8005c54 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80045f8:	f000 fcbe 	bl	8004f78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80045fc:	f001 fafa 	bl	8005bf4 <vPortEnterCritical>
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004606:	b25b      	sxtb	r3, r3
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d103      	bne.n	8004616 <xQueueReceive+0x132>
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800461c:	b25b      	sxtb	r3, r3
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d103      	bne.n	800462c <xQueueReceive+0x148>
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800462c:	f001 fb12 	bl	8005c54 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004630:	1d3a      	adds	r2, r7, #4
 8004632:	f107 0314 	add.w	r3, r7, #20
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f000 ff11 	bl	8005460 <xTaskCheckForTimeOut>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d124      	bne.n	800468e <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004646:	f000 f927 	bl	8004898 <prvIsQueueEmpty>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d018      	beq.n	8004682 <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	3324      	adds	r3, #36	; 0x24
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fe61 	bl	8005320 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800465e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004660:	f000 f8c8 	bl	80047f4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004664:	f000 fc96 	bl	8004f94 <xTaskResumeAll>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	f47f af69 	bne.w	8004542 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8004670:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <xQueueReceive+0x1ec>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	e75f      	b.n	8004542 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004684:	f000 f8b6 	bl	80047f4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004688:	f000 fc84 	bl	8004f94 <xTaskResumeAll>
 800468c:	e759      	b.n	8004542 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800468e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004690:	f000 f8b0 	bl	80047f4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004694:	f000 fc7e 	bl	8004f94 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800469a:	f000 f8fd 	bl	8004898 <prvIsQueueEmpty>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f43f af4e 	beq.w	8004542 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	4618      	mov	r0, r3
 80046aa:	f003 f8d3 	bl	8007854 <SEGGER_SYSVIEW_ShrinkId>
 80046ae:	4604      	mov	r4, r0
 80046b0:	2000      	movs	r0, #0
 80046b2:	f003 f8cf 	bl	8007854 <SEGGER_SYSVIEW_ShrinkId>
 80046b6:	4602      	mov	r2, r0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2101      	movs	r1, #1
 80046bc:	9100      	str	r1, [sp, #0]
 80046be:	4621      	mov	r1, r4
 80046c0:	205c      	movs	r0, #92	; 0x5c
 80046c2:	f002 fbd3 	bl	8006e6c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80046c6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3734      	adds	r7, #52	; 0x34
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd90      	pop	{r4, r7, pc}
 80046d0:	e000ed04 	.word	0xe000ed04

080046d4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10d      	bne.n	800470e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d14d      	bne.n	8004796 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 ffd2 	bl	80056a8 <xTaskPriorityDisinherit>
 8004704:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	e043      	b.n	8004796 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d119      	bne.n	8004748 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6858      	ldr	r0, [r3, #4]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	461a      	mov	r2, r3
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	f003 fe18 	bl	8008354 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	441a      	add	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	429a      	cmp	r2, r3
 800473c:	d32b      	bcc.n	8004796 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	605a      	str	r2, [r3, #4]
 8004746:	e026      	b.n	8004796 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	68d8      	ldr	r0, [r3, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	461a      	mov	r2, r3
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	f003 fdfe 	bl	8008354 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	425b      	negs	r3, r3
 8004762:	441a      	add	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d207      	bcs.n	8004784 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	425b      	negs	r3, r3
 800477e:	441a      	add	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d105      	bne.n	8004796 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	3b01      	subs	r3, #1
 8004794:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800479e:	697b      	ldr	r3, [r7, #20]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d018      	beq.n	80047ec <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	441a      	add	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d303      	bcc.n	80047dc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68d9      	ldr	r1, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	461a      	mov	r2, r3
 80047e6:	6838      	ldr	r0, [r7, #0]
 80047e8:	f003 fdb4 	bl	8008354 <memcpy>
    }
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80047fc:	f001 f9fa 	bl	8005bf4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004806:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004808:	e011      	b.n	800482e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d012      	beq.n	8004838 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3324      	adds	r3, #36	; 0x24
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fda6 	bl	8005368 <xTaskRemoveFromEventList>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004822:	f000 fe83 	bl	800552c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	3b01      	subs	r3, #1
 800482a:	b2db      	uxtb	r3, r3
 800482c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800482e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004832:	2b00      	cmp	r3, #0
 8004834:	dce9      	bgt.n	800480a <prvUnlockQueue+0x16>
 8004836:	e000      	b.n	800483a <prvUnlockQueue+0x46>
                        break;
 8004838:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	22ff      	movs	r2, #255	; 0xff
 800483e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004842:	f001 fa07 	bl	8005c54 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004846:	f001 f9d5 	bl	8005bf4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004850:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004852:	e011      	b.n	8004878 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d012      	beq.n	8004882 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3310      	adds	r3, #16
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fd81 	bl	8005368 <xTaskRemoveFromEventList>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800486c:	f000 fe5e 	bl	800552c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004870:	7bbb      	ldrb	r3, [r7, #14]
 8004872:	3b01      	subs	r3, #1
 8004874:	b2db      	uxtb	r3, r3
 8004876:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800487c:	2b00      	cmp	r3, #0
 800487e:	dce9      	bgt.n	8004854 <prvUnlockQueue+0x60>
 8004880:	e000      	b.n	8004884 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004882:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	22ff      	movs	r2, #255	; 0xff
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800488c:	f001 f9e2 	bl	8005c54 <vPortExitCritical>
}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80048a0:	f001 f9a8 	bl	8005bf4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d102      	bne.n	80048b2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e001      	b.n	80048b6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80048b6:	f001 f9cd 	bl	8005c54 <vPortExitCritical>

    return xReturn;
 80048ba:	68fb      	ldr	r3, [r7, #12]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80048cc:	f001 f992 	bl	8005bf4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	429a      	cmp	r2, r3
 80048da:	d102      	bne.n	80048e2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80048dc:	2301      	movs	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e001      	b.n	80048e6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80048e6:	f001 f9b5 	bl	8005c54 <vPortExitCritical>

    return xReturn;
 80048ea:	68fb      	ldr	r3, [r7, #12]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08c      	sub	sp, #48	; 0x30
 80048f8:	af04      	add	r7, sp, #16
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4618      	mov	r0, r3
 800490a:	f001 fa5f 	bl	8005dcc <pvPortMalloc>
 800490e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00e      	beq.n	8004934 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004916:	205c      	movs	r0, #92	; 0x5c
 8004918:	f001 fa58 	bl	8005dcc <pvPortMalloc>
 800491c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
 800492a:	e005      	b.n	8004938 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800492c:	6978      	ldr	r0, [r7, #20]
 800492e:	f001 fb2d 	bl	8005f8c <vPortFree>
 8004932:	e001      	b.n	8004938 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d013      	beq.n	8004966 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	2300      	movs	r3, #0
 8004942:	9303      	str	r3, [sp, #12]
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	9302      	str	r3, [sp, #8]
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f80e 	bl	8004976 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800495a:	69f8      	ldr	r0, [r7, #28]
 800495c:	f000 f8a2 	bl	8004aa4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004960:	2301      	movs	r3, #1
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	e002      	b.n	800496c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004966:	f04f 33ff 	mov.w	r3, #4294967295
 800496a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800496c:	69bb      	ldr	r3, [r7, #24]
    }
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b088      	sub	sp, #32
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	461a      	mov	r2, r3
 800498e:	21a5      	movs	r1, #165	; 0xa5
 8004990:	f003 fcee 	bl	8008370 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800499e:	3b01      	subs	r3, #1
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f023 0307 	bic.w	r3, r3, #7
 80049ac:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <prvInitialiseNewTask+0x58>
        __asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	617b      	str	r3, [r7, #20]
    }
 80049ca:	bf00      	nop
 80049cc:	e7fe      	b.n	80049cc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01f      	beq.n	8004a14 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049d4:	2300      	movs	r3, #0
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	e012      	b.n	8004a00 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	7819      	ldrb	r1, [r3, #0]
 80049e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	4413      	add	r3, r2
 80049e8:	3334      	adds	r3, #52	; 0x34
 80049ea:	460a      	mov	r2, r1
 80049ec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d006      	beq.n	8004a08 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	3301      	adds	r3, #1
 80049fe:	61fb      	str	r3, [r7, #28]
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	2b0e      	cmp	r3, #14
 8004a04:	d9e9      	bls.n	80049da <prvInitialiseNewTask+0x64>
 8004a06:	e000      	b.n	8004a0a <prvInitialiseNewTask+0x94>
            {
                break;
 8004a08:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a12:	e003      	b.n	8004a1c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	2b09      	cmp	r3, #9
 8004a20:	d901      	bls.n	8004a26 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a22:	2309      	movs	r3, #9
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a30:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	2200      	movs	r2, #0
 8004a36:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff fabf 	bl	8003fc0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	3318      	adds	r3, #24
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff faba 	bl	8003fc0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a50:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	f1c3 020a 	rsb	r2, r3, #10
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	3354      	adds	r3, #84	; 0x54
 8004a66:	2204      	movs	r2, #4
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f003 fc80 	bl	8008370 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	3358      	adds	r3, #88	; 0x58
 8004a74:	2201      	movs	r2, #1
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f003 fc79 	bl	8008370 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	68f9      	ldr	r1, [r7, #12]
 8004a82:	69b8      	ldr	r0, [r7, #24]
 8004a84:	f000 ff08 	bl	8005898 <pxPortInitialiseStack>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a98:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a9a:	bf00      	nop
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004aa4:	b5b0      	push	{r4, r5, r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004aac:	f001 f8a2 	bl	8005bf4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004ab0:	4b3b      	ldr	r3, [pc, #236]	; (8004ba0 <prvAddNewTaskToReadyList+0xfc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	4a3a      	ldr	r2, [pc, #232]	; (8004ba0 <prvAddNewTaskToReadyList+0xfc>)
 8004ab8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004aba:	4b3a      	ldr	r3, [pc, #232]	; (8004ba4 <prvAddNewTaskToReadyList+0x100>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004ac2:	4a38      	ldr	r2, [pc, #224]	; (8004ba4 <prvAddNewTaskToReadyList+0x100>)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ac8:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <prvAddNewTaskToReadyList+0xfc>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d110      	bne.n	8004af2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004ad0:	f000 fd50 	bl	8005574 <prvInitialiseTaskLists>
 8004ad4:	e00d      	b.n	8004af2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004ad6:	4b34      	ldr	r3, [pc, #208]	; (8004ba8 <prvAddNewTaskToReadyList+0x104>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ade:	4b31      	ldr	r3, [pc, #196]	; (8004ba4 <prvAddNewTaskToReadyList+0x100>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d802      	bhi.n	8004af2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004aec:	4a2d      	ldr	r2, [pc, #180]	; (8004ba4 <prvAddNewTaskToReadyList+0x100>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004af2:	4b2e      	ldr	r3, [pc, #184]	; (8004bac <prvAddNewTaskToReadyList+0x108>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3301      	adds	r3, #1
 8004af8:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <prvAddNewTaskToReadyList+0x108>)
 8004afa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004afc:	4b2b      	ldr	r3, [pc, #172]	; (8004bac <prvAddNewTaskToReadyList+0x108>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d016      	beq.n	8004b38 <prvAddNewTaskToReadyList+0x94>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f002 fd7b 	bl	8007608 <SEGGER_SYSVIEW_OnTaskCreate>
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	461d      	mov	r5, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461c      	mov	r4, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	1ae3      	subs	r3, r4, r3
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	462b      	mov	r3, r5
 8004b34:	f001 fb48 	bl	80061c8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f002 fde8 	bl	8007710 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	2201      	movs	r2, #1
 8004b46:	409a      	lsls	r2, r3
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <prvAddNewTaskToReadyList+0x10c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <prvAddNewTaskToReadyList+0x10c>)
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <prvAddNewTaskToReadyList+0x110>)
 8004b60:	441a      	add	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4619      	mov	r1, r3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f7ff fa36 	bl	8003fda <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004b6e:	f001 f871 	bl	8005c54 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <prvAddNewTaskToReadyList+0x104>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00e      	beq.n	8004b98 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <prvAddNewTaskToReadyList+0x100>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d207      	bcs.n	8004b98 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <prvAddNewTaskToReadyList+0x114>)
 8004b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba0:	20000214 	.word	0x20000214
 8004ba4:	200000d8 	.word	0x200000d8
 8004ba8:	20000220 	.word	0x20000220
 8004bac:	20000230 	.word	0x20000230
 8004bb0:	2000021c 	.word	0x2000021c
 8004bb4:	200000dc 	.word	0x200000dc
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01b      	beq.n	8004c06 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004bce:	4b15      	ldr	r3, [pc, #84]	; (8004c24 <vTaskDelay+0x68>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <vTaskDelay+0x30>
        __asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60bb      	str	r3, [r7, #8]
    }
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004bec:	f000 f9c4 	bl	8004f78 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	2023      	movs	r0, #35	; 0x23
 8004bf4:	f002 f82e 	bl	8006c54 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fdd4 	bl	80057a8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004c00:	f000 f9c8 	bl	8004f94 <xTaskResumeAll>
 8004c04:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d107      	bne.n	8004c1c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <vTaskDelay+0x6c>)
 8004c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	2000023c 	.word	0x2000023c
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8004c34:	f000 ffde 	bl	8005bf4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <vTaskSuspend+0x18>
 8004c3e:	4b4a      	ldr	r3, [pc, #296]	; (8004d68 <vTaskSuspend+0x13c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	e000      	b.n	8004c46 <vTaskSuspend+0x1a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f002 fe02 	bl	8007854 <SEGGER_SYSVIEW_ShrinkId>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4619      	mov	r1, r3
 8004c54:	2029      	movs	r0, #41	; 0x29
 8004c56:	f001 fffd 	bl	8006c54 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff fa18 	bl	8004094 <uxListRemove>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d115      	bne.n	8004c96 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6e:	493f      	ldr	r1, [pc, #252]	; (8004d6c <vTaskSuspend+0x140>)
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <vTaskSuspend+0x6a>
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	2201      	movs	r2, #1
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <vTaskSuspend+0x144>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4013      	ands	r3, r2
 8004c92:	4a37      	ldr	r2, [pc, #220]	; (8004d70 <vTaskSuspend+0x144>)
 8004c94:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3318      	adds	r3, #24
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff f9f6 	bl	8004094 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	211b      	movs	r1, #27
 8004cac:	4618      	mov	r0, r3
 8004cae:	f002 fd71 	bl	8007794 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	482e      	ldr	r0, [pc, #184]	; (8004d74 <vTaskSuspend+0x148>)
 8004cba:	f7ff f98e 	bl	8003fda <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e010      	b.n	8004ce6 <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	4413      	add	r3, r2
 8004cca:	3358      	adds	r3, #88	; 0x58
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d105      	bne.n	8004ce0 <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	3358      	adds	r3, #88	; 0x58
 8004cdc:	2200      	movs	r2, #0
 8004cde:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	ddeb      	ble.n	8004cc4 <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8004cec:	f000 ffb2 	bl	8005c54 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004cf0:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <vTaskSuspend+0x14c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8004cf8:	f000 ff7c 	bl	8005bf4 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8004cfc:	f000 fcb8 	bl	8005670 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8004d00:	f000 ffa8 	bl	8005c54 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <vTaskSuspend+0x13c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d127      	bne.n	8004d5e <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <vTaskSuspend+0x14c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d017      	beq.n	8004d46 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8004d16:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <vTaskSuspend+0x150>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <vTaskSuspend+0x108>
        __asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	60fb      	str	r3, [r7, #12]
    }
 8004d30:	bf00      	nop
 8004d32:	e7fe      	b.n	8004d32 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8004d34:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <vTaskSuspend+0x154>)
 8004d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004d44:	e00b      	b.n	8004d5e <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <vTaskSuspend+0x148>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <vTaskSuspend+0x158>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d103      	bne.n	8004d5a <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <vTaskSuspend+0x13c>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
    }
 8004d58:	e001      	b.n	8004d5e <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8004d5a:	f000 fa77 	bl	800524c <vTaskSwitchContext>
    }
 8004d5e:	bf00      	nop
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200000d8 	.word	0x200000d8
 8004d6c:	200000dc 	.word	0x200000dc
 8004d70:	2000021c 	.word	0x2000021c
 8004d74:	20000200 	.word	0x20000200
 8004d78:	20000220 	.word	0x20000220
 8004d7c:	2000023c 	.word	0x2000023c
 8004d80:	e000ed04 	.word	0xe000ed04
 8004d84:	20000214 	.word	0x20000214

08004d88 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	60fb      	str	r3, [r7, #12]
    }
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <prvTaskIsTaskSuspended+0x5c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d10a      	bne.n	8004dd4 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <prvTaskIsTaskSuspended+0x60>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d005      	beq.n	8004dd4 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004dd4:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20000200 	.word	0x20000200
 8004de8:	200001d4 	.word	0x200001d4

08004dec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <vTaskResume+0x28>
        __asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	60bb      	str	r3, [r7, #8]
    }
 8004e10:	bf00      	nop
 8004e12:	e7fe      	b.n	8004e12 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004e14:	4b26      	ldr	r3, [pc, #152]	; (8004eb0 <vTaskResume+0xc4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d044      	beq.n	8004ea8 <vTaskResume+0xbc>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d041      	beq.n	8004ea8 <vTaskResume+0xbc>
        {
            taskENTER_CRITICAL();
 8004e24:	f000 fee6 	bl	8005bf4 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7ff ffad 	bl	8004d88 <prvTaskIsTaskSuspended>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d037      	beq.n	8004ea4 <vTaskResume+0xb8>
                {
                    traceTASK_RESUME( pxTCB );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f002 fd0c 	bl	8007854 <SEGGER_SYSVIEW_ShrinkId>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	4619      	mov	r1, r3
 8004e40:	202a      	movs	r0, #42	; 0x2a
 8004e42:	f001 ff07 	bl	8006c54 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff f922 	bl	8004094 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f002 fc5c 	bl	8007710 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <vTaskResume+0xc8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <vTaskResume+0xc8>)
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4a10      	ldr	r2, [pc, #64]	; (8004eb8 <vTaskResume+0xcc>)
 8004e78:	441a      	add	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f7ff f8aa 	bl	8003fda <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <vTaskResume+0xc4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d307      	bcc.n	8004ea4 <vTaskResume+0xb8>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8004e94:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <vTaskResume+0xd0>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004ea4:	f000 fed6 	bl	8005c54 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004ea8:	bf00      	nop
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	200000d8 	.word	0x200000d8
 8004eb4:	2000021c 	.word	0x2000021c
 8004eb8:	200000dc 	.word	0x200000dc
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004ec6:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <vTaskStartScheduler+0x98>)
 8004ec8:	9301      	str	r3, [sp, #4]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2282      	movs	r2, #130	; 0x82
 8004ed2:	4922      	ldr	r1, [pc, #136]	; (8004f5c <vTaskStartScheduler+0x9c>)
 8004ed4:	4822      	ldr	r0, [pc, #136]	; (8004f60 <vTaskStartScheduler+0xa0>)
 8004ed6:	f7ff fd0d 	bl	80048f4 <xTaskCreate>
 8004eda:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d124      	bne.n	8004f2c <vTaskStartScheduler+0x6c>
        __asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	60bb      	str	r3, [r7, #8]
    }
 8004ef4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004ef6:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <vTaskStartScheduler+0xa4>)
 8004ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8004efc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004efe:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <vTaskStartScheduler+0xa8>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <vTaskStartScheduler+0xac>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8004f0a:	4b19      	ldr	r3, [pc, #100]	; (8004f70 <vTaskStartScheduler+0xb0>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <vTaskStartScheduler+0x98>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d102      	bne.n	8004f1c <vTaskStartScheduler+0x5c>
 8004f16:	f002 fb5b 	bl	80075d0 <SEGGER_SYSVIEW_OnIdle>
 8004f1a:	e004      	b.n	8004f26 <vTaskStartScheduler+0x66>
 8004f1c:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <vTaskStartScheduler+0xb0>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f002 fbb3 	bl	800768c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004f26:	f000 fd45 	bl	80059b4 <xPortStartScheduler>
 8004f2a:	e00e      	b.n	8004f4a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f32:	d10a      	bne.n	8004f4a <vTaskStartScheduler+0x8a>
        __asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	607b      	str	r3, [r7, #4]
    }
 8004f46:	bf00      	nop
 8004f48:	e7fe      	b.n	8004f48 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004f4a:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <vTaskStartScheduler+0xb4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000238 	.word	0x20000238
 8004f5c:	08008dec 	.word	0x08008dec
 8004f60:	08005545 	.word	0x08005545
 8004f64:	20000234 	.word	0x20000234
 8004f68:	20000220 	.word	0x20000220
 8004f6c:	20000218 	.word	0x20000218
 8004f70:	200000d8 	.word	0x200000d8
 8004f74:	2000000c 	.word	0x2000000c

08004f78 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004f7c:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <vTaskSuspendAll+0x18>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3301      	adds	r3, #1
 8004f82:	4a03      	ldr	r2, [pc, #12]	; (8004f90 <vTaskSuspendAll+0x18>)
 8004f84:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004f86:	bf00      	nop
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	2000023c 	.word	0x2000023c

08004f94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004fa2:	4b43      	ldr	r3, [pc, #268]	; (80050b0 <xTaskResumeAll+0x11c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <xTaskResumeAll+0x2c>
        __asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	603b      	str	r3, [r7, #0]
    }
 8004fbc:	bf00      	nop
 8004fbe:	e7fe      	b.n	8004fbe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004fc0:	f000 fe18 	bl	8005bf4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004fc4:	4b3a      	ldr	r3, [pc, #232]	; (80050b0 <xTaskResumeAll+0x11c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	4a39      	ldr	r2, [pc, #228]	; (80050b0 <xTaskResumeAll+0x11c>)
 8004fcc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fce:	4b38      	ldr	r3, [pc, #224]	; (80050b0 <xTaskResumeAll+0x11c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d165      	bne.n	80050a2 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fd6:	4b37      	ldr	r3, [pc, #220]	; (80050b4 <xTaskResumeAll+0x120>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d061      	beq.n	80050a2 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fde:	e032      	b.n	8005046 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe0:	4b35      	ldr	r3, [pc, #212]	; (80050b8 <xTaskResumeAll+0x124>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3318      	adds	r3, #24
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff f851 	bl	8004094 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff f84c 	bl	8004094 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f002 fb86 	bl	8007710 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	2201      	movs	r2, #1
 800500a:	409a      	lsls	r2, r3
 800500c:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <xTaskResumeAll+0x128>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4313      	orrs	r3, r2
 8005012:	4a2a      	ldr	r2, [pc, #168]	; (80050bc <xTaskResumeAll+0x128>)
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501a:	4613      	mov	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4a27      	ldr	r2, [pc, #156]	; (80050c0 <xTaskResumeAll+0x12c>)
 8005024:	441a      	add	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3304      	adds	r3, #4
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f7fe ffd4 	bl	8003fda <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005036:	4b23      	ldr	r3, [pc, #140]	; (80050c4 <xTaskResumeAll+0x130>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	429a      	cmp	r2, r3
 800503e:	d302      	bcc.n	8005046 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8005040:	4b21      	ldr	r3, [pc, #132]	; (80050c8 <xTaskResumeAll+0x134>)
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005046:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <xTaskResumeAll+0x124>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1c8      	bne.n	8004fe0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005054:	f000 fb0c 	bl	8005670 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005058:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <xTaskResumeAll+0x138>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d010      	beq.n	8005086 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005064:	f000 f836 	bl	80050d4 <xTaskIncrementTick>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800506e:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <xTaskResumeAll+0x134>)
 8005070:	2201      	movs	r2, #1
 8005072:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3b01      	subs	r3, #1
 8005078:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f1      	bne.n	8005064 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8005080:	4b12      	ldr	r3, [pc, #72]	; (80050cc <xTaskResumeAll+0x138>)
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005086:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <xTaskResumeAll+0x134>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d009      	beq.n	80050a2 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800508e:	2301      	movs	r3, #1
 8005090:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <xTaskResumeAll+0x13c>)
 8005094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80050a2:	f000 fdd7 	bl	8005c54 <vPortExitCritical>

    return xAlreadyYielded;
 80050a6:	68bb      	ldr	r3, [r7, #8]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	2000023c 	.word	0x2000023c
 80050b4:	20000214 	.word	0x20000214
 80050b8:	200001d4 	.word	0x200001d4
 80050bc:	2000021c 	.word	0x2000021c
 80050c0:	200000dc 	.word	0x200000dc
 80050c4:	200000d8 	.word	0x200000d8
 80050c8:	20000228 	.word	0x20000228
 80050cc:	20000224 	.word	0x20000224
 80050d0:	e000ed04 	.word	0xe000ed04

080050d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050de:	4b50      	ldr	r3, [pc, #320]	; (8005220 <xTaskIncrementTick+0x14c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f040 8092 	bne.w	800520c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050e8:	4b4e      	ldr	r3, [pc, #312]	; (8005224 <xTaskIncrementTick+0x150>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3301      	adds	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80050f0:	4a4c      	ldr	r2, [pc, #304]	; (8005224 <xTaskIncrementTick+0x150>)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d120      	bne.n	800513e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80050fc:	4b4a      	ldr	r3, [pc, #296]	; (8005228 <xTaskIncrementTick+0x154>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <xTaskIncrementTick+0x48>
        __asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	603b      	str	r3, [r7, #0]
    }
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <xTaskIncrementTick+0x46>
 800511c:	4b42      	ldr	r3, [pc, #264]	; (8005228 <xTaskIncrementTick+0x154>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	4b42      	ldr	r3, [pc, #264]	; (800522c <xTaskIncrementTick+0x158>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a40      	ldr	r2, [pc, #256]	; (8005228 <xTaskIncrementTick+0x154>)
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	4a40      	ldr	r2, [pc, #256]	; (800522c <xTaskIncrementTick+0x158>)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	4b3f      	ldr	r3, [pc, #252]	; (8005230 <xTaskIncrementTick+0x15c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3301      	adds	r3, #1
 8005136:	4a3e      	ldr	r2, [pc, #248]	; (8005230 <xTaskIncrementTick+0x15c>)
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	f000 fa99 	bl	8005670 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800513e:	4b3d      	ldr	r3, [pc, #244]	; (8005234 <xTaskIncrementTick+0x160>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	429a      	cmp	r2, r3
 8005146:	d34c      	bcc.n	80051e2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005148:	4b37      	ldr	r3, [pc, #220]	; (8005228 <xTaskIncrementTick+0x154>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005152:	4b38      	ldr	r3, [pc, #224]	; (8005234 <xTaskIncrementTick+0x160>)
 8005154:	f04f 32ff 	mov.w	r2, #4294967295
 8005158:	601a      	str	r2, [r3, #0]
                    break;
 800515a:	e042      	b.n	80051e2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800515c:	4b32      	ldr	r3, [pc, #200]	; (8005228 <xTaskIncrementTick+0x154>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	429a      	cmp	r2, r3
 8005172:	d203      	bcs.n	800517c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005174:	4a2f      	ldr	r2, [pc, #188]	; (8005234 <xTaskIncrementTick+0x160>)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800517a:	e032      	b.n	80051e2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	3304      	adds	r3, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe ff87 	bl	8004094 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d004      	beq.n	8005198 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	3318      	adds	r3, #24
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe ff7e 	bl	8004094 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4618      	mov	r0, r3
 800519c:	f002 fab8 	bl	8007710 <SEGGER_SYSVIEW_OnTaskStartReady>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	2201      	movs	r2, #1
 80051a6:	409a      	lsls	r2, r3
 80051a8:	4b23      	ldr	r3, [pc, #140]	; (8005238 <xTaskIncrementTick+0x164>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	4a22      	ldr	r2, [pc, #136]	; (8005238 <xTaskIncrementTick+0x164>)
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4a1f      	ldr	r2, [pc, #124]	; (800523c <xTaskIncrementTick+0x168>)
 80051c0:	441a      	add	r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f7fe ff06 	bl	8003fda <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d2:	4b1b      	ldr	r3, [pc, #108]	; (8005240 <xTaskIncrementTick+0x16c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	429a      	cmp	r2, r3
 80051da:	d3b5      	bcc.n	8005148 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80051dc:	2301      	movs	r3, #1
 80051de:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051e0:	e7b2      	b.n	8005148 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051e2:	4b17      	ldr	r3, [pc, #92]	; (8005240 <xTaskIncrementTick+0x16c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e8:	4914      	ldr	r1, [pc, #80]	; (800523c <xTaskIncrementTick+0x168>)
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d901      	bls.n	80051fe <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80051fa:	2301      	movs	r3, #1
 80051fc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80051fe:	4b11      	ldr	r3, [pc, #68]	; (8005244 <xTaskIncrementTick+0x170>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d007      	beq.n	8005216 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8005206:	2301      	movs	r3, #1
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	e004      	b.n	8005216 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <xTaskIncrementTick+0x174>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3301      	adds	r3, #1
 8005212:	4a0d      	ldr	r2, [pc, #52]	; (8005248 <xTaskIncrementTick+0x174>)
 8005214:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005216:	697b      	ldr	r3, [r7, #20]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	2000023c 	.word	0x2000023c
 8005224:	20000218 	.word	0x20000218
 8005228:	200001cc 	.word	0x200001cc
 800522c:	200001d0 	.word	0x200001d0
 8005230:	2000022c 	.word	0x2000022c
 8005234:	20000234 	.word	0x20000234
 8005238:	2000021c 	.word	0x2000021c
 800523c:	200000dc 	.word	0x200000dc
 8005240:	200000d8 	.word	0x200000d8
 8005244:	20000228 	.word	0x20000228
 8005248:	20000224 	.word	0x20000224

0800524c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005252:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <vTaskSwitchContext+0xbc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800525a:	4b2c      	ldr	r3, [pc, #176]	; (800530c <vTaskSwitchContext+0xc0>)
 800525c:	2201      	movs	r2, #1
 800525e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005260:	e04d      	b.n	80052fe <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8005262:	4b2a      	ldr	r3, [pc, #168]	; (800530c <vTaskSwitchContext+0xc0>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005268:	4b29      	ldr	r3, [pc, #164]	; (8005310 <vTaskSwitchContext+0xc4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	fab3 f383 	clz	r3, r3
 8005274:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005276:	7afb      	ldrb	r3, [r7, #11]
 8005278:	f1c3 031f 	rsb	r3, r3, #31
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	4925      	ldr	r1, [pc, #148]	; (8005314 <vTaskSwitchContext+0xc8>)
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	440b      	add	r3, r1
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	607b      	str	r3, [r7, #4]
    }
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <vTaskSwitchContext+0x5a>
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4a18      	ldr	r2, [pc, #96]	; (8005314 <vTaskSwitchContext+0xc8>)
 80052b4:	4413      	add	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3308      	adds	r3, #8
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d104      	bne.n	80052d8 <vTaskSwitchContext+0x8c>
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	605a      	str	r2, [r3, #4]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	4a0e      	ldr	r2, [pc, #56]	; (8005318 <vTaskSwitchContext+0xcc>)
 80052e0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80052e2:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <vTaskSwitchContext+0xcc>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4b0d      	ldr	r3, [pc, #52]	; (800531c <vTaskSwitchContext+0xd0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d102      	bne.n	80052f4 <vTaskSwitchContext+0xa8>
 80052ee:	f002 f96f 	bl	80075d0 <SEGGER_SYSVIEW_OnIdle>
}
 80052f2:	e004      	b.n	80052fe <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80052f4:	4b08      	ldr	r3, [pc, #32]	; (8005318 <vTaskSwitchContext+0xcc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f002 f9c7 	bl	800768c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80052fe:	bf00      	nop
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	2000023c 	.word	0x2000023c
 800530c:	20000228 	.word	0x20000228
 8005310:	2000021c 	.word	0x2000021c
 8005314:	200000dc 	.word	0x200000dc
 8005318:	200000d8 	.word	0x200000d8
 800531c:	20000238 	.word	0x20000238

08005320 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	60fb      	str	r3, [r7, #12]
    }
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005346:	4b07      	ldr	r3, [pc, #28]	; (8005364 <vTaskPlaceOnEventList+0x44>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3318      	adds	r3, #24
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fe fe67 	bl	8004022 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005354:	2101      	movs	r1, #1
 8005356:	6838      	ldr	r0, [r7, #0]
 8005358:	f000 fa26 	bl	80057a8 <prvAddCurrentTaskToDelayedList>
}
 800535c:	bf00      	nop
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	200000d8 	.word	0x200000d8

08005368 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10a      	bne.n	8005394 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	60fb      	str	r3, [r7, #12]
    }
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	3318      	adds	r3, #24
 8005398:	4618      	mov	r0, r3
 800539a:	f7fe fe7b 	bl	8004094 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800539e:	4b1f      	ldr	r3, [pc, #124]	; (800541c <xTaskRemoveFromEventList+0xb4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d120      	bne.n	80053e8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe fe72 	bl	8004094 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f002 f9ac 	bl	8007710 <SEGGER_SYSVIEW_OnTaskStartReady>
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	2201      	movs	r2, #1
 80053be:	409a      	lsls	r2, r3
 80053c0:	4b17      	ldr	r3, [pc, #92]	; (8005420 <xTaskRemoveFromEventList+0xb8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	4a16      	ldr	r2, [pc, #88]	; (8005420 <xTaskRemoveFromEventList+0xb8>)
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4a13      	ldr	r2, [pc, #76]	; (8005424 <xTaskRemoveFromEventList+0xbc>)
 80053d8:	441a      	add	r2, r3
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	3304      	adds	r3, #4
 80053de:	4619      	mov	r1, r3
 80053e0:	4610      	mov	r0, r2
 80053e2:	f7fe fdfa 	bl	8003fda <vListInsertEnd>
 80053e6:	e005      	b.n	80053f4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	3318      	adds	r3, #24
 80053ec:	4619      	mov	r1, r3
 80053ee:	480e      	ldr	r0, [pc, #56]	; (8005428 <xTaskRemoveFromEventList+0xc0>)
 80053f0:	f7fe fdf3 	bl	8003fda <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f8:	4b0c      	ldr	r3, [pc, #48]	; (800542c <xTaskRemoveFromEventList+0xc4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	429a      	cmp	r2, r3
 8005400:	d905      	bls.n	800540e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005402:	2301      	movs	r3, #1
 8005404:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <xTaskRemoveFromEventList+0xc8>)
 8005408:	2201      	movs	r2, #1
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	e001      	b.n	8005412 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005412:	697b      	ldr	r3, [r7, #20]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	2000023c 	.word	0x2000023c
 8005420:	2000021c 	.word	0x2000021c
 8005424:	200000dc 	.word	0x200000dc
 8005428:	200001d4 	.word	0x200001d4
 800542c:	200000d8 	.word	0x200000d8
 8005430:	20000228 	.word	0x20000228

08005434 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <vTaskInternalSetTimeOutState+0x24>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005444:	4b05      	ldr	r3, [pc, #20]	; (800545c <vTaskInternalSetTimeOutState+0x28>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	605a      	str	r2, [r3, #4]
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	2000022c 	.word	0x2000022c
 800545c:	20000218 	.word	0x20000218

08005460 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	613b      	str	r3, [r7, #16]
    }
 8005482:	bf00      	nop
 8005484:	e7fe      	b.n	8005484 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	60fb      	str	r3, [r7, #12]
    }
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80054a2:	f000 fba7 	bl	8005bf4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80054a6:	4b1f      	ldr	r3, [pc, #124]	; (8005524 <xTaskCheckForTimeOut+0xc4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054be:	d102      	bne.n	80054c6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	e026      	b.n	8005514 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b17      	ldr	r3, [pc, #92]	; (8005528 <xTaskCheckForTimeOut+0xc8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d00a      	beq.n	80054e8 <xTaskCheckForTimeOut+0x88>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d305      	bcc.n	80054e8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80054dc:	2301      	movs	r3, #1
 80054de:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e015      	b.n	8005514 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d20b      	bcs.n	800550a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	1ad2      	subs	r2, r2, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff ff98 	bl	8005434 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	e004      	b.n	8005514 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005510:	2301      	movs	r3, #1
 8005512:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005514:	f000 fb9e 	bl	8005c54 <vPortExitCritical>

    return xReturn;
 8005518:	69fb      	ldr	r3, [r7, #28]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000218 	.word	0x20000218
 8005528:	2000022c 	.word	0x2000022c

0800552c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <vTaskMissedYield+0x14>)
 8005532:	2201      	movs	r2, #1
 8005534:	601a      	str	r2, [r3, #0]
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	20000228 	.word	0x20000228

08005544 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800554c:	f000 f852 	bl	80055f4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <prvIdleTask+0x28>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d9f9      	bls.n	800554c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <prvIdleTask+0x2c>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005568:	e7f0      	b.n	800554c <prvIdleTask+0x8>
 800556a:	bf00      	nop
 800556c:	200000dc 	.word	0x200000dc
 8005570:	e000ed04 	.word	0xe000ed04

08005574 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800557a:	2300      	movs	r3, #0
 800557c:	607b      	str	r3, [r7, #4]
 800557e:	e00c      	b.n	800559a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4a12      	ldr	r2, [pc, #72]	; (80055d4 <prvInitialiseTaskLists+0x60>)
 800558c:	4413      	add	r3, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f7fe fcf6 	bl	8003f80 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3301      	adds	r3, #1
 8005598:	607b      	str	r3, [r7, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b09      	cmp	r3, #9
 800559e:	d9ef      	bls.n	8005580 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80055a0:	480d      	ldr	r0, [pc, #52]	; (80055d8 <prvInitialiseTaskLists+0x64>)
 80055a2:	f7fe fced 	bl	8003f80 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80055a6:	480d      	ldr	r0, [pc, #52]	; (80055dc <prvInitialiseTaskLists+0x68>)
 80055a8:	f7fe fcea 	bl	8003f80 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80055ac:	480c      	ldr	r0, [pc, #48]	; (80055e0 <prvInitialiseTaskLists+0x6c>)
 80055ae:	f7fe fce7 	bl	8003f80 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80055b2:	480c      	ldr	r0, [pc, #48]	; (80055e4 <prvInitialiseTaskLists+0x70>)
 80055b4:	f7fe fce4 	bl	8003f80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80055b8:	480b      	ldr	r0, [pc, #44]	; (80055e8 <prvInitialiseTaskLists+0x74>)
 80055ba:	f7fe fce1 	bl	8003f80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80055be:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <prvInitialiseTaskLists+0x78>)
 80055c0:	4a05      	ldr	r2, [pc, #20]	; (80055d8 <prvInitialiseTaskLists+0x64>)
 80055c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <prvInitialiseTaskLists+0x7c>)
 80055c6:	4a05      	ldr	r2, [pc, #20]	; (80055dc <prvInitialiseTaskLists+0x68>)
 80055c8:	601a      	str	r2, [r3, #0]
}
 80055ca:	bf00      	nop
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	200000dc 	.word	0x200000dc
 80055d8:	200001a4 	.word	0x200001a4
 80055dc:	200001b8 	.word	0x200001b8
 80055e0:	200001d4 	.word	0x200001d4
 80055e4:	200001e8 	.word	0x200001e8
 80055e8:	20000200 	.word	0x20000200
 80055ec:	200001cc 	.word	0x200001cc
 80055f0:	200001d0 	.word	0x200001d0

080055f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055fa:	e019      	b.n	8005630 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80055fc:	f000 fafa 	bl	8005bf4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005600:	4b10      	ldr	r3, [pc, #64]	; (8005644 <prvCheckTasksWaitingTermination+0x50>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe fd41 	bl	8004094 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005612:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <prvCheckTasksWaitingTermination+0x54>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3b01      	subs	r3, #1
 8005618:	4a0b      	ldr	r2, [pc, #44]	; (8005648 <prvCheckTasksWaitingTermination+0x54>)
 800561a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <prvCheckTasksWaitingTermination+0x58>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3b01      	subs	r3, #1
 8005622:	4a0a      	ldr	r2, [pc, #40]	; (800564c <prvCheckTasksWaitingTermination+0x58>)
 8005624:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005626:	f000 fb15 	bl	8005c54 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f810 	bl	8005650 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <prvCheckTasksWaitingTermination+0x58>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e1      	bne.n	80055fc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	200001e8 	.word	0x200001e8
 8005648:	20000214 	.word	0x20000214
 800564c:	200001fc 	.word	0x200001fc

08005650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fc95 	bl	8005f8c <vPortFree>
                vPortFree( pxTCB );
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fc92 	bl	8005f8c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005674:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <prvResetNextTaskUnblockTime+0x30>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800567e:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <prvResetNextTaskUnblockTime+0x34>)
 8005680:	f04f 32ff 	mov.w	r2, #4294967295
 8005684:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005686:	e005      	b.n	8005694 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <prvResetNextTaskUnblockTime+0x30>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a04      	ldr	r2, [pc, #16]	; (80056a4 <prvResetNextTaskUnblockTime+0x34>)
 8005692:	6013      	str	r3, [r2, #0]
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	200001cc 	.word	0x200001cc
 80056a4:	20000234 	.word	0x20000234

080056a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d068      	beq.n	8005790 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80056be:	4b37      	ldr	r3, [pc, #220]	; (800579c <xTaskPriorityDisinherit+0xf4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d00a      	beq.n	80056de <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	60fb      	str	r3, [r7, #12]
    }
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60bb      	str	r3, [r7, #8]
    }
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	1e5a      	subs	r2, r3, #1
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570e:	429a      	cmp	r2, r3
 8005710:	d03e      	beq.n	8005790 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005716:	2b00      	cmp	r3, #0
 8005718:	d13a      	bne.n	8005790 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3304      	adds	r3, #4
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe fcb8 	bl	8004094 <uxListRemove>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10a      	bne.n	8005740 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	2201      	movs	r2, #1
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43da      	mvns	r2, r3
 8005736:	4b1a      	ldr	r3, [pc, #104]	; (80057a0 <xTaskPriorityDisinherit+0xf8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4013      	ands	r3, r2
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <xTaskPriorityDisinherit+0xf8>)
 800573e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4619      	mov	r1, r3
 8005744:	204a      	movs	r0, #74	; 0x4a
 8005746:	f001 fa85 	bl	8006c54 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	f1c3 020a 	rsb	r2, r3, #10
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	2201      	movs	r2, #1
 8005764:	409a      	lsls	r2, r3
 8005766:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <xTaskPriorityDisinherit+0xf8>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4313      	orrs	r3, r2
 800576c:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <xTaskPriorityDisinherit+0xf8>)
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4a09      	ldr	r2, [pc, #36]	; (80057a4 <xTaskPriorityDisinherit+0xfc>)
 800577e:	441a      	add	r2, r3
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f7fe fc27 	bl	8003fda <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800578c:	2301      	movs	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005790:	697b      	ldr	r3, [r7, #20]
    }
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	200000d8 	.word	0x200000d8
 80057a0:	2000021c 	.word	0x2000021c
 80057a4:	200000dc 	.word	0x200000dc

080057a8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80057b2:	4b32      	ldr	r3, [pc, #200]	; (800587c <prvAddCurrentTaskToDelayedList+0xd4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057b8:	4b31      	ldr	r3, [pc, #196]	; (8005880 <prvAddCurrentTaskToDelayedList+0xd8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3304      	adds	r3, #4
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fc68 	bl	8004094 <uxListRemove>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10b      	bne.n	80057e2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80057ca:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <prvAddCurrentTaskToDelayedList+0xd8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	2201      	movs	r2, #1
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43da      	mvns	r2, r3
 80057d8:	4b2a      	ldr	r3, [pc, #168]	; (8005884 <prvAddCurrentTaskToDelayedList+0xdc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4013      	ands	r3, r2
 80057de:	4a29      	ldr	r2, [pc, #164]	; (8005884 <prvAddCurrentTaskToDelayedList+0xdc>)
 80057e0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d110      	bne.n	800580c <prvAddCurrentTaskToDelayedList+0x64>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00d      	beq.n	800580c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80057f0:	4b23      	ldr	r3, [pc, #140]	; (8005880 <prvAddCurrentTaskToDelayedList+0xd8>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	211b      	movs	r1, #27
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 ffcc 	bl	8007794 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057fc:	4b20      	ldr	r3, [pc, #128]	; (8005880 <prvAddCurrentTaskToDelayedList+0xd8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	4820      	ldr	r0, [pc, #128]	; (8005888 <prvAddCurrentTaskToDelayedList+0xe0>)
 8005806:	f7fe fbe8 	bl	8003fda <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800580a:	e032      	b.n	8005872 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4413      	add	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005814:	4b1a      	ldr	r3, [pc, #104]	; (8005880 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	429a      	cmp	r2, r3
 8005822:	d20f      	bcs.n	8005844 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8005824:	4b16      	ldr	r3, [pc, #88]	; (8005880 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2104      	movs	r1, #4
 800582a:	4618      	mov	r0, r3
 800582c:	f001 ffb2 	bl	8007794 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005830:	4b16      	ldr	r3, [pc, #88]	; (800588c <prvAddCurrentTaskToDelayedList+0xe4>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	4b12      	ldr	r3, [pc, #72]	; (8005880 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3304      	adds	r3, #4
 800583a:	4619      	mov	r1, r3
 800583c:	4610      	mov	r0, r2
 800583e:	f7fe fbf0 	bl	8004022 <vListInsert>
}
 8005842:	e016      	b.n	8005872 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8005844:	4b0e      	ldr	r3, [pc, #56]	; (8005880 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2104      	movs	r1, #4
 800584a:	4618      	mov	r0, r3
 800584c:	f001 ffa2 	bl	8007794 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005850:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3304      	adds	r3, #4
 800585a:	4619      	mov	r1, r3
 800585c:	4610      	mov	r0, r2
 800585e:	f7fe fbe0 	bl	8004022 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005862:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <prvAddCurrentTaskToDelayedList+0xec>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	429a      	cmp	r2, r3
 800586a:	d202      	bcs.n	8005872 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800586c:	4a09      	ldr	r2, [pc, #36]	; (8005894 <prvAddCurrentTaskToDelayedList+0xec>)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6013      	str	r3, [r2, #0]
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000218 	.word	0x20000218
 8005880:	200000d8 	.word	0x200000d8
 8005884:	2000021c 	.word	0x2000021c
 8005888:	20000200 	.word	0x20000200
 800588c:	200001d0 	.word	0x200001d0
 8005890:	200001cc 	.word	0x200001cc
 8005894:	20000234 	.word	0x20000234

08005898 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3b04      	subs	r3, #4
 80058a8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3b04      	subs	r3, #4
 80058b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f023 0201 	bic.w	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3b04      	subs	r3, #4
 80058c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80058c8:	4a0c      	ldr	r2, [pc, #48]	; (80058fc <pxPortInitialiseStack+0x64>)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3b14      	subs	r3, #20
 80058d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3b04      	subs	r3, #4
 80058de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f06f 0202 	mvn.w	r2, #2
 80058e6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3b20      	subs	r3, #32
 80058ec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80058ee:	68fb      	ldr	r3, [r7, #12]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	08005901 	.word	0x08005901

08005900 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800590a:	4b12      	ldr	r3, [pc, #72]	; (8005954 <prvTaskExitError+0x54>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005912:	d00a      	beq.n	800592a <prvTaskExitError+0x2a>
        __asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	60fb      	str	r3, [r7, #12]
    }
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <prvTaskExitError+0x28>
        __asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	60bb      	str	r3, [r7, #8]
    }
 800593c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800593e:	bf00      	nop
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0fc      	beq.n	8005940 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005946:	bf00      	nop
 8005948:	bf00      	nop
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	20000010 	.word	0x20000010
	...

08005960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005960:	4b07      	ldr	r3, [pc, #28]	; (8005980 <pxCurrentTCBConst2>)
 8005962:	6819      	ldr	r1, [r3, #0]
 8005964:	6808      	ldr	r0, [r1, #0]
 8005966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596a:	f380 8809 	msr	PSP, r0
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f380 8811 	msr	BASEPRI, r0
 800597a:	4770      	bx	lr
 800597c:	f3af 8000 	nop.w

08005980 <pxCurrentTCBConst2>:
 8005980:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop

08005988 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005988:	4808      	ldr	r0, [pc, #32]	; (80059ac <prvPortStartFirstTask+0x24>)
 800598a:	6800      	ldr	r0, [r0, #0]
 800598c:	6800      	ldr	r0, [r0, #0]
 800598e:	f380 8808 	msr	MSP, r0
 8005992:	f04f 0000 	mov.w	r0, #0
 8005996:	f380 8814 	msr	CONTROL, r0
 800599a:	b662      	cpsie	i
 800599c:	b661      	cpsie	f
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	df00      	svc	0
 80059a8:	bf00      	nop
 80059aa:	0000      	.short	0x0000
 80059ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80059b0:	bf00      	nop
 80059b2:	bf00      	nop

080059b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059ba:	4b46      	ldr	r3, [pc, #280]	; (8005ad4 <xPortStartScheduler+0x120>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a46      	ldr	r2, [pc, #280]	; (8005ad8 <xPortStartScheduler+0x124>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d10a      	bne.n	80059da <xPortStartScheduler+0x26>
        __asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	613b      	str	r3, [r7, #16]
    }
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059da:	4b3e      	ldr	r3, [pc, #248]	; (8005ad4 <xPortStartScheduler+0x120>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a3f      	ldr	r2, [pc, #252]	; (8005adc <xPortStartScheduler+0x128>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d10a      	bne.n	80059fa <xPortStartScheduler+0x46>
        __asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	60fb      	str	r3, [r7, #12]
    }
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059fa:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <xPortStartScheduler+0x12c>)
 80059fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	22ff      	movs	r2, #255	; 0xff
 8005a0a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <xPortStartScheduler+0x130>)
 8005a20:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a22:	4b31      	ldr	r3, [pc, #196]	; (8005ae8 <xPortStartScheduler+0x134>)
 8005a24:	2207      	movs	r2, #7
 8005a26:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a28:	e009      	b.n	8005a3e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005a2a:	4b2f      	ldr	r3, [pc, #188]	; (8005ae8 <xPortStartScheduler+0x134>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	4a2d      	ldr	r2, [pc, #180]	; (8005ae8 <xPortStartScheduler+0x134>)
 8005a32:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a46:	2b80      	cmp	r3, #128	; 0x80
 8005a48:	d0ef      	beq.n	8005a2a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a4a:	4b27      	ldr	r3, [pc, #156]	; (8005ae8 <xPortStartScheduler+0x134>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f1c3 0307 	rsb	r3, r3, #7
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d00a      	beq.n	8005a6c <xPortStartScheduler+0xb8>
        __asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	60bb      	str	r3, [r7, #8]
    }
 8005a68:	bf00      	nop
 8005a6a:	e7fe      	b.n	8005a6a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a6c:	4b1e      	ldr	r3, [pc, #120]	; (8005ae8 <xPortStartScheduler+0x134>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	4a1d      	ldr	r2, [pc, #116]	; (8005ae8 <xPortStartScheduler+0x134>)
 8005a74:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a76:	4b1c      	ldr	r3, [pc, #112]	; (8005ae8 <xPortStartScheduler+0x134>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ae8 <xPortStartScheduler+0x134>)
 8005a80:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005a8a:	4b18      	ldr	r3, [pc, #96]	; (8005aec <xPortStartScheduler+0x138>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a17      	ldr	r2, [pc, #92]	; (8005aec <xPortStartScheduler+0x138>)
 8005a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a94:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005a96:	4b15      	ldr	r3, [pc, #84]	; (8005aec <xPortStartScheduler+0x138>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a14      	ldr	r2, [pc, #80]	; (8005aec <xPortStartScheduler+0x138>)
 8005a9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005aa0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005aa2:	f000 f963 	bl	8005d6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005aa6:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <xPortStartScheduler+0x13c>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005aac:	f000 f982 	bl	8005db4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ab0:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <xPortStartScheduler+0x140>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a0f      	ldr	r2, [pc, #60]	; (8005af4 <xPortStartScheduler+0x140>)
 8005ab6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005aba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005abc:	f7ff ff64 	bl	8005988 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005ac0:	f7ff fbc4 	bl	800524c <vTaskSwitchContext>
    prvTaskExitError();
 8005ac4:	f7ff ff1c 	bl	8005900 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	e000ed00 	.word	0xe000ed00
 8005ad8:	410fc271 	.word	0x410fc271
 8005adc:	410fc270 	.word	0x410fc270
 8005ae0:	e000e400 	.word	0xe000e400
 8005ae4:	20000240 	.word	0x20000240
 8005ae8:	20000244 	.word	0x20000244
 8005aec:	e000ed20 	.word	0xe000ed20
 8005af0:	20000010 	.word	0x20000010
 8005af4:	e000ef34 	.word	0xe000ef34

08005af8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005afe:	4b37      	ldr	r3, [pc, #220]	; (8005bdc <vInitPrioGroupValue+0xe4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a37      	ldr	r2, [pc, #220]	; (8005be0 <vInitPrioGroupValue+0xe8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d10a      	bne.n	8005b1e <vInitPrioGroupValue+0x26>
        __asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	613b      	str	r3, [r7, #16]
    }
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b1e:	4b2f      	ldr	r3, [pc, #188]	; (8005bdc <vInitPrioGroupValue+0xe4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a30      	ldr	r2, [pc, #192]	; (8005be4 <vInitPrioGroupValue+0xec>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d10a      	bne.n	8005b3e <vInitPrioGroupValue+0x46>
        __asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	60fb      	str	r3, [r7, #12]
    }
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b3e:	4b2a      	ldr	r3, [pc, #168]	; (8005be8 <vInitPrioGroupValue+0xf0>)
 8005b40:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	4b22      	ldr	r3, [pc, #136]	; (8005bec <vInitPrioGroupValue+0xf4>)
 8005b64:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b66:	4b22      	ldr	r3, [pc, #136]	; (8005bf0 <vInitPrioGroupValue+0xf8>)
 8005b68:	2207      	movs	r2, #7
 8005b6a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b6c:	e009      	b.n	8005b82 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005b6e:	4b20      	ldr	r3, [pc, #128]	; (8005bf0 <vInitPrioGroupValue+0xf8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	4a1e      	ldr	r2, [pc, #120]	; (8005bf0 <vInitPrioGroupValue+0xf8>)
 8005b76:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b80      	cmp	r3, #128	; 0x80
 8005b8c:	d0ef      	beq.n	8005b6e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b8e:	4b18      	ldr	r3, [pc, #96]	; (8005bf0 <vInitPrioGroupValue+0xf8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f1c3 0307 	rsb	r3, r3, #7
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d00a      	beq.n	8005bb0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	60bb      	str	r3, [r7, #8]
    }
 8005bac:	bf00      	nop
 8005bae:	e7fe      	b.n	8005bae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bb0:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <vInitPrioGroupValue+0xf8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	4a0e      	ldr	r2, [pc, #56]	; (8005bf0 <vInitPrioGroupValue+0xf8>)
 8005bb8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bba:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <vInitPrioGroupValue+0xf8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bc2:	4a0b      	ldr	r2, [pc, #44]	; (8005bf0 <vInitPrioGroupValue+0xf8>)
 8005bc4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	e000ed00 	.word	0xe000ed00
 8005be0:	410fc271 	.word	0x410fc271
 8005be4:	410fc270 	.word	0x410fc270
 8005be8:	e000e400 	.word	0xe000e400
 8005bec:	20000240 	.word	0x20000240
 8005bf0:	20000244 	.word	0x20000244

08005bf4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
        __asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	607b      	str	r3, [r7, #4]
    }
 8005c0c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <vPortEnterCritical+0x58>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3301      	adds	r3, #1
 8005c14:	4a0d      	ldr	r2, [pc, #52]	; (8005c4c <vPortEnterCritical+0x58>)
 8005c16:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005c18:	4b0c      	ldr	r3, [pc, #48]	; (8005c4c <vPortEnterCritical+0x58>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d10f      	bne.n	8005c40 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <vPortEnterCritical+0x5c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <vPortEnterCritical+0x4c>
        __asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	603b      	str	r3, [r7, #0]
    }
 8005c3c:	bf00      	nop
 8005c3e:	e7fe      	b.n	8005c3e <vPortEnterCritical+0x4a>
    }
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	20000010 	.word	0x20000010
 8005c50:	e000ed04 	.word	0xe000ed04

08005c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005c5a:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <vPortExitCritical+0x50>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10a      	bne.n	8005c78 <vPortExitCritical+0x24>
        __asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	607b      	str	r3, [r7, #4]
    }
 8005c74:	bf00      	nop
 8005c76:	e7fe      	b.n	8005c76 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005c78:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <vPortExitCritical+0x50>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	4a09      	ldr	r2, [pc, #36]	; (8005ca4 <vPortExitCritical+0x50>)
 8005c80:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005c82:	4b08      	ldr	r3, [pc, #32]	; (8005ca4 <vPortExitCritical+0x50>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d105      	bne.n	8005c96 <vPortExitCritical+0x42>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005c94:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20000010 	.word	0x20000010
	...

08005cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005cb0:	f3ef 8009 	mrs	r0, PSP
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <pxCurrentTCBConst>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	f01e 0f10 	tst.w	lr, #16
 8005cc0:	bf08      	it	eq
 8005cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cca:	6010      	str	r0, [r2, #0]
 8005ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cd4:	f380 8811 	msr	BASEPRI, r0
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f7ff fab4 	bl	800524c <vTaskSwitchContext>
 8005ce4:	f04f 0000 	mov.w	r0, #0
 8005ce8:	f380 8811 	msr	BASEPRI, r0
 8005cec:	bc09      	pop	{r0, r3}
 8005cee:	6819      	ldr	r1, [r3, #0]
 8005cf0:	6808      	ldr	r0, [r1, #0]
 8005cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf6:	f01e 0f10 	tst.w	lr, #16
 8005cfa:	bf08      	it	eq
 8005cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d00:	f380 8809 	msr	PSP, r0
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	f3af 8000 	nop.w

08005d10 <pxCurrentTCBConst>:
 8005d10:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop

08005d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
        __asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	607b      	str	r3, [r7, #4]
    }
 8005d30:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005d32:	f001 fbd3 	bl	80074dc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005d36:	f7ff f9cd 	bl	80050d4 <xTaskIncrementTick>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d006      	beq.n	8005d4e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005d40:	f001 fc2a 	bl	8007598 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d44:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <SysTick_Handler+0x50>)
 8005d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	e001      	b.n	8005d52 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8005d4e:	f001 fc07 	bl	8007560 <SEGGER_SYSVIEW_RecordExitISR>
 8005d52:	2300      	movs	r3, #0
 8005d54:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f383 8811 	msr	BASEPRI, r3
    }
 8005d5c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8005d5e:	bf00      	nop
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	e000ed04 	.word	0xe000ed04

08005d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <vPortSetupTimerInterrupt+0x34>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d76:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <vPortSetupTimerInterrupt+0x38>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <vPortSetupTimerInterrupt+0x3c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a0a      	ldr	r2, [pc, #40]	; (8005dac <vPortSetupTimerInterrupt+0x40>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	099b      	lsrs	r3, r3, #6
 8005d88:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <vPortSetupTimerInterrupt+0x44>)
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d8e:	4b04      	ldr	r3, [pc, #16]	; (8005da0 <vPortSetupTimerInterrupt+0x34>)
 8005d90:	2207      	movs	r2, #7
 8005d92:	601a      	str	r2, [r3, #0]
}
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	e000e010 	.word	0xe000e010
 8005da4:	e000e018 	.word	0xe000e018
 8005da8:	20000000 	.word	0x20000000
 8005dac:	10624dd3 	.word	0x10624dd3
 8005db0:	e000e014 	.word	0xe000e014

08005db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005db4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005dc4 <vPortEnableVFP+0x10>
 8005db8:	6801      	ldr	r1, [r0, #0]
 8005dba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005dbe:	6001      	str	r1, [r0, #0]
 8005dc0:	4770      	bx	lr
 8005dc2:	0000      	.short	0x0000
 8005dc4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop

08005dcc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005dd8:	f7ff f8ce 	bl	8004f78 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005ddc:	4b65      	ldr	r3, [pc, #404]	; (8005f74 <pvPortMalloc+0x1a8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005de4:	f000 f934 	bl	8006050 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005de8:	4b63      	ldr	r3, [pc, #396]	; (8005f78 <pvPortMalloc+0x1ac>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f040 80a7 	bne.w	8005f44 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d02d      	beq.n	8005e58 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d227      	bcs.n	8005e58 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005e08:	2208      	movs	r2, #8
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d021      	beq.n	8005e5e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f023 0307 	bic.w	r3, r3, #7
 8005e20:	3308      	adds	r3, #8
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d214      	bcs.n	8005e52 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f023 0307 	bic.w	r3, r3, #7
 8005e2e:	3308      	adds	r3, #8
 8005e30:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d010      	beq.n	8005e5e <pvPortMalloc+0x92>
        __asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	617b      	str	r3, [r7, #20]
    }
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e56:	e002      	b.n	8005e5e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	607b      	str	r3, [r7, #4]
 8005e5c:	e000      	b.n	8005e60 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e5e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d06e      	beq.n	8005f44 <pvPortMalloc+0x178>
 8005e66:	4b45      	ldr	r3, [pc, #276]	; (8005f7c <pvPortMalloc+0x1b0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d869      	bhi.n	8005f44 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005e70:	4b43      	ldr	r3, [pc, #268]	; (8005f80 <pvPortMalloc+0x1b4>)
 8005e72:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005e74:	4b42      	ldr	r3, [pc, #264]	; (8005f80 <pvPortMalloc+0x1b4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e7a:	e004      	b.n	8005e86 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d903      	bls.n	8005e98 <pvPortMalloc+0xcc>
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1f1      	bne.n	8005e7c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005e98:	4b36      	ldr	r3, [pc, #216]	; (8005f74 <pvPortMalloc+0x1a8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d050      	beq.n	8005f44 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	4413      	add	r3, r2
 8005eaa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d91f      	bls.n	8005f04 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <pvPortMalloc+0x120>
        __asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	613b      	str	r3, [r7, #16]
    }
 8005ee8:	bf00      	nop
 8005eea:	e7fe      	b.n	8005eea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	1ad2      	subs	r2, r2, r3
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005efe:	69b8      	ldr	r0, [r7, #24]
 8005f00:	f000 f908 	bl	8006114 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f04:	4b1d      	ldr	r3, [pc, #116]	; (8005f7c <pvPortMalloc+0x1b0>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	4a1b      	ldr	r2, [pc, #108]	; (8005f7c <pvPortMalloc+0x1b0>)
 8005f10:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f12:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <pvPortMalloc+0x1b0>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <pvPortMalloc+0x1b8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d203      	bcs.n	8005f26 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f1e:	4b17      	ldr	r3, [pc, #92]	; (8005f7c <pvPortMalloc+0x1b0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a18      	ldr	r2, [pc, #96]	; (8005f84 <pvPortMalloc+0x1b8>)
 8005f24:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	4b13      	ldr	r3, [pc, #76]	; (8005f78 <pvPortMalloc+0x1ac>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005f3a:	4b13      	ldr	r3, [pc, #76]	; (8005f88 <pvPortMalloc+0x1bc>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	4a11      	ldr	r2, [pc, #68]	; (8005f88 <pvPortMalloc+0x1bc>)
 8005f42:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005f44:	f7ff f826 	bl	8004f94 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <pvPortMalloc+0x19c>
        __asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	60fb      	str	r3, [r7, #12]
    }
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <pvPortMalloc+0x19a>
    return pvReturn;
 8005f68:	69fb      	ldr	r3, [r7, #28]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3728      	adds	r7, #40	; 0x28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20016a50 	.word	0x20016a50
 8005f78:	20016a64 	.word	0x20016a64
 8005f7c:	20016a54 	.word	0x20016a54
 8005f80:	20016a48 	.word	0x20016a48
 8005f84:	20016a58 	.word	0x20016a58
 8005f88:	20016a5c 	.word	0x20016a5c

08005f8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d04d      	beq.n	800603a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	425b      	negs	r3, r3
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	4b24      	ldr	r3, [pc, #144]	; (8006044 <vPortFree+0xb8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <vPortFree+0x44>
        __asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60fb      	str	r3, [r7, #12]
    }
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <vPortFree+0x62>
        __asm volatile
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	60bb      	str	r3, [r7, #8]
    }
 8005fea:	bf00      	nop
 8005fec:	e7fe      	b.n	8005fec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	4b14      	ldr	r3, [pc, #80]	; (8006044 <vPortFree+0xb8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01e      	beq.n	800603a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d11a      	bne.n	800603a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <vPortFree+0xb8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	43db      	mvns	r3, r3
 800600e:	401a      	ands	r2, r3
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006014:	f7fe ffb0 	bl	8004f78 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <vPortFree+0xbc>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4413      	add	r3, r2
 8006022:	4a09      	ldr	r2, [pc, #36]	; (8006048 <vPortFree+0xbc>)
 8006024:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006026:	6938      	ldr	r0, [r7, #16]
 8006028:	f000 f874 	bl	8006114 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800602c:	4b07      	ldr	r3, [pc, #28]	; (800604c <vPortFree+0xc0>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3301      	adds	r3, #1
 8006032:	4a06      	ldr	r2, [pc, #24]	; (800604c <vPortFree+0xc0>)
 8006034:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006036:	f7fe ffad 	bl	8004f94 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800603a:	bf00      	nop
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20016a64 	.word	0x20016a64
 8006048:	20016a54 	.word	0x20016a54
 800604c:	20016a60 	.word	0x20016a60

08006050 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006056:	f44f 33b4 	mov.w	r3, #92160	; 0x16800
 800605a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800605c:	4b27      	ldr	r3, [pc, #156]	; (80060fc <prvHeapInit+0xac>)
 800605e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00c      	beq.n	8006084 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3307      	adds	r3, #7
 800606e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0307 	bic.w	r3, r3, #7
 8006076:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <prvHeapInit+0xac>)
 8006080:	4413      	add	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006088:	4a1d      	ldr	r2, [pc, #116]	; (8006100 <prvHeapInit+0xb0>)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800608e:	4b1c      	ldr	r3, [pc, #112]	; (8006100 <prvHeapInit+0xb0>)
 8006090:	2200      	movs	r2, #0
 8006092:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	4413      	add	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800609c:	2208      	movs	r2, #8
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0307 	bic.w	r3, r3, #7
 80060aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4a15      	ldr	r2, [pc, #84]	; (8006104 <prvHeapInit+0xb4>)
 80060b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80060b2:	4b14      	ldr	r3, [pc, #80]	; (8006104 <prvHeapInit+0xb4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2200      	movs	r2, #0
 80060b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <prvHeapInit+0xb4>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	1ad2      	subs	r2, r2, r3
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <prvHeapInit+0xb4>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <prvHeapInit+0xb8>)
 80060de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	4a09      	ldr	r2, [pc, #36]	; (800610c <prvHeapInit+0xbc>)
 80060e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060e8:	4b09      	ldr	r3, [pc, #36]	; (8006110 <prvHeapInit+0xc0>)
 80060ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060ee:	601a      	str	r2, [r3, #0]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	20000248 	.word	0x20000248
 8006100:	20016a48 	.word	0x20016a48
 8006104:	20016a50 	.word	0x20016a50
 8006108:	20016a58 	.word	0x20016a58
 800610c:	20016a54 	.word	0x20016a54
 8006110:	20016a64 	.word	0x20016a64

08006114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800611c:	4b28      	ldr	r3, [pc, #160]	; (80061c0 <prvInsertBlockIntoFreeList+0xac>)
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e002      	b.n	8006128 <prvInsertBlockIntoFreeList+0x14>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	429a      	cmp	r2, r3
 8006130:	d8f7      	bhi.n	8006122 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	4413      	add	r3, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d108      	bne.n	8006156 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	441a      	add	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	441a      	add	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d118      	bne.n	800619c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4b15      	ldr	r3, [pc, #84]	; (80061c4 <prvInsertBlockIntoFreeList+0xb0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d00d      	beq.n	8006192 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	441a      	add	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	e008      	b.n	80061a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006192:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <prvInsertBlockIntoFreeList+0xb0>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	e003      	b.n	80061a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d002      	beq.n	80061b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80061b2:	bf00      	nop
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	20016a48 	.word	0x20016a48
 80061c4:	20016a50 	.word	0x20016a50

080061c8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80061d6:	2205      	movs	r2, #5
 80061d8:	492b      	ldr	r1, [pc, #172]	; (8006288 <SYSVIEW_AddTask+0xc0>)
 80061da:	68b8      	ldr	r0, [r7, #8]
 80061dc:	f002 f8ac 	bl	8008338 <memcmp>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d04b      	beq.n	800627e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80061e6:	4b29      	ldr	r3, [pc, #164]	; (800628c <SYSVIEW_AddTask+0xc4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b07      	cmp	r3, #7
 80061ec:	d903      	bls.n	80061f6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80061ee:	4828      	ldr	r0, [pc, #160]	; (8006290 <SYSVIEW_AddTask+0xc8>)
 80061f0:	f001 fc1c 	bl	8007a2c <SEGGER_SYSVIEW_Warn>
    return;
 80061f4:	e044      	b.n	8006280 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80061f6:	4b25      	ldr	r3, [pc, #148]	; (800628c <SYSVIEW_AddTask+0xc4>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4926      	ldr	r1, [pc, #152]	; (8006294 <SYSVIEW_AddTask+0xcc>)
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800620a:	4b20      	ldr	r3, [pc, #128]	; (800628c <SYSVIEW_AddTask+0xc4>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	4921      	ldr	r1, [pc, #132]	; (8006294 <SYSVIEW_AddTask+0xcc>)
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	3304      	adds	r3, #4
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006220:	4b1a      	ldr	r3, [pc, #104]	; (800628c <SYSVIEW_AddTask+0xc4>)
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	491b      	ldr	r1, [pc, #108]	; (8006294 <SYSVIEW_AddTask+0xcc>)
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	3308      	adds	r3, #8
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006236:	4b15      	ldr	r3, [pc, #84]	; (800628c <SYSVIEW_AddTask+0xc4>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4916      	ldr	r1, [pc, #88]	; (8006294 <SYSVIEW_AddTask+0xcc>)
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	330c      	adds	r3, #12
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800624c:	4b0f      	ldr	r3, [pc, #60]	; (800628c <SYSVIEW_AddTask+0xc4>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4910      	ldr	r1, [pc, #64]	; (8006294 <SYSVIEW_AddTask+0xcc>)
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	3310      	adds	r3, #16
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006262:	4b0a      	ldr	r3, [pc, #40]	; (800628c <SYSVIEW_AddTask+0xc4>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	4a08      	ldr	r2, [pc, #32]	; (800628c <SYSVIEW_AddTask+0xc4>)
 800626a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f80e 	bl	8006298 <SYSVIEW_SendTaskInfo>
 800627c:	e000      	b.n	8006280 <SYSVIEW_AddTask+0xb8>
    return;
 800627e:	bf00      	nop

}
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	08008df4 	.word	0x08008df4
 800628c:	20016b08 	.word	0x20016b08
 8006290:	08008dfc 	.word	0x08008dfc
 8006294:	20016a68 	.word	0x20016a68

08006298 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b08a      	sub	sp, #40	; 0x28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80062a6:	f107 0314 	add.w	r3, r7, #20
 80062aa:	2214      	movs	r2, #20
 80062ac:	2100      	movs	r1, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f002 f85e 	bl	8008370 <memset>
  TaskInfo.TaskID     = TaskID;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80062c8:	f107 0314 	add.w	r3, r7, #20
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 ffdb 	bl	8007288 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80062d2:	bf00      	nop
 80062d4:	3728      	adds	r7, #40	; 0x28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80062e2:	4b1e      	ldr	r3, [pc, #120]	; (800635c <USART2_IRQHandler+0x80>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d011      	beq.n	8006316 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80062f2:	4b1b      	ldr	r3, [pc, #108]	; (8006360 <USART2_IRQHandler+0x84>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f003 030b 	and.w	r3, r3, #11
 8006300:	2b00      	cmp	r3, #0
 8006302:	d108      	bne.n	8006316 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8006304:	4b17      	ldr	r3, [pc, #92]	; (8006364 <USART2_IRQHandler+0x88>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800630c:	4b15      	ldr	r3, [pc, #84]	; (8006364 <USART2_IRQHandler+0x88>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	79fa      	ldrb	r2, [r7, #7]
 8006312:	4610      	mov	r0, r2
 8006314:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01a      	beq.n	8006356 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8006320:	4b11      	ldr	r3, [pc, #68]	; (8006368 <USART2_IRQHandler+0x8c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d015      	beq.n	8006354 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8006328:	4b0f      	ldr	r3, [pc, #60]	; (8006368 <USART2_IRQHandler+0x8c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	1dfa      	adds	r2, r7, #7
 800632e:	4610      	mov	r0, r2
 8006330:	4798      	blx	r3
 8006332:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800633a:	4b0c      	ldr	r3, [pc, #48]	; (800636c <USART2_IRQHandler+0x90>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a0b      	ldr	r2, [pc, #44]	; (800636c <USART2_IRQHandler+0x90>)
 8006340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	e006      	b.n	8006356 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8006348:	4b04      	ldr	r3, [pc, #16]	; (800635c <USART2_IRQHandler+0x80>)
 800634a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800634c:	79fa      	ldrb	r2, [r7, #7]
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <USART2_IRQHandler+0x84>)
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	e000      	b.n	8006356 <USART2_IRQHandler+0x7a>
      return;
 8006354:	bf00      	nop
    }
  }
}
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40004400 	.word	0x40004400
 8006360:	40004404 	.word	0x40004404
 8006364:	20016b0c 	.word	0x20016b0c
 8006368:	20016b10 	.word	0x20016b10
 800636c:	4000440c 	.word	0x4000440c

08006370 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8006374:	4b05      	ldr	r3, [pc, #20]	; (800638c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a04      	ldr	r2, [pc, #16]	; (800638c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800637a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637e:	6013      	str	r3, [r2, #0]
}
 8006380:	bf00      	nop
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	4000440c 	.word	0x4000440c

08006390 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8006396:	4b24      	ldr	r3, [pc, #144]	; (8006428 <_DoInit+0x98>)
 8006398:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2203      	movs	r2, #3
 800639e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2203      	movs	r2, #3
 80063a4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a20      	ldr	r2, [pc, #128]	; (800642c <_DoInit+0x9c>)
 80063aa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a20      	ldr	r2, [pc, #128]	; (8006430 <_DoInit+0xa0>)
 80063b0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063b8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a17      	ldr	r2, [pc, #92]	; (800642c <_DoInit+0x9c>)
 80063d0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a17      	ldr	r2, [pc, #92]	; (8006434 <_DoInit+0xa4>)
 80063d6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2210      	movs	r2, #16
 80063dc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3307      	adds	r3, #7
 80063f4:	4a10      	ldr	r2, [pc, #64]	; (8006438 <_DoInit+0xa8>)
 80063f6:	6810      	ldr	r0, [r2, #0]
 80063f8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80063fa:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a0e      	ldr	r2, [pc, #56]	; (800643c <_DoInit+0xac>)
 8006402:	6810      	ldr	r0, [r2, #0]
 8006404:	6018      	str	r0, [r3, #0]
 8006406:	8891      	ldrh	r1, [r2, #4]
 8006408:	7992      	ldrb	r2, [r2, #6]
 800640a:	8099      	strh	r1, [r3, #4]
 800640c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800640e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2220      	movs	r2, #32
 8006416:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006418:	f3bf 8f5f 	dmb	sy
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	20017180 	.word	0x20017180
 800642c:	08008e4c 	.word	0x08008e4c
 8006430:	20016b14 	.word	0x20016b14
 8006434:	20016f14 	.word	0x20016f14
 8006438:	08008e58 	.word	0x08008e58
 800643c:	08008e5c 	.word	0x08008e5c

08006440 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800644c:	2300      	movs	r3, #0
 800644e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	429a      	cmp	r2, r3
 8006462:	d905      	bls.n	8006470 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
 800646e:	e007      	b.n	8006480 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	69b9      	ldr	r1, [r7, #24]
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	1acb      	subs	r3, r1, r3
 800647a:	4413      	add	r3, r2
 800647c:	3b01      	subs	r3, #1
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	4293      	cmp	r3, r2
 800648c:	bf28      	it	cs
 800648e:	4613      	movcs	r3, r2
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8006492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4293      	cmp	r3, r2
 8006498:	bf28      	it	cs
 800649a:	4613      	movcs	r3, r2
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80064a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	6978      	ldr	r0, [r7, #20]
 80064ae:	f001 ff51 	bl	8008354 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80064b2:	6a3a      	ldr	r2, [r7, #32]
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	4413      	add	r3, r2
 80064b8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	4413      	add	r3, r2
 80064c0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	4413      	add	r3, r2
 80064d0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d101      	bne.n	80064e0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80064dc:	2300      	movs	r3, #0
 80064de:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80064e0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1b2      	bne.n	8006456 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80064f0:	6a3b      	ldr	r3, [r7, #32]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3728      	adds	r7, #40	; 0x28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b088      	sub	sp, #32
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	429a      	cmp	r2, r3
 800651c:	d911      	bls.n	8006542 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	6938      	ldr	r0, [r7, #16]
 800652e:	f001 ff11 	bl	8008354 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006532:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	441a      	add	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8006540:	e01f      	b.n	8006582 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	4413      	add	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	6938      	ldr	r0, [r7, #16]
 8006556:	f001 fefd 	bl	8008354 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	4413      	add	r3, r2
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4619      	mov	r1, r3
 8006572:	6938      	ldr	r0, [r7, #16]
 8006574:	f001 feee 	bl	8008354 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006578:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	60da      	str	r2, [r3, #12]
}
 8006582:	bf00      	nop
 8006584:	3720      	adds	r7, #32
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800658a:	b480      	push	{r7}
 800658c:	b087      	sub	sp, #28
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d808      	bhi.n	80065b8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	1ad2      	subs	r2, r2, r3
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	4413      	add	r3, r2
 80065b2:	3b01      	subs	r3, #1
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	e004      	b.n	80065c2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80065c2:	697b      	ldr	r3, [r7, #20]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08c      	sub	sp, #48	; 0x30
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80065dc:	4b3e      	ldr	r3, [pc, #248]	; (80066d8 <SEGGER_RTT_ReadNoLock+0x108>)
 80065de:	623b      	str	r3, [r7, #32]
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <SEGGER_RTT_ReadNoLock+0x1e>
 80065ea:	f7ff fed1 	bl	8006390 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4613      	mov	r3, r2
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	4413      	add	r3, r2
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	3360      	adds	r3, #96	; 0x60
 80065fa:	4a37      	ldr	r2, [pc, #220]	; (80066d8 <SEGGER_RTT_ReadNoLock+0x108>)
 80065fc:	4413      	add	r3, r2
 80065fe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006610:	2300      	movs	r3, #0
 8006612:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	429a      	cmp	r2, r3
 800661a:	d92b      	bls.n	8006674 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4293      	cmp	r3, r2
 800662c:	bf28      	it	cs
 800662e:	4613      	movcs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	4413      	add	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	6939      	ldr	r1, [r7, #16]
 8006640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006642:	f001 fe87 	bl	8008354 <memcpy>
    NumBytesRead += NumBytesRem;
 8006646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	4413      	add	r3, r2
 800664c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800664e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	4413      	add	r3, r2
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800665e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	4413      	add	r3, r2
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666c:	429a      	cmp	r2, r3
 800666e:	d101      	bne.n	8006674 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006670:	2300      	movs	r3, #0
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4293      	cmp	r3, r2
 8006682:	bf28      	it	cs
 8006684:	4613      	movcs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d019      	beq.n	80066c2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	4413      	add	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	6939      	ldr	r1, [r7, #16]
 800669c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800669e:	f001 fe59 	bl	8008354 <memcpy>
    NumBytesRead += NumBytesRem;
 80066a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	4413      	add	r3, r2
 80066a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80066aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	4413      	add	r3, r2
 80066b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80066ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	4413      	add	r3, r2
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066cc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3730      	adds	r7, #48	; 0x30
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20017180 	.word	0x20017180

080066dc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	4613      	mov	r3, r2
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	4413      	add	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4a1f      	ldr	r2, [pc, #124]	; (8006778 <SEGGER_RTT_WriteNoLock+0x9c>)
 80066fa:	4413      	add	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d029      	beq.n	800675a <SEGGER_RTT_WriteNoLock+0x7e>
 8006706:	2b02      	cmp	r3, #2
 8006708:	d82e      	bhi.n	8006768 <SEGGER_RTT_WriteNoLock+0x8c>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <SEGGER_RTT_WriteNoLock+0x38>
 800670e:	2b01      	cmp	r3, #1
 8006710:	d013      	beq.n	800673a <SEGGER_RTT_WriteNoLock+0x5e>
 8006712:	e029      	b.n	8006768 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006714:	6978      	ldr	r0, [r7, #20]
 8006716:	f7ff ff38 	bl	800658a <_GetAvailWriteSpace>
 800671a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d202      	bcs.n	800672a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8006724:	2300      	movs	r3, #0
 8006726:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006728:	e021      	b.n	800676e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	69b9      	ldr	r1, [r7, #24]
 8006732:	6978      	ldr	r0, [r7, #20]
 8006734:	f7ff fee1 	bl	80064fa <_WriteNoCheck>
    break;
 8006738:	e019      	b.n	800676e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800673a:	6978      	ldr	r0, [r7, #20]
 800673c:	f7ff ff25 	bl	800658a <_GetAvailWriteSpace>
 8006740:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	4293      	cmp	r3, r2
 8006748:	bf28      	it	cs
 800674a:	4613      	movcs	r3, r2
 800674c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	6978      	ldr	r0, [r7, #20]
 8006754:	f7ff fed1 	bl	80064fa <_WriteNoCheck>
    break;
 8006758:	e009      	b.n	800676e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	6978      	ldr	r0, [r7, #20]
 8006760:	f7ff fe6e 	bl	8006440 <_WriteBlocking>
 8006764:	61f8      	str	r0, [r7, #28]
    break;
 8006766:	e002      	b.n	800676e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
    break;
 800676c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800676e:	69fb      	ldr	r3, [r7, #28]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3720      	adds	r7, #32
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20017180 	.word	0x20017180

0800677c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006788:	4b0e      	ldr	r3, [pc, #56]	; (80067c4 <SEGGER_RTT_Write+0x48>)
 800678a:	61fb      	str	r3, [r7, #28]
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <SEGGER_RTT_Write+0x1e>
 8006796:	f7ff fdfb 	bl	8006390 <_DoInit>
  SEGGER_RTT_LOCK();
 800679a:	f3ef 8311 	mrs	r3, BASEPRI
 800679e:	f04f 0120 	mov.w	r1, #32
 80067a2:	f381 8811 	msr	BASEPRI, r1
 80067a6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff ff95 	bl	80066dc <SEGGER_RTT_WriteNoLock>
 80067b2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80067ba:	697b      	ldr	r3, [r7, #20]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3720      	adds	r7, #32
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20017180 	.word	0x20017180

080067c8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80067d8:	e002      	b.n	80067e0 <_EncodeStr+0x18>
    Len++;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	3301      	adds	r3, #1
 80067de:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	4413      	add	r3, r2
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f6      	bne.n	80067da <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d901      	bls.n	80067f8 <_EncodeStr+0x30>
    Len = Limit;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2bfe      	cmp	r3, #254	; 0xfe
 80067fc:	d806      	bhi.n	800680c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	60fa      	str	r2, [r7, #12]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	e011      	b.n	8006830 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	60fa      	str	r2, [r7, #12]
 8006812:	22ff      	movs	r2, #255	; 0xff
 8006814:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	60fa      	str	r2, [r7, #12]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	0a19      	lsrs	r1, r3, #8
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	60fa      	str	r2, [r7, #12]
 800682c:	b2ca      	uxtb	r2, r1
 800682e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006834:	e00a      	b.n	800684c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	1c53      	adds	r3, r2, #1
 800683a:	60bb      	str	r3, [r7, #8]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	1c59      	adds	r1, r3, #1
 8006840:	60f9      	str	r1, [r7, #12]
 8006842:	7812      	ldrb	r2, [r2, #0]
 8006844:	701a      	strb	r2, [r3, #0]
    n++;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	3301      	adds	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	429a      	cmp	r2, r3
 8006852:	d3f0      	bcc.n	8006836 <_EncodeStr+0x6e>
  }
  return pPayload;
 8006854:	68fb      	ldr	r3, [r7, #12]
}
 8006856:	4618      	mov	r0, r3
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3304      	adds	r3, #4
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006882:	4b36      	ldr	r3, [pc, #216]	; (800695c <_HandleIncomingPacket+0xe0>)
 8006884:	7e1b      	ldrb	r3, [r3, #24]
 8006886:	4618      	mov	r0, r3
 8006888:	1cfb      	adds	r3, r7, #3
 800688a:	2201      	movs	r2, #1
 800688c:	4619      	mov	r1, r3
 800688e:	f7ff fe9f 	bl	80065d0 <SEGGER_RTT_ReadNoLock>
 8006892:	4603      	mov	r3, r0
 8006894:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	dd54      	ble.n	8006946 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	2b80      	cmp	r3, #128	; 0x80
 80068a0:	d032      	beq.n	8006908 <_HandleIncomingPacket+0x8c>
 80068a2:	2b80      	cmp	r3, #128	; 0x80
 80068a4:	dc42      	bgt.n	800692c <_HandleIncomingPacket+0xb0>
 80068a6:	2b07      	cmp	r3, #7
 80068a8:	dc16      	bgt.n	80068d8 <_HandleIncomingPacket+0x5c>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dd3e      	ble.n	800692c <_HandleIncomingPacket+0xb0>
 80068ae:	3b01      	subs	r3, #1
 80068b0:	2b06      	cmp	r3, #6
 80068b2:	d83b      	bhi.n	800692c <_HandleIncomingPacket+0xb0>
 80068b4:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <_HandleIncomingPacket+0x40>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	080068df 	.word	0x080068df
 80068c0:	080068e5 	.word	0x080068e5
 80068c4:	080068eb 	.word	0x080068eb
 80068c8:	080068f1 	.word	0x080068f1
 80068cc:	080068f7 	.word	0x080068f7
 80068d0:	080068fd 	.word	0x080068fd
 80068d4:	08006903 	.word	0x08006903
 80068d8:	2b7f      	cmp	r3, #127	; 0x7f
 80068da:	d036      	beq.n	800694a <_HandleIncomingPacket+0xce>
 80068dc:	e026      	b.n	800692c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80068de:	f000 fb57 	bl	8006f90 <SEGGER_SYSVIEW_Start>
      break;
 80068e2:	e037      	b.n	8006954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80068e4:	f000 fc10 	bl	8007108 <SEGGER_SYSVIEW_Stop>
      break;
 80068e8:	e034      	b.n	8006954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80068ea:	f000 fdc5 	bl	8007478 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80068ee:	e031      	b.n	8006954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80068f0:	f000 fdae 	bl	8007450 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80068f4:	e02e      	b.n	8006954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80068f6:	f000 fc2d 	bl	8007154 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80068fa:	e02b      	b.n	8006954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80068fc:	f001 f858 	bl	80079b0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006900:	e028      	b.n	8006954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006902:	f001 f837 	bl	8007974 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006906:	e025      	b.n	8006954 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006908:	4b14      	ldr	r3, [pc, #80]	; (800695c <_HandleIncomingPacket+0xe0>)
 800690a:	7e1b      	ldrb	r3, [r3, #24]
 800690c:	4618      	mov	r0, r3
 800690e:	1cfb      	adds	r3, r7, #3
 8006910:	2201      	movs	r2, #1
 8006912:	4619      	mov	r1, r3
 8006914:	f7ff fe5c 	bl	80065d0 <SEGGER_RTT_ReadNoLock>
 8006918:	4603      	mov	r3, r0
 800691a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	dd15      	ble.n	800694e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006922:	78fb      	ldrb	r3, [r7, #3]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 ffa5 	bl	8007874 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800692a:	e010      	b.n	800694e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	b25b      	sxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	da0e      	bge.n	8006952 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006934:	4b09      	ldr	r3, [pc, #36]	; (800695c <_HandleIncomingPacket+0xe0>)
 8006936:	7e1b      	ldrb	r3, [r3, #24]
 8006938:	4618      	mov	r0, r3
 800693a:	1cfb      	adds	r3, r7, #3
 800693c:	2201      	movs	r2, #1
 800693e:	4619      	mov	r1, r3
 8006940:	f7ff fe46 	bl	80065d0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006944:	e005      	b.n	8006952 <_HandleIncomingPacket+0xd6>
    }
  }
 8006946:	bf00      	nop
 8006948:	e004      	b.n	8006954 <_HandleIncomingPacket+0xd8>
      break;
 800694a:	bf00      	nop
 800694c:	e002      	b.n	8006954 <_HandleIncomingPacket+0xd8>
      break;
 800694e:	bf00      	nop
 8006950:	e000      	b.n	8006954 <_HandleIncomingPacket+0xd8>
      break;
 8006952:	bf00      	nop
}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20016f24 	.word	0x20016f24

08006960 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006960:	b580      	push	{r7, lr}
 8006962:	b08c      	sub	sp, #48	; 0x30
 8006964:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006966:	2301      	movs	r3, #1
 8006968:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	3301      	adds	r3, #1
 800696e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006974:	4b32      	ldr	r3, [pc, #200]	; (8006a40 <_TrySendOverflowPacket+0xe0>)
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	62bb      	str	r3, [r7, #40]	; 0x28
 800697a:	e00b      	b.n	8006994 <_TrySendOverflowPacket+0x34>
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	b2da      	uxtb	r2, r3
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	1c59      	adds	r1, r3, #1
 8006984:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	09db      	lsrs	r3, r3, #7
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	2b7f      	cmp	r3, #127	; 0x7f
 8006998:	d8f0      	bhi.n	800697c <_TrySendOverflowPacket+0x1c>
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80069aa:	4b26      	ldr	r3, [pc, #152]	; (8006a44 <_TrySendOverflowPacket+0xe4>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80069b0:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <_TrySendOverflowPacket+0xe0>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	623b      	str	r3, [r7, #32]
 80069c2:	e00b      	b.n	80069dc <_TrySendOverflowPacket+0x7c>
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	1c59      	adds	r1, r3, #1
 80069cc:	6279      	str	r1, [r7, #36]	; 0x24
 80069ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	09db      	lsrs	r3, r3, #7
 80069da:	623b      	str	r3, [r7, #32]
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	2b7f      	cmp	r3, #127	; 0x7f
 80069e0:	d8f0      	bhi.n	80069c4 <_TrySendOverflowPacket+0x64>
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	627a      	str	r2, [r7, #36]	; 0x24
 80069e8:	6a3a      	ldr	r2, [r7, #32]
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80069f2:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <_TrySendOverflowPacket+0xe0>)
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	4618      	mov	r0, r3
 80069f8:	1d3b      	adds	r3, r7, #4
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	1d3b      	adds	r3, r7, #4
 8006a02:	4619      	mov	r1, r3
 8006a04:	f7f9 fbec 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8006a0c:	f7ff fcb0 	bl	8006370 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d009      	beq.n	8006a2a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006a16:	4a0a      	ldr	r2, [pc, #40]	; (8006a40 <_TrySendOverflowPacket+0xe0>)
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006a1c:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <_TrySendOverflowPacket+0xe0>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <_TrySendOverflowPacket+0xe0>)
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	e004      	b.n	8006a34 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006a2a:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <_TrySendOverflowPacket+0xe0>)
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	4a03      	ldr	r2, [pc, #12]	; (8006a40 <_TrySendOverflowPacket+0xe0>)
 8006a32:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006a34:	693b      	ldr	r3, [r7, #16]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3730      	adds	r7, #48	; 0x30
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20016f24 	.word	0x20016f24
 8006a44:	e0001004 	.word	0xe0001004

08006a48 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	; 0x28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006a54:	4b6d      	ldr	r3, [pc, #436]	; (8006c0c <_SendPacket+0x1c4>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d010      	beq.n	8006a7e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006a5c:	4b6b      	ldr	r3, [pc, #428]	; (8006c0c <_SendPacket+0x1c4>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80a5 	beq.w	8006bb0 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006a66:	4b69      	ldr	r3, [pc, #420]	; (8006c0c <_SendPacket+0x1c4>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d109      	bne.n	8006a82 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006a6e:	f7ff ff77 	bl	8006960 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006a72:	4b66      	ldr	r3, [pc, #408]	; (8006c0c <_SendPacket+0x1c4>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	f040 809c 	bne.w	8006bb4 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006a7c:	e001      	b.n	8006a82 <_SendPacket+0x3a>
    goto Send;
 8006a7e:	bf00      	nop
 8006a80:	e000      	b.n	8006a84 <_SendPacket+0x3c>
Send:
 8006a82:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b1f      	cmp	r3, #31
 8006a88:	d809      	bhi.n	8006a9e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006a8a:	4b60      	ldr	r3, [pc, #384]	; (8006c0c <_SendPacket+0x1c4>)
 8006a8c:	69da      	ldr	r2, [r3, #28]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f040 808d 	bne.w	8006bb8 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b17      	cmp	r3, #23
 8006aa2:	d807      	bhi.n	8006ab4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	e03d      	b.n	8006b30 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac0:	d912      	bls.n	8006ae8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	09da      	lsrs	r2, r3, #7
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	3a01      	subs	r2, #1
 8006ada:	60fa      	str	r2, [r7, #12]
 8006adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e006      	b.n	8006af6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b7f      	cmp	r3, #127	; 0x7f
 8006afa:	d912      	bls.n	8006b22 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	09da      	lsrs	r2, r3, #7
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	3a01      	subs	r2, #1
 8006b14:	60fa      	str	r2, [r7, #12]
 8006b16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	e006      	b.n	8006b30 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006b30:	4b37      	ldr	r3, [pc, #220]	; (8006c10 <_SendPacket+0x1c8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006b36:	4b35      	ldr	r3, [pc, #212]	; (8006c0c <_SendPacket+0x1c4>)
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	623b      	str	r3, [r7, #32]
 8006b48:	e00b      	b.n	8006b62 <_SendPacket+0x11a>
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	1c59      	adds	r1, r3, #1
 8006b52:	6279      	str	r1, [r7, #36]	; 0x24
 8006b54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b58:	b2d2      	uxtb	r2, r2
 8006b5a:	701a      	strb	r2, [r3, #0]
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	09db      	lsrs	r3, r3, #7
 8006b60:	623b      	str	r3, [r7, #32]
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	2b7f      	cmp	r3, #127	; 0x7f
 8006b66:	d8f0      	bhi.n	8006b4a <_SendPacket+0x102>
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	627a      	str	r2, [r7, #36]	; 0x24
 8006b6e:	6a3a      	ldr	r2, [r7, #32]
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006b78:	4b24      	ldr	r3, [pc, #144]	; (8006c0c <_SendPacket+0x1c4>)
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	68f9      	ldr	r1, [r7, #12]
 8006b88:	f7f9 fb2a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006b90:	f7ff fbee 	bl	8006370 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006b9a:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <_SendPacket+0x1c4>)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	60d3      	str	r3, [r2, #12]
 8006ba0:	e00b      	b.n	8006bba <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006ba2:	4b1a      	ldr	r3, [pc, #104]	; (8006c0c <_SendPacket+0x1c4>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	4b18      	ldr	r3, [pc, #96]	; (8006c0c <_SendPacket+0x1c4>)
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	e004      	b.n	8006bba <_SendPacket+0x172>
    goto SendDone;
 8006bb0:	bf00      	nop
 8006bb2:	e002      	b.n	8006bba <_SendPacket+0x172>
      goto SendDone;
 8006bb4:	bf00      	nop
 8006bb6:	e000      	b.n	8006bba <_SendPacket+0x172>
      goto SendDone;
 8006bb8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006bba:	4b14      	ldr	r3, [pc, #80]	; (8006c0c <_SendPacket+0x1c4>)
 8006bbc:	7e1b      	ldrb	r3, [r3, #24]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4a14      	ldr	r2, [pc, #80]	; (8006c14 <_SendPacket+0x1cc>)
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	440b      	add	r3, r1
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	4413      	add	r3, r2
 8006bcc:	336c      	adds	r3, #108	; 0x6c
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <_SendPacket+0x1c4>)
 8006bd2:	7e1b      	ldrb	r3, [r3, #24]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	490f      	ldr	r1, [pc, #60]	; (8006c14 <_SendPacket+0x1cc>)
 8006bd8:	4603      	mov	r3, r0
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	4403      	add	r3, r0
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	440b      	add	r3, r1
 8006be2:	3370      	adds	r3, #112	; 0x70
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d00b      	beq.n	8006c02 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006bea:	4b08      	ldr	r3, [pc, #32]	; (8006c0c <_SendPacket+0x1c4>)
 8006bec:	789b      	ldrb	r3, [r3, #2]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d107      	bne.n	8006c02 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006bf2:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <_SendPacket+0x1c4>)
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006bf8:	f7ff fe40 	bl	800687c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006bfc:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <_SendPacket+0x1c4>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006c02:	bf00      	nop
 8006c04:	3728      	adds	r7, #40	; 0x28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20016f24 	.word	0x20016f24
 8006c10:	e0001004 	.word	0xe0001004
 8006c14:	20017180 	.word	0x20017180

08006c18 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c20:	f3ef 8311 	mrs	r3, BASEPRI
 8006c24:	f04f 0120 	mov.w	r1, #32
 8006c28:	f381 8811 	msr	BASEPRI, r1
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	4808      	ldr	r0, [pc, #32]	; (8006c50 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006c30:	f7ff fe17 	bl	8006862 <_PreparePacket>
 8006c34:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	68b8      	ldr	r0, [r7, #8]
 8006c3c:	f7ff ff04 	bl	8006a48 <_SendPacket>
  RECORD_END();
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f383 8811 	msr	BASEPRI, r3
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20016f54 	.word	0x20016f54

08006c54 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c62:	f04f 0120 	mov.w	r1, #32
 8006c66:	f381 8811 	msr	BASEPRI, r1
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	4816      	ldr	r0, [pc, #88]	; (8006cc8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006c6e:	f7ff fdf8 	bl	8006862 <_PreparePacket>
 8006c72:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	e00b      	b.n	8006c9a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	1c59      	adds	r1, r3, #1
 8006c8a:	61f9      	str	r1, [r7, #28]
 8006c8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	09db      	lsrs	r3, r3, #7
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c9e:	d8f0      	bhi.n	8006c82 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	61fa      	str	r2, [r7, #28]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	68f9      	ldr	r1, [r7, #12]
 8006cb4:	6938      	ldr	r0, [r7, #16]
 8006cb6:	f7ff fec7 	bl	8006a48 <_SendPacket>
  RECORD_END();
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f383 8811 	msr	BASEPRI, r3
}
 8006cc0:	bf00      	nop
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20016f54 	.word	0x20016f54

08006ccc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08c      	sub	sp, #48	; 0x30
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cd8:	f3ef 8311 	mrs	r3, BASEPRI
 8006cdc:	f04f 0120 	mov.w	r1, #32
 8006ce0:	f381 8811 	msr	BASEPRI, r1
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	4825      	ldr	r0, [pc, #148]	; (8006d7c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006ce8:	f7ff fdbb 	bl	8006862 <_PreparePacket>
 8006cec:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cfa:	e00b      	b.n	8006d14 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	1c59      	adds	r1, r3, #1
 8006d04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	09db      	lsrs	r3, r3, #7
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	2b7f      	cmp	r3, #127	; 0x7f
 8006d18:	d8f0      	bhi.n	8006cfc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	701a      	strb	r2, [r3, #0]
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d28:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	623b      	str	r3, [r7, #32]
 8006d32:	e00b      	b.n	8006d4c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	1c59      	adds	r1, r3, #1
 8006d3c:	6279      	str	r1, [r7, #36]	; 0x24
 8006d3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	09db      	lsrs	r3, r3, #7
 8006d4a:	623b      	str	r3, [r7, #32]
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d50:	d8f0      	bhi.n	8006d34 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	627a      	str	r2, [r7, #36]	; 0x24
 8006d58:	6a3a      	ldr	r2, [r7, #32]
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	6979      	ldr	r1, [r7, #20]
 8006d66:	69b8      	ldr	r0, [r7, #24]
 8006d68:	f7ff fe6e 	bl	8006a48 <_SendPacket>
  RECORD_END();
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f383 8811 	msr	BASEPRI, r3
}
 8006d72:	bf00      	nop
 8006d74:	3730      	adds	r7, #48	; 0x30
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20016f54 	.word	0x20016f54

08006d80 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08e      	sub	sp, #56	; 0x38
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d92:	f04f 0120 	mov.w	r1, #32
 8006d96:	f381 8811 	msr	BASEPRI, r1
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	4832      	ldr	r0, [pc, #200]	; (8006e68 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006d9e:	f7ff fd60 	bl	8006862 <_PreparePacket>
 8006da2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	637b      	str	r3, [r7, #52]	; 0x34
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	633b      	str	r3, [r7, #48]	; 0x30
 8006db0:	e00b      	b.n	8006dca <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db8:	1c59      	adds	r1, r3, #1
 8006dba:	6379      	str	r1, [r7, #52]	; 0x34
 8006dbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	09db      	lsrs	r3, r3, #7
 8006dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8006dce:	d8f0      	bhi.n	8006db2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	637a      	str	r2, [r7, #52]	; 0x34
 8006dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006de8:	e00b      	b.n	8006e02 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	1c59      	adds	r1, r3, #1
 8006df2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006df4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	09db      	lsrs	r3, r3, #7
 8006e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	2b7f      	cmp	r3, #127	; 0x7f
 8006e06:	d8f0      	bhi.n	8006dea <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	623b      	str	r3, [r7, #32]
 8006e20:	e00b      	b.n	8006e3a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	1c59      	adds	r1, r3, #1
 8006e2a:	6279      	str	r1, [r7, #36]	; 0x24
 8006e2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	09db      	lsrs	r3, r3, #7
 8006e38:	623b      	str	r3, [r7, #32]
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e3e:	d8f0      	bhi.n	8006e22 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	627a      	str	r2, [r7, #36]	; 0x24
 8006e46:	6a3a      	ldr	r2, [r7, #32]
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	6979      	ldr	r1, [r7, #20]
 8006e54:	69b8      	ldr	r0, [r7, #24]
 8006e56:	f7ff fdf7 	bl	8006a48 <_SendPacket>
  RECORD_END();
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	f383 8811 	msr	BASEPRI, r3
}
 8006e60:	bf00      	nop
 8006e62:	3738      	adds	r7, #56	; 0x38
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20016f54 	.word	0x20016f54

08006e6c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b090      	sub	sp, #64	; 0x40
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e7e:	f04f 0120 	mov.w	r1, #32
 8006e82:	f381 8811 	msr	BASEPRI, r1
 8006e86:	61fb      	str	r3, [r7, #28]
 8006e88:	4840      	ldr	r0, [pc, #256]	; (8006f8c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006e8a:	f7ff fcea 	bl	8006862 <_PreparePacket>
 8006e8e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e9c:	e00b      	b.n	8006eb6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea4:	1c59      	adds	r1, r3, #1
 8006ea6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006ea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	09db      	lsrs	r3, r3, #7
 8006eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8006eba:	d8f0      	bhi.n	8006e9e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed4:	e00b      	b.n	8006eee <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006edc:	1c59      	adds	r1, r3, #1
 8006ede:	6379      	str	r1, [r7, #52]	; 0x34
 8006ee0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	09db      	lsrs	r3, r3, #7
 8006eec:	633b      	str	r3, [r7, #48]	; 0x30
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ef2:	d8f0      	bhi.n	8006ed6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	637a      	str	r2, [r7, #52]	; 0x34
 8006efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f0c:	e00b      	b.n	8006f26 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f14:	1c59      	adds	r1, r3, #1
 8006f16:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	09db      	lsrs	r3, r3, #7
 8006f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f28:	2b7f      	cmp	r3, #127	; 0x7f
 8006f2a:	d8f0      	bhi.n	8006f0e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f42:	623b      	str	r3, [r7, #32]
 8006f44:	e00b      	b.n	8006f5e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	1c59      	adds	r1, r3, #1
 8006f4e:	6279      	str	r1, [r7, #36]	; 0x24
 8006f50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	09db      	lsrs	r3, r3, #7
 8006f5c:	623b      	str	r3, [r7, #32]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	2b7f      	cmp	r3, #127	; 0x7f
 8006f62:	d8f0      	bhi.n	8006f46 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	627a      	str	r2, [r7, #36]	; 0x24
 8006f6a:	6a3a      	ldr	r2, [r7, #32]
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	701a      	strb	r2, [r3, #0]
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	6979      	ldr	r1, [r7, #20]
 8006f78:	69b8      	ldr	r0, [r7, #24]
 8006f7a:	f7ff fd65 	bl	8006a48 <_SendPacket>
  RECORD_END();
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	f383 8811 	msr	BASEPRI, r3
}
 8006f84:	bf00      	nop
 8006f86:	3740      	adds	r7, #64	; 0x40
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20016f54 	.word	0x20016f54

08006f90 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08c      	sub	sp, #48	; 0x30
 8006f94:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006f96:	4b59      	ldr	r3, [pc, #356]	; (80070fc <SEGGER_SYSVIEW_Start+0x16c>)
 8006f98:	2201      	movs	r2, #1
 8006f9a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa0:	f04f 0120 	mov.w	r1, #32
 8006fa4:	f381 8811 	msr	BASEPRI, r1
 8006fa8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006faa:	4b54      	ldr	r3, [pc, #336]	; (80070fc <SEGGER_SYSVIEW_Start+0x16c>)
 8006fac:	785b      	ldrb	r3, [r3, #1]
 8006fae:	220a      	movs	r2, #10
 8006fb0:	4953      	ldr	r1, [pc, #332]	; (8007100 <SEGGER_SYSVIEW_Start+0x170>)
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7f9 f914 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006fbe:	f7ff f9d7 	bl	8006370 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006fc2:	200a      	movs	r0, #10
 8006fc4:	f7ff fe28 	bl	8006c18 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006fc8:	f3ef 8311 	mrs	r3, BASEPRI
 8006fcc:	f04f 0120 	mov.w	r1, #32
 8006fd0:	f381 8811 	msr	BASEPRI, r1
 8006fd4:	60bb      	str	r3, [r7, #8]
 8006fd6:	484b      	ldr	r0, [pc, #300]	; (8007104 <SEGGER_SYSVIEW_Start+0x174>)
 8006fd8:	f7ff fc43 	bl	8006862 <_PreparePacket>
 8006fdc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fe6:	4b45      	ldr	r3, [pc, #276]	; (80070fc <SEGGER_SYSVIEW_Start+0x16c>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fec:	e00b      	b.n	8007006 <SEGGER_SYSVIEW_Start+0x76>
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	1c59      	adds	r1, r3, #1
 8006ff6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ff8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ffc:	b2d2      	uxtb	r2, r2
 8006ffe:	701a      	strb	r2, [r3, #0]
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	09db      	lsrs	r3, r3, #7
 8007004:	62bb      	str	r3, [r7, #40]	; 0x28
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	2b7f      	cmp	r3, #127	; 0x7f
 800700a:	d8f0      	bhi.n	8006fee <SEGGER_SYSVIEW_Start+0x5e>
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
 8007020:	4b36      	ldr	r3, [pc, #216]	; (80070fc <SEGGER_SYSVIEW_Start+0x16c>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	623b      	str	r3, [r7, #32]
 8007026:	e00b      	b.n	8007040 <SEGGER_SYSVIEW_Start+0xb0>
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	b2da      	uxtb	r2, r3
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	1c59      	adds	r1, r3, #1
 8007030:	6279      	str	r1, [r7, #36]	; 0x24
 8007032:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	09db      	lsrs	r3, r3, #7
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	2b7f      	cmp	r3, #127	; 0x7f
 8007044:	d8f0      	bhi.n	8007028 <SEGGER_SYSVIEW_Start+0x98>
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	627a      	str	r2, [r7, #36]	; 0x24
 800704c:	6a3a      	ldr	r2, [r7, #32]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	61fb      	str	r3, [r7, #28]
 800705a:	4b28      	ldr	r3, [pc, #160]	; (80070fc <SEGGER_SYSVIEW_Start+0x16c>)
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	e00b      	b.n	800707a <SEGGER_SYSVIEW_Start+0xea>
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	b2da      	uxtb	r2, r3
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	1c59      	adds	r1, r3, #1
 800706a:	61f9      	str	r1, [r7, #28]
 800706c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	09db      	lsrs	r3, r3, #7
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	2b7f      	cmp	r3, #127	; 0x7f
 800707e:	d8f0      	bhi.n	8007062 <SEGGER_SYSVIEW_Start+0xd2>
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	61fa      	str	r2, [r7, #28]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	2300      	movs	r3, #0
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	e00b      	b.n	80070b2 <SEGGER_SYSVIEW_Start+0x122>
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	b2da      	uxtb	r2, r3
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	1c59      	adds	r1, r3, #1
 80070a2:	6179      	str	r1, [r7, #20]
 80070a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070a8:	b2d2      	uxtb	r2, r2
 80070aa:	701a      	strb	r2, [r3, #0]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	09db      	lsrs	r3, r3, #7
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b7f      	cmp	r3, #127	; 0x7f
 80070b6:	d8f0      	bhi.n	800709a <SEGGER_SYSVIEW_Start+0x10a>
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	617a      	str	r2, [r7, #20]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80070c8:	2218      	movs	r2, #24
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7ff fcbb 	bl	8006a48 <_SendPacket>
      RECORD_END();
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80070d8:	4b08      	ldr	r3, [pc, #32]	; (80070fc <SEGGER_SYSVIEW_Start+0x16c>)
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80070e0:	4b06      	ldr	r3, [pc, #24]	; (80070fc <SEGGER_SYSVIEW_Start+0x16c>)
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80070e6:	f000 f9c7 	bl	8007478 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80070ea:	f000 f9b1 	bl	8007450 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80070ee:	f000 fc5f 	bl	80079b0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80070f2:	bf00      	nop
 80070f4:	3730      	adds	r7, #48	; 0x30
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20016f24 	.word	0x20016f24
 8007100:	08008e7c 	.word	0x08008e7c
 8007104:	20016f54 	.word	0x20016f54

08007108 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800710e:	f3ef 8311 	mrs	r3, BASEPRI
 8007112:	f04f 0120 	mov.w	r1, #32
 8007116:	f381 8811 	msr	BASEPRI, r1
 800711a:	607b      	str	r3, [r7, #4]
 800711c:	480b      	ldr	r0, [pc, #44]	; (800714c <SEGGER_SYSVIEW_Stop+0x44>)
 800711e:	f7ff fba0 	bl	8006862 <_PreparePacket>
 8007122:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007124:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <SEGGER_SYSVIEW_Stop+0x48>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d007      	beq.n	800713c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800712c:	220b      	movs	r2, #11
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6838      	ldr	r0, [r7, #0]
 8007132:	f7ff fc89 	bl	8006a48 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007136:	4b06      	ldr	r3, [pc, #24]	; (8007150 <SEGGER_SYSVIEW_Stop+0x48>)
 8007138:	2200      	movs	r2, #0
 800713a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f383 8811 	msr	BASEPRI, r3
}
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20016f54 	.word	0x20016f54
 8007150:	20016f24 	.word	0x20016f24

08007154 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007154:	b580      	push	{r7, lr}
 8007156:	b08c      	sub	sp, #48	; 0x30
 8007158:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800715a:	f3ef 8311 	mrs	r3, BASEPRI
 800715e:	f04f 0120 	mov.w	r1, #32
 8007162:	f381 8811 	msr	BASEPRI, r1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	4845      	ldr	r0, [pc, #276]	; (8007280 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800716a:	f7ff fb7a 	bl	8006862 <_PreparePacket>
 800716e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007178:	4b42      	ldr	r3, [pc, #264]	; (8007284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28
 800717e:	e00b      	b.n	8007198 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	b2da      	uxtb	r2, r3
 8007184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007186:	1c59      	adds	r1, r3, #1
 8007188:	62f9      	str	r1, [r7, #44]	; 0x2c
 800718a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	701a      	strb	r2, [r3, #0]
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	09db      	lsrs	r3, r3, #7
 8007196:	62bb      	str	r3, [r7, #40]	; 0x28
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	2b7f      	cmp	r3, #127	; 0x7f
 800719c:	d8f0      	bhi.n	8007180 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
 80071b2:	4b34      	ldr	r3, [pc, #208]	; (8007284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	623b      	str	r3, [r7, #32]
 80071b8:	e00b      	b.n	80071d2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	1c59      	adds	r1, r3, #1
 80071c2:	6279      	str	r1, [r7, #36]	; 0x24
 80071c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071c8:	b2d2      	uxtb	r2, r2
 80071ca:	701a      	strb	r2, [r3, #0]
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	09db      	lsrs	r3, r3, #7
 80071d0:	623b      	str	r3, [r7, #32]
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	2b7f      	cmp	r3, #127	; 0x7f
 80071d6:	d8f0      	bhi.n	80071ba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	627a      	str	r2, [r7, #36]	; 0x24
 80071de:	6a3a      	ldr	r2, [r7, #32]
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	701a      	strb	r2, [r3, #0]
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	61fb      	str	r3, [r7, #28]
 80071ec:	4b25      	ldr	r3, [pc, #148]	; (8007284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	e00b      	b.n	800720c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	1c59      	adds	r1, r3, #1
 80071fc:	61f9      	str	r1, [r7, #28]
 80071fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	09db      	lsrs	r3, r3, #7
 800720a:	61bb      	str	r3, [r7, #24]
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	2b7f      	cmp	r3, #127	; 0x7f
 8007210:	d8f0      	bhi.n	80071f4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	61fa      	str	r2, [r7, #28]
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	2300      	movs	r3, #0
 8007228:	613b      	str	r3, [r7, #16]
 800722a:	e00b      	b.n	8007244 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	b2da      	uxtb	r2, r3
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	1c59      	adds	r1, r3, #1
 8007234:	6179      	str	r1, [r7, #20]
 8007236:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	09db      	lsrs	r3, r3, #7
 8007242:	613b      	str	r3, [r7, #16]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	2b7f      	cmp	r3, #127	; 0x7f
 8007248:	d8f0      	bhi.n	800722c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	617a      	str	r2, [r7, #20]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800725a:	2218      	movs	r2, #24
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	68b8      	ldr	r0, [r7, #8]
 8007260:	f7ff fbf2 	bl	8006a48 <_SendPacket>
  RECORD_END();
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800726a:	4b06      	ldr	r3, [pc, #24]	; (8007284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007272:	4b04      	ldr	r3, [pc, #16]	; (8007284 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	4798      	blx	r3
  }
}
 8007278:	bf00      	nop
 800727a:	3730      	adds	r7, #48	; 0x30
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20016f54 	.word	0x20016f54
 8007284:	20016f24 	.word	0x20016f24

08007288 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007288:	b580      	push	{r7, lr}
 800728a:	b092      	sub	sp, #72	; 0x48
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007290:	f3ef 8311 	mrs	r3, BASEPRI
 8007294:	f04f 0120 	mov.w	r1, #32
 8007298:	f381 8811 	msr	BASEPRI, r1
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	486a      	ldr	r0, [pc, #424]	; (8007448 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80072a0:	f7ff fadf 	bl	8006862 <_PreparePacket>
 80072a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	647b      	str	r3, [r7, #68]	; 0x44
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b66      	ldr	r3, [pc, #408]	; (800744c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	643b      	str	r3, [r7, #64]	; 0x40
 80072ba:	e00b      	b.n	80072d4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80072bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072c2:	1c59      	adds	r1, r3, #1
 80072c4:	6479      	str	r1, [r7, #68]	; 0x44
 80072c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	701a      	strb	r2, [r3, #0]
 80072ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d0:	09db      	lsrs	r3, r3, #7
 80072d2:	643b      	str	r3, [r7, #64]	; 0x40
 80072d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d6:	2b7f      	cmp	r3, #127	; 0x7f
 80072d8:	d8f0      	bhi.n	80072bc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80072da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	647a      	str	r2, [r7, #68]	; 0x44
 80072e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80072f4:	e00b      	b.n	800730e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fc:	1c59      	adds	r1, r3, #1
 80072fe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007300:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007304:	b2d2      	uxtb	r2, r2
 8007306:	701a      	strb	r2, [r3, #0]
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	09db      	lsrs	r3, r3, #7
 800730c:	63bb      	str	r3, [r7, #56]	; 0x38
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	2b7f      	cmp	r3, #127	; 0x7f
 8007312:	d8f0      	bhi.n	80072f6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	63fa      	str	r2, [r7, #60]	; 0x3c
 800731a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007322:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2220      	movs	r2, #32
 800732a:	4619      	mov	r1, r3
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f7ff fa4b 	bl	80067c8 <_EncodeStr>
 8007332:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007334:	2209      	movs	r2, #9
 8007336:	68f9      	ldr	r1, [r7, #12]
 8007338:	6938      	ldr	r0, [r7, #16]
 800733a:	f7ff fb85 	bl	8006a48 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	637b      	str	r3, [r7, #52]	; 0x34
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	4b40      	ldr	r3, [pc, #256]	; (800744c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	633b      	str	r3, [r7, #48]	; 0x30
 8007352:	e00b      	b.n	800736c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	b2da      	uxtb	r2, r3
 8007358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735a:	1c59      	adds	r1, r3, #1
 800735c:	6379      	str	r1, [r7, #52]	; 0x34
 800735e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	09db      	lsrs	r3, r3, #7
 800736a:	633b      	str	r3, [r7, #48]	; 0x30
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	2b7f      	cmp	r3, #127	; 0x7f
 8007370:	d8f0      	bhi.n	8007354 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	637a      	str	r2, [r7, #52]	; 0x34
 8007378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007380:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	62bb      	str	r3, [r7, #40]	; 0x28
 800738c:	e00b      	b.n	80073a6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	b2da      	uxtb	r2, r3
 8007392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007394:	1c59      	adds	r1, r3, #1
 8007396:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007398:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	09db      	lsrs	r3, r3, #7
 80073a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a8:	2b7f      	cmp	r3, #127	; 0x7f
 80073aa:	d8f0      	bhi.n	800738e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b4:	b2d2      	uxtb	r2, r2
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	627b      	str	r3, [r7, #36]	; 0x24
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	623b      	str	r3, [r7, #32]
 80073c6:	e00b      	b.n	80073e0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	1c59      	adds	r1, r3, #1
 80073d0:	6279      	str	r1, [r7, #36]	; 0x24
 80073d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	09db      	lsrs	r3, r3, #7
 80073de:	623b      	str	r3, [r7, #32]
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	2b7f      	cmp	r3, #127	; 0x7f
 80073e4:	d8f0      	bhi.n	80073c8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	627a      	str	r2, [r7, #36]	; 0x24
 80073ec:	6a3a      	ldr	r2, [r7, #32]
 80073ee:	b2d2      	uxtb	r2, r2
 80073f0:	701a      	strb	r2, [r3, #0]
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	2300      	movs	r3, #0
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	e00b      	b.n	8007418 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	b2da      	uxtb	r2, r3
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	1c59      	adds	r1, r3, #1
 8007408:	61f9      	str	r1, [r7, #28]
 800740a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	09db      	lsrs	r3, r3, #7
 8007416:	61bb      	str	r3, [r7, #24]
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b7f      	cmp	r3, #127	; 0x7f
 800741c:	d8f0      	bhi.n	8007400 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	61fa      	str	r2, [r7, #28]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800742e:	2215      	movs	r2, #21
 8007430:	68f9      	ldr	r1, [r7, #12]
 8007432:	6938      	ldr	r0, [r7, #16]
 8007434:	f7ff fb08 	bl	8006a48 <_SendPacket>
  RECORD_END();
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f383 8811 	msr	BASEPRI, r3
}
 800743e:	bf00      	nop
 8007440:	3748      	adds	r7, #72	; 0x48
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20016f54 	.word	0x20016f54
 800744c:	20016f24 	.word	0x20016f24

08007450 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007454:	4b07      	ldr	r3, [pc, #28]	; (8007474 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d008      	beq.n	800746e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007466:	4b03      	ldr	r3, [pc, #12]	; (8007474 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	4798      	blx	r3
  }
}
 800746e:	bf00      	nop
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20016f24 	.word	0x20016f24

08007478 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007478:	b590      	push	{r4, r7, lr}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800747e:	4b15      	ldr	r3, [pc, #84]	; (80074d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d01a      	beq.n	80074bc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007486:	4b13      	ldr	r3, [pc, #76]	; (80074d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d015      	beq.n	80074bc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007490:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4798      	blx	r3
 8007498:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800749c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800749e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074a2:	f04f 0200 	mov.w	r2, #0
 80074a6:	f04f 0300 	mov.w	r3, #0
 80074aa:	000a      	movs	r2, r1
 80074ac:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80074ae:	4613      	mov	r3, r2
 80074b0:	461a      	mov	r2, r3
 80074b2:	4621      	mov	r1, r4
 80074b4:	200d      	movs	r0, #13
 80074b6:	f7ff fc09 	bl	8006ccc <SEGGER_SYSVIEW_RecordU32x2>
 80074ba:	e006      	b.n	80074ca <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80074bc:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4619      	mov	r1, r3
 80074c2:	200c      	movs	r0, #12
 80074c4:	f7ff fbc6 	bl	8006c54 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd90      	pop	{r4, r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20016f24 	.word	0x20016f24
 80074d8:	e0001004 	.word	0xe0001004

080074dc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80074e2:	f3ef 8311 	mrs	r3, BASEPRI
 80074e6:	f04f 0120 	mov.w	r1, #32
 80074ea:	f381 8811 	msr	BASEPRI, r1
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	4819      	ldr	r0, [pc, #100]	; (8007558 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80074f2:	f7ff f9b6 	bl	8006862 <_PreparePacket>
 80074f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80074fc:	4b17      	ldr	r3, [pc, #92]	; (800755c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007504:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	617b      	str	r3, [r7, #20]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	e00b      	b.n	8007528 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	b2da      	uxtb	r2, r3
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	1c59      	adds	r1, r3, #1
 8007518:	6179      	str	r1, [r7, #20]
 800751a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	09db      	lsrs	r3, r3, #7
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	2b7f      	cmp	r3, #127	; 0x7f
 800752c:	d8f0      	bhi.n	8007510 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	617a      	str	r2, [r7, #20]
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	b2d2      	uxtb	r2, r2
 8007538:	701a      	strb	r2, [r3, #0]
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800753e:	2202      	movs	r2, #2
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	68b8      	ldr	r0, [r7, #8]
 8007544:	f7ff fa80 	bl	8006a48 <_SendPacket>
  RECORD_END();
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f383 8811 	msr	BASEPRI, r3
}
 800754e:	bf00      	nop
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20016f54 	.word	0x20016f54
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007566:	f3ef 8311 	mrs	r3, BASEPRI
 800756a:	f04f 0120 	mov.w	r1, #32
 800756e:	f381 8811 	msr	BASEPRI, r1
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	4807      	ldr	r0, [pc, #28]	; (8007594 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007576:	f7ff f974 	bl	8006862 <_PreparePacket>
 800757a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800757c:	2203      	movs	r2, #3
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6838      	ldr	r0, [r7, #0]
 8007582:	f7ff fa61 	bl	8006a48 <_SendPacket>
  RECORD_END();
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f383 8811 	msr	BASEPRI, r3
}
 800758c:	bf00      	nop
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	20016f54 	.word	0x20016f54

08007598 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800759e:	f3ef 8311 	mrs	r3, BASEPRI
 80075a2:	f04f 0120 	mov.w	r1, #32
 80075a6:	f381 8811 	msr	BASEPRI, r1
 80075aa:	607b      	str	r3, [r7, #4]
 80075ac:	4807      	ldr	r0, [pc, #28]	; (80075cc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80075ae:	f7ff f958 	bl	8006862 <_PreparePacket>
 80075b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80075b4:	2212      	movs	r2, #18
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6838      	ldr	r0, [r7, #0]
 80075ba:	f7ff fa45 	bl	8006a48 <_SendPacket>
  RECORD_END();
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f383 8811 	msr	BASEPRI, r3
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20016f54 	.word	0x20016f54

080075d0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80075d6:	f3ef 8311 	mrs	r3, BASEPRI
 80075da:	f04f 0120 	mov.w	r1, #32
 80075de:	f381 8811 	msr	BASEPRI, r1
 80075e2:	607b      	str	r3, [r7, #4]
 80075e4:	4807      	ldr	r0, [pc, #28]	; (8007604 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80075e6:	f7ff f93c 	bl	8006862 <_PreparePacket>
 80075ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80075ec:	2211      	movs	r2, #17
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6838      	ldr	r0, [r7, #0]
 80075f2:	f7ff fa29 	bl	8006a48 <_SendPacket>
  RECORD_END();
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f383 8811 	msr	BASEPRI, r3
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20016f54 	.word	0x20016f54

08007608 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007610:	f3ef 8311 	mrs	r3, BASEPRI
 8007614:	f04f 0120 	mov.w	r1, #32
 8007618:	f381 8811 	msr	BASEPRI, r1
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	4819      	ldr	r0, [pc, #100]	; (8007684 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007620:	f7ff f91f 	bl	8006862 <_PreparePacket>
 8007624:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800762a:	4b17      	ldr	r3, [pc, #92]	; (8007688 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	61fb      	str	r3, [r7, #28]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	61bb      	str	r3, [r7, #24]
 800763c:	e00b      	b.n	8007656 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	b2da      	uxtb	r2, r3
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	1c59      	adds	r1, r3, #1
 8007646:	61f9      	str	r1, [r7, #28]
 8007648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	09db      	lsrs	r3, r3, #7
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	2b7f      	cmp	r3, #127	; 0x7f
 800765a:	d8f0      	bhi.n	800763e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	61fa      	str	r2, [r7, #28]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800766c:	2208      	movs	r2, #8
 800766e:	68f9      	ldr	r1, [r7, #12]
 8007670:	6938      	ldr	r0, [r7, #16]
 8007672:	f7ff f9e9 	bl	8006a48 <_SendPacket>
  RECORD_END();
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f383 8811 	msr	BASEPRI, r3
}
 800767c:	bf00      	nop
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20016f54 	.word	0x20016f54
 8007688:	20016f24 	.word	0x20016f24

0800768c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007694:	f3ef 8311 	mrs	r3, BASEPRI
 8007698:	f04f 0120 	mov.w	r1, #32
 800769c:	f381 8811 	msr	BASEPRI, r1
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	4819      	ldr	r0, [pc, #100]	; (8007708 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80076a4:	f7ff f8dd 	bl	8006862 <_PreparePacket>
 80076a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80076ae:	4b17      	ldr	r3, [pc, #92]	; (800770c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	61fb      	str	r3, [r7, #28]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	e00b      	b.n	80076da <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	1c59      	adds	r1, r3, #1
 80076ca:	61f9      	str	r1, [r7, #28]
 80076cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076d0:	b2d2      	uxtb	r2, r2
 80076d2:	701a      	strb	r2, [r3, #0]
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	09db      	lsrs	r3, r3, #7
 80076d8:	61bb      	str	r3, [r7, #24]
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	2b7f      	cmp	r3, #127	; 0x7f
 80076de:	d8f0      	bhi.n	80076c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	61fa      	str	r2, [r7, #28]
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	701a      	strb	r2, [r3, #0]
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80076f0:	2204      	movs	r2, #4
 80076f2:	68f9      	ldr	r1, [r7, #12]
 80076f4:	6938      	ldr	r0, [r7, #16]
 80076f6:	f7ff f9a7 	bl	8006a48 <_SendPacket>
  RECORD_END();
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f383 8811 	msr	BASEPRI, r3
}
 8007700:	bf00      	nop
 8007702:	3720      	adds	r7, #32
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20016f54 	.word	0x20016f54
 800770c:	20016f24 	.word	0x20016f24

08007710 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007718:	f3ef 8311 	mrs	r3, BASEPRI
 800771c:	f04f 0120 	mov.w	r1, #32
 8007720:	f381 8811 	msr	BASEPRI, r1
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	4819      	ldr	r0, [pc, #100]	; (800778c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007728:	f7ff f89b 	bl	8006862 <_PreparePacket>
 800772c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007732:	4b17      	ldr	r3, [pc, #92]	; (8007790 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	61fb      	str	r3, [r7, #28]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	61bb      	str	r3, [r7, #24]
 8007744:	e00b      	b.n	800775e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	b2da      	uxtb	r2, r3
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	1c59      	adds	r1, r3, #1
 800774e:	61f9      	str	r1, [r7, #28]
 8007750:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007754:	b2d2      	uxtb	r2, r2
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	09db      	lsrs	r3, r3, #7
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	2b7f      	cmp	r3, #127	; 0x7f
 8007762:	d8f0      	bhi.n	8007746 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	61fa      	str	r2, [r7, #28]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	b2d2      	uxtb	r2, r2
 800776e:	701a      	strb	r2, [r3, #0]
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007774:	2206      	movs	r2, #6
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	6938      	ldr	r0, [r7, #16]
 800777a:	f7ff f965 	bl	8006a48 <_SendPacket>
  RECORD_END();
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f383 8811 	msr	BASEPRI, r3
}
 8007784:	bf00      	nop
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20016f54 	.word	0x20016f54
 8007790:	20016f24 	.word	0x20016f24

08007794 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007794:	b580      	push	{r7, lr}
 8007796:	b08a      	sub	sp, #40	; 0x28
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800779e:	f3ef 8311 	mrs	r3, BASEPRI
 80077a2:	f04f 0120 	mov.w	r1, #32
 80077a6:	f381 8811 	msr	BASEPRI, r1
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	4827      	ldr	r0, [pc, #156]	; (800784c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80077ae:	f7ff f858 	bl	8006862 <_PreparePacket>
 80077b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80077b8:	4b25      	ldr	r3, [pc, #148]	; (8007850 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	623b      	str	r3, [r7, #32]
 80077ca:	e00b      	b.n	80077e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	1c59      	adds	r1, r3, #1
 80077d4:	6279      	str	r1, [r7, #36]	; 0x24
 80077d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	09db      	lsrs	r3, r3, #7
 80077e2:	623b      	str	r3, [r7, #32]
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	2b7f      	cmp	r3, #127	; 0x7f
 80077e8:	d8f0      	bhi.n	80077cc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	627a      	str	r2, [r7, #36]	; 0x24
 80077f0:	6a3a      	ldr	r2, [r7, #32]
 80077f2:	b2d2      	uxtb	r2, r2
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	61fb      	str	r3, [r7, #28]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	61bb      	str	r3, [r7, #24]
 8007802:	e00b      	b.n	800781c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	b2da      	uxtb	r2, r3
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	1c59      	adds	r1, r3, #1
 800780c:	61f9      	str	r1, [r7, #28]
 800780e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007812:	b2d2      	uxtb	r2, r2
 8007814:	701a      	strb	r2, [r3, #0]
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	09db      	lsrs	r3, r3, #7
 800781a:	61bb      	str	r3, [r7, #24]
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	2b7f      	cmp	r3, #127	; 0x7f
 8007820:	d8f0      	bhi.n	8007804 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	61fa      	str	r2, [r7, #28]
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	701a      	strb	r2, [r3, #0]
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007832:	2207      	movs	r2, #7
 8007834:	68f9      	ldr	r1, [r7, #12]
 8007836:	6938      	ldr	r0, [r7, #16]
 8007838:	f7ff f906 	bl	8006a48 <_SendPacket>
  RECORD_END();
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f383 8811 	msr	BASEPRI, r3
}
 8007842:	bf00      	nop
 8007844:	3728      	adds	r7, #40	; 0x28
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20016f54 	.word	0x20016f54
 8007850:	20016f24 	.word	0x20016f24

08007854 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800785c:	4b04      	ldr	r3, [pc, #16]	; (8007870 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	1ad3      	subs	r3, r2, r3
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	20016f24 	.word	0x20016f24

08007874 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007874:	b580      	push	{r7, lr}
 8007876:	b08c      	sub	sp, #48	; 0x30
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800787e:	4b3b      	ldr	r3, [pc, #236]	; (800796c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d06d      	beq.n	8007962 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007886:	4b39      	ldr	r3, [pc, #228]	; (800796c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800788c:	2300      	movs	r3, #0
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007890:	e008      	b.n	80078a4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d007      	beq.n	80078ae <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	3301      	adds	r3, #1
 80078a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d3f2      	bcc.n	8007892 <SEGGER_SYSVIEW_SendModule+0x1e>
 80078ac:	e000      	b.n	80078b0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80078ae:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80078b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d055      	beq.n	8007962 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80078b6:	f3ef 8311 	mrs	r3, BASEPRI
 80078ba:	f04f 0120 	mov.w	r1, #32
 80078be:	f381 8811 	msr	BASEPRI, r1
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	482a      	ldr	r0, [pc, #168]	; (8007970 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80078c6:	f7fe ffcc 	bl	8006862 <_PreparePacket>
 80078ca:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
 80078d4:	79fb      	ldrb	r3, [r7, #7]
 80078d6:	623b      	str	r3, [r7, #32]
 80078d8:	e00b      	b.n	80078f2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	1c59      	adds	r1, r3, #1
 80078e2:	6279      	str	r1, [r7, #36]	; 0x24
 80078e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078e8:	b2d2      	uxtb	r2, r2
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	09db      	lsrs	r3, r3, #7
 80078f0:	623b      	str	r3, [r7, #32]
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	2b7f      	cmp	r3, #127	; 0x7f
 80078f6:	d8f0      	bhi.n	80078da <SEGGER_SYSVIEW_SendModule+0x66>
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	627a      	str	r2, [r7, #36]	; 0x24
 80078fe:	6a3a      	ldr	r2, [r7, #32]
 8007900:	b2d2      	uxtb	r2, r2
 8007902:	701a      	strb	r2, [r3, #0]
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	e00b      	b.n	800792c <SEGGER_SYSVIEW_SendModule+0xb8>
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	b2da      	uxtb	r2, r3
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	1c59      	adds	r1, r3, #1
 800791c:	61f9      	str	r1, [r7, #28]
 800791e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	09db      	lsrs	r3, r3, #7
 800792a:	61bb      	str	r3, [r7, #24]
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	2b7f      	cmp	r3, #127	; 0x7f
 8007930:	d8f0      	bhi.n	8007914 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	61fa      	str	r2, [r7, #28]
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2280      	movs	r2, #128	; 0x80
 8007948:	4619      	mov	r1, r3
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f7fe ff3c 	bl	80067c8 <_EncodeStr>
 8007950:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007952:	2216      	movs	r2, #22
 8007954:	68f9      	ldr	r1, [r7, #12]
 8007956:	6938      	ldr	r0, [r7, #16]
 8007958:	f7ff f876 	bl	8006a48 <_SendPacket>
      RECORD_END();
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007962:	bf00      	nop
 8007964:	3730      	adds	r7, #48	; 0x30
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20016f4c 	.word	0x20016f4c
 8007970:	20016f54 	.word	0x20016f54

08007974 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800797a:	4b0c      	ldr	r3, [pc, #48]	; (80079ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00f      	beq.n	80079a2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007982:	4b0a      	ldr	r3, [pc, #40]	; (80079ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1f2      	bne.n	8007988 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20016f4c 	.word	0x20016f4c

080079b0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80079b6:	f3ef 8311 	mrs	r3, BASEPRI
 80079ba:	f04f 0120 	mov.w	r1, #32
 80079be:	f381 8811 	msr	BASEPRI, r1
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	4817      	ldr	r0, [pc, #92]	; (8007a24 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80079c6:	f7fe ff4c 	bl	8006862 <_PreparePacket>
 80079ca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	4b14      	ldr	r3, [pc, #80]	; (8007a28 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	613b      	str	r3, [r7, #16]
 80079da:	e00b      	b.n	80079f4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	1c59      	adds	r1, r3, #1
 80079e4:	6179      	str	r1, [r7, #20]
 80079e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	09db      	lsrs	r3, r3, #7
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b7f      	cmp	r3, #127	; 0x7f
 80079f8:	d8f0      	bhi.n	80079dc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	617a      	str	r2, [r7, #20]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007a0a:	221b      	movs	r2, #27
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	68b8      	ldr	r0, [r7, #8]
 8007a10:	f7ff f81a 	bl	8006a48 <_SendPacket>
  RECORD_END();
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f383 8811 	msr	BASEPRI, r3
}
 8007a1a:	bf00      	nop
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20016f54 	.word	0x20016f54
 8007a28:	20016f50 	.word	0x20016f50

08007a2c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08a      	sub	sp, #40	; 0x28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a34:	f3ef 8311 	mrs	r3, BASEPRI
 8007a38:	f04f 0120 	mov.w	r1, #32
 8007a3c:	f381 8811 	msr	BASEPRI, r1
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	4827      	ldr	r0, [pc, #156]	; (8007ae0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007a44:	f7fe ff0d 	bl	8006862 <_PreparePacket>
 8007a48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a4a:	2280      	movs	r2, #128	; 0x80
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	6938      	ldr	r0, [r7, #16]
 8007a50:	f7fe feba 	bl	80067c8 <_EncodeStr>
 8007a54:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	623b      	str	r3, [r7, #32]
 8007a5e:	e00b      	b.n	8007a78 <SEGGER_SYSVIEW_Warn+0x4c>
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	1c59      	adds	r1, r3, #1
 8007a68:	6279      	str	r1, [r7, #36]	; 0x24
 8007a6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	09db      	lsrs	r3, r3, #7
 8007a76:	623b      	str	r3, [r7, #32]
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a7c:	d8f0      	bhi.n	8007a60 <SEGGER_SYSVIEW_Warn+0x34>
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	627a      	str	r2, [r7, #36]	; 0x24
 8007a84:	6a3a      	ldr	r2, [r7, #32]
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	61fb      	str	r3, [r7, #28]
 8007a92:	2300      	movs	r3, #0
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	e00b      	b.n	8007ab0 <SEGGER_SYSVIEW_Warn+0x84>
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	1c59      	adds	r1, r3, #1
 8007aa0:	61f9      	str	r1, [r7, #28]
 8007aa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	701a      	strb	r2, [r3, #0]
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	09db      	lsrs	r3, r3, #7
 8007aae:	61bb      	str	r3, [r7, #24]
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ab4:	d8f0      	bhi.n	8007a98 <SEGGER_SYSVIEW_Warn+0x6c>
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	61fa      	str	r2, [r7, #28]
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007ac6:	221a      	movs	r2, #26
 8007ac8:	68f9      	ldr	r1, [r7, #12]
 8007aca:	6938      	ldr	r0, [r7, #16]
 8007acc:	f7fe ffbc 	bl	8006a48 <_SendPacket>
  RECORD_END();
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f383 8811 	msr	BASEPRI, r3
}
 8007ad6:	bf00      	nop
 8007ad8:	3728      	adds	r7, #40	; 0x28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20016f54 	.word	0x20016f54

08007ae4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	2000      	movs	r0, #0
 8007af8:	f7fe fe40 	bl	800677c <SEGGER_RTT_Write>
  return len;
 8007afc:	683b      	ldr	r3, [r7, #0]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <ds3231_init>:

//I2C_Handle_t g_ds3231I2cHandle;

//returns 1 : CH = 1 ; init failed
//returns 0 : CH = 0 ; init success
uint8_t ds3231_init(void) {
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
//	ds3231_i2c_config();
//
//	//3. Enable the I2C peripheral
//	I2C_PeripheralControl(DS3231_I2C, ENABLE);

	ds3231_write(DS3231_CR_DI_AL12, DS3231_ADDR_CR);
 8007b0c:	210e      	movs	r1, #14
 8007b0e:	201c      	movs	r0, #28
 8007b10:	f000 f90c 	bl	8007d2c <ds3231_write>

	//4. Make  Oscillator Stop Flag in SR OSF = 0;
	ds3231_write(0x00, DS3231_ADDR_SR);
 8007b14:	210f      	movs	r1, #15
 8007b16:	2000      	movs	r0, #0
 8007b18:	f000 f908 	bl	8007d2c <ds3231_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds3231_read(DS3231_ADDR_SR);
 8007b1c:	200f      	movs	r0, #15
 8007b1e:	f000 f925 	bl	8007d6c <ds3231_read>
 8007b22:	4603      	mov	r3, r0
 8007b24:	71fb      	strb	r3, [r7, #7]

	// if OSF = 1 oscillator was stopped
	return ((clock_state >> 7) & 0x1);
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	09db      	lsrs	r3, r3, #7
 8007b2a:	b2db      	uxtb	r3, r3
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <ds3231_set_current_time>:

void ds3231_set_current_time(RTC_time_t *rtc_time) {
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 f93b 	bl	8007dbc <binary_to_bcd>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b50:	73bb      	strb	r3, [r7, #14]
	ds3231_write(seconds, DS3231_ADDR_SEC);
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2100      	movs	r1, #0
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 f8e8 	bl	8007d2c <ds3231_write>

	ds3231_write(binary_to_bcd(rtc_time->minutes), DS3231_ADDR_MIN);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 f92b 	bl	8007dbc <binary_to_bcd>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2101      	movs	r1, #1
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f8de 	bl	8007d2c <ds3231_write>

	hrs = binary_to_bcd(rtc_time->hours);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	789b      	ldrb	r3, [r3, #2]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 f921 	bl	8007dbc <binary_to_bcd>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73fb      	strb	r3, [r7, #15]

	if (rtc_time->time_format == TIME_FORMAT_24HRS) {
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	78db      	ldrb	r3, [r3, #3]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d104      	bne.n	8007b90 <ds3231_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b8c:	73fb      	strb	r3, [r7, #15]
 8007b8e:	e011      	b.n	8007bb4 <ds3231_set_current_time+0x80>
	} else {
		hrs |= (1 << 6);
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b96:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ?
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	78db      	ldrb	r3, [r3, #3]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d104      	bne.n	8007baa <ds3231_set_current_time+0x76>
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	f043 0320 	orr.w	r3, r3, #32
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	e003      	b.n	8007bb2 <ds3231_set_current_time+0x7e>
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	f023 0320 	bic.w	r3, r3, #32
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	73fb      	strb	r3, [r7, #15]
				hrs | (1 << 5) : hrs & ~(1 << 5);
	}

	ds3231_write(hrs, DS3231_ADDR_HRS);
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	2102      	movs	r1, #2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 f8b7 	bl	8007d2c <ds3231_write>

}
 8007bbe:	bf00      	nop
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <ds3231_set_current_date>:

void ds3231_set_current_date(RTC_date_t *rtc_date) {
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
	uint8_t mon;

	ds3231_write(binary_to_bcd(rtc_date->day), DS3231_ADDR_DAY);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	78db      	ldrb	r3, [r3, #3]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 f8f2 	bl	8007dbc <binary_to_bcd>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2103      	movs	r1, #3
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 f8a5 	bl	8007d2c <ds3231_write>

	ds3231_write(binary_to_bcd(rtc_date->date), DS3231_ADDR_DATE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 f8e8 	bl	8007dbc <binary_to_bcd>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2104      	movs	r1, #4
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 f89b 	bl	8007d2c <ds3231_write>

	mon = binary_to_bcd(rtc_date->month);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	785b      	ldrb	r3, [r3, #1]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 f8de 	bl	8007dbc <binary_to_bcd>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
	mon &= ~(1 << 7);
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0a:	73fb      	strb	r3, [r7, #15]
	ds3231_write(mon, DS3231_ADDR_MONTH);
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	2105      	movs	r1, #5
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 f88b 	bl	8007d2c <ds3231_write>

	ds3231_write(binary_to_bcd(rtc_date->year), DS3231_ADDR_YEAR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	789b      	ldrb	r3, [r3, #2]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 f8ce 	bl	8007dbc <binary_to_bcd>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2106      	movs	r1, #6
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 f881 	bl	8007d2c <ds3231_write>

}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <ds3231_get_current_time>:

void ds3231_get_current_time(RTC_time_t *rtc_time) {
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]

	uint8_t seconds, hrs;

	seconds = ds3231_read(DS3231_ADDR_SEC);
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	f000 f896 	bl	8007d6c <ds3231_read>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73bb      	strb	r3, [r7, #14]

	seconds &= ~(1 << 7);
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c4a:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 f8e0 	bl	8007e14 <bcd_to_binary>
 8007c54:	4603      	mov	r3, r0
 8007c56:	461a      	mov	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds3231_read(DS3231_ADDR_MIN));
 8007c5c:	2001      	movs	r0, #1
 8007c5e:	f000 f885 	bl	8007d6c <ds3231_read>
 8007c62:	4603      	mov	r3, r0
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 f8d5 	bl	8007e14 <bcd_to_binary>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	705a      	strb	r2, [r3, #1]

	hrs = ds3231_read(DS3231_ADDR_HRS);
 8007c72:	2002      	movs	r0, #2
 8007c74:	f000 f87a 	bl	8007d6c <ds3231_read>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73fb      	strb	r3, [r7, #15]
	if (hrs & (1 << 6)) {
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00f      	beq.n	8007ca6 <ds3231_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format = !((hrs & (1 << 5)) == 0);
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bf14      	ite	ne
 8007c90:	2301      	movne	r3, #1
 8007c92:	2300      	moveq	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	461a      	mov	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5); //Clear 6 and 5
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007ca2:	73fb      	strb	r3, [r7, #15]
 8007ca4:	e002      	b.n	8007cac <ds3231_get_current_time+0x7a>
	} else {
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2202      	movs	r2, #2
 8007caa:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 f8b0 	bl	8007e14 <bcd_to_binary>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	709a      	strb	r2, [r3, #2]
}
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <ds3231_get_current_date>:

void ds3231_get_current_date(RTC_date_t *rtc_date) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	rtc_date->day = bcd_to_binary(ds3231_read(DS3231_ADDR_DAY));
 8007ccc:	2003      	movs	r0, #3
 8007cce:	f000 f84d 	bl	8007d6c <ds3231_read>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 f89d 	bl	8007e14 <bcd_to_binary>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	461a      	mov	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds3231_read(DS3231_ADDR_DATE));
 8007ce2:	2004      	movs	r0, #4
 8007ce4:	f000 f842 	bl	8007d6c <ds3231_read>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 f892 	bl	8007e14 <bcd_to_binary>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds3231_read(DS3231_ADDR_MONTH));
 8007cf8:	2005      	movs	r0, #5
 8007cfa:	f000 f837 	bl	8007d6c <ds3231_read>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 f887 	bl	8007e14 <bcd_to_binary>
 8007d06:	4603      	mov	r3, r0
 8007d08:	461a      	mov	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds3231_read(DS3231_ADDR_YEAR));
 8007d0e:	2006      	movs	r0, #6
 8007d10:	f000 f82c 	bl	8007d6c <ds3231_read>
 8007d14:	4603      	mov	r3, r0
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f87c 	bl	8007e14 <bcd_to_binary>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	461a      	mov	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	709a      	strb	r2, [r3, #2]

}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <ds3231_write>:

static void ds3231_write(uint8_t value, uint8_t reg_addr) {
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	4603      	mov	r3, r0
 8007d34:	460a      	mov	r2, r1
 8007d36:	71fb      	strb	r3, [r7, #7]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8007d3c:	79bb      	ldrb	r3, [r7, #6]
 8007d3e:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	737b      	strb	r3, [r7, #13]
//	I2C_MasterSendData(&g_ds3231I2cHandle, tx, 2, DS3231_I2C_ADDRESS, 0);
	if (HAL_I2C_Master_Transmit(&hi2c1, DS3231_I2C_ADDRESS, tx, 2, 100)
 8007d44:	f107 020c 	add.w	r2, r7, #12
 8007d48:	2364      	movs	r3, #100	; 0x64
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	21d0      	movs	r1, #208	; 0xd0
 8007d50:	4805      	ldr	r0, [pc, #20]	; (8007d68 <ds3231_write+0x3c>)
 8007d52:	f7fa fbb1 	bl	80024b8 <HAL_I2C_Master_Transmit>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d000      	beq.n	8007d5e <ds3231_write+0x32>
			!= HAL_OK) {
		while (1)
 8007d5c:	e7fe      	b.n	8007d5c <ds3231_write+0x30>
			;
	}
}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	2001704c 	.word	0x2001704c

08007d6c <ds3231_read>:

static uint8_t ds3231_read(uint8_t reg_addr) {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	4603      	mov	r3, r0
 8007d74:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
//	I2C_MasterSendData(&g_ds3231I2cHandle, &reg_addr, 1, DS3231_I2C_ADDRESS, 0);
//	I2C_MasterReceiveData(&g_ds3231I2cHandle, &data, 1, DS3231_I2C_ADDRESS, 0);

	if (HAL_I2C_Master_Transmit(&hi2c1, DS3231_I2C_ADDRESS, &reg_addr, 1, 500)
 8007d76:	1dfa      	adds	r2, r7, #7
 8007d78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	2301      	movs	r3, #1
 8007d80:	21d0      	movs	r1, #208	; 0xd0
 8007d82:	480d      	ldr	r0, [pc, #52]	; (8007db8 <ds3231_read+0x4c>)
 8007d84:	f7fa fb98 	bl	80024b8 <HAL_I2C_Master_Transmit>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d000      	beq.n	8007d90 <ds3231_read+0x24>
			!= HAL_OK) {
		while (1)
 8007d8e:	e7fe      	b.n	8007d8e <ds3231_read+0x22>
			;
	}
	if (HAL_I2C_Master_Receive(&hi2c1, DS3231_I2C_ADDRESS, &data, 1, 500)
 8007d90:	f107 020f 	add.w	r2, r7, #15
 8007d94:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	21d0      	movs	r1, #208	; 0xd0
 8007d9e:	4806      	ldr	r0, [pc, #24]	; (8007db8 <ds3231_read+0x4c>)
 8007da0:	f7fa fc88 	bl	80026b4 <HAL_I2C_Master_Receive>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d000      	beq.n	8007dac <ds3231_read+0x40>
			!= HAL_OK) {
		while (1)
 8007daa:	e7fe      	b.n	8007daa <ds3231_read+0x3e>
			;
	}
	return data;
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	2001704c 	.word	0x2001704c

08007dbc <binary_to_bcd>:

static uint8_t binary_to_bcd(uint8_t value) {
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;
	uint8_t bcd;

	bcd = value;
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	73fb      	strb	r3, [r7, #15]
	if (value >= 10) {
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	d918      	bls.n	8007e02 <binary_to_bcd+0x46>
		m = value / 10;
 8007dd0:	79fb      	ldrb	r3, [r7, #7]
 8007dd2:	4a0f      	ldr	r2, [pc, #60]	; (8007e10 <binary_to_bcd+0x54>)
 8007dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd8:	08db      	lsrs	r3, r3, #3
 8007dda:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8007ddc:	79fa      	ldrb	r2, [r7, #7]
 8007dde:	4b0c      	ldr	r3, [pc, #48]	; (8007e10 <binary_to_bcd+0x54>)
 8007de0:	fba3 1302 	umull	r1, r3, r3, r2
 8007de4:	08d9      	lsrs	r1, r3, #3
 8007de6:	460b      	mov	r3, r1
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	440b      	add	r3, r1
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n;
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	011b      	lsls	r3, r3, #4
 8007df6:	b25a      	sxtb	r2, r3
 8007df8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	b25b      	sxtb	r3, r3
 8007e00:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	cccccccd 	.word	0xcccccccd

08007e14 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value) {
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;
	m = (uint8_t) ((value >> 4) * 10);
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	091b      	lsrs	r3, r3, #4
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	0092      	lsls	r2, r2, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]
	n = value & (uint8_t) 0x0F;
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	73bb      	strb	r3, [r7, #14]
	return (m + n);
 8007e36:	7bfa      	ldrb	r2, [r7, #15]
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	b2db      	uxtb	r3, r3
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <ds3231_set_time_alarm1>:

void ds3231_set_time_alarm1(RTC_time_t *rtc_time, RTC_date_t *rtc_date,
		uint8_t mode_alarm) {
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b086      	sub	sp, #24
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	4613      	mov	r3, r2
 8007e56:	71fb      	strb	r3, [r7, #7]
	uint8_t seconds, minutes, hrs;
	uint8_t temp1 = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	75bb      	strb	r3, [r7, #22]
	uint8_t day, date;

	seconds = binary_to_bcd(rtc_time->seconds);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff ffab 	bl	8007dbc <binary_to_bcd>
 8007e66:	4603      	mov	r3, r0
 8007e68:	757b      	strb	r3, [r7, #21]
	temp1 = mode_alarm & 0x01;
 8007e6a:	79fb      	ldrb	r3, [r7, #7]
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	75bb      	strb	r3, [r7, #22]
	seconds |= (temp1 << 7);
 8007e72:	7dbb      	ldrb	r3, [r7, #22]
 8007e74:	01db      	lsls	r3, r3, #7
 8007e76:	b25a      	sxtb	r2, r3
 8007e78:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	b25b      	sxtb	r3, r3
 8007e80:	757b      	strb	r3, [r7, #21]
	ds3231_write(seconds, DS3231_ADDR_SEC_AL1);
 8007e82:	7d7b      	ldrb	r3, [r7, #21]
 8007e84:	2107      	movs	r1, #7
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff ff50 	bl	8007d2c <ds3231_write>

	temp1 = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	75bb      	strb	r3, [r7, #22]
	minutes = binary_to_bcd(rtc_time->minutes);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	785b      	ldrb	r3, [r3, #1]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff ff91 	bl	8007dbc <binary_to_bcd>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	753b      	strb	r3, [r7, #20]
	temp1 = mode_alarm & 0x02;
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	75bb      	strb	r3, [r7, #22]
	minutes |= (temp1 << 6);
 8007ea6:	7dbb      	ldrb	r3, [r7, #22]
 8007ea8:	019b      	lsls	r3, r3, #6
 8007eaa:	b25a      	sxtb	r2, r3
 8007eac:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	b25b      	sxtb	r3, r3
 8007eb4:	753b      	strb	r3, [r7, #20]
	ds3231_write(binary_to_bcd(rtc_time->minutes), DS3231_ADDR_MIN_AL1);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	785b      	ldrb	r3, [r3, #1]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7ff ff7e 	bl	8007dbc <binary_to_bcd>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2108      	movs	r1, #8
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff ff31 	bl	8007d2c <ds3231_write>

	temp1 = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	75bb      	strb	r3, [r7, #22]

	hrs = binary_to_bcd(rtc_time->hours);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	789b      	ldrb	r3, [r3, #2]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff ff72 	bl	8007dbc <binary_to_bcd>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	75fb      	strb	r3, [r7, #23]

	if (rtc_time->time_format == TIME_FORMAT_24HRS) {
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	78db      	ldrb	r3, [r3, #3]
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d104      	bne.n	8007eee <ds3231_set_time_alarm1+0xa4>
		hrs &= ~(1 << 6);
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eea:	75fb      	strb	r3, [r7, #23]
 8007eec:	e011      	b.n	8007f12 <ds3231_set_time_alarm1+0xc8>
	} else {
		hrs |= (1 << 6);
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef4:	75fb      	strb	r3, [r7, #23]
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ?
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	78db      	ldrb	r3, [r3, #3]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d104      	bne.n	8007f08 <ds3231_set_time_alarm1+0xbe>
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	f043 0320 	orr.w	r3, r3, #32
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	e003      	b.n	8007f10 <ds3231_set_time_alarm1+0xc6>
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
 8007f0a:	f023 0320 	bic.w	r3, r3, #32
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	75fb      	strb	r3, [r7, #23]
				hrs | (1 << 5) : hrs & ~(1 << 5);
	}
	temp1 = mode_alarm & 0x04;
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	75bb      	strb	r3, [r7, #22]
	hrs |= (temp1 << 5);
 8007f1a:	7dbb      	ldrb	r3, [r7, #22]
 8007f1c:	015b      	lsls	r3, r3, #5
 8007f1e:	b25a      	sxtb	r2, r3
 8007f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	b25b      	sxtb	r3, r3
 8007f28:	75fb      	strb	r3, [r7, #23]
	ds3231_write(hrs, DS3231_ADDR_HRS_AL1);
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	2109      	movs	r1, #9
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff fefc 	bl	8007d2c <ds3231_write>

	temp1 = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	75bb      	strb	r3, [r7, #22]
	if (rtc_date->day) {
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	78db      	ldrb	r3, [r3, #3]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d026      	beq.n	8007f8e <ds3231_set_time_alarm1+0x144>
		day = binary_to_bcd(rtc_date->day);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	78db      	ldrb	r3, [r3, #3]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7ff ff39 	bl	8007dbc <binary_to_bcd>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	74bb      	strb	r3, [r7, #18]
		temp1 = mode_alarm & 0x10;
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	f003 0310 	and.w	r3, r3, #16
 8007f54:	75bb      	strb	r3, [r7, #22]
		day |= (temp1 << 2);
 8007f56:	7dbb      	ldrb	r3, [r7, #22]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	b25a      	sxtb	r2, r3
 8007f5c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	b25b      	sxtb	r3, r3
 8007f64:	74bb      	strb	r3, [r7, #18]
		temp1 = 0;
 8007f66:	2300      	movs	r3, #0
 8007f68:	75bb      	strb	r3, [r7, #22]
		temp1 = mode_alarm & 0x8;
 8007f6a:	79fb      	ldrb	r3, [r7, #7]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	75bb      	strb	r3, [r7, #22]
		day |= (temp1 << 4);
 8007f72:	7dbb      	ldrb	r3, [r7, #22]
 8007f74:	011b      	lsls	r3, r3, #4
 8007f76:	b25a      	sxtb	r2, r3
 8007f78:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	b25b      	sxtb	r3, r3
 8007f80:	74bb      	strb	r3, [r7, #18]
		ds3231_write(day, DS3231_ADDR_DYDT_AL1);
 8007f82:	7cbb      	ldrb	r3, [r7, #18]
 8007f84:	210a      	movs	r1, #10
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff fed0 	bl	8007d2c <ds3231_write>
 8007f8c:	e025      	b.n	8007fda <ds3231_set_time_alarm1+0x190>

	} else {
		date = binary_to_bcd(rtc_date->date);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff ff12 	bl	8007dbc <binary_to_bcd>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	74fb      	strb	r3, [r7, #19]
		temp1 = mode_alarm & 0x10;
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	f003 0310 	and.w	r3, r3, #16
 8007fa2:	75bb      	strb	r3, [r7, #22]
		date |= (temp1 << 2);
 8007fa4:	7dbb      	ldrb	r3, [r7, #22]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	b25a      	sxtb	r2, r3
 8007faa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	b25b      	sxtb	r3, r3
 8007fb2:	74fb      	strb	r3, [r7, #19]
		temp1 = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	75bb      	strb	r3, [r7, #22]
		temp1 = mode_alarm & 0x8;
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	75bb      	strb	r3, [r7, #22]
		date |= (temp1 << 4);
 8007fc0:	7dbb      	ldrb	r3, [r7, #22]
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	b25a      	sxtb	r2, r3
 8007fc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	b25b      	sxtb	r3, r3
 8007fce:	74fb      	strb	r3, [r7, #19]

		ds3231_write(date, DS3231_ADDR_DYDT_AL1);
 8007fd0:	7cfb      	ldrb	r3, [r7, #19]
 8007fd2:	210a      	movs	r1, #10
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7ff fea9 	bl	8007d2c <ds3231_write>
	}
	ds3231_write(DS3231_CR_EN_AL1, DS3231_ADDR_CR);
 8007fda:	210e      	movs	r1, #14
 8007fdc:	201d      	movs	r0, #29
 8007fde:	f7ff fea5 	bl	8007d2c <ds3231_write>

}
 8007fe2:	bf00      	nop
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <ds3231_clear_sr>:

void ds3231_clear_sr(void) {
 8007fea:	b580      	push	{r7, lr}
 8007fec:	af00      	add	r7, sp, #0
	ds3231_write(0x8, DS3231_ADDR_SR);
 8007fee:	210f      	movs	r1, #15
 8007ff0:	2008      	movs	r0, #8
 8007ff2:	f7ff fe9b 	bl	8007d2c <ds3231_write>

}
 8007ff6:	bf00      	nop
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <keypad_read>:

char keypad_map[] = { '1', '2', '3', 'A', '4', '5', '6', 'B', '7', '8', '9',
		'C', '*', '0', '#', 'D' };
uint16_t row_pin[] = { ROW_0_Pin, ROW_1_Pin, ROW_2_Pin, ROW_3_Pin };
uint16_t col_pin[] = { COL_0_Pin, COL_1_Pin, COL_2_Pin, COL_3_Pin };
char keypad_read(void) {
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
	HAL_Delay(150);
 8008002:	2096      	movs	r0, #150	; 0x96
 8008004:	f7f9 fe34 	bl	8001c70 <HAL_Delay>
	for (int i = 0; i < 4; ++i) {
 8008008:	2300      	movs	r3, #0
 800800a:	607b      	str	r3, [r7, #4]
 800800c:	e038      	b.n	8008080 <keypad_read+0x84>
		for (int j = 0; j < 4; ++j) {
 800800e:	2300      	movs	r3, #0
 8008010:	603b      	str	r3, [r7, #0]
 8008012:	e02f      	b.n	8008074 <keypad_read+0x78>
			HAL_GPIO_WritePin(GPIOD, row_pin[i], GPIO_PIN_SET);
 8008014:	4a1e      	ldr	r2, [pc, #120]	; (8008090 <keypad_read+0x94>)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800801c:	2201      	movs	r2, #1
 800801e:	4619      	mov	r1, r3
 8008020:	481c      	ldr	r0, [pc, #112]	; (8008094 <keypad_read+0x98>)
 8008022:	f7fa f8c7 	bl	80021b4 <HAL_GPIO_WritePin>
			if (HAL_GPIO_ReadPin(GPIOD, col_pin[j]) == 1) {
 8008026:	4a1c      	ldr	r2, [pc, #112]	; (8008098 <keypad_read+0x9c>)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800802e:	4619      	mov	r1, r3
 8008030:	4818      	ldr	r0, [pc, #96]	; (8008094 <keypad_read+0x98>)
 8008032:	f7fa f8a7 	bl	8002184 <HAL_GPIO_ReadPin>
 8008036:	4603      	mov	r3, r0
 8008038:	2b01      	cmp	r3, #1
 800803a:	d10f      	bne.n	800805c <keypad_read+0x60>
				HAL_GPIO_WritePin(GPIOD, row_pin[i], GPIO_PIN_RESET);
 800803c:	4a14      	ldr	r2, [pc, #80]	; (8008090 <keypad_read+0x94>)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008044:	2200      	movs	r2, #0
 8008046:	4619      	mov	r1, r3
 8008048:	4812      	ldr	r0, [pc, #72]	; (8008094 <keypad_read+0x98>)
 800804a:	f7fa f8b3 	bl	80021b4 <HAL_GPIO_WritePin>
				return keypad_map[4 * i + j];
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	009a      	lsls	r2, r3, #2
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	4413      	add	r3, r2
 8008056:	4a11      	ldr	r2, [pc, #68]	; (800809c <keypad_read+0xa0>)
 8008058:	5cd3      	ldrb	r3, [r2, r3]
 800805a:	e015      	b.n	8008088 <keypad_read+0x8c>
			}
			HAL_GPIO_WritePin(GPIOD, row_pin[i], GPIO_PIN_RESET);
 800805c:	4a0c      	ldr	r2, [pc, #48]	; (8008090 <keypad_read+0x94>)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008064:	2200      	movs	r2, #0
 8008066:	4619      	mov	r1, r3
 8008068:	480a      	ldr	r0, [pc, #40]	; (8008094 <keypad_read+0x98>)
 800806a:	f7fa f8a3 	bl	80021b4 <HAL_GPIO_WritePin>
		for (int j = 0; j < 4; ++j) {
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	3301      	adds	r3, #1
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2b03      	cmp	r3, #3
 8008078:	ddcc      	ble.n	8008014 <keypad_read+0x18>
	for (int i = 0; i < 4; ++i) {
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3301      	adds	r3, #1
 800807e:	607b      	str	r3, [r7, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b03      	cmp	r3, #3
 8008084:	ddc3      	ble.n	800800e <keypad_read+0x12>
		}
	}
	return 'x';
 8008086:	2378      	movs	r3, #120	; 0x78
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	20000024 	.word	0x20000024
 8008094:	40020c00 	.word	0x40020c00
 8008098:	2000002c 	.word	0x2000002c
 800809c:	20000014 	.word	0x20000014

080080a0 <check_key>:
	}
	tm1638_ctr_led(LED_OFF, ADDR_15);
	return number;
}

uint8_t check_key(char key) {
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	71fb      	strb	r3, [r7, #7]
	switch (key) {
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	3b30      	subs	r3, #48	; 0x30
 80080ae:	2b09      	cmp	r3, #9
 80080b0:	d82a      	bhi.n	8008108 <check_key+0x68>
 80080b2:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <check_key+0x18>)
 80080b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b8:	080080e1 	.word	0x080080e1
 80080bc:	080080e5 	.word	0x080080e5
 80080c0:	080080e9 	.word	0x080080e9
 80080c4:	080080ed 	.word	0x080080ed
 80080c8:	080080f1 	.word	0x080080f1
 80080cc:	080080f5 	.word	0x080080f5
 80080d0:	080080f9 	.word	0x080080f9
 80080d4:	080080fd 	.word	0x080080fd
 80080d8:	08008101 	.word	0x08008101
 80080dc:	08008105 	.word	0x08008105
	case '0':
		return 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	e012      	b.n	800810a <check_key+0x6a>
		break;
	case '1':
		return 1;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e010      	b.n	800810a <check_key+0x6a>
		break;
	case '2':
		return 2;
 80080e8:	2302      	movs	r3, #2
 80080ea:	e00e      	b.n	800810a <check_key+0x6a>
		break;
	case '3':
		return 3;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e00c      	b.n	800810a <check_key+0x6a>
		break;
	case '4':
		return 4;
 80080f0:	2304      	movs	r3, #4
 80080f2:	e00a      	b.n	800810a <check_key+0x6a>
		break;
	case '5':
		return 5;
 80080f4:	2305      	movs	r3, #5
 80080f6:	e008      	b.n	800810a <check_key+0x6a>
		break;
	case '6':
		return 6;
 80080f8:	2306      	movs	r3, #6
 80080fa:	e006      	b.n	800810a <check_key+0x6a>
		break;
	case '7':
		return 7;
 80080fc:	2307      	movs	r3, #7
 80080fe:	e004      	b.n	800810a <check_key+0x6a>
		break;
	case '8':
		return 8;
 8008100:	2308      	movs	r3, #8
 8008102:	e002      	b.n	800810a <check_key+0x6a>
		break;
	case '9':
		return 9;
 8008104:	2309      	movs	r3, #9
 8008106:	e000      	b.n	800810a <check_key+0x6a>
		break;
	}
	return -1;
 8008108:	23ff      	movs	r3, #255	; 0xff
}
 800810a:	4618      	mov	r0, r3
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop

08008118 <lcd_display_clear_i2c>:
}



void lcd_display_clear_i2c(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_cmd(LCD_CMD_DIS_CLEAR);
 800811c:	2001      	movs	r0, #1
 800811e:	f000 f805 	bl	800812c <lcd_send_cmd>
	/*
	 * check page number 24 of datasheet.
	 * display clear command execution wait time is around 2ms
	 */

	HAL_Delay(5);
 8008122:	2005      	movs	r0, #5
 8008124:	f7f9 fda4 	bl	8001c70 <HAL_Delay>
}
 8008128:	bf00      	nop
 800812a:	bd80      	pop	{r7, pc}

0800812c <lcd_send_cmd>:
 *
 *
 * */

void lcd_send_cmd(char cmd)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af02      	add	r7, sp, #8
 8008132:	4603      	mov	r3, r0
 8008134:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	f023 030f 	bic.w	r3, r3, #15
 800813c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	73bb      	strb	r3, [r7, #14]
	data_t[0] = (uint8_t) data_u | 0x0C;  //en=1, rs=0
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	f043 030c 	orr.w	r3, r3, #12
 800814a:	b2db      	uxtb	r3, r3
 800814c:	723b      	strb	r3, [r7, #8]
	data_t[1] = (uint8_t) data_u | 0x08;  //en=0, rs=0
 800814e:	7bfb      	ldrb	r3, [r7, #15]
 8008150:	f043 0308 	orr.w	r3, r3, #8
 8008154:	b2db      	uxtb	r3, r3
 8008156:	727b      	strb	r3, [r7, #9]
	data_t[2] = (uint8_t) data_l | 0x0C;  //en=1, rs=0
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	f043 030c 	orr.w	r3, r3, #12
 800815e:	b2db      	uxtb	r3, r3
 8008160:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (uint8_t) data_l | 0x08;  //en=0, rs=0
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	f043 0308 	orr.w	r3, r3, #8
 8008168:	b2db      	uxtb	r3, r3
 800816a:	72fb      	strb	r3, [r7, #11]

	if(HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)SLAVE_ADDRESS_LCD, data_t, 4, 200)!=HAL_OK)
 800816c:	f107 0208 	add.w	r2, r7, #8
 8008170:	23c8      	movs	r3, #200	; 0xc8
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	2304      	movs	r3, #4
 8008176:	214e      	movs	r1, #78	; 0x4e
 8008178:	4805      	ldr	r0, [pc, #20]	; (8008190 <lcd_send_cmd+0x64>)
 800817a:	f7fa f99d 	bl	80024b8 <HAL_I2C_Master_Transmit>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d000      	beq.n	8008186 <lcd_send_cmd+0x5a>
	{
		while(1);
 8008184:	e7fe      	b.n	8008184 <lcd_send_cmd+0x58>
	}
}
 8008186:	bf00      	nop
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200170a8 	.word	0x200170a8

08008194 <lcd_send_data>:

void lcd_send_data(char data)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af02      	add	r7, sp, #8
 800819a:	4603      	mov	r3, r0
 800819c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	f023 030f 	bic.w	r3, r3, #15
 80081a4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80081a6:	79fb      	ldrb	r3, [r7, #7]
 80081a8:	011b      	lsls	r3, r3, #4
 80081aa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = (uint8_t) data_u | 0x0D;  //en=1, rs=0
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	f043 030d 	orr.w	r3, r3, #13
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	723b      	strb	r3, [r7, #8]
	data_t[1] = (uint8_t) data_u | 0x09;  //en=0, rs=0
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	f043 0309 	orr.w	r3, r3, #9
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	727b      	strb	r3, [r7, #9]
	data_t[2] = (uint8_t) data_l | 0x0D;  //en=1, rs=0
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	f043 030d 	orr.w	r3, r3, #13
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (uint8_t) data_l | 0x09;  //en=0, rs=0
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	f043 0309 	orr.w	r3, r3, #9
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, data_t, 4, 500);
 80081d4:	f107 0208 	add.w	r2, r7, #8
 80081d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	2304      	movs	r3, #4
 80081e0:	214e      	movs	r1, #78	; 0x4e
 80081e2:	4803      	ldr	r0, [pc, #12]	; (80081f0 <lcd_send_data+0x5c>)
 80081e4:	f7fa f968 	bl	80024b8 <HAL_I2C_Master_Transmit>

}
 80081e8:	bf00      	nop
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	200170a8 	.word	0x200170a8

080081f4 <lcd_put_cur>:
		lcd_send_data(' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
	row--;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3b01      	subs	r3, #1
 8008202:	607b      	str	r3, [r7, #4]
	col--;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	3b01      	subs	r3, #1
 8008208:	603b      	str	r3, [r7, #0]
	switch (row)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <lcd_put_cur+0x24>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d00a      	beq.n	800822c <lcd_put_cur+0x38>
 8008216:	e013      	b.n	8008240 <lcd_put_cur+0x4c>
	{
	case 0:
		lcd_send_cmd((col |= 0x80));
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800821e:	603b      	str	r3, [r7, #0]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff ff81 	bl	800812c <lcd_send_cmd>
		break;
 800822a:	e009      	b.n	8008240 <lcd_put_cur+0x4c>
	case 1:
		lcd_send_cmd((col |= 0xC0));
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	4618      	mov	r0, r3
 800823a:	f7ff ff77 	bl	800812c <lcd_send_cmd>
		break;
 800823e:	bf00      	nop
	}
	HAL_Delay(5);
 8008240:	2005      	movs	r0, #5
 8008242:	f7f9 fd15 	bl	8001c70 <HAL_Delay>

}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <lcd_init_i2c>:

void lcd_init_i2c(void)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8008252:	2032      	movs	r0, #50	; 0x32
 8008254:	f7f9 fd0c 	bl	8001c70 <HAL_Delay>
	lcd_send_cmd(0x30);
 8008258:	2030      	movs	r0, #48	; 0x30
 800825a:	f7ff ff67 	bl	800812c <lcd_send_cmd>
	HAL_Delay(7);  // wait for >4.1ms
 800825e:	2007      	movs	r0, #7
 8008260:	f7f9 fd06 	bl	8001c70 <HAL_Delay>
	lcd_send_cmd(0x30);
 8008264:	2030      	movs	r0, #48	; 0x30
 8008266:	f7ff ff61 	bl	800812c <lcd_send_cmd>
	HAL_Delay(2);  // wait for >100us
 800826a:	2002      	movs	r0, #2
 800826c:	f7f9 fd00 	bl	8001c70 <HAL_Delay>
	lcd_send_cmd(0x30);
 8008270:	2030      	movs	r0, #48	; 0x30
 8008272:	f7ff ff5b 	bl	800812c <lcd_send_cmd>
	HAL_Delay(20);
 8008276:	2014      	movs	r0, #20
 8008278:	f7f9 fcfa 	bl	8001c70 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 800827c:	2020      	movs	r0, #32
 800827e:	f7ff ff55 	bl	800812c <lcd_send_cmd>
	HAL_Delay(20);
 8008282:	2014      	movs	r0, #20
 8008284:	f7f9 fcf4 	bl	8001c70 <HAL_Delay>

	// dislay initialisation

	//function set command
	lcd_send_cmd(LCD_CMD_4DL_2N_5X8F);
 8008288:	2028      	movs	r0, #40	; 0x28
 800828a:	f7ff ff4f 	bl	800812c <lcd_send_cmd>

	//disply ON and cursor ON
	lcd_send_cmd(LCD_CMD_DON_CURON);
 800828e:	200e      	movs	r0, #14
 8008290:	f7ff ff4c 	bl	800812c <lcd_send_cmd>
//	lcd_send_cmd(0x08);

	lcd_send_cmd(LCD_CMD_DIS_CLEAR);
 8008294:	2001      	movs	r0, #1
 8008296:	f7ff ff49 	bl	800812c <lcd_send_cmd>

	//entry mode set--> I/D = 1 (increment cursor) & S = 0 (no shift)
	lcd_send_cmd(LCD_CMD_INCADD);
 800829a:	2006      	movs	r0, #6
 800829c:	f7ff ff46 	bl	800812c <lcd_send_cmd>

//	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
//	lcd_send_cmd(0x0C);

}
 80082a0:	bf00      	nop
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <lcd_send_string>:

void lcd_send_string(char *str)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
	while (*str)
 80082ac:	e006      	b.n	80082bc <lcd_send_string+0x18>
		lcd_send_data(*str++);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff ff6c 	bl	8008194 <lcd_send_data>
	while (*str)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1f4      	bne.n	80082ae <lcd_send_string+0xa>
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <lcd_display_return_home_i2c>:

void lcd_display_return_home_i2c(void)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	af00      	add	r7, sp, #0

	lcd_send_cmd(LCD_CMD_DIS_RETURN_HOME);
 80082d2:	2002      	movs	r0, #2
 80082d4:	f7ff ff2a 	bl	800812c <lcd_send_cmd>
	/*
	 * check page number 24 of datasheet.
	 * return home command execution wait time is around 2ms
	 */
	HAL_Delay(5);
 80082d8:	2005      	movs	r0, #5
 80082da:	f7f9 fcc9 	bl	8001c70 <HAL_Delay>
}
 80082de:	bf00      	nop
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <__errno>:
 80082e4:	4b01      	ldr	r3, [pc, #4]	; (80082ec <__errno+0x8>)
 80082e6:	6818      	ldr	r0, [r3, #0]
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	20000034 	.word	0x20000034

080082f0 <__libc_init_array>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	4d0d      	ldr	r5, [pc, #52]	; (8008328 <__libc_init_array+0x38>)
 80082f4:	4c0d      	ldr	r4, [pc, #52]	; (800832c <__libc_init_array+0x3c>)
 80082f6:	1b64      	subs	r4, r4, r5
 80082f8:	10a4      	asrs	r4, r4, #2
 80082fa:	2600      	movs	r6, #0
 80082fc:	42a6      	cmp	r6, r4
 80082fe:	d109      	bne.n	8008314 <__libc_init_array+0x24>
 8008300:	4d0b      	ldr	r5, [pc, #44]	; (8008330 <__libc_init_array+0x40>)
 8008302:	4c0c      	ldr	r4, [pc, #48]	; (8008334 <__libc_init_array+0x44>)
 8008304:	f000 fcf0 	bl	8008ce8 <_init>
 8008308:	1b64      	subs	r4, r4, r5
 800830a:	10a4      	asrs	r4, r4, #2
 800830c:	2600      	movs	r6, #0
 800830e:	42a6      	cmp	r6, r4
 8008310:	d105      	bne.n	800831e <__libc_init_array+0x2e>
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	f855 3b04 	ldr.w	r3, [r5], #4
 8008318:	4798      	blx	r3
 800831a:	3601      	adds	r6, #1
 800831c:	e7ee      	b.n	80082fc <__libc_init_array+0xc>
 800831e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008322:	4798      	blx	r3
 8008324:	3601      	adds	r6, #1
 8008326:	e7f2      	b.n	800830e <__libc_init_array+0x1e>
 8008328:	08008ef4 	.word	0x08008ef4
 800832c:	08008ef4 	.word	0x08008ef4
 8008330:	08008ef4 	.word	0x08008ef4
 8008334:	08008ef8 	.word	0x08008ef8

08008338 <memcmp>:
 8008338:	b530      	push	{r4, r5, lr}
 800833a:	3901      	subs	r1, #1
 800833c:	2400      	movs	r4, #0
 800833e:	42a2      	cmp	r2, r4
 8008340:	d101      	bne.n	8008346 <memcmp+0xe>
 8008342:	2000      	movs	r0, #0
 8008344:	e005      	b.n	8008352 <memcmp+0x1a>
 8008346:	5d03      	ldrb	r3, [r0, r4]
 8008348:	3401      	adds	r4, #1
 800834a:	5d0d      	ldrb	r5, [r1, r4]
 800834c:	42ab      	cmp	r3, r5
 800834e:	d0f6      	beq.n	800833e <memcmp+0x6>
 8008350:	1b58      	subs	r0, r3, r5
 8008352:	bd30      	pop	{r4, r5, pc}

08008354 <memcpy>:
 8008354:	440a      	add	r2, r1
 8008356:	4291      	cmp	r1, r2
 8008358:	f100 33ff 	add.w	r3, r0, #4294967295
 800835c:	d100      	bne.n	8008360 <memcpy+0xc>
 800835e:	4770      	bx	lr
 8008360:	b510      	push	{r4, lr}
 8008362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800836a:	4291      	cmp	r1, r2
 800836c:	d1f9      	bne.n	8008362 <memcpy+0xe>
 800836e:	bd10      	pop	{r4, pc}

08008370 <memset>:
 8008370:	4402      	add	r2, r0
 8008372:	4603      	mov	r3, r0
 8008374:	4293      	cmp	r3, r2
 8008376:	d100      	bne.n	800837a <memset+0xa>
 8008378:	4770      	bx	lr
 800837a:	f803 1b01 	strb.w	r1, [r3], #1
 800837e:	e7f9      	b.n	8008374 <memset+0x4>

08008380 <_puts_r>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	460e      	mov	r6, r1
 8008384:	4605      	mov	r5, r0
 8008386:	b118      	cbz	r0, 8008390 <_puts_r+0x10>
 8008388:	6983      	ldr	r3, [r0, #24]
 800838a:	b90b      	cbnz	r3, 8008390 <_puts_r+0x10>
 800838c:	f000 fa48 	bl	8008820 <__sinit>
 8008390:	69ab      	ldr	r3, [r5, #24]
 8008392:	68ac      	ldr	r4, [r5, #8]
 8008394:	b913      	cbnz	r3, 800839c <_puts_r+0x1c>
 8008396:	4628      	mov	r0, r5
 8008398:	f000 fa42 	bl	8008820 <__sinit>
 800839c:	4b2c      	ldr	r3, [pc, #176]	; (8008450 <_puts_r+0xd0>)
 800839e:	429c      	cmp	r4, r3
 80083a0:	d120      	bne.n	80083e4 <_puts_r+0x64>
 80083a2:	686c      	ldr	r4, [r5, #4]
 80083a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083a6:	07db      	lsls	r3, r3, #31
 80083a8:	d405      	bmi.n	80083b6 <_puts_r+0x36>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	0598      	lsls	r0, r3, #22
 80083ae:	d402      	bmi.n	80083b6 <_puts_r+0x36>
 80083b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083b2:	f000 fad3 	bl	800895c <__retarget_lock_acquire_recursive>
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	0719      	lsls	r1, r3, #28
 80083ba:	d51d      	bpl.n	80083f8 <_puts_r+0x78>
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	b1db      	cbz	r3, 80083f8 <_puts_r+0x78>
 80083c0:	3e01      	subs	r6, #1
 80083c2:	68a3      	ldr	r3, [r4, #8]
 80083c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083c8:	3b01      	subs	r3, #1
 80083ca:	60a3      	str	r3, [r4, #8]
 80083cc:	bb39      	cbnz	r1, 800841e <_puts_r+0x9e>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	da38      	bge.n	8008444 <_puts_r+0xc4>
 80083d2:	4622      	mov	r2, r4
 80083d4:	210a      	movs	r1, #10
 80083d6:	4628      	mov	r0, r5
 80083d8:	f000 f848 	bl	800846c <__swbuf_r>
 80083dc:	3001      	adds	r0, #1
 80083de:	d011      	beq.n	8008404 <_puts_r+0x84>
 80083e0:	250a      	movs	r5, #10
 80083e2:	e011      	b.n	8008408 <_puts_r+0x88>
 80083e4:	4b1b      	ldr	r3, [pc, #108]	; (8008454 <_puts_r+0xd4>)
 80083e6:	429c      	cmp	r4, r3
 80083e8:	d101      	bne.n	80083ee <_puts_r+0x6e>
 80083ea:	68ac      	ldr	r4, [r5, #8]
 80083ec:	e7da      	b.n	80083a4 <_puts_r+0x24>
 80083ee:	4b1a      	ldr	r3, [pc, #104]	; (8008458 <_puts_r+0xd8>)
 80083f0:	429c      	cmp	r4, r3
 80083f2:	bf08      	it	eq
 80083f4:	68ec      	ldreq	r4, [r5, #12]
 80083f6:	e7d5      	b.n	80083a4 <_puts_r+0x24>
 80083f8:	4621      	mov	r1, r4
 80083fa:	4628      	mov	r0, r5
 80083fc:	f000 f888 	bl	8008510 <__swsetup_r>
 8008400:	2800      	cmp	r0, #0
 8008402:	d0dd      	beq.n	80083c0 <_puts_r+0x40>
 8008404:	f04f 35ff 	mov.w	r5, #4294967295
 8008408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800840a:	07da      	lsls	r2, r3, #31
 800840c:	d405      	bmi.n	800841a <_puts_r+0x9a>
 800840e:	89a3      	ldrh	r3, [r4, #12]
 8008410:	059b      	lsls	r3, r3, #22
 8008412:	d402      	bmi.n	800841a <_puts_r+0x9a>
 8008414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008416:	f000 faa2 	bl	800895e <__retarget_lock_release_recursive>
 800841a:	4628      	mov	r0, r5
 800841c:	bd70      	pop	{r4, r5, r6, pc}
 800841e:	2b00      	cmp	r3, #0
 8008420:	da04      	bge.n	800842c <_puts_r+0xac>
 8008422:	69a2      	ldr	r2, [r4, #24]
 8008424:	429a      	cmp	r2, r3
 8008426:	dc06      	bgt.n	8008436 <_puts_r+0xb6>
 8008428:	290a      	cmp	r1, #10
 800842a:	d004      	beq.n	8008436 <_puts_r+0xb6>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	1c5a      	adds	r2, r3, #1
 8008430:	6022      	str	r2, [r4, #0]
 8008432:	7019      	strb	r1, [r3, #0]
 8008434:	e7c5      	b.n	80083c2 <_puts_r+0x42>
 8008436:	4622      	mov	r2, r4
 8008438:	4628      	mov	r0, r5
 800843a:	f000 f817 	bl	800846c <__swbuf_r>
 800843e:	3001      	adds	r0, #1
 8008440:	d1bf      	bne.n	80083c2 <_puts_r+0x42>
 8008442:	e7df      	b.n	8008404 <_puts_r+0x84>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	250a      	movs	r5, #10
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	6022      	str	r2, [r4, #0]
 800844c:	701d      	strb	r5, [r3, #0]
 800844e:	e7db      	b.n	8008408 <_puts_r+0x88>
 8008450:	08008eac 	.word	0x08008eac
 8008454:	08008ecc 	.word	0x08008ecc
 8008458:	08008e8c 	.word	0x08008e8c

0800845c <puts>:
 800845c:	4b02      	ldr	r3, [pc, #8]	; (8008468 <puts+0xc>)
 800845e:	4601      	mov	r1, r0
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	f7ff bf8d 	b.w	8008380 <_puts_r>
 8008466:	bf00      	nop
 8008468:	20000034 	.word	0x20000034

0800846c <__swbuf_r>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	460e      	mov	r6, r1
 8008470:	4614      	mov	r4, r2
 8008472:	4605      	mov	r5, r0
 8008474:	b118      	cbz	r0, 800847e <__swbuf_r+0x12>
 8008476:	6983      	ldr	r3, [r0, #24]
 8008478:	b90b      	cbnz	r3, 800847e <__swbuf_r+0x12>
 800847a:	f000 f9d1 	bl	8008820 <__sinit>
 800847e:	4b21      	ldr	r3, [pc, #132]	; (8008504 <__swbuf_r+0x98>)
 8008480:	429c      	cmp	r4, r3
 8008482:	d12b      	bne.n	80084dc <__swbuf_r+0x70>
 8008484:	686c      	ldr	r4, [r5, #4]
 8008486:	69a3      	ldr	r3, [r4, #24]
 8008488:	60a3      	str	r3, [r4, #8]
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	071a      	lsls	r2, r3, #28
 800848e:	d52f      	bpl.n	80084f0 <__swbuf_r+0x84>
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	b36b      	cbz	r3, 80084f0 <__swbuf_r+0x84>
 8008494:	6923      	ldr	r3, [r4, #16]
 8008496:	6820      	ldr	r0, [r4, #0]
 8008498:	1ac0      	subs	r0, r0, r3
 800849a:	6963      	ldr	r3, [r4, #20]
 800849c:	b2f6      	uxtb	r6, r6
 800849e:	4283      	cmp	r3, r0
 80084a0:	4637      	mov	r7, r6
 80084a2:	dc04      	bgt.n	80084ae <__swbuf_r+0x42>
 80084a4:	4621      	mov	r1, r4
 80084a6:	4628      	mov	r0, r5
 80084a8:	f000 f926 	bl	80086f8 <_fflush_r>
 80084ac:	bb30      	cbnz	r0, 80084fc <__swbuf_r+0x90>
 80084ae:	68a3      	ldr	r3, [r4, #8]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	60a3      	str	r3, [r4, #8]
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	6022      	str	r2, [r4, #0]
 80084ba:	701e      	strb	r6, [r3, #0]
 80084bc:	6963      	ldr	r3, [r4, #20]
 80084be:	3001      	adds	r0, #1
 80084c0:	4283      	cmp	r3, r0
 80084c2:	d004      	beq.n	80084ce <__swbuf_r+0x62>
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	07db      	lsls	r3, r3, #31
 80084c8:	d506      	bpl.n	80084d8 <__swbuf_r+0x6c>
 80084ca:	2e0a      	cmp	r6, #10
 80084cc:	d104      	bne.n	80084d8 <__swbuf_r+0x6c>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4628      	mov	r0, r5
 80084d2:	f000 f911 	bl	80086f8 <_fflush_r>
 80084d6:	b988      	cbnz	r0, 80084fc <__swbuf_r+0x90>
 80084d8:	4638      	mov	r0, r7
 80084da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <__swbuf_r+0x9c>)
 80084de:	429c      	cmp	r4, r3
 80084e0:	d101      	bne.n	80084e6 <__swbuf_r+0x7a>
 80084e2:	68ac      	ldr	r4, [r5, #8]
 80084e4:	e7cf      	b.n	8008486 <__swbuf_r+0x1a>
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <__swbuf_r+0xa0>)
 80084e8:	429c      	cmp	r4, r3
 80084ea:	bf08      	it	eq
 80084ec:	68ec      	ldreq	r4, [r5, #12]
 80084ee:	e7ca      	b.n	8008486 <__swbuf_r+0x1a>
 80084f0:	4621      	mov	r1, r4
 80084f2:	4628      	mov	r0, r5
 80084f4:	f000 f80c 	bl	8008510 <__swsetup_r>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d0cb      	beq.n	8008494 <__swbuf_r+0x28>
 80084fc:	f04f 37ff 	mov.w	r7, #4294967295
 8008500:	e7ea      	b.n	80084d8 <__swbuf_r+0x6c>
 8008502:	bf00      	nop
 8008504:	08008eac 	.word	0x08008eac
 8008508:	08008ecc 	.word	0x08008ecc
 800850c:	08008e8c 	.word	0x08008e8c

08008510 <__swsetup_r>:
 8008510:	4b32      	ldr	r3, [pc, #200]	; (80085dc <__swsetup_r+0xcc>)
 8008512:	b570      	push	{r4, r5, r6, lr}
 8008514:	681d      	ldr	r5, [r3, #0]
 8008516:	4606      	mov	r6, r0
 8008518:	460c      	mov	r4, r1
 800851a:	b125      	cbz	r5, 8008526 <__swsetup_r+0x16>
 800851c:	69ab      	ldr	r3, [r5, #24]
 800851e:	b913      	cbnz	r3, 8008526 <__swsetup_r+0x16>
 8008520:	4628      	mov	r0, r5
 8008522:	f000 f97d 	bl	8008820 <__sinit>
 8008526:	4b2e      	ldr	r3, [pc, #184]	; (80085e0 <__swsetup_r+0xd0>)
 8008528:	429c      	cmp	r4, r3
 800852a:	d10f      	bne.n	800854c <__swsetup_r+0x3c>
 800852c:	686c      	ldr	r4, [r5, #4]
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008534:	0719      	lsls	r1, r3, #28
 8008536:	d42c      	bmi.n	8008592 <__swsetup_r+0x82>
 8008538:	06dd      	lsls	r5, r3, #27
 800853a:	d411      	bmi.n	8008560 <__swsetup_r+0x50>
 800853c:	2309      	movs	r3, #9
 800853e:	6033      	str	r3, [r6, #0]
 8008540:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	f04f 30ff 	mov.w	r0, #4294967295
 800854a:	e03e      	b.n	80085ca <__swsetup_r+0xba>
 800854c:	4b25      	ldr	r3, [pc, #148]	; (80085e4 <__swsetup_r+0xd4>)
 800854e:	429c      	cmp	r4, r3
 8008550:	d101      	bne.n	8008556 <__swsetup_r+0x46>
 8008552:	68ac      	ldr	r4, [r5, #8]
 8008554:	e7eb      	b.n	800852e <__swsetup_r+0x1e>
 8008556:	4b24      	ldr	r3, [pc, #144]	; (80085e8 <__swsetup_r+0xd8>)
 8008558:	429c      	cmp	r4, r3
 800855a:	bf08      	it	eq
 800855c:	68ec      	ldreq	r4, [r5, #12]
 800855e:	e7e6      	b.n	800852e <__swsetup_r+0x1e>
 8008560:	0758      	lsls	r0, r3, #29
 8008562:	d512      	bpl.n	800858a <__swsetup_r+0x7a>
 8008564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008566:	b141      	cbz	r1, 800857a <__swsetup_r+0x6a>
 8008568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800856c:	4299      	cmp	r1, r3
 800856e:	d002      	beq.n	8008576 <__swsetup_r+0x66>
 8008570:	4630      	mov	r0, r6
 8008572:	f000 fa59 	bl	8008a28 <_free_r>
 8008576:	2300      	movs	r3, #0
 8008578:	6363      	str	r3, [r4, #52]	; 0x34
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	2300      	movs	r3, #0
 8008584:	6063      	str	r3, [r4, #4]
 8008586:	6923      	ldr	r3, [r4, #16]
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	f043 0308 	orr.w	r3, r3, #8
 8008590:	81a3      	strh	r3, [r4, #12]
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	b94b      	cbnz	r3, 80085aa <__swsetup_r+0x9a>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800859c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a0:	d003      	beq.n	80085aa <__swsetup_r+0x9a>
 80085a2:	4621      	mov	r1, r4
 80085a4:	4630      	mov	r0, r6
 80085a6:	f000 f9ff 	bl	80089a8 <__smakebuf_r>
 80085aa:	89a0      	ldrh	r0, [r4, #12]
 80085ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085b0:	f010 0301 	ands.w	r3, r0, #1
 80085b4:	d00a      	beq.n	80085cc <__swsetup_r+0xbc>
 80085b6:	2300      	movs	r3, #0
 80085b8:	60a3      	str	r3, [r4, #8]
 80085ba:	6963      	ldr	r3, [r4, #20]
 80085bc:	425b      	negs	r3, r3
 80085be:	61a3      	str	r3, [r4, #24]
 80085c0:	6923      	ldr	r3, [r4, #16]
 80085c2:	b943      	cbnz	r3, 80085d6 <__swsetup_r+0xc6>
 80085c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085c8:	d1ba      	bne.n	8008540 <__swsetup_r+0x30>
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	0781      	lsls	r1, r0, #30
 80085ce:	bf58      	it	pl
 80085d0:	6963      	ldrpl	r3, [r4, #20]
 80085d2:	60a3      	str	r3, [r4, #8]
 80085d4:	e7f4      	b.n	80085c0 <__swsetup_r+0xb0>
 80085d6:	2000      	movs	r0, #0
 80085d8:	e7f7      	b.n	80085ca <__swsetup_r+0xba>
 80085da:	bf00      	nop
 80085dc:	20000034 	.word	0x20000034
 80085e0:	08008eac 	.word	0x08008eac
 80085e4:	08008ecc 	.word	0x08008ecc
 80085e8:	08008e8c 	.word	0x08008e8c

080085ec <__sflush_r>:
 80085ec:	898a      	ldrh	r2, [r1, #12]
 80085ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f2:	4605      	mov	r5, r0
 80085f4:	0710      	lsls	r0, r2, #28
 80085f6:	460c      	mov	r4, r1
 80085f8:	d458      	bmi.n	80086ac <__sflush_r+0xc0>
 80085fa:	684b      	ldr	r3, [r1, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	dc05      	bgt.n	800860c <__sflush_r+0x20>
 8008600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008602:	2b00      	cmp	r3, #0
 8008604:	dc02      	bgt.n	800860c <__sflush_r+0x20>
 8008606:	2000      	movs	r0, #0
 8008608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800860c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800860e:	2e00      	cmp	r6, #0
 8008610:	d0f9      	beq.n	8008606 <__sflush_r+0x1a>
 8008612:	2300      	movs	r3, #0
 8008614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008618:	682f      	ldr	r7, [r5, #0]
 800861a:	602b      	str	r3, [r5, #0]
 800861c:	d032      	beq.n	8008684 <__sflush_r+0x98>
 800861e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	075a      	lsls	r2, r3, #29
 8008624:	d505      	bpl.n	8008632 <__sflush_r+0x46>
 8008626:	6863      	ldr	r3, [r4, #4]
 8008628:	1ac0      	subs	r0, r0, r3
 800862a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800862c:	b10b      	cbz	r3, 8008632 <__sflush_r+0x46>
 800862e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008630:	1ac0      	subs	r0, r0, r3
 8008632:	2300      	movs	r3, #0
 8008634:	4602      	mov	r2, r0
 8008636:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008638:	6a21      	ldr	r1, [r4, #32]
 800863a:	4628      	mov	r0, r5
 800863c:	47b0      	blx	r6
 800863e:	1c43      	adds	r3, r0, #1
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	d106      	bne.n	8008652 <__sflush_r+0x66>
 8008644:	6829      	ldr	r1, [r5, #0]
 8008646:	291d      	cmp	r1, #29
 8008648:	d82c      	bhi.n	80086a4 <__sflush_r+0xb8>
 800864a:	4a2a      	ldr	r2, [pc, #168]	; (80086f4 <__sflush_r+0x108>)
 800864c:	40ca      	lsrs	r2, r1
 800864e:	07d6      	lsls	r6, r2, #31
 8008650:	d528      	bpl.n	80086a4 <__sflush_r+0xb8>
 8008652:	2200      	movs	r2, #0
 8008654:	6062      	str	r2, [r4, #4]
 8008656:	04d9      	lsls	r1, r3, #19
 8008658:	6922      	ldr	r2, [r4, #16]
 800865a:	6022      	str	r2, [r4, #0]
 800865c:	d504      	bpl.n	8008668 <__sflush_r+0x7c>
 800865e:	1c42      	adds	r2, r0, #1
 8008660:	d101      	bne.n	8008666 <__sflush_r+0x7a>
 8008662:	682b      	ldr	r3, [r5, #0]
 8008664:	b903      	cbnz	r3, 8008668 <__sflush_r+0x7c>
 8008666:	6560      	str	r0, [r4, #84]	; 0x54
 8008668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800866a:	602f      	str	r7, [r5, #0]
 800866c:	2900      	cmp	r1, #0
 800866e:	d0ca      	beq.n	8008606 <__sflush_r+0x1a>
 8008670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008674:	4299      	cmp	r1, r3
 8008676:	d002      	beq.n	800867e <__sflush_r+0x92>
 8008678:	4628      	mov	r0, r5
 800867a:	f000 f9d5 	bl	8008a28 <_free_r>
 800867e:	2000      	movs	r0, #0
 8008680:	6360      	str	r0, [r4, #52]	; 0x34
 8008682:	e7c1      	b.n	8008608 <__sflush_r+0x1c>
 8008684:	6a21      	ldr	r1, [r4, #32]
 8008686:	2301      	movs	r3, #1
 8008688:	4628      	mov	r0, r5
 800868a:	47b0      	blx	r6
 800868c:	1c41      	adds	r1, r0, #1
 800868e:	d1c7      	bne.n	8008620 <__sflush_r+0x34>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d0c4      	beq.n	8008620 <__sflush_r+0x34>
 8008696:	2b1d      	cmp	r3, #29
 8008698:	d001      	beq.n	800869e <__sflush_r+0xb2>
 800869a:	2b16      	cmp	r3, #22
 800869c:	d101      	bne.n	80086a2 <__sflush_r+0xb6>
 800869e:	602f      	str	r7, [r5, #0]
 80086a0:	e7b1      	b.n	8008606 <__sflush_r+0x1a>
 80086a2:	89a3      	ldrh	r3, [r4, #12]
 80086a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086a8:	81a3      	strh	r3, [r4, #12]
 80086aa:	e7ad      	b.n	8008608 <__sflush_r+0x1c>
 80086ac:	690f      	ldr	r7, [r1, #16]
 80086ae:	2f00      	cmp	r7, #0
 80086b0:	d0a9      	beq.n	8008606 <__sflush_r+0x1a>
 80086b2:	0793      	lsls	r3, r2, #30
 80086b4:	680e      	ldr	r6, [r1, #0]
 80086b6:	bf08      	it	eq
 80086b8:	694b      	ldreq	r3, [r1, #20]
 80086ba:	600f      	str	r7, [r1, #0]
 80086bc:	bf18      	it	ne
 80086be:	2300      	movne	r3, #0
 80086c0:	eba6 0807 	sub.w	r8, r6, r7
 80086c4:	608b      	str	r3, [r1, #8]
 80086c6:	f1b8 0f00 	cmp.w	r8, #0
 80086ca:	dd9c      	ble.n	8008606 <__sflush_r+0x1a>
 80086cc:	6a21      	ldr	r1, [r4, #32]
 80086ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086d0:	4643      	mov	r3, r8
 80086d2:	463a      	mov	r2, r7
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b0      	blx	r6
 80086d8:	2800      	cmp	r0, #0
 80086da:	dc06      	bgt.n	80086ea <__sflush_r+0xfe>
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086e2:	81a3      	strh	r3, [r4, #12]
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	e78e      	b.n	8008608 <__sflush_r+0x1c>
 80086ea:	4407      	add	r7, r0
 80086ec:	eba8 0800 	sub.w	r8, r8, r0
 80086f0:	e7e9      	b.n	80086c6 <__sflush_r+0xda>
 80086f2:	bf00      	nop
 80086f4:	20400001 	.word	0x20400001

080086f8 <_fflush_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	690b      	ldr	r3, [r1, #16]
 80086fc:	4605      	mov	r5, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	b913      	cbnz	r3, 8008708 <_fflush_r+0x10>
 8008702:	2500      	movs	r5, #0
 8008704:	4628      	mov	r0, r5
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	b118      	cbz	r0, 8008712 <_fflush_r+0x1a>
 800870a:	6983      	ldr	r3, [r0, #24]
 800870c:	b90b      	cbnz	r3, 8008712 <_fflush_r+0x1a>
 800870e:	f000 f887 	bl	8008820 <__sinit>
 8008712:	4b14      	ldr	r3, [pc, #80]	; (8008764 <_fflush_r+0x6c>)
 8008714:	429c      	cmp	r4, r3
 8008716:	d11b      	bne.n	8008750 <_fflush_r+0x58>
 8008718:	686c      	ldr	r4, [r5, #4]
 800871a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0ef      	beq.n	8008702 <_fflush_r+0xa>
 8008722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008724:	07d0      	lsls	r0, r2, #31
 8008726:	d404      	bmi.n	8008732 <_fflush_r+0x3a>
 8008728:	0599      	lsls	r1, r3, #22
 800872a:	d402      	bmi.n	8008732 <_fflush_r+0x3a>
 800872c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800872e:	f000 f915 	bl	800895c <__retarget_lock_acquire_recursive>
 8008732:	4628      	mov	r0, r5
 8008734:	4621      	mov	r1, r4
 8008736:	f7ff ff59 	bl	80085ec <__sflush_r>
 800873a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800873c:	07da      	lsls	r2, r3, #31
 800873e:	4605      	mov	r5, r0
 8008740:	d4e0      	bmi.n	8008704 <_fflush_r+0xc>
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	059b      	lsls	r3, r3, #22
 8008746:	d4dd      	bmi.n	8008704 <_fflush_r+0xc>
 8008748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800874a:	f000 f908 	bl	800895e <__retarget_lock_release_recursive>
 800874e:	e7d9      	b.n	8008704 <_fflush_r+0xc>
 8008750:	4b05      	ldr	r3, [pc, #20]	; (8008768 <_fflush_r+0x70>)
 8008752:	429c      	cmp	r4, r3
 8008754:	d101      	bne.n	800875a <_fflush_r+0x62>
 8008756:	68ac      	ldr	r4, [r5, #8]
 8008758:	e7df      	b.n	800871a <_fflush_r+0x22>
 800875a:	4b04      	ldr	r3, [pc, #16]	; (800876c <_fflush_r+0x74>)
 800875c:	429c      	cmp	r4, r3
 800875e:	bf08      	it	eq
 8008760:	68ec      	ldreq	r4, [r5, #12]
 8008762:	e7da      	b.n	800871a <_fflush_r+0x22>
 8008764:	08008eac 	.word	0x08008eac
 8008768:	08008ecc 	.word	0x08008ecc
 800876c:	08008e8c 	.word	0x08008e8c

08008770 <std>:
 8008770:	2300      	movs	r3, #0
 8008772:	b510      	push	{r4, lr}
 8008774:	4604      	mov	r4, r0
 8008776:	e9c0 3300 	strd	r3, r3, [r0]
 800877a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800877e:	6083      	str	r3, [r0, #8]
 8008780:	8181      	strh	r1, [r0, #12]
 8008782:	6643      	str	r3, [r0, #100]	; 0x64
 8008784:	81c2      	strh	r2, [r0, #14]
 8008786:	6183      	str	r3, [r0, #24]
 8008788:	4619      	mov	r1, r3
 800878a:	2208      	movs	r2, #8
 800878c:	305c      	adds	r0, #92	; 0x5c
 800878e:	f7ff fdef 	bl	8008370 <memset>
 8008792:	4b05      	ldr	r3, [pc, #20]	; (80087a8 <std+0x38>)
 8008794:	6263      	str	r3, [r4, #36]	; 0x24
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <std+0x3c>)
 8008798:	62a3      	str	r3, [r4, #40]	; 0x28
 800879a:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <std+0x40>)
 800879c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800879e:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <std+0x44>)
 80087a0:	6224      	str	r4, [r4, #32]
 80087a2:	6323      	str	r3, [r4, #48]	; 0x30
 80087a4:	bd10      	pop	{r4, pc}
 80087a6:	bf00      	nop
 80087a8:	08008b9d 	.word	0x08008b9d
 80087ac:	08008bbf 	.word	0x08008bbf
 80087b0:	08008bf7 	.word	0x08008bf7
 80087b4:	08008c1b 	.word	0x08008c1b

080087b8 <_cleanup_r>:
 80087b8:	4901      	ldr	r1, [pc, #4]	; (80087c0 <_cleanup_r+0x8>)
 80087ba:	f000 b8af 	b.w	800891c <_fwalk_reent>
 80087be:	bf00      	nop
 80087c0:	080086f9 	.word	0x080086f9

080087c4 <__sfmoreglue>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	1e4a      	subs	r2, r1, #1
 80087c8:	2568      	movs	r5, #104	; 0x68
 80087ca:	4355      	muls	r5, r2
 80087cc:	460e      	mov	r6, r1
 80087ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087d2:	f000 f979 	bl	8008ac8 <_malloc_r>
 80087d6:	4604      	mov	r4, r0
 80087d8:	b140      	cbz	r0, 80087ec <__sfmoreglue+0x28>
 80087da:	2100      	movs	r1, #0
 80087dc:	e9c0 1600 	strd	r1, r6, [r0]
 80087e0:	300c      	adds	r0, #12
 80087e2:	60a0      	str	r0, [r4, #8]
 80087e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087e8:	f7ff fdc2 	bl	8008370 <memset>
 80087ec:	4620      	mov	r0, r4
 80087ee:	bd70      	pop	{r4, r5, r6, pc}

080087f0 <__sfp_lock_acquire>:
 80087f0:	4801      	ldr	r0, [pc, #4]	; (80087f8 <__sfp_lock_acquire+0x8>)
 80087f2:	f000 b8b3 	b.w	800895c <__retarget_lock_acquire_recursive>
 80087f6:	bf00      	nop
 80087f8:	20017230 	.word	0x20017230

080087fc <__sfp_lock_release>:
 80087fc:	4801      	ldr	r0, [pc, #4]	; (8008804 <__sfp_lock_release+0x8>)
 80087fe:	f000 b8ae 	b.w	800895e <__retarget_lock_release_recursive>
 8008802:	bf00      	nop
 8008804:	20017230 	.word	0x20017230

08008808 <__sinit_lock_acquire>:
 8008808:	4801      	ldr	r0, [pc, #4]	; (8008810 <__sinit_lock_acquire+0x8>)
 800880a:	f000 b8a7 	b.w	800895c <__retarget_lock_acquire_recursive>
 800880e:	bf00      	nop
 8008810:	2001722b 	.word	0x2001722b

08008814 <__sinit_lock_release>:
 8008814:	4801      	ldr	r0, [pc, #4]	; (800881c <__sinit_lock_release+0x8>)
 8008816:	f000 b8a2 	b.w	800895e <__retarget_lock_release_recursive>
 800881a:	bf00      	nop
 800881c:	2001722b 	.word	0x2001722b

08008820 <__sinit>:
 8008820:	b510      	push	{r4, lr}
 8008822:	4604      	mov	r4, r0
 8008824:	f7ff fff0 	bl	8008808 <__sinit_lock_acquire>
 8008828:	69a3      	ldr	r3, [r4, #24]
 800882a:	b11b      	cbz	r3, 8008834 <__sinit+0x14>
 800882c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008830:	f7ff bff0 	b.w	8008814 <__sinit_lock_release>
 8008834:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008838:	6523      	str	r3, [r4, #80]	; 0x50
 800883a:	4b13      	ldr	r3, [pc, #76]	; (8008888 <__sinit+0x68>)
 800883c:	4a13      	ldr	r2, [pc, #76]	; (800888c <__sinit+0x6c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	62a2      	str	r2, [r4, #40]	; 0x28
 8008842:	42a3      	cmp	r3, r4
 8008844:	bf04      	itt	eq
 8008846:	2301      	moveq	r3, #1
 8008848:	61a3      	streq	r3, [r4, #24]
 800884a:	4620      	mov	r0, r4
 800884c:	f000 f820 	bl	8008890 <__sfp>
 8008850:	6060      	str	r0, [r4, #4]
 8008852:	4620      	mov	r0, r4
 8008854:	f000 f81c 	bl	8008890 <__sfp>
 8008858:	60a0      	str	r0, [r4, #8]
 800885a:	4620      	mov	r0, r4
 800885c:	f000 f818 	bl	8008890 <__sfp>
 8008860:	2200      	movs	r2, #0
 8008862:	60e0      	str	r0, [r4, #12]
 8008864:	2104      	movs	r1, #4
 8008866:	6860      	ldr	r0, [r4, #4]
 8008868:	f7ff ff82 	bl	8008770 <std>
 800886c:	68a0      	ldr	r0, [r4, #8]
 800886e:	2201      	movs	r2, #1
 8008870:	2109      	movs	r1, #9
 8008872:	f7ff ff7d 	bl	8008770 <std>
 8008876:	68e0      	ldr	r0, [r4, #12]
 8008878:	2202      	movs	r2, #2
 800887a:	2112      	movs	r1, #18
 800887c:	f7ff ff78 	bl	8008770 <std>
 8008880:	2301      	movs	r3, #1
 8008882:	61a3      	str	r3, [r4, #24]
 8008884:	e7d2      	b.n	800882c <__sinit+0xc>
 8008886:	bf00      	nop
 8008888:	08008e88 	.word	0x08008e88
 800888c:	080087b9 	.word	0x080087b9

08008890 <__sfp>:
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008892:	4607      	mov	r7, r0
 8008894:	f7ff ffac 	bl	80087f0 <__sfp_lock_acquire>
 8008898:	4b1e      	ldr	r3, [pc, #120]	; (8008914 <__sfp+0x84>)
 800889a:	681e      	ldr	r6, [r3, #0]
 800889c:	69b3      	ldr	r3, [r6, #24]
 800889e:	b913      	cbnz	r3, 80088a6 <__sfp+0x16>
 80088a0:	4630      	mov	r0, r6
 80088a2:	f7ff ffbd 	bl	8008820 <__sinit>
 80088a6:	3648      	adds	r6, #72	; 0x48
 80088a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	d503      	bpl.n	80088b8 <__sfp+0x28>
 80088b0:	6833      	ldr	r3, [r6, #0]
 80088b2:	b30b      	cbz	r3, 80088f8 <__sfp+0x68>
 80088b4:	6836      	ldr	r6, [r6, #0]
 80088b6:	e7f7      	b.n	80088a8 <__sfp+0x18>
 80088b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088bc:	b9d5      	cbnz	r5, 80088f4 <__sfp+0x64>
 80088be:	4b16      	ldr	r3, [pc, #88]	; (8008918 <__sfp+0x88>)
 80088c0:	60e3      	str	r3, [r4, #12]
 80088c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088c6:	6665      	str	r5, [r4, #100]	; 0x64
 80088c8:	f000 f847 	bl	800895a <__retarget_lock_init_recursive>
 80088cc:	f7ff ff96 	bl	80087fc <__sfp_lock_release>
 80088d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088d8:	6025      	str	r5, [r4, #0]
 80088da:	61a5      	str	r5, [r4, #24]
 80088dc:	2208      	movs	r2, #8
 80088de:	4629      	mov	r1, r5
 80088e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088e4:	f7ff fd44 	bl	8008370 <memset>
 80088e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088f0:	4620      	mov	r0, r4
 80088f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f4:	3468      	adds	r4, #104	; 0x68
 80088f6:	e7d9      	b.n	80088ac <__sfp+0x1c>
 80088f8:	2104      	movs	r1, #4
 80088fa:	4638      	mov	r0, r7
 80088fc:	f7ff ff62 	bl	80087c4 <__sfmoreglue>
 8008900:	4604      	mov	r4, r0
 8008902:	6030      	str	r0, [r6, #0]
 8008904:	2800      	cmp	r0, #0
 8008906:	d1d5      	bne.n	80088b4 <__sfp+0x24>
 8008908:	f7ff ff78 	bl	80087fc <__sfp_lock_release>
 800890c:	230c      	movs	r3, #12
 800890e:	603b      	str	r3, [r7, #0]
 8008910:	e7ee      	b.n	80088f0 <__sfp+0x60>
 8008912:	bf00      	nop
 8008914:	08008e88 	.word	0x08008e88
 8008918:	ffff0001 	.word	0xffff0001

0800891c <_fwalk_reent>:
 800891c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008920:	4606      	mov	r6, r0
 8008922:	4688      	mov	r8, r1
 8008924:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008928:	2700      	movs	r7, #0
 800892a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800892e:	f1b9 0901 	subs.w	r9, r9, #1
 8008932:	d505      	bpl.n	8008940 <_fwalk_reent+0x24>
 8008934:	6824      	ldr	r4, [r4, #0]
 8008936:	2c00      	cmp	r4, #0
 8008938:	d1f7      	bne.n	800892a <_fwalk_reent+0xe>
 800893a:	4638      	mov	r0, r7
 800893c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008940:	89ab      	ldrh	r3, [r5, #12]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d907      	bls.n	8008956 <_fwalk_reent+0x3a>
 8008946:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800894a:	3301      	adds	r3, #1
 800894c:	d003      	beq.n	8008956 <_fwalk_reent+0x3a>
 800894e:	4629      	mov	r1, r5
 8008950:	4630      	mov	r0, r6
 8008952:	47c0      	blx	r8
 8008954:	4307      	orrs	r7, r0
 8008956:	3568      	adds	r5, #104	; 0x68
 8008958:	e7e9      	b.n	800892e <_fwalk_reent+0x12>

0800895a <__retarget_lock_init_recursive>:
 800895a:	4770      	bx	lr

0800895c <__retarget_lock_acquire_recursive>:
 800895c:	4770      	bx	lr

0800895e <__retarget_lock_release_recursive>:
 800895e:	4770      	bx	lr

08008960 <__swhatbuf_r>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	460e      	mov	r6, r1
 8008964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008968:	2900      	cmp	r1, #0
 800896a:	b096      	sub	sp, #88	; 0x58
 800896c:	4614      	mov	r4, r2
 800896e:	461d      	mov	r5, r3
 8008970:	da07      	bge.n	8008982 <__swhatbuf_r+0x22>
 8008972:	2300      	movs	r3, #0
 8008974:	602b      	str	r3, [r5, #0]
 8008976:	89b3      	ldrh	r3, [r6, #12]
 8008978:	061a      	lsls	r2, r3, #24
 800897a:	d410      	bmi.n	800899e <__swhatbuf_r+0x3e>
 800897c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008980:	e00e      	b.n	80089a0 <__swhatbuf_r+0x40>
 8008982:	466a      	mov	r2, sp
 8008984:	f000 f95e 	bl	8008c44 <_fstat_r>
 8008988:	2800      	cmp	r0, #0
 800898a:	dbf2      	blt.n	8008972 <__swhatbuf_r+0x12>
 800898c:	9a01      	ldr	r2, [sp, #4]
 800898e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008992:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008996:	425a      	negs	r2, r3
 8008998:	415a      	adcs	r2, r3
 800899a:	602a      	str	r2, [r5, #0]
 800899c:	e7ee      	b.n	800897c <__swhatbuf_r+0x1c>
 800899e:	2340      	movs	r3, #64	; 0x40
 80089a0:	2000      	movs	r0, #0
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	b016      	add	sp, #88	; 0x58
 80089a6:	bd70      	pop	{r4, r5, r6, pc}

080089a8 <__smakebuf_r>:
 80089a8:	898b      	ldrh	r3, [r1, #12]
 80089aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089ac:	079d      	lsls	r5, r3, #30
 80089ae:	4606      	mov	r6, r0
 80089b0:	460c      	mov	r4, r1
 80089b2:	d507      	bpl.n	80089c4 <__smakebuf_r+0x1c>
 80089b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	6123      	str	r3, [r4, #16]
 80089bc:	2301      	movs	r3, #1
 80089be:	6163      	str	r3, [r4, #20]
 80089c0:	b002      	add	sp, #8
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	ab01      	add	r3, sp, #4
 80089c6:	466a      	mov	r2, sp
 80089c8:	f7ff ffca 	bl	8008960 <__swhatbuf_r>
 80089cc:	9900      	ldr	r1, [sp, #0]
 80089ce:	4605      	mov	r5, r0
 80089d0:	4630      	mov	r0, r6
 80089d2:	f000 f879 	bl	8008ac8 <_malloc_r>
 80089d6:	b948      	cbnz	r0, 80089ec <__smakebuf_r+0x44>
 80089d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089dc:	059a      	lsls	r2, r3, #22
 80089de:	d4ef      	bmi.n	80089c0 <__smakebuf_r+0x18>
 80089e0:	f023 0303 	bic.w	r3, r3, #3
 80089e4:	f043 0302 	orr.w	r3, r3, #2
 80089e8:	81a3      	strh	r3, [r4, #12]
 80089ea:	e7e3      	b.n	80089b4 <__smakebuf_r+0xc>
 80089ec:	4b0d      	ldr	r3, [pc, #52]	; (8008a24 <__smakebuf_r+0x7c>)
 80089ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	6020      	str	r0, [r4, #0]
 80089f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	9b00      	ldr	r3, [sp, #0]
 80089fc:	6163      	str	r3, [r4, #20]
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	6120      	str	r0, [r4, #16]
 8008a02:	b15b      	cbz	r3, 8008a1c <__smakebuf_r+0x74>
 8008a04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f000 f92d 	bl	8008c68 <_isatty_r>
 8008a0e:	b128      	cbz	r0, 8008a1c <__smakebuf_r+0x74>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f023 0303 	bic.w	r3, r3, #3
 8008a16:	f043 0301 	orr.w	r3, r3, #1
 8008a1a:	81a3      	strh	r3, [r4, #12]
 8008a1c:	89a0      	ldrh	r0, [r4, #12]
 8008a1e:	4305      	orrs	r5, r0
 8008a20:	81a5      	strh	r5, [r4, #12]
 8008a22:	e7cd      	b.n	80089c0 <__smakebuf_r+0x18>
 8008a24:	080087b9 	.word	0x080087b9

08008a28 <_free_r>:
 8008a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a2a:	2900      	cmp	r1, #0
 8008a2c:	d048      	beq.n	8008ac0 <_free_r+0x98>
 8008a2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a32:	9001      	str	r0, [sp, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f1a1 0404 	sub.w	r4, r1, #4
 8008a3a:	bfb8      	it	lt
 8008a3c:	18e4      	addlt	r4, r4, r3
 8008a3e:	f000 f935 	bl	8008cac <__malloc_lock>
 8008a42:	4a20      	ldr	r2, [pc, #128]	; (8008ac4 <_free_r+0x9c>)
 8008a44:	9801      	ldr	r0, [sp, #4]
 8008a46:	6813      	ldr	r3, [r2, #0]
 8008a48:	4615      	mov	r5, r2
 8008a4a:	b933      	cbnz	r3, 8008a5a <_free_r+0x32>
 8008a4c:	6063      	str	r3, [r4, #4]
 8008a4e:	6014      	str	r4, [r2, #0]
 8008a50:	b003      	add	sp, #12
 8008a52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a56:	f000 b92f 	b.w	8008cb8 <__malloc_unlock>
 8008a5a:	42a3      	cmp	r3, r4
 8008a5c:	d90b      	bls.n	8008a76 <_free_r+0x4e>
 8008a5e:	6821      	ldr	r1, [r4, #0]
 8008a60:	1862      	adds	r2, r4, r1
 8008a62:	4293      	cmp	r3, r2
 8008a64:	bf04      	itt	eq
 8008a66:	681a      	ldreq	r2, [r3, #0]
 8008a68:	685b      	ldreq	r3, [r3, #4]
 8008a6a:	6063      	str	r3, [r4, #4]
 8008a6c:	bf04      	itt	eq
 8008a6e:	1852      	addeq	r2, r2, r1
 8008a70:	6022      	streq	r2, [r4, #0]
 8008a72:	602c      	str	r4, [r5, #0]
 8008a74:	e7ec      	b.n	8008a50 <_free_r+0x28>
 8008a76:	461a      	mov	r2, r3
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	b10b      	cbz	r3, 8008a80 <_free_r+0x58>
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d9fa      	bls.n	8008a76 <_free_r+0x4e>
 8008a80:	6811      	ldr	r1, [r2, #0]
 8008a82:	1855      	adds	r5, r2, r1
 8008a84:	42a5      	cmp	r5, r4
 8008a86:	d10b      	bne.n	8008aa0 <_free_r+0x78>
 8008a88:	6824      	ldr	r4, [r4, #0]
 8008a8a:	4421      	add	r1, r4
 8008a8c:	1854      	adds	r4, r2, r1
 8008a8e:	42a3      	cmp	r3, r4
 8008a90:	6011      	str	r1, [r2, #0]
 8008a92:	d1dd      	bne.n	8008a50 <_free_r+0x28>
 8008a94:	681c      	ldr	r4, [r3, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	6053      	str	r3, [r2, #4]
 8008a9a:	4421      	add	r1, r4
 8008a9c:	6011      	str	r1, [r2, #0]
 8008a9e:	e7d7      	b.n	8008a50 <_free_r+0x28>
 8008aa0:	d902      	bls.n	8008aa8 <_free_r+0x80>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	6003      	str	r3, [r0, #0]
 8008aa6:	e7d3      	b.n	8008a50 <_free_r+0x28>
 8008aa8:	6825      	ldr	r5, [r4, #0]
 8008aaa:	1961      	adds	r1, r4, r5
 8008aac:	428b      	cmp	r3, r1
 8008aae:	bf04      	itt	eq
 8008ab0:	6819      	ldreq	r1, [r3, #0]
 8008ab2:	685b      	ldreq	r3, [r3, #4]
 8008ab4:	6063      	str	r3, [r4, #4]
 8008ab6:	bf04      	itt	eq
 8008ab8:	1949      	addeq	r1, r1, r5
 8008aba:	6021      	streq	r1, [r4, #0]
 8008abc:	6054      	str	r4, [r2, #4]
 8008abe:	e7c7      	b.n	8008a50 <_free_r+0x28>
 8008ac0:	b003      	add	sp, #12
 8008ac2:	bd30      	pop	{r4, r5, pc}
 8008ac4:	20017038 	.word	0x20017038

08008ac8 <_malloc_r>:
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	1ccd      	adds	r5, r1, #3
 8008acc:	f025 0503 	bic.w	r5, r5, #3
 8008ad0:	3508      	adds	r5, #8
 8008ad2:	2d0c      	cmp	r5, #12
 8008ad4:	bf38      	it	cc
 8008ad6:	250c      	movcc	r5, #12
 8008ad8:	2d00      	cmp	r5, #0
 8008ada:	4606      	mov	r6, r0
 8008adc:	db01      	blt.n	8008ae2 <_malloc_r+0x1a>
 8008ade:	42a9      	cmp	r1, r5
 8008ae0:	d903      	bls.n	8008aea <_malloc_r+0x22>
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	6033      	str	r3, [r6, #0]
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aea:	f000 f8df 	bl	8008cac <__malloc_lock>
 8008aee:	4921      	ldr	r1, [pc, #132]	; (8008b74 <_malloc_r+0xac>)
 8008af0:	680a      	ldr	r2, [r1, #0]
 8008af2:	4614      	mov	r4, r2
 8008af4:	b99c      	cbnz	r4, 8008b1e <_malloc_r+0x56>
 8008af6:	4f20      	ldr	r7, [pc, #128]	; (8008b78 <_malloc_r+0xb0>)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	b923      	cbnz	r3, 8008b06 <_malloc_r+0x3e>
 8008afc:	4621      	mov	r1, r4
 8008afe:	4630      	mov	r0, r6
 8008b00:	f000 f83c 	bl	8008b7c <_sbrk_r>
 8008b04:	6038      	str	r0, [r7, #0]
 8008b06:	4629      	mov	r1, r5
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f000 f837 	bl	8008b7c <_sbrk_r>
 8008b0e:	1c43      	adds	r3, r0, #1
 8008b10:	d123      	bne.n	8008b5a <_malloc_r+0x92>
 8008b12:	230c      	movs	r3, #12
 8008b14:	6033      	str	r3, [r6, #0]
 8008b16:	4630      	mov	r0, r6
 8008b18:	f000 f8ce 	bl	8008cb8 <__malloc_unlock>
 8008b1c:	e7e3      	b.n	8008ae6 <_malloc_r+0x1e>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	1b5b      	subs	r3, r3, r5
 8008b22:	d417      	bmi.n	8008b54 <_malloc_r+0x8c>
 8008b24:	2b0b      	cmp	r3, #11
 8008b26:	d903      	bls.n	8008b30 <_malloc_r+0x68>
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	441c      	add	r4, r3
 8008b2c:	6025      	str	r5, [r4, #0]
 8008b2e:	e004      	b.n	8008b3a <_malloc_r+0x72>
 8008b30:	6863      	ldr	r3, [r4, #4]
 8008b32:	42a2      	cmp	r2, r4
 8008b34:	bf0c      	ite	eq
 8008b36:	600b      	streq	r3, [r1, #0]
 8008b38:	6053      	strne	r3, [r2, #4]
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f000 f8bc 	bl	8008cb8 <__malloc_unlock>
 8008b40:	f104 000b 	add.w	r0, r4, #11
 8008b44:	1d23      	adds	r3, r4, #4
 8008b46:	f020 0007 	bic.w	r0, r0, #7
 8008b4a:	1ac2      	subs	r2, r0, r3
 8008b4c:	d0cc      	beq.n	8008ae8 <_malloc_r+0x20>
 8008b4e:	1a1b      	subs	r3, r3, r0
 8008b50:	50a3      	str	r3, [r4, r2]
 8008b52:	e7c9      	b.n	8008ae8 <_malloc_r+0x20>
 8008b54:	4622      	mov	r2, r4
 8008b56:	6864      	ldr	r4, [r4, #4]
 8008b58:	e7cc      	b.n	8008af4 <_malloc_r+0x2c>
 8008b5a:	1cc4      	adds	r4, r0, #3
 8008b5c:	f024 0403 	bic.w	r4, r4, #3
 8008b60:	42a0      	cmp	r0, r4
 8008b62:	d0e3      	beq.n	8008b2c <_malloc_r+0x64>
 8008b64:	1a21      	subs	r1, r4, r0
 8008b66:	4630      	mov	r0, r6
 8008b68:	f000 f808 	bl	8008b7c <_sbrk_r>
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d1dd      	bne.n	8008b2c <_malloc_r+0x64>
 8008b70:	e7cf      	b.n	8008b12 <_malloc_r+0x4a>
 8008b72:	bf00      	nop
 8008b74:	20017038 	.word	0x20017038
 8008b78:	2001703c 	.word	0x2001703c

08008b7c <_sbrk_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4d06      	ldr	r5, [pc, #24]	; (8008b98 <_sbrk_r+0x1c>)
 8008b80:	2300      	movs	r3, #0
 8008b82:	4604      	mov	r4, r0
 8008b84:	4608      	mov	r0, r1
 8008b86:	602b      	str	r3, [r5, #0]
 8008b88:	f7f8 ffbe 	bl	8001b08 <_sbrk>
 8008b8c:	1c43      	adds	r3, r0, #1
 8008b8e:	d102      	bne.n	8008b96 <_sbrk_r+0x1a>
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	b103      	cbz	r3, 8008b96 <_sbrk_r+0x1a>
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	20017234 	.word	0x20017234

08008b9c <__sread>:
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba4:	f000 f88e 	bl	8008cc4 <_read_r>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	bfab      	itete	ge
 8008bac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bae:	89a3      	ldrhlt	r3, [r4, #12]
 8008bb0:	181b      	addge	r3, r3, r0
 8008bb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bb6:	bfac      	ite	ge
 8008bb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bba:	81a3      	strhlt	r3, [r4, #12]
 8008bbc:	bd10      	pop	{r4, pc}

08008bbe <__swrite>:
 8008bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc2:	461f      	mov	r7, r3
 8008bc4:	898b      	ldrh	r3, [r1, #12]
 8008bc6:	05db      	lsls	r3, r3, #23
 8008bc8:	4605      	mov	r5, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	4616      	mov	r6, r2
 8008bce:	d505      	bpl.n	8008bdc <__swrite+0x1e>
 8008bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f000 f856 	bl	8008c88 <_lseek_r>
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008be6:	81a3      	strh	r3, [r4, #12]
 8008be8:	4632      	mov	r2, r6
 8008bea:	463b      	mov	r3, r7
 8008bec:	4628      	mov	r0, r5
 8008bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf2:	f7fe bf77 	b.w	8007ae4 <_write_r>

08008bf6 <__sseek>:
 8008bf6:	b510      	push	{r4, lr}
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfe:	f000 f843 	bl	8008c88 <_lseek_r>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	89a3      	ldrh	r3, [r4, #12]
 8008c06:	bf15      	itete	ne
 8008c08:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c12:	81a3      	strheq	r3, [r4, #12]
 8008c14:	bf18      	it	ne
 8008c16:	81a3      	strhne	r3, [r4, #12]
 8008c18:	bd10      	pop	{r4, pc}

08008c1a <__sclose>:
 8008c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c1e:	f000 b801 	b.w	8008c24 <_close_r>
	...

08008c24 <_close_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d06      	ldr	r5, [pc, #24]	; (8008c40 <_close_r+0x1c>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	602b      	str	r3, [r5, #0]
 8008c30:	f7f8 ff35 	bl	8001a9e <_close>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_close_r+0x1a>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_close_r+0x1a>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	20017234 	.word	0x20017234

08008c44 <_fstat_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4d07      	ldr	r5, [pc, #28]	; (8008c64 <_fstat_r+0x20>)
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	4611      	mov	r1, r2
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	f7f8 ff30 	bl	8001ab6 <_fstat>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	d102      	bne.n	8008c60 <_fstat_r+0x1c>
 8008c5a:	682b      	ldr	r3, [r5, #0]
 8008c5c:	b103      	cbz	r3, 8008c60 <_fstat_r+0x1c>
 8008c5e:	6023      	str	r3, [r4, #0]
 8008c60:	bd38      	pop	{r3, r4, r5, pc}
 8008c62:	bf00      	nop
 8008c64:	20017234 	.word	0x20017234

08008c68 <_isatty_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4d06      	ldr	r5, [pc, #24]	; (8008c84 <_isatty_r+0x1c>)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	4604      	mov	r4, r0
 8008c70:	4608      	mov	r0, r1
 8008c72:	602b      	str	r3, [r5, #0]
 8008c74:	f7f8 ff2f 	bl	8001ad6 <_isatty>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_isatty_r+0x1a>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_isatty_r+0x1a>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	20017234 	.word	0x20017234

08008c88 <_lseek_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4d07      	ldr	r5, [pc, #28]	; (8008ca8 <_lseek_r+0x20>)
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	4608      	mov	r0, r1
 8008c90:	4611      	mov	r1, r2
 8008c92:	2200      	movs	r2, #0
 8008c94:	602a      	str	r2, [r5, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	f7f8 ff28 	bl	8001aec <_lseek>
 8008c9c:	1c43      	adds	r3, r0, #1
 8008c9e:	d102      	bne.n	8008ca6 <_lseek_r+0x1e>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	b103      	cbz	r3, 8008ca6 <_lseek_r+0x1e>
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	20017234 	.word	0x20017234

08008cac <__malloc_lock>:
 8008cac:	4801      	ldr	r0, [pc, #4]	; (8008cb4 <__malloc_lock+0x8>)
 8008cae:	f7ff be55 	b.w	800895c <__retarget_lock_acquire_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	2001722c 	.word	0x2001722c

08008cb8 <__malloc_unlock>:
 8008cb8:	4801      	ldr	r0, [pc, #4]	; (8008cc0 <__malloc_unlock+0x8>)
 8008cba:	f7ff be50 	b.w	800895e <__retarget_lock_release_recursive>
 8008cbe:	bf00      	nop
 8008cc0:	2001722c 	.word	0x2001722c

08008cc4 <_read_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4d07      	ldr	r5, [pc, #28]	; (8008ce4 <_read_r+0x20>)
 8008cc8:	4604      	mov	r4, r0
 8008cca:	4608      	mov	r0, r1
 8008ccc:	4611      	mov	r1, r2
 8008cce:	2200      	movs	r2, #0
 8008cd0:	602a      	str	r2, [r5, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	f7f8 fec6 	bl	8001a64 <_read>
 8008cd8:	1c43      	adds	r3, r0, #1
 8008cda:	d102      	bne.n	8008ce2 <_read_r+0x1e>
 8008cdc:	682b      	ldr	r3, [r5, #0]
 8008cde:	b103      	cbz	r3, 8008ce2 <_read_r+0x1e>
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	bd38      	pop	{r3, r4, r5, pc}
 8008ce4:	20017234 	.word	0x20017234

08008ce8 <_init>:
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	bf00      	nop
 8008cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cee:	bc08      	pop	{r3}
 8008cf0:	469e      	mov	lr, r3
 8008cf2:	4770      	bx	lr

08008cf4 <_fini>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	bf00      	nop
 8008cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfa:	bc08      	pop	{r3}
 8008cfc:	469e      	mov	lr, r3
 8008cfe:	4770      	bx	lr
