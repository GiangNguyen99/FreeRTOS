
02_freertos_led_whlieloop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005870  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc8  08005bc8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bd0  08005bd0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bd4  08005bd4  00015bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014410  2000001c  08005bf4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001442c  08005bf4  0002442c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a16  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df3  00000000  00000000  00036a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00039858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  0003a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fd5  00000000  00000000  0003ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bad  00000000  00000000  00053a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099525  00000000  00000000  000675b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100ad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004944  00000000  00000000  00100b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059f8 	.word	0x080059f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	080059f8 	.word	0x080059f8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20014384 	.word	0x20014384

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b08c      	sub	sp, #48	; 0x30
 8000570:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000572:	f000 fa77 	bl	8000a64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000576:	f000 f88d 	bl	8000694 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800057a:	f000 f8f5 	bl	8000768 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	//Enable the CYCCNT counter.
	DWT_CTRL |= (1 << 0);
 800057e:	4b3b      	ldr	r3, [pc, #236]	; (800066c <main+0x100>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a3a      	ldr	r2, [pc, #232]	; (800066c <main+0x100>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 800058a:	f002 fec1 	bl	8003310 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800058e:	f004 fc41 	bl	8004e14 <SEGGER_SYSVIEW_Start>

	SEGGER_UART_init(500000);
 8000592:	4837      	ldr	r0, [pc, #220]	; (8000670 <main+0x104>)
 8000594:	f003 f88a 	bl	80036ac <SEGGER_UART_init>

	status = xTaskCreate(task_led_green, "task_led_green", 200, NULL, 2,
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2302      	movs	r3, #2
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	22c8      	movs	r2, #200	; 0xc8
 80005a6:	4933      	ldr	r1, [pc, #204]	; (8000674 <main+0x108>)
 80005a8:	4833      	ldr	r0, [pc, #204]	; (8000678 <main+0x10c>)
 80005aa:	f001 fcc4 	bl	8001f36 <xTaskCreate>
 80005ae:	6278      	str	r0, [r7, #36]	; 0x24
			&taskHandle_led_green);

	configASSERT(status == pdPASS);
 80005b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d00a      	beq.n	80005cc <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ba:	f383 8811 	msr	BASEPRI, r3
 80005be:	f3bf 8f6f 	isb	sy
 80005c2:	f3bf 8f4f 	dsb	sy
 80005c6:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c8:	bf00      	nop
 80005ca:	e7fe      	b.n	80005ca <main+0x5e>

	status = xTaskCreate(task_led_orange, "task_led_orange", 200, NULL, 2,
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2302      	movs	r3, #2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	22c8      	movs	r2, #200	; 0xc8
 80005da:	4928      	ldr	r1, [pc, #160]	; (800067c <main+0x110>)
 80005dc:	4828      	ldr	r0, [pc, #160]	; (8000680 <main+0x114>)
 80005de:	f001 fcaa 	bl	8001f36 <xTaskCreate>
 80005e2:	6278      	str	r0, [r7, #36]	; 0x24
			&taskHandle_led_orange);

	configASSERT(status == pdPASS);
 80005e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d00a      	beq.n	8000600 <main+0x94>
        __asm volatile
 80005ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ee:	f383 8811 	msr	BASEPRI, r3
 80005f2:	f3bf 8f6f 	isb	sy
 80005f6:	f3bf 8f4f 	dsb	sy
 80005fa:	61fb      	str	r3, [r7, #28]
    }
 80005fc:	bf00      	nop
 80005fe:	e7fe      	b.n	80005fe <main+0x92>

	status = xTaskCreate(task_led_red, "task_led_red", 200, NULL, 2,
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2302      	movs	r3, #2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	22c8      	movs	r2, #200	; 0xc8
 800060e:	491d      	ldr	r1, [pc, #116]	; (8000684 <main+0x118>)
 8000610:	481d      	ldr	r0, [pc, #116]	; (8000688 <main+0x11c>)
 8000612:	f001 fc90 	bl	8001f36 <xTaskCreate>
 8000616:	6278      	str	r0, [r7, #36]	; 0x24
			&taskHandle_led_red);

	configASSERT(status == pdPASS);
 8000618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061a:	2b01      	cmp	r3, #1
 800061c:	d00a      	beq.n	8000634 <main+0xc8>
        __asm volatile
 800061e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000622:	f383 8811 	msr	BASEPRI, r3
 8000626:	f3bf 8f6f 	isb	sy
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	61bb      	str	r3, [r7, #24]
    }
 8000630:	bf00      	nop
 8000632:	e7fe      	b.n	8000632 <main+0xc6>
	status = xTaskCreate(task_led_blue, "task_led_blue", 200, NULL, 2,
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2302      	movs	r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	22c8      	movs	r2, #200	; 0xc8
 8000640:	4912      	ldr	r1, [pc, #72]	; (800068c <main+0x120>)
 8000642:	4813      	ldr	r0, [pc, #76]	; (8000690 <main+0x124>)
 8000644:	f001 fc77 	bl	8001f36 <xTaskCreate>
 8000648:	6278      	str	r0, [r7, #36]	; 0x24
			&taskHandle_led_blue);

	configASSERT(status == pdPASS);
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	2b01      	cmp	r3, #1
 800064e:	d00a      	beq.n	8000666 <main+0xfa>
        __asm volatile
 8000650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000654:	f383 8811 	msr	BASEPRI, r3
 8000658:	f3bf 8f6f 	isb	sy
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	617b      	str	r3, [r7, #20]
    }
 8000662:	bf00      	nop
 8000664:	e7fe      	b.n	8000664 <main+0xf8>

	vTaskStartScheduler();
 8000666:	f001 fdef 	bl	8002248 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800066a:	e7fe      	b.n	800066a <main+0xfe>
 800066c:	e0001000 	.word	0xe0001000
 8000670:	0007a120 	.word	0x0007a120
 8000674:	08005a10 	.word	0x08005a10
 8000678:	080007d1 	.word	0x080007d1
 800067c:	08005a20 	.word	0x08005a20
 8000680:	080007fd 	.word	0x080007fd
 8000684:	08005a30 	.word	0x08005a30
 8000688:	08000829 	.word	0x08000829
 800068c:	08005a40 	.word	0x08005a40
 8000690:	08000851 	.word	0x08000851

08000694 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 f9a0 	bl	80059e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000704:	2308      	movs	r3, #8
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 200;
 8000708:	23c8      	movs	r3, #200	; 0xc8
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070c:	2304      	movs	r3, #4
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fca3 	bl	8001064 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x94>
		Error_Handler();
 8000724:	f000 f8ba 	bl	800089c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000738:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2103      	movs	r1, #3
 8000746:	4618      	mov	r0, r3
 8000748:	f000 ff04 	bl	8001554 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc2>
		Error_Handler();
 8000752:	f000 f8a3 	bl	800089c <Error_Handler>
	}
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_GPIO_Init+0x60>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <MX_GPIO_Init+0x60>)
 8000786:	f043 0308 	orr.w	r3, r3, #8
 800078a:	6313      	str	r3, [r2, #48]	; 0x30
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_GPIO_Init+0x60>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <MX_GPIO_Init+0x64>)
 80007a0:	f000 fc2c 	bl	8000ffc <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80007a4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007a8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_GPIO_Init+0x64>)
 80007bc:	f000 fa9a 	bl	8000cf4 <HAL_GPIO_Init>

}
 80007c0:	bf00      	nop
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020c00 	.word	0x40020c00

080007d0 <task_led_green>:

/* USER CODE BEGIN 4 */

void task_led_green(void *parameter) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80007d8:	4806      	ldr	r0, [pc, #24]	; (80007f4 <task_led_green+0x24>)
 80007da:	f005 f827 	bl	800582c <SEGGER_SYSVIEW_PrintfTarget>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <task_led_green+0x28>)
 80007e4:	f000 fc23 	bl	800102e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80007e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ec:	f000 f97c 	bl	8000ae8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80007f0:	e7f2      	b.n	80007d8 <task_led_green+0x8>
 80007f2:	bf00      	nop
 80007f4:	08005a50 	.word	0x08005a50
 80007f8:	40020c00 	.word	0x40020c00

080007fc <task_led_orange>:
	}
}

void task_led_orange(void *parameter) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000804:	4806      	ldr	r0, [pc, #24]	; (8000820 <task_led_orange+0x24>)
 8000806:	f005 f811 	bl	800582c <SEGGER_SYSVIEW_PrintfTarget>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800080a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <task_led_orange+0x28>)
 8000810:	f000 fc0d 	bl	800102e <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000814:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000818:	f000 f966 	bl	8000ae8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800081c:	e7f2      	b.n	8000804 <task_led_orange+0x8>
 800081e:	bf00      	nop
 8000820:	08005a64 	.word	0x08005a64
 8000824:	40020c00 	.word	0x40020c00

08000828 <task_led_red>:
	}

}

void task_led_red(void *parameter) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <task_led_red+0x20>)
 8000832:	f004 fffb 	bl	800582c <SEGGER_SYSVIEW_PrintfTarget>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000836:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <task_led_red+0x24>)
 800083c:	f000 fbf7 	bl	800102e <HAL_GPIO_TogglePin>
		HAL_Delay(250);
 8000840:	20fa      	movs	r0, #250	; 0xfa
 8000842:	f000 f951 	bl	8000ae8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000846:	e7f3      	b.n	8000830 <task_led_red+0x8>
 8000848:	08005a78 	.word	0x08005a78
 800084c:	40020c00 	.word	0x40020c00

08000850 <task_led_blue>:
	}
}

void task_led_blue(void *parameter) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <task_led_blue+0x20>)
 800085a:	f004 ffe7 	bl	800582c <SEGGER_SYSVIEW_PrintfTarget>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800085e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <task_led_blue+0x24>)
 8000864:	f000 fbe3 	bl	800102e <HAL_GPIO_TogglePin>
		HAL_Delay(125);
 8000868:	207d      	movs	r0, #125	; 0x7d
 800086a:	f000 f93d 	bl	8000ae8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 800086e:	e7f3      	b.n	8000858 <task_led_blue+0x8>
 8000870:	08005a8c 	.word	0x08005a8c
 8000874:	40020c00 	.word	0x40020c00

08000878 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d101      	bne.n	800088e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800088a:	f000 f90d 	bl	8000aa8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40000c00 	.word	0x40000c00

0800089c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80008e6:	f002 f98f 	bl	8002c08 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	2032      	movs	r0, #50	; 0x32
 800090e:	f000 f9c7 	bl	8000ca0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000912:	2032      	movs	r0, #50	; 0x32
 8000914:	f000 f9e0 	bl	8000cd8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <HAL_InitTick+0xa4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a1e      	ldr	r2, [pc, #120]	; (800099c <HAL_InitTick+0xa4>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_InitTick+0xa4>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000934:	f107 0210 	add.w	r2, r7, #16
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fff0 	bl	8001924 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000944:	f000 ffda 	bl	80018fc <HAL_RCC_GetPCLK1Freq>
 8000948:	4603      	mov	r3, r0
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800094e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000950:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <HAL_InitTick+0xa8>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	0c9b      	lsrs	r3, r3, #18
 8000958:	3b01      	subs	r3, #1
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_InitTick+0xac>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <HAL_InitTick+0xb0>)
 8000960:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_InitTick+0xac>)
 8000964:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000968:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_InitTick+0xac>)
 800096c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800096e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_InitTick+0xac>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_InitTick+0xac>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <HAL_InitTick+0xac>)
 800097e:	f001 f803 	bl	8001988 <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d104      	bne.n	8000992 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000988:	4806      	ldr	r0, [pc, #24]	; (80009a4 <HAL_InitTick+0xac>)
 800098a:	f001 f857 	bl	8001a3c <HAL_TIM_Base_Start_IT>
 800098e:	4603      	mov	r3, r0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3730      	adds	r7, #48	; 0x30
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	431bde83 	.word	0x431bde83
 80009a4:	20014338 	.word	0x20014338
 80009a8:	40000c00 	.word	0x40000c00

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <TIM5_IRQHandler+0x10>)
 80009de:	f001 f88f 	bl	8001b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20014338 	.word	0x20014338

080009ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a16:	490e      	ldr	r1, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a2c:	4c0b      	ldr	r4, [pc, #44]	; (8000a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a3a:	f7ff ffd7 	bl	80009ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f004 ff93 	bl	8005968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a42:	f7ff fd93 	bl	800056c <main>
  bx  lr    
 8000a46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a54:	08005bd8 	.word	0x08005bd8
  ldr r2, =_sbss
 8000a58:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a5c:	2001442c 	.word	0x2001442c

08000a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <HAL_Init+0x40>)
 8000a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_Init+0x40>)
 8000a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_Init+0x40>)
 8000a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f8fc 	bl	8000c8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	200f      	movs	r0, #15
 8000a94:	f7ff ff30 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff ff06 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023c00 	.word	0x40023c00

08000aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x24>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <HAL_IncTick+0x24>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20014380 	.word	0x20014380

08000ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <HAL_GetTick+0x14>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20014380 	.word	0x20014380

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff ffee 	bl	8000ad0 <HAL_GetTick>
 8000af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b00:	d005      	beq.n	8000b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_Delay+0x44>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b0e:	bf00      	nop
 8000b10:	f7ff ffde 	bl	8000ad0 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8f7      	bhi.n	8000b10 <HAL_Delay+0x28>
  {
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008

08000b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ff4c 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb2:	f7ff ff61 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	68b9      	ldr	r1, [r7, #8]
 8000cbc:	6978      	ldr	r0, [r7, #20]
 8000cbe:	f7ff ffb1 	bl	8000c24 <NVIC_EncodePriority>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff80 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000cd0:	bf00      	nop
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff54 	bl	8000b94 <__NVIC_EnableIRQ>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	e159      	b.n	8000fc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d10:	2201      	movs	r2, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	f040 8148 	bne.w	8000fbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d005      	beq.n	8000d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d130      	bne.n	8000da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	091b      	lsrs	r3, r3, #4
 8000d92:	f003 0201 	and.w	r2, r3, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d017      	beq.n	8000de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d123      	bne.n	8000e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	08da      	lsrs	r2, r3, #3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3208      	adds	r2, #8
 8000df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	220f      	movs	r2, #15
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	691a      	ldr	r2, [r3, #16]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	69b9      	ldr	r1, [r7, #24]
 8000e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0203 	and.w	r2, r3, #3
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f000 80a2 	beq.w	8000fbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b57      	ldr	r3, [pc, #348]	; (8000fdc <HAL_GPIO_Init+0x2e8>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a56      	ldr	r2, [pc, #344]	; (8000fdc <HAL_GPIO_Init+0x2e8>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b54      	ldr	r3, [pc, #336]	; (8000fdc <HAL_GPIO_Init+0x2e8>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e96:	4a52      	ldr	r2, [pc, #328]	; (8000fe0 <HAL_GPIO_Init+0x2ec>)
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	220f      	movs	r2, #15
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a49      	ldr	r2, [pc, #292]	; (8000fe4 <HAL_GPIO_Init+0x2f0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d019      	beq.n	8000ef6 <HAL_GPIO_Init+0x202>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a48      	ldr	r2, [pc, #288]	; (8000fe8 <HAL_GPIO_Init+0x2f4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0x1fe>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a47      	ldr	r2, [pc, #284]	; (8000fec <HAL_GPIO_Init+0x2f8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00d      	beq.n	8000eee <HAL_GPIO_Init+0x1fa>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a46      	ldr	r2, [pc, #280]	; (8000ff0 <HAL_GPIO_Init+0x2fc>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x1f6>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a45      	ldr	r2, [pc, #276]	; (8000ff4 <HAL_GPIO_Init+0x300>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_GPIO_Init+0x1f2>
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	e008      	b.n	8000ef8 <HAL_GPIO_Init+0x204>
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	e006      	b.n	8000ef8 <HAL_GPIO_Init+0x204>
 8000eea:	2303      	movs	r3, #3
 8000eec:	e004      	b.n	8000ef8 <HAL_GPIO_Init+0x204>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e002      	b.n	8000ef8 <HAL_GPIO_Init+0x204>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <HAL_GPIO_Init+0x204>
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	69fa      	ldr	r2, [r7, #28]
 8000efa:	f002 0203 	and.w	r2, r2, #3
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	4093      	lsls	r3, r2
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f08:	4935      	ldr	r1, [pc, #212]	; (8000fe0 <HAL_GPIO_Init+0x2ec>)
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f16:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <HAL_GPIO_Init+0x304>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ff8 <HAL_GPIO_Init+0x304>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_GPIO_Init+0x304>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f64:	4a24      	ldr	r2, [pc, #144]	; (8000ff8 <HAL_GPIO_Init+0x304>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <HAL_GPIO_Init+0x304>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <HAL_GPIO_Init+0x304>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_GPIO_Init+0x304>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <HAL_GPIO_Init+0x304>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	2b0f      	cmp	r3, #15
 8000fc8:	f67f aea2 	bls.w	8000d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40013800 	.word	0x40013800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	40020c00 	.word	0x40020c00
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40013c00 	.word	0x40013c00

08000ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
 8001008:	4613      	mov	r3, r2
 800100a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001018:	e003      	b.n	8001022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	619a      	str	r2, [r3, #24]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4013      	ands	r3, r2
 8001046:	041a      	lsls	r2, r3, #16
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43d9      	mvns	r1, r3
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	400b      	ands	r3, r1
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	619a      	str	r2, [r3, #24]
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e264      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d075      	beq.n	800116e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001082:	4ba3      	ldr	r3, [pc, #652]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b04      	cmp	r3, #4
 800108c:	d00c      	beq.n	80010a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108e:	4ba0      	ldr	r3, [pc, #640]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001096:	2b08      	cmp	r3, #8
 8001098:	d112      	bne.n	80010c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109a:	4b9d      	ldr	r3, [pc, #628]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010a6:	d10b      	bne.n	80010c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	4b99      	ldr	r3, [pc, #612]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d05b      	beq.n	800116c <HAL_RCC_OscConfig+0x108>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d157      	bne.n	800116c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e23f      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c8:	d106      	bne.n	80010d8 <HAL_RCC_OscConfig+0x74>
 80010ca:	4b91      	ldr	r3, [pc, #580]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a90      	ldr	r2, [pc, #576]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e01d      	b.n	8001114 <HAL_RCC_OscConfig+0xb0>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x98>
 80010e2:	4b8b      	ldr	r3, [pc, #556]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a8a      	ldr	r2, [pc, #552]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4b88      	ldr	r3, [pc, #544]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a87      	ldr	r2, [pc, #540]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e00b      	b.n	8001114 <HAL_RCC_OscConfig+0xb0>
 80010fc:	4b84      	ldr	r3, [pc, #528]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a83      	ldr	r2, [pc, #524]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b81      	ldr	r3, [pc, #516]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a80      	ldr	r2, [pc, #512]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 800110e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d013      	beq.n	8001144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff fcd8 	bl	8000ad0 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001124:	f7ff fcd4 	bl	8000ad0 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b64      	cmp	r3, #100	; 0x64
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e204      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	4b76      	ldr	r3, [pc, #472]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f0      	beq.n	8001124 <HAL_RCC_OscConfig+0xc0>
 8001142:	e014      	b.n	800116e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fcc4 	bl	8000ad0 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff fcc0 	bl	8000ad0 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b64      	cmp	r3, #100	; 0x64
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e1f0      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	4b6c      	ldr	r3, [pc, #432]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0xe8>
 800116a:	e000      	b.n	800116e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d063      	beq.n	8001242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800117a:	4b65      	ldr	r3, [pc, #404]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 030c 	and.w	r3, r3, #12
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00b      	beq.n	800119e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001186:	4b62      	ldr	r3, [pc, #392]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118e:	2b08      	cmp	r3, #8
 8001190:	d11c      	bne.n	80011cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001192:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d116      	bne.n	80011cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	4b5c      	ldr	r3, [pc, #368]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d005      	beq.n	80011b6 <HAL_RCC_OscConfig+0x152>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d001      	beq.n	80011b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e1c4      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	4b56      	ldr	r3, [pc, #344]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4952      	ldr	r1, [pc, #328]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	e03a      	b.n	8001242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d020      	beq.n	8001216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d4:	4b4f      	ldr	r3, [pc, #316]	; (8001314 <HAL_RCC_OscConfig+0x2b0>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011da:	f7ff fc79 	bl	8000ad0 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e2:	f7ff fc75 	bl	8000ad0 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e1a5      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	4b46      	ldr	r3, [pc, #280]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001200:	4b43      	ldr	r3, [pc, #268]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4940      	ldr	r1, [pc, #256]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	4313      	orrs	r3, r2
 8001212:	600b      	str	r3, [r1, #0]
 8001214:	e015      	b.n	8001242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <HAL_RCC_OscConfig+0x2b0>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff fc58 	bl	8000ad0 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001224:	f7ff fc54 	bl	8000ad0 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e184      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	d030      	beq.n	80012b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d016      	beq.n	8001284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_RCC_OscConfig+0x2b4>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125c:	f7ff fc38 	bl	8000ad0 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001264:	f7ff fc34 	bl	8000ad0 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e164      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0x200>
 8001282:	e015      	b.n	80012b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <HAL_RCC_OscConfig+0x2b4>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff fc21 	bl	8000ad0 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001292:	f7ff fc1d 	bl	8000ad0 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e14d      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80012a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f0      	bne.n	8001292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80a0 	beq.w	80013fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10f      	bne.n	80012ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ea:	2301      	movs	r3, #1
 80012ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_RCC_OscConfig+0x2b8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d121      	bne.n	800133e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_RCC_OscConfig+0x2b8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_RCC_OscConfig+0x2b8>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001306:	f7ff fbe3 	bl	8000ad0 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130c:	e011      	b.n	8001332 <HAL_RCC_OscConfig+0x2ce>
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	42470000 	.word	0x42470000
 8001318:	42470e80 	.word	0x42470e80
 800131c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001320:	f7ff fbd6 	bl	8000ad0 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e106      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001332:	4b85      	ldr	r3, [pc, #532]	; (8001548 <HAL_RCC_OscConfig+0x4e4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d106      	bne.n	8001354 <HAL_RCC_OscConfig+0x2f0>
 8001346:	4b81      	ldr	r3, [pc, #516]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	4a80      	ldr	r2, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6713      	str	r3, [r2, #112]	; 0x70
 8001352:	e01c      	b.n	800138e <HAL_RCC_OscConfig+0x32a>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b05      	cmp	r3, #5
 800135a:	d10c      	bne.n	8001376 <HAL_RCC_OscConfig+0x312>
 800135c:	4b7b      	ldr	r3, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800135e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001360:	4a7a      	ldr	r2, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6713      	str	r3, [r2, #112]	; 0x70
 8001368:	4b78      	ldr	r3, [pc, #480]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800136a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136c:	4a77      	ldr	r2, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6713      	str	r3, [r2, #112]	; 0x70
 8001374:	e00b      	b.n	800138e <HAL_RCC_OscConfig+0x32a>
 8001376:	4b75      	ldr	r3, [pc, #468]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137a:	4a74      	ldr	r2, [pc, #464]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	6713      	str	r3, [r2, #112]	; 0x70
 8001382:	4b72      	ldr	r3, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	4a71      	ldr	r2, [pc, #452]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001388:	f023 0304 	bic.w	r3, r3, #4
 800138c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d015      	beq.n	80013c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001396:	f7ff fb9b 	bl	8000ad0 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139c:	e00a      	b.n	80013b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff fb97 	bl	8000ad0 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e0c5      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b4:	4b65      	ldr	r3, [pc, #404]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0ee      	beq.n	800139e <HAL_RCC_OscConfig+0x33a>
 80013c0:	e014      	b.n	80013ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fb85 	bl	8000ad0 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff fb81 	bl	8000ad0 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e0af      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e0:	4b5a      	ldr	r3, [pc, #360]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1ee      	bne.n	80013ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d105      	bne.n	80013fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f2:	4b56      	ldr	r3, [pc, #344]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a55      	ldr	r2, [pc, #340]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 809b 	beq.w	800153e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001408:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b08      	cmp	r3, #8
 8001412:	d05c      	beq.n	80014ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d141      	bne.n	80014a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141c:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <HAL_RCC_OscConfig+0x4ec>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff fb55 	bl	8000ad0 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff fb51 	bl	8000ad0 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e081      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143c:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69da      	ldr	r2, [r3, #28]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	019b      	lsls	r3, r3, #6
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	085b      	lsrs	r3, r3, #1
 8001460:	3b01      	subs	r3, #1
 8001462:	041b      	lsls	r3, r3, #16
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	061b      	lsls	r3, r3, #24
 800146c:	4937      	ldr	r1, [pc, #220]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001472:	4b37      	ldr	r3, [pc, #220]	; (8001550 <HAL_RCC_OscConfig+0x4ec>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fb2a 	bl	8000ad0 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff fb26 	bl	8000ad0 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e056      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	4b2e      	ldr	r3, [pc, #184]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x41c>
 800149e:	e04e      	b.n	800153e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_OscConfig+0x4ec>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb13 	bl	8000ad0 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fb0f 	bl	8000ad0 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e03f      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x44a>
 80014cc:	e037      	b.n	800153e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e032      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d028      	beq.n	800153a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d121      	bne.n	800153a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d11a      	bne.n	800153a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800150a:	4013      	ands	r3, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001510:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001512:	4293      	cmp	r3, r2
 8001514:	d111      	bne.n	800153a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	085b      	lsrs	r3, r3, #1
 8001522:	3b01      	subs	r3, #1
 8001524:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d107      	bne.n	800153a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001534:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40007000 	.word	0x40007000
 800154c:	40023800 	.word	0x40023800
 8001550:	42470060 	.word	0x42470060

08001554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0cc      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001568:	4b68      	ldr	r3, [pc, #416]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d90c      	bls.n	8001590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b65      	ldr	r3, [pc, #404]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b63      	ldr	r3, [pc, #396]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b8      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a52      	ldr	r2, [pc, #328]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	494d      	ldr	r1, [pc, #308]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d044      	beq.n	8001674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d119      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e07f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d003      	beq.n	8001612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	2b03      	cmp	r3, #3
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e06f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e067      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f023 0203 	bic.w	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4934      	ldr	r1, [pc, #208]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	4313      	orrs	r3, r2
 8001642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001644:	f7ff fa44 	bl	8000ad0 <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	e00a      	b.n	8001662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164c:	f7ff fa40 	bl	8000ad0 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e04f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 020c 	and.w	r2, r3, #12
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	429a      	cmp	r2, r3
 8001672:	d1eb      	bne.n	800164c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d20c      	bcs.n	800169c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e032      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4916      	ldr	r1, [pc, #88]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	490e      	ldr	r1, [pc, #56]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016da:	f000 f821 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	490a      	ldr	r1, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	5ccb      	ldrb	r3, [r1, r3]
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff f8fc 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023c00 	.word	0x40023c00
 8001710:	40023800 	.word	0x40023800
 8001714:	08005b74 	.word	0x08005b74
 8001718:	20000000 	.word	0x20000000
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	2300      	movs	r3, #0
 8001732:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001738:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b08      	cmp	r3, #8
 8001742:	d00d      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x40>
 8001744:	2b08      	cmp	r3, #8
 8001746:	f200 80bd 	bhi.w	80018c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0x34>
 800174e:	2b04      	cmp	r3, #4
 8001750:	d003      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x3a>
 8001752:	e0b7      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001754:	4b61      	ldr	r3, [pc, #388]	; (80018dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001756:	60bb      	str	r3, [r7, #8]
       break;
 8001758:	e0b7      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800175a:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800175c:	60bb      	str	r3, [r7, #8]
      break;
 800175e:	e0b4      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001760:	4b5d      	ldr	r3, [pc, #372]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001768:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800176a:	4b5b      	ldr	r3, [pc, #364]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d04d      	beq.n	8001812 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001776:	4b58      	ldr	r3, [pc, #352]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	099b      	lsrs	r3, r3, #6
 800177c:	461a      	mov	r2, r3
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	ea02 0800 	and.w	r8, r2, r0
 800178e:	ea03 0901 	and.w	r9, r3, r1
 8001792:	4640      	mov	r0, r8
 8001794:	4649      	mov	r1, r9
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	014b      	lsls	r3, r1, #5
 80017a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017a4:	0142      	lsls	r2, r0, #5
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	ebb0 0008 	subs.w	r0, r0, r8
 80017ae:	eb61 0109 	sbc.w	r1, r1, r9
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	018b      	lsls	r3, r1, #6
 80017bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017c0:	0182      	lsls	r2, r0, #6
 80017c2:	1a12      	subs	r2, r2, r0
 80017c4:	eb63 0301 	sbc.w	r3, r3, r1
 80017c8:	f04f 0000 	mov.w	r0, #0
 80017cc:	f04f 0100 	mov.w	r1, #0
 80017d0:	00d9      	lsls	r1, r3, #3
 80017d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017d6:	00d0      	lsls	r0, r2, #3
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	eb12 0208 	adds.w	r2, r2, r8
 80017e0:	eb43 0309 	adc.w	r3, r3, r9
 80017e4:	f04f 0000 	mov.w	r0, #0
 80017e8:	f04f 0100 	mov.w	r1, #0
 80017ec:	0259      	lsls	r1, r3, #9
 80017ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017f2:	0250      	lsls	r0, r2, #9
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	461a      	mov	r2, r3
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	f7fe fd36 	bl	8000274 <__aeabi_uldivmod>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4613      	mov	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	e04a      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001812:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	461a      	mov	r2, r3
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001822:	f04f 0100 	mov.w	r1, #0
 8001826:	ea02 0400 	and.w	r4, r2, r0
 800182a:	ea03 0501 	and.w	r5, r3, r1
 800182e:	4620      	mov	r0, r4
 8001830:	4629      	mov	r1, r5
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	014b      	lsls	r3, r1, #5
 800183c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001840:	0142      	lsls	r2, r0, #5
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	1b00      	subs	r0, r0, r4
 8001848:	eb61 0105 	sbc.w	r1, r1, r5
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	018b      	lsls	r3, r1, #6
 8001856:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800185a:	0182      	lsls	r2, r0, #6
 800185c:	1a12      	subs	r2, r2, r0
 800185e:	eb63 0301 	sbc.w	r3, r3, r1
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	00d9      	lsls	r1, r3, #3
 800186c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001870:	00d0      	lsls	r0, r2, #3
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	1912      	adds	r2, r2, r4
 8001878:	eb45 0303 	adc.w	r3, r5, r3
 800187c:	f04f 0000 	mov.w	r0, #0
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	0299      	lsls	r1, r3, #10
 8001886:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800188a:	0290      	lsls	r0, r2, #10
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	461a      	mov	r2, r3
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	f7fe fcea 	bl	8000274 <__aeabi_uldivmod>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4613      	mov	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	3301      	adds	r3, #1
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	60bb      	str	r3, [r7, #8]
      break;
 80018c2:	e002      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018c6:	60bb      	str	r3, [r7, #8]
      break;
 80018c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ca:	68bb      	ldr	r3, [r7, #8]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	00f42400 	.word	0x00f42400
 80018e0:	007a1200 	.word	0x007a1200

080018e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000000 	.word	0x20000000

080018fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001900:	f7ff fff0 	bl	80018e4 <HAL_RCC_GetHCLKFreq>
 8001904:	4602      	mov	r2, r0
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	0a9b      	lsrs	r3, r3, #10
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	4903      	ldr	r1, [pc, #12]	; (8001920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001912:	5ccb      	ldrb	r3, [r1, r3]
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	08005b84 	.word	0x08005b84

08001924 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	220f      	movs	r2, #15
 8001932:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_RCC_GetClockConfig+0x5c>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_RCC_GetClockConfig+0x5c>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_RCC_GetClockConfig+0x5c>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_GetClockConfig+0x5c>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <HAL_RCC_GetClockConfig+0x60>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0207 	and.w	r2, r3, #7
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	601a      	str	r2, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40023c00 	.word	0x40023c00

08001988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e041      	b.n	8001a1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f839 	bl	8001a26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3304      	adds	r3, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4610      	mov	r0, r2
 80019c8:	f000 f9ca 	bl	8001d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d001      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e044      	b.n	8001ade <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <HAL_TIM_Base_Start_IT+0xb0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d018      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7e:	d013      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00e      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d009      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d004      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a16      	ldr	r2, [pc, #88]	; (8001afc <HAL_TIM_Base_Start_IT+0xc0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d111      	bne.n	8001acc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d010      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0201 	orr.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aca:	e007      	b.n	8001adc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40010000 	.word	0x40010000
 8001af0:	40000400 	.word	0x40000400
 8001af4:	40000800 	.word	0x40000800
 8001af8:	40000c00 	.word	0x40000c00
 8001afc:	40014000 	.word	0x40014000

08001b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d122      	bne.n	8001b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d11b      	bne.n	8001b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0202 	mvn.w	r2, #2
 8001b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f8ee 	bl	8001d24 <HAL_TIM_IC_CaptureCallback>
 8001b48:	e005      	b.n	8001b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f8e0 	bl	8001d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f8f1 	bl	8001d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d122      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d11b      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f06f 0204 	mvn.w	r2, #4
 8001b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2202      	movs	r2, #2
 8001b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f8c4 	bl	8001d24 <HAL_TIM_IC_CaptureCallback>
 8001b9c:	e005      	b.n	8001baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f8b6 	bl	8001d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f8c7 	bl	8001d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d122      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d11b      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0208 	mvn.w	r2, #8
 8001bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f89a 	bl	8001d24 <HAL_TIM_IC_CaptureCallback>
 8001bf0:	e005      	b.n	8001bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f88c 	bl	8001d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f89d 	bl	8001d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b10      	cmp	r3, #16
 8001c10:	d122      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b10      	cmp	r3, #16
 8001c1e:	d11b      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0210 	mvn.w	r2, #16
 8001c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f870 	bl	8001d24 <HAL_TIM_IC_CaptureCallback>
 8001c44:	e005      	b.n	8001c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f862 	bl	8001d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f873 	bl	8001d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d10e      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d107      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0201 	mvn.w	r2, #1
 8001c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7fe fdfa 	bl	8000878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8e:	2b80      	cmp	r3, #128	; 0x80
 8001c90:	d10e      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9c:	2b80      	cmp	r3, #128	; 0x80
 8001c9e:	d107      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8e2 	bl	8001e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cba:	2b40      	cmp	r3, #64	; 0x40
 8001cbc:	d10e      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc8:	2b40      	cmp	r3, #64	; 0x40
 8001cca:	d107      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f838 	bl	8001d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	d10e      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d107      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0220 	mvn.w	r2, #32
 8001d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8ac 	bl	8001e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a34      	ldr	r2, [pc, #208]	; (8001e44 <TIM_Base_SetConfig+0xe4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00f      	beq.n	8001d98 <TIM_Base_SetConfig+0x38>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7e:	d00b      	beq.n	8001d98 <TIM_Base_SetConfig+0x38>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a31      	ldr	r2, [pc, #196]	; (8001e48 <TIM_Base_SetConfig+0xe8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d007      	beq.n	8001d98 <TIM_Base_SetConfig+0x38>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a30      	ldr	r2, [pc, #192]	; (8001e4c <TIM_Base_SetConfig+0xec>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d003      	beq.n	8001d98 <TIM_Base_SetConfig+0x38>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <TIM_Base_SetConfig+0xf0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d108      	bne.n	8001daa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a25      	ldr	r2, [pc, #148]	; (8001e44 <TIM_Base_SetConfig+0xe4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01b      	beq.n	8001dea <TIM_Base_SetConfig+0x8a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db8:	d017      	beq.n	8001dea <TIM_Base_SetConfig+0x8a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a22      	ldr	r2, [pc, #136]	; (8001e48 <TIM_Base_SetConfig+0xe8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <TIM_Base_SetConfig+0x8a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <TIM_Base_SetConfig+0xec>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00f      	beq.n	8001dea <TIM_Base_SetConfig+0x8a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a20      	ldr	r2, [pc, #128]	; (8001e50 <TIM_Base_SetConfig+0xf0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00b      	beq.n	8001dea <TIM_Base_SetConfig+0x8a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <TIM_Base_SetConfig+0xf4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <TIM_Base_SetConfig+0x8a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <TIM_Base_SetConfig+0xf8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d003      	beq.n	8001dea <TIM_Base_SetConfig+0x8a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <TIM_Base_SetConfig+0xfc>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d108      	bne.n	8001dfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <TIM_Base_SetConfig+0xe4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d103      	bne.n	8001e30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	615a      	str	r2, [r3, #20]
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40010000 	.word	0x40010000
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40000800 	.word	0x40000800
 8001e50:	40000c00 	.word	0x40000c00
 8001e54:	40014000 	.word	0x40014000
 8001e58:	40014400 	.word	0x40014400
 8001e5c:	40014800 	.word	0x40014800

08001e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f103 0208 	add.w	r2, r3, #8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f103 0208 	add.w	r2, r3, #8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f103 0208 	add.w	r2, r3, #8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6892      	ldr	r2, [r2, #8]
 8001ef8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6852      	ldr	r2, [r2, #4]
 8001f02:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d103      	bne.n	8001f16 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	1e5a      	subs	r2, r3, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b08c      	sub	sp, #48	; 0x30
 8001f3a:	af04      	add	r7, sp, #16
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 f806 	bl	8002f5c <pvPortMalloc>
 8001f50:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f58:	2058      	movs	r0, #88	; 0x58
 8001f5a:	f000 ffff 	bl	8002f5c <pvPortMalloc>
 8001f5e:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001f66:	2258      	movs	r2, #88	; 0x58
 8001f68:	2100      	movs	r1, #0
 8001f6a:	69f8      	ldr	r0, [r7, #28]
 8001f6c:	f003 fd3c 	bl	80059e8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
 8001f76:	e005      	b.n	8001f84 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001f78:	6978      	ldr	r0, [r7, #20]
 8001f7a:	f001 f8a9 	bl	80030d0 <vPortFree>
 8001f7e:	e001      	b.n	8001f84 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d013      	beq.n	8001fb2 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f8a:	88fa      	ldrh	r2, [r7, #6]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9303      	str	r3, [sp, #12]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	9302      	str	r3, [sp, #8]
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68b9      	ldr	r1, [r7, #8]
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f80e 	bl	8001fc2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001fa6:	69f8      	ldr	r0, [r7, #28]
 8001fa8:	f000 f89a 	bl	80020e0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001fac:	2301      	movs	r3, #1
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	e002      	b.n	8001fb8 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
    }
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b088      	sub	sp, #32
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	21a5      	movs	r1, #165	; 0xa5
 8001fdc:	f003 fd04 	bl	80059e8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fea:	3b01      	subs	r3, #1
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f023 0307 	bic.w	r3, r3, #7
 8001ff8:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	617b      	str	r3, [r7, #20]
    }
 8002016:	bf00      	nop
 8002018:	e7fe      	b.n	8002018 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01e      	beq.n	800205e <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	e012      	b.n	800204c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	4413      	add	r3, r2
 800202c:	7819      	ldrb	r1, [r3, #0]
 800202e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	3334      	adds	r3, #52	; 0x34
 8002036:	460a      	mov	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3301      	adds	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b09      	cmp	r3, #9
 8002050:	d9e9      	bls.n	8002026 <prvInitialiseNewTask+0x64>
 8002052:	e000      	b.n	8002056 <prvInitialiseNewTask+0x94>
            {
                break;
 8002054:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002060:	2b04      	cmp	r3, #4
 8002062:	d90a      	bls.n	800207a <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	613b      	str	r3, [r7, #16]
    }
 8002076:	bf00      	nop
 8002078:	e7fe      	b.n	8002078 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207c:	2b04      	cmp	r3, #4
 800207e:	d901      	bls.n	8002084 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002080:	2304      	movs	r3, #4
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002088:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800208e:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002092:	3304      	adds	r3, #4
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff17 	bl	8001ec8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	3318      	adds	r3, #24
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff12 	bl	8001ec8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80020a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020a8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	f1c3 0205 	rsb	r2, r3, #5
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	69b8      	ldr	r0, [r7, #24]
 80020c0:	f000 fc74 	bl	80029ac <pxPortInitialiseStack>
 80020c4:	4602      	mov	r2, r0
 80020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80020ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80020d6:	bf00      	nop
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80020e8:	f000 fe0c 	bl	8002d04 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80020ec:	4b4f      	ldr	r3, [pc, #316]	; (800222c <prvAddNewTaskToReadyList+0x14c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	4a4e      	ldr	r2, [pc, #312]	; (800222c <prvAddNewTaskToReadyList+0x14c>)
 80020f4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80020f6:	4b4e      	ldr	r3, [pc, #312]	; (8002230 <prvAddNewTaskToReadyList+0x150>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80020fe:	4a4c      	ldr	r2, [pc, #304]	; (8002230 <prvAddNewTaskToReadyList+0x150>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002104:	4b49      	ldr	r3, [pc, #292]	; (800222c <prvAddNewTaskToReadyList+0x14c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d110      	bne.n	800212e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800210c:	f000 fbb4 	bl	8002878 <prvInitialiseTaskLists>
 8002110:	e00d      	b.n	800212e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002112:	4b48      	ldr	r3, [pc, #288]	; (8002234 <prvAddNewTaskToReadyList+0x154>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800211a:	4b45      	ldr	r3, [pc, #276]	; (8002230 <prvAddNewTaskToReadyList+0x150>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	429a      	cmp	r2, r3
 8002126:	d802      	bhi.n	800212e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002128:	4a41      	ldr	r2, [pc, #260]	; (8002230 <prvAddNewTaskToReadyList+0x150>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800212e:	4b42      	ldr	r3, [pc, #264]	; (8002238 <prvAddNewTaskToReadyList+0x158>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3301      	adds	r3, #1
 8002134:	4a40      	ldr	r2, [pc, #256]	; (8002238 <prvAddNewTaskToReadyList+0x158>)
 8002136:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <prvAddNewTaskToReadyList+0x158>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <prvAddNewTaskToReadyList+0x94>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4618      	mov	r0, r3
 800214a:	f003 f9c3 	bl	80054d4 <SEGGER_SYSVIEW_OnTaskCreate>
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	461d      	mov	r5, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461c      	mov	r4, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	1ae3      	subs	r3, r4, r3
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	462b      	mov	r3, r5
 8002170:	f001 f968 	bl	8003444 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	f003 fa30 	bl	80055dc <SEGGER_SYSVIEW_OnTaskStartReady>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	2201      	movs	r2, #1
 8002182:	409a      	lsls	r2, r3
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <prvAddNewTaskToReadyList+0x15c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4313      	orrs	r3, r2
 800218a:	4a2c      	ldr	r2, [pc, #176]	; (800223c <prvAddNewTaskToReadyList+0x15c>)
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002192:	492b      	ldr	r1, [pc, #172]	; (8002240 <prvAddNewTaskToReadyList+0x160>)
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	3304      	adds	r3, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	3204      	adds	r2, #4
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	1d1a      	adds	r2, r3, #4
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <prvAddNewTaskToReadyList+0x160>)
 80021d2:	441a      	add	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	615a      	str	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021dc:	4918      	ldr	r1, [pc, #96]	; (8002240 <prvAddNewTaskToReadyList+0x160>)
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	1c59      	adds	r1, r3, #1
 80021ec:	4814      	ldr	r0, [pc, #80]	; (8002240 <prvAddNewTaskToReadyList+0x160>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4403      	add	r3, r0
 80021f8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80021fa:	f000 fdb3 	bl	8002d64 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <prvAddNewTaskToReadyList+0x154>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00e      	beq.n	8002224 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <prvAddNewTaskToReadyList+0x150>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	429a      	cmp	r2, r3
 8002212:	d207      	bcs.n	8002224 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <prvAddNewTaskToReadyList+0x164>)
 8002216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bdb0      	pop	{r4, r5, r7, pc}
 800222c:	20000110 	.word	0x20000110
 8002230:	20000038 	.word	0x20000038
 8002234:	2000011c 	.word	0x2000011c
 8002238:	2000012c 	.word	0x2000012c
 800223c:	20000118 	.word	0x20000118
 8002240:	2000003c 	.word	0x2000003c
 8002244:	e000ed04 	.word	0xe000ed04

08002248 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <vTaskStartScheduler+0x98>)
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	2300      	movs	r3, #0
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2300      	movs	r3, #0
 8002258:	2282      	movs	r2, #130	; 0x82
 800225a:	4922      	ldr	r1, [pc, #136]	; (80022e4 <vTaskStartScheduler+0x9c>)
 800225c:	4822      	ldr	r0, [pc, #136]	; (80022e8 <vTaskStartScheduler+0xa0>)
 800225e:	f7ff fe6a 	bl	8001f36 <xTaskCreate>
 8002262:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d124      	bne.n	80022b4 <vTaskStartScheduler+0x6c>
        __asm volatile
 800226a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226e:	f383 8811 	msr	BASEPRI, r3
 8002272:	f3bf 8f6f 	isb	sy
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	60bb      	str	r3, [r7, #8]
    }
 800227c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <vTaskStartScheduler+0xa4>)
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002286:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <vTaskStartScheduler+0xa8>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <vTaskStartScheduler+0xac>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <vTaskStartScheduler+0xb0>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <vTaskStartScheduler+0x98>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d102      	bne.n	80022a4 <vTaskStartScheduler+0x5c>
 800229e:	f003 f8fd 	bl	800549c <SEGGER_SYSVIEW_OnIdle>
 80022a2:	e004      	b.n	80022ae <vTaskStartScheduler+0x66>
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <vTaskStartScheduler+0xb0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 f955 	bl	8005558 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80022ae:	f000 fc09 	bl	8002ac4 <xPortStartScheduler>
 80022b2:	e00e      	b.n	80022d2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ba:	d10a      	bne.n	80022d2 <vTaskStartScheduler+0x8a>
        __asm volatile
 80022bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	607b      	str	r3, [r7, #4]
    }
 80022ce:	bf00      	nop
 80022d0:	e7fe      	b.n	80022d0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <vTaskStartScheduler+0xb4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000134 	.word	0x20000134
 80022e4:	08005aa0 	.word	0x08005aa0
 80022e8:	08002849 	.word	0x08002849
 80022ec:	20000130 	.word	0x20000130
 80022f0:	2000011c 	.word	0x2000011c
 80022f4:	20000114 	.word	0x20000114
 80022f8:	20000038 	.word	0x20000038
 80022fc:	2000000c 	.word	0x2000000c

08002300 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <vTaskSuspendAll+0x18>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	4a03      	ldr	r2, [pc, #12]	; (8002318 <vTaskSuspendAll+0x18>)
 800230c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	20000138 	.word	0x20000138

0800231c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800232a:	4b73      	ldr	r3, [pc, #460]	; (80024f8 <xTaskResumeAll+0x1dc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10a      	bne.n	8002348 <xTaskResumeAll+0x2c>
        __asm volatile
 8002332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	607b      	str	r3, [r7, #4]
    }
 8002344:	bf00      	nop
 8002346:	e7fe      	b.n	8002346 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002348:	f000 fcdc 	bl	8002d04 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800234c:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <xTaskResumeAll+0x1dc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3b01      	subs	r3, #1
 8002352:	4a69      	ldr	r2, [pc, #420]	; (80024f8 <xTaskResumeAll+0x1dc>)
 8002354:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002356:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <xTaskResumeAll+0x1dc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 80c4 	bne.w	80024e8 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002360:	4b66      	ldr	r3, [pc, #408]	; (80024fc <xTaskResumeAll+0x1e0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80bf 	beq.w	80024e8 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800236a:	e08e      	b.n	800248a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800236c:	4b64      	ldr	r3, [pc, #400]	; (8002500 <xTaskResumeAll+0x1e4>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	6a12      	ldr	r2, [r2, #32]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	69d2      	ldr	r2, [r2, #28]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3318      	adds	r3, #24
 8002396:	429a      	cmp	r2, r3
 8002398:	d103      	bne.n	80023a2 <xTaskResumeAll+0x86>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	6a1a      	ldr	r2, [r3, #32]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	2200      	movs	r2, #0
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	1e5a      	subs	r2, r3, #1
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	68d2      	ldr	r2, [r2, #12]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	6892      	ldr	r2, [r2, #8]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	3304      	adds	r3, #4
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d103      	bne.n	80023e0 <xTaskResumeAll+0xc4>
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1e5a      	subs	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 f8f2 	bl	80055dc <SEGGER_SYSVIEW_OnTaskStartReady>
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	2201      	movs	r2, #1
 80023fe:	409a      	lsls	r2, r3
 8002400:	4b40      	ldr	r3, [pc, #256]	; (8002504 <xTaskResumeAll+0x1e8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4313      	orrs	r3, r2
 8002406:	4a3f      	ldr	r2, [pc, #252]	; (8002504 <xTaskResumeAll+0x1e8>)
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240e:	493e      	ldr	r1, [pc, #248]	; (8002508 <xTaskResumeAll+0x1ec>)
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3304      	adds	r3, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	3204      	adds	r2, #4
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	1d1a      	adds	r2, r3, #4
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4a2e      	ldr	r2, [pc, #184]	; (8002508 <xTaskResumeAll+0x1ec>)
 800244e:	441a      	add	r2, r3
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	615a      	str	r2, [r3, #20]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002458:	492b      	ldr	r1, [pc, #172]	; (8002508 <xTaskResumeAll+0x1ec>)
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	1c59      	adds	r1, r3, #1
 8002468:	4827      	ldr	r0, [pc, #156]	; (8002508 <xTaskResumeAll+0x1ec>)
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4403      	add	r3, r0
 8002474:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <xTaskResumeAll+0x1f0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	429a      	cmp	r2, r3
 8002482:	d302      	bcc.n	800248a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002484:	4b22      	ldr	r3, [pc, #136]	; (8002510 <xTaskResumeAll+0x1f4>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800248a:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <xTaskResumeAll+0x1e4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f47f af6c 	bne.w	800236c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800249a:	f000 fa6b 	bl	8002974 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <xTaskResumeAll+0x1f8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d010      	beq.n	80024cc <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80024aa:	f000 f849 	bl	8002540 <xTaskIncrementTick>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <xTaskResumeAll+0x1f4>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	3b01      	subs	r3, #1
 80024be:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f1      	bne.n	80024aa <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <xTaskResumeAll+0x1f8>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <xTaskResumeAll+0x1f4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <xTaskResumeAll+0x1fc>)
 80024da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80024e8:	f000 fc3c 	bl	8002d64 <vPortExitCritical>

    return xAlreadyYielded;
 80024ec:	69bb      	ldr	r3, [r7, #24]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000138 	.word	0x20000138
 80024fc:	20000110 	.word	0x20000110
 8002500:	200000d0 	.word	0x200000d0
 8002504:	20000118 	.word	0x20000118
 8002508:	2000003c 	.word	0x2000003c
 800250c:	20000038 	.word	0x20000038
 8002510:	20000124 	.word	0x20000124
 8002514:	20000120 	.word	0x20000120
 8002518:	e000ed04 	.word	0xe000ed04

0800251c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002522:	f000 fcdb 	bl	8002edc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <xTaskGetTickCountFromISR+0x20>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002530:	683b      	ldr	r3, [r7, #0]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000114 	.word	0x20000114

08002540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800254a:	4b7f      	ldr	r3, [pc, #508]	; (8002748 <xTaskIncrementTick+0x208>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 80f0 	bne.w	8002734 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002554:	4b7d      	ldr	r3, [pc, #500]	; (800274c <xTaskIncrementTick+0x20c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800255c:	4a7b      	ldr	r2, [pc, #492]	; (800274c <xTaskIncrementTick+0x20c>)
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d120      	bne.n	80025aa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002568:	4b79      	ldr	r3, [pc, #484]	; (8002750 <xTaskIncrementTick+0x210>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <xTaskIncrementTick+0x48>
        __asm volatile
 8002572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002576:	f383 8811 	msr	BASEPRI, r3
 800257a:	f3bf 8f6f 	isb	sy
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	607b      	str	r3, [r7, #4]
    }
 8002584:	bf00      	nop
 8002586:	e7fe      	b.n	8002586 <xTaskIncrementTick+0x46>
 8002588:	4b71      	ldr	r3, [pc, #452]	; (8002750 <xTaskIncrementTick+0x210>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	4b71      	ldr	r3, [pc, #452]	; (8002754 <xTaskIncrementTick+0x214>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6f      	ldr	r2, [pc, #444]	; (8002750 <xTaskIncrementTick+0x210>)
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4a6f      	ldr	r2, [pc, #444]	; (8002754 <xTaskIncrementTick+0x214>)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b6e      	ldr	r3, [pc, #440]	; (8002758 <xTaskIncrementTick+0x218>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3301      	adds	r3, #1
 80025a2:	4a6d      	ldr	r2, [pc, #436]	; (8002758 <xTaskIncrementTick+0x218>)
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	f000 f9e5 	bl	8002974 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80025aa:	4b6c      	ldr	r3, [pc, #432]	; (800275c <xTaskIncrementTick+0x21c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a3a      	ldr	r2, [r7, #32]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	f0c0 80aa 	bcc.w	800270a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025b6:	4b66      	ldr	r3, [pc, #408]	; (8002750 <xTaskIncrementTick+0x210>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c0:	4b66      	ldr	r3, [pc, #408]	; (800275c <xTaskIncrementTick+0x21c>)
 80025c2:	f04f 32ff 	mov.w	r2, #4294967295
 80025c6:	601a      	str	r2, [r3, #0]
                    break;
 80025c8:	e09f      	b.n	800270a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025ca:	4b61      	ldr	r3, [pc, #388]	; (8002750 <xTaskIncrementTick+0x210>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80025da:	6a3a      	ldr	r2, [r7, #32]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d203      	bcs.n	80025ea <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80025e2:	4a5e      	ldr	r2, [pc, #376]	; (800275c <xTaskIncrementTick+0x21c>)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80025e8:	e08f      	b.n	800270a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	68d2      	ldr	r2, [r2, #12]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	6892      	ldr	r2, [r2, #8]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	3304      	adds	r3, #4
 800260c:	429a      	cmp	r2, r3
 800260e:	d103      	bne.n	8002618 <xTaskIncrementTick+0xd8>
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1e5a      	subs	r2, r3, #1
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01e      	beq.n	800266e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	6a12      	ldr	r2, [r2, #32]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	69d2      	ldr	r2, [r2, #28]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	3318      	adds	r3, #24
 8002652:	429a      	cmp	r2, r3
 8002654:	d103      	bne.n	800265e <xTaskIncrementTick+0x11e>
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6a1a      	ldr	r2, [r3, #32]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2200      	movs	r2, #0
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	1e5a      	subs	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4618      	mov	r0, r3
 8002672:	f002 ffb3 	bl	80055dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	2201      	movs	r2, #1
 800267c:	409a      	lsls	r2, r3
 800267e:	4b38      	ldr	r3, [pc, #224]	; (8002760 <xTaskIncrementTick+0x220>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	4a36      	ldr	r2, [pc, #216]	; (8002760 <xTaskIncrementTick+0x220>)
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	4935      	ldr	r1, [pc, #212]	; (8002764 <xTaskIncrementTick+0x224>)
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	3304      	adds	r3, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	60da      	str	r2, [r3, #12]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	3204      	adds	r2, #4
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	1d1a      	adds	r2, r3, #4
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4a26      	ldr	r2, [pc, #152]	; (8002764 <xTaskIncrementTick+0x224>)
 80026cc:	441a      	add	r2, r3
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	615a      	str	r2, [r3, #20]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d6:	4923      	ldr	r1, [pc, #140]	; (8002764 <xTaskIncrementTick+0x224>)
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	1c59      	adds	r1, r3, #1
 80026e6:	481f      	ldr	r0, [pc, #124]	; (8002764 <xTaskIncrementTick+0x224>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4403      	add	r3, r0
 80026f2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <xTaskIncrementTick+0x228>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	429a      	cmp	r2, r3
 8002700:	f67f af59 	bls.w	80025b6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002704:	2301      	movs	r3, #1
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002708:	e755      	b.n	80025b6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <xTaskIncrementTick+0x228>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002710:	4914      	ldr	r1, [pc, #80]	; (8002764 <xTaskIncrementTick+0x224>)
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d901      	bls.n	8002726 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <xTaskIncrementTick+0x22c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800272e:	2301      	movs	r3, #1
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
 8002732:	e004      	b.n	800273e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <xTaskIncrementTick+0x230>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <xTaskIncrementTick+0x230>)
 800273c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002740:	4618      	mov	r0, r3
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000138 	.word	0x20000138
 800274c:	20000114 	.word	0x20000114
 8002750:	200000c8 	.word	0x200000c8
 8002754:	200000cc 	.word	0x200000cc
 8002758:	20000128 	.word	0x20000128
 800275c:	20000130 	.word	0x20000130
 8002760:	20000118 	.word	0x20000118
 8002764:	2000003c 	.word	0x2000003c
 8002768:	20000038 	.word	0x20000038
 800276c:	20000124 	.word	0x20000124
 8002770:	20000120 	.word	0x20000120

08002774 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800277a:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <vTaskSwitchContext+0xbc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <vTaskSwitchContext+0xc0>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002788:	e04d      	b.n	8002826 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <vTaskSwitchContext+0xc0>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002790:	4b29      	ldr	r3, [pc, #164]	; (8002838 <vTaskSwitchContext+0xc4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	fab3 f383 	clz	r3, r3
 800279c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800279e:	7afb      	ldrb	r3, [r7, #11]
 80027a0:	f1c3 031f 	rsb	r3, r3, #31
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	4925      	ldr	r1, [pc, #148]	; (800283c <vTaskSwitchContext+0xc8>)
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	607b      	str	r3, [r7, #4]
    }
 80027cc:	bf00      	nop
 80027ce:	e7fe      	b.n	80027ce <vTaskSwitchContext+0x5a>
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4a18      	ldr	r2, [pc, #96]	; (800283c <vTaskSwitchContext+0xc8>)
 80027dc:	4413      	add	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	3308      	adds	r3, #8
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d104      	bne.n	8002800 <vTaskSwitchContext+0x8c>
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <vTaskSwitchContext+0xcc>)
 8002808:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <vTaskSwitchContext+0xcc>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <vTaskSwitchContext+0xd0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d102      	bne.n	800281c <vTaskSwitchContext+0xa8>
 8002816:	f002 fe41 	bl	800549c <SEGGER_SYSVIEW_OnIdle>
}
 800281a:	e004      	b.n	8002826 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <vTaskSwitchContext+0xcc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f002 fe99 	bl	8005558 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000138 	.word	0x20000138
 8002834:	20000124 	.word	0x20000124
 8002838:	20000118 	.word	0x20000118
 800283c:	2000003c 	.word	0x2000003c
 8002840:	20000038 	.word	0x20000038
 8002844:	20000134 	.word	0x20000134

08002848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002850:	f000 f852 	bl	80028f8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <prvIdleTask+0x28>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d9f9      	bls.n	8002850 <prvIdleTask+0x8>
            {
                taskYIELD();
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <prvIdleTask+0x2c>)
 800285e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800286c:	e7f0      	b.n	8002850 <prvIdleTask+0x8>
 800286e:	bf00      	nop
 8002870:	2000003c 	.word	0x2000003c
 8002874:	e000ed04 	.word	0xe000ed04

08002878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	e00c      	b.n	800289e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <prvInitialiseTaskLists+0x60>)
 8002890:	4413      	add	r3, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff faf8 	bl	8001e88 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3301      	adds	r3, #1
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d9ef      	bls.n	8002884 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80028a4:	480d      	ldr	r0, [pc, #52]	; (80028dc <prvInitialiseTaskLists+0x64>)
 80028a6:	f7ff faef 	bl	8001e88 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80028aa:	480d      	ldr	r0, [pc, #52]	; (80028e0 <prvInitialiseTaskLists+0x68>)
 80028ac:	f7ff faec 	bl	8001e88 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <prvInitialiseTaskLists+0x6c>)
 80028b2:	f7ff fae9 	bl	8001e88 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80028b6:	480c      	ldr	r0, [pc, #48]	; (80028e8 <prvInitialiseTaskLists+0x70>)
 80028b8:	f7ff fae6 	bl	8001e88 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80028bc:	480b      	ldr	r0, [pc, #44]	; (80028ec <prvInitialiseTaskLists+0x74>)
 80028be:	f7ff fae3 	bl	8001e88 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <prvInitialiseTaskLists+0x78>)
 80028c4:	4a05      	ldr	r2, [pc, #20]	; (80028dc <prvInitialiseTaskLists+0x64>)
 80028c6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <prvInitialiseTaskLists+0x7c>)
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <prvInitialiseTaskLists+0x68>)
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2000003c 	.word	0x2000003c
 80028dc:	200000a0 	.word	0x200000a0
 80028e0:	200000b4 	.word	0x200000b4
 80028e4:	200000d0 	.word	0x200000d0
 80028e8:	200000e4 	.word	0x200000e4
 80028ec:	200000fc 	.word	0x200000fc
 80028f0:	200000c8 	.word	0x200000c8
 80028f4:	200000cc 	.word	0x200000cc

080028f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028fe:	e019      	b.n	8002934 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002900:	f000 fa00 	bl	8002d04 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <prvCheckTasksWaitingTermination+0x50>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fae6 	bl	8001ee2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <prvCheckTasksWaitingTermination+0x54>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3b01      	subs	r3, #1
 800291c:	4a0b      	ldr	r2, [pc, #44]	; (800294c <prvCheckTasksWaitingTermination+0x54>)
 800291e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <prvCheckTasksWaitingTermination+0x58>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <prvCheckTasksWaitingTermination+0x58>)
 8002928:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800292a:	f000 fa1b 	bl	8002d64 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f810 	bl	8002954 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <prvCheckTasksWaitingTermination+0x58>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e1      	bne.n	8002900 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200000e4 	.word	0x200000e4
 800294c:	20000110 	.word	0x20000110
 8002950:	200000f8 	.word	0x200000f8

08002954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fbb5 	bl	80030d0 <vPortFree>
            vPortFree( pxTCB );
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fbb2 	bl	80030d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <prvResetNextTaskUnblockTime+0x30>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d104      	bne.n	800298c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <prvResetNextTaskUnblockTime+0x34>)
 8002984:	f04f 32ff 	mov.w	r2, #4294967295
 8002988:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800298a:	e005      	b.n	8002998 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <prvResetNextTaskUnblockTime+0x30>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <prvResetNextTaskUnblockTime+0x34>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	200000c8 	.word	0x200000c8
 80029a8:	20000130 	.word	0x20000130

080029ac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3b04      	subs	r3, #4
 80029bc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3b04      	subs	r3, #4
 80029ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f023 0201 	bic.w	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3b04      	subs	r3, #4
 80029da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80029dc:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <pxPortInitialiseStack+0x64>)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3b14      	subs	r3, #20
 80029e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3b04      	subs	r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f06f 0202 	mvn.w	r2, #2
 80029fa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3b20      	subs	r3, #32
 8002a00:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	08002a15 	.word	0x08002a15

08002a14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <prvTaskExitError+0x54>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d00a      	beq.n	8002a3e <prvTaskExitError+0x2a>
        __asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	60fb      	str	r3, [r7, #12]
    }
 8002a3a:	bf00      	nop
 8002a3c:	e7fe      	b.n	8002a3c <prvTaskExitError+0x28>
        __asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	60bb      	str	r3, [r7, #8]
    }
 8002a50:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a52:	bf00      	nop
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0fc      	beq.n	8002a54 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	20000010 	.word	0x20000010
 8002a6c:	00000000 	.word	0x00000000

08002a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <pxCurrentTCBConst2>)
 8002a72:	6819      	ldr	r1, [r3, #0]
 8002a74:	6808      	ldr	r0, [r1, #0]
 8002a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a7a:	f380 8809 	msr	PSP, r0
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f04f 0000 	mov.w	r0, #0
 8002a86:	f380 8811 	msr	BASEPRI, r0
 8002a8a:	4770      	bx	lr
 8002a8c:	f3af 8000 	nop.w

08002a90 <pxCurrentTCBConst2>:
 8002a90:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop

08002a98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002a98:	4808      	ldr	r0, [pc, #32]	; (8002abc <prvPortStartFirstTask+0x24>)
 8002a9a:	6800      	ldr	r0, [r0, #0]
 8002a9c:	6800      	ldr	r0, [r0, #0]
 8002a9e:	f380 8808 	msr	MSP, r0
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f380 8814 	msr	CONTROL, r0
 8002aaa:	b662      	cpsie	i
 8002aac:	b661      	cpsie	f
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	df00      	svc	0
 8002ab8:	bf00      	nop
 8002aba:	0000      	.short	0x0000
 8002abc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop

08002ac4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002aca:	4b46      	ldr	r3, [pc, #280]	; (8002be4 <xPortStartScheduler+0x120>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a46      	ldr	r2, [pc, #280]	; (8002be8 <xPortStartScheduler+0x124>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d10a      	bne.n	8002aea <xPortStartScheduler+0x26>
        __asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	613b      	str	r3, [r7, #16]
    }
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002aea:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <xPortStartScheduler+0x120>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a3f      	ldr	r2, [pc, #252]	; (8002bec <xPortStartScheduler+0x128>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10a      	bne.n	8002b0a <xPortStartScheduler+0x46>
        __asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	60fb      	str	r3, [r7, #12]
    }
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b0a:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <xPortStartScheduler+0x12c>)
 8002b0c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	22ff      	movs	r2, #255	; 0xff
 8002b1a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <xPortStartScheduler+0x130>)
 8002b30:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b34:	2207      	movs	r2, #7
 8002b36:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b38:	e009      	b.n	8002b4e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8002b3a:	4b2f      	ldr	r3, [pc, #188]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	4a2d      	ldr	r2, [pc, #180]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b42:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	d0ef      	beq.n	8002b3a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b5a:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1c3 0307 	rsb	r3, r3, #7
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d00a      	beq.n	8002b7c <xPortStartScheduler+0xb8>
        __asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	60bb      	str	r3, [r7, #8]
    }
 8002b78:	bf00      	nop
 8002b7a:	e7fe      	b.n	8002b7a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b84:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b86:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b8e:	4a1a      	ldr	r2, [pc, #104]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b90:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002b9a:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <xPortStartScheduler+0x138>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <xPortStartScheduler+0x138>)
 8002ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <xPortStartScheduler+0x138>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <xPortStartScheduler+0x138>)
 8002bac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002bb0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002bb2:	f000 f963 	bl	8002e7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <xPortStartScheduler+0x13c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002bbc:	f000 f982 	bl	8002ec4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <xPortStartScheduler+0x140>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <xPortStartScheduler+0x140>)
 8002bc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002bca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002bcc:	f7ff ff64 	bl	8002a98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002bd0:	f7ff fdd0 	bl	8002774 <vTaskSwitchContext>
    prvTaskExitError();
 8002bd4:	f7ff ff1e 	bl	8002a14 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00
 8002be8:	410fc271 	.word	0x410fc271
 8002bec:	410fc270 	.word	0x410fc270
 8002bf0:	e000e400 	.word	0xe000e400
 8002bf4:	2000013c 	.word	0x2000013c
 8002bf8:	20000140 	.word	0x20000140
 8002bfc:	e000ed20 	.word	0xe000ed20
 8002c00:	20000010 	.word	0x20000010
 8002c04:	e000ef34 	.word	0xe000ef34

08002c08 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <vInitPrioGroupValue+0xe4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a37      	ldr	r2, [pc, #220]	; (8002cf0 <vInitPrioGroupValue+0xe8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d10a      	bne.n	8002c2e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	613b      	str	r3, [r7, #16]
    }
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c2e:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <vInitPrioGroupValue+0xe4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a30      	ldr	r2, [pc, #192]	; (8002cf4 <vInitPrioGroupValue+0xec>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10a      	bne.n	8002c4e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	60fb      	str	r3, [r7, #12]
    }
 8002c4a:	bf00      	nop
 8002c4c:	e7fe      	b.n	8002c4c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <vInitPrioGroupValue+0xf0>)
 8002c50:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	22ff      	movs	r2, #255	; 0xff
 8002c5e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <vInitPrioGroupValue+0xf4>)
 8002c74:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c7c:	e009      	b.n	8002c92 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002c86:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d0ef      	beq.n	8002c7e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1c3 0307 	rsb	r3, r3, #7
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d00a      	beq.n	8002cc0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	60bb      	str	r3, [r7, #8]
    }
 8002cbc:	bf00      	nop
 8002cbe:	e7fe      	b.n	8002cbe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002cc8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cd2:	4a0b      	ldr	r2, [pc, #44]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002cd4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000ed00 	.word	0xe000ed00
 8002cf0:	410fc271 	.word	0x410fc271
 8002cf4:	410fc270 	.word	0x410fc270
 8002cf8:	e000e400 	.word	0xe000e400
 8002cfc:	2000013c 	.word	0x2000013c
 8002d00:	20000140 	.word	0x20000140

08002d04 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
        __asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	607b      	str	r3, [r7, #4]
    }
 8002d1c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <vPortEnterCritical+0x58>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <vPortEnterCritical+0x58>)
 8002d26:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <vPortEnterCritical+0x58>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10f      	bne.n	8002d50 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <vPortEnterCritical+0x5c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <vPortEnterCritical+0x4c>
        __asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	603b      	str	r3, [r7, #0]
    }
 8002d4c:	bf00      	nop
 8002d4e:	e7fe      	b.n	8002d4e <vPortEnterCritical+0x4a>
    }
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	20000010 	.word	0x20000010
 8002d60:	e000ed04 	.word	0xe000ed04

08002d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <vPortExitCritical+0x50>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <vPortExitCritical+0x24>
        __asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	607b      	str	r3, [r7, #4]
    }
 8002d84:	bf00      	nop
 8002d86:	e7fe      	b.n	8002d86 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <vPortExitCritical+0x50>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <vPortExitCritical+0x50>)
 8002d90:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <vPortExitCritical+0x50>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <vPortExitCritical+0x42>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002da4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000010 	.word	0x20000010
	...

08002dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002dc0:	f3ef 8009 	mrs	r0, PSP
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <pxCurrentTCBConst>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	f01e 0f10 	tst.w	lr, #16
 8002dd0:	bf08      	it	eq
 8002dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dda:	6010      	str	r0, [r2, #0]
 8002ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002de4:	f380 8811 	msr	BASEPRI, r0
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f7ff fcc0 	bl	8002774 <vTaskSwitchContext>
 8002df4:	f04f 0000 	mov.w	r0, #0
 8002df8:	f380 8811 	msr	BASEPRI, r0
 8002dfc:	bc09      	pop	{r0, r3}
 8002dfe:	6819      	ldr	r1, [r3, #0]
 8002e00:	6808      	ldr	r0, [r1, #0]
 8002e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e06:	f01e 0f10 	tst.w	lr, #16
 8002e0a:	bf08      	it	eq
 8002e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e10:	f380 8809 	msr	PSP, r0
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	f3af 8000 	nop.w

08002e20 <pxCurrentTCBConst>:
 8002e20:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop

08002e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	607b      	str	r3, [r7, #4]
    }
 8002e40:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002e42:	f002 fab1 	bl	80053a8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e46:	f7ff fb7b 	bl	8002540 <xTaskIncrementTick>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d006      	beq.n	8002e5e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002e50:	f002 fb08 	bl	8005464 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <SysTick_Handler+0x50>)
 8002e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e001      	b.n	8002e62 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002e5e:	f002 fae5 	bl	800542c <SEGGER_SYSVIEW_RecordExitISR>
 8002e62:	2300      	movs	r3, #0
 8002e64:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f383 8811 	msr	BASEPRI, r3
    }
 8002e6c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <vPortSetupTimerInterrupt+0x34>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <vPortSetupTimerInterrupt+0x38>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <vPortSetupTimerInterrupt+0x3c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <vPortSetupTimerInterrupt+0x40>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <vPortSetupTimerInterrupt+0x44>)
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <vPortSetupTimerInterrupt+0x34>)
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	601a      	str	r2, [r3, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000e010 	.word	0xe000e010
 8002eb4:	e000e018 	.word	0xe000e018
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	10624dd3 	.word	0x10624dd3
 8002ec0:	e000e014 	.word	0xe000e014

08002ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ed4 <vPortEnableVFP+0x10>
 8002ec8:	6801      	ldr	r1, [r0, #0]
 8002eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002ece:	6001      	str	r1, [r0, #0]
 8002ed0:	4770      	bx	lr
 8002ed2:	0000      	.short	0x0000
 8002ed4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop

08002edc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002ee2:	f3ef 8305 	mrs	r3, IPSR
 8002ee6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b0f      	cmp	r3, #15
 8002eec:	d914      	bls.n	8002f18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <vPortValidateInterruptPriority+0x70>)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002ef8:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <vPortValidateInterruptPriority+0x74>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	7afa      	ldrb	r2, [r7, #11]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d20a      	bcs.n	8002f18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	607b      	str	r3, [r7, #4]
    }
 8002f14:	bf00      	nop
 8002f16:	e7fe      	b.n	8002f16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <vPortValidateInterruptPriority+0x78>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <vPortValidateInterruptPriority+0x7c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d90a      	bls.n	8002f3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	603b      	str	r3, [r7, #0]
    }
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <vPortValidateInterruptPriority+0x60>
    }
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000e3f0 	.word	0xe000e3f0
 8002f50:	2000013c 	.word	0x2000013c
 8002f54:	e000ed0c 	.word	0xe000ed0c
 8002f58:	20000140 	.word	0x20000140

08002f5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002f68:	f7ff f9ca 	bl	8002300 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f6c:	4b53      	ldr	r3, [pc, #332]	; (80030bc <pvPortMalloc+0x160>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002f74:	f000 f908 	bl	8003188 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d012      	beq.n	8002fa4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002f7e:	2208      	movs	r2, #8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	3308      	adds	r3, #8
 8002f8a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d804      	bhi.n	8002fa0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	e001      	b.n	8002fa4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	db70      	blt.n	800308c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d06d      	beq.n	800308c <pvPortMalloc+0x130>
 8002fb0:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <pvPortMalloc+0x164>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d868      	bhi.n	800308c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002fba:	4b42      	ldr	r3, [pc, #264]	; (80030c4 <pvPortMalloc+0x168>)
 8002fbc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002fbe:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <pvPortMalloc+0x168>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002fc4:	e004      	b.n	8002fd0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d903      	bls.n	8002fe2 <pvPortMalloc+0x86>
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f1      	bne.n	8002fc6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002fe2:	4b36      	ldr	r3, [pc, #216]	; (80030bc <pvPortMalloc+0x160>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d04f      	beq.n	800308c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	4413      	add	r3, r2
 8002ff4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	1ad2      	subs	r2, r2, r3
 8003006:	2308      	movs	r3, #8
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	429a      	cmp	r2, r3
 800300c:	d91f      	bls.n	800304e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800300e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <pvPortMalloc+0xda>
        __asm volatile
 8003020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	613b      	str	r3, [r7, #16]
    }
 8003032:	bf00      	nop
 8003034:	e7fe      	b.n	8003034 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003048:	6978      	ldr	r0, [r7, #20]
 800304a:	f000 f8f9 	bl	8003240 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <pvPortMalloc+0x164>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <pvPortMalloc+0x164>)
 800305a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800305c:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <pvPortMalloc+0x164>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <pvPortMalloc+0x16c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d203      	bcs.n	8003070 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <pvPortMalloc+0x164>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <pvPortMalloc+0x16c>)
 800306e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <pvPortMalloc+0x170>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3301      	adds	r3, #1
 8003088:	4a10      	ldr	r2, [pc, #64]	; (80030cc <pvPortMalloc+0x170>)
 800308a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800308c:	f7ff f946 	bl	800231c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <pvPortMalloc+0x154>
        __asm volatile
 800309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	60fb      	str	r3, [r7, #12]
    }
 80030ac:	bf00      	nop
 80030ae:	e7fe      	b.n	80030ae <pvPortMalloc+0x152>
    return pvReturn;
 80030b0:	69fb      	ldr	r3, [r7, #28]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3728      	adds	r7, #40	; 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20012d4c 	.word	0x20012d4c
 80030c0:	20012d50 	.word	0x20012d50
 80030c4:	20012d44 	.word	0x20012d44
 80030c8:	20012d54 	.word	0x20012d54
 80030cc:	20012d58 	.word	0x20012d58

080030d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d049      	beq.n	8003176 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80030e2:	2308      	movs	r3, #8
 80030e4:	425b      	negs	r3, r3
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4413      	add	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	db0a      	blt.n	800310e <vPortFree+0x3e>
        __asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	60fb      	str	r3, [r7, #12]
    }
 800310a:	bf00      	nop
 800310c:	e7fe      	b.n	800310c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <vPortFree+0x5c>
        __asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	60bb      	str	r3, [r7, #8]
    }
 8003128:	bf00      	nop
 800312a:	e7fe      	b.n	800312a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0fdb      	lsrs	r3, r3, #31
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01c      	beq.n	8003176 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d118      	bne.n	8003176 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003150:	f7ff f8d6 	bl	8002300 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	4b09      	ldr	r3, [pc, #36]	; (8003180 <vPortFree+0xb0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4413      	add	r3, r2
 800315e:	4a08      	ldr	r2, [pc, #32]	; (8003180 <vPortFree+0xb0>)
 8003160:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003162:	6938      	ldr	r0, [r7, #16]
 8003164:	f000 f86c 	bl	8003240 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <vPortFree+0xb4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	4a05      	ldr	r2, [pc, #20]	; (8003184 <vPortFree+0xb4>)
 8003170:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003172:	f7ff f8d3 	bl	800231c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20012d50 	.word	0x20012d50
 8003184:	20012d5c 	.word	0x20012d5c

08003188 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800318e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003192:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <prvHeapInit+0xa4>)
 8003196:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00c      	beq.n	80031bc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3307      	adds	r3, #7
 80031a6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0307 	bic.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	4a1d      	ldr	r2, [pc, #116]	; (800322c <prvHeapInit+0xa4>)
 80031b8:	4413      	add	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031c0:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <prvHeapInit+0xa8>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <prvHeapInit+0xa8>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	4413      	add	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80031d4:	2208      	movs	r2, #8
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0307 	bic.w	r3, r3, #7
 80031e2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a13      	ldr	r2, [pc, #76]	; (8003234 <prvHeapInit+0xac>)
 80031e8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <prvHeapInit+0xac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2200      	movs	r2, #0
 80031f0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <prvHeapInit+0xac>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	1ad2      	subs	r2, r2, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <prvHeapInit+0xac>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a08      	ldr	r2, [pc, #32]	; (8003238 <prvHeapInit+0xb0>)
 8003216:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a07      	ldr	r2, [pc, #28]	; (800323c <prvHeapInit+0xb4>)
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	20000144 	.word	0x20000144
 8003230:	20012d44 	.word	0x20012d44
 8003234:	20012d4c 	.word	0x20012d4c
 8003238:	20012d54 	.word	0x20012d54
 800323c:	20012d50 	.word	0x20012d50

08003240 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003248:	4b28      	ldr	r3, [pc, #160]	; (80032ec <prvInsertBlockIntoFreeList+0xac>)
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e002      	b.n	8003254 <prvInsertBlockIntoFreeList+0x14>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	d8f7      	bhi.n	800324e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	4413      	add	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d108      	bne.n	8003282 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	441a      	add	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	441a      	add	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d118      	bne.n	80032c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <prvInsertBlockIntoFreeList+0xb0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d00d      	beq.n	80032be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	441a      	add	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e008      	b.n	80032d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032be:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <prvInsertBlockIntoFreeList+0xb0>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e003      	b.n	80032d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d002      	beq.n	80032de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20012d44 	.word	0x20012d44
 80032f0:	20012d4c 	.word	0x20012d4c

080032f4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80032f8:	4803      	ldr	r0, [pc, #12]	; (8003308 <_cbSendSystemDesc+0x14>)
 80032fa:	f001 ffff 	bl	80052fc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80032fe:	4803      	ldr	r0, [pc, #12]	; (800330c <_cbSendSystemDesc+0x18>)
 8003300:	f001 fffc 	bl	80052fc <SEGGER_SYSVIEW_SendSysDesc>
}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}
 8003308:	08005aa8 	.word	0x08005aa8
 800330c:	08005af0 	.word	0x08005af0

08003310 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <SEGGER_SYSVIEW_Conf+0x20>)
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <SEGGER_SYSVIEW_Conf+0x20>)
 800331a:	6819      	ldr	r1, [r3, #0]
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <SEGGER_SYSVIEW_Conf+0x24>)
 800331e:	4a06      	ldr	r2, [pc, #24]	; (8003338 <SEGGER_SYSVIEW_Conf+0x28>)
 8003320:	f001 fc70 	bl	8004c04 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003324:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003328:	f001 fcb0 	bl	8004c8c <SEGGER_SYSVIEW_SetRAMBase>
}
 800332c:	bf00      	nop
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000000 	.word	0x20000000
 8003334:	080032f5 	.word	0x080032f5
 8003338:	08005b8c 	.word	0x08005b8c

0800333c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800333c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333e:	b085      	sub	sp, #20
 8003340:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	e033      	b.n	80033b0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003348:	491e      	ldr	r1, [pc, #120]	; (80033c4 <_cbSendTaskList+0x88>)
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	491a      	ldr	r1, [pc, #104]	; (80033c4 <_cbSendTaskList+0x88>)
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	3304      	adds	r3, #4
 8003368:	6819      	ldr	r1, [r3, #0]
 800336a:	4c16      	ldr	r4, [pc, #88]	; (80033c4 <_cbSendTaskList+0x88>)
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4423      	add	r3, r4
 8003378:	3308      	adds	r3, #8
 800337a:	681c      	ldr	r4, [r3, #0]
 800337c:	4d11      	ldr	r5, [pc, #68]	; (80033c4 <_cbSendTaskList+0x88>)
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	442b      	add	r3, r5
 800338a:	330c      	adds	r3, #12
 800338c:	681d      	ldr	r5, [r3, #0]
 800338e:	4e0d      	ldr	r6, [pc, #52]	; (80033c4 <_cbSendTaskList+0x88>)
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4433      	add	r3, r6
 800339c:	3310      	adds	r3, #16
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	462b      	mov	r3, r5
 80033a4:	4622      	mov	r2, r4
 80033a6:	f000 f8b5 	bl	8003514 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3301      	adds	r3, #1
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <_cbSendTaskList+0x8c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d3c6      	bcc.n	8003348 <_cbSendTaskList+0xc>
  }
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c4:	20012d60 	.word	0x20012d60
 80033c8:	20012e00 	.word	0x20012e00

080033cc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80033cc:	b5b0      	push	{r4, r5, r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80033d2:	f7ff f8a3 	bl	800251c <xTaskGetTickCountFromISR>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80033e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	f04f 0400 	mov.w	r4, #0
 80033ee:	f04f 0500 	mov.w	r5, #0
 80033f2:	015d      	lsls	r5, r3, #5
 80033f4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80033f8:	0154      	lsls	r4, r2, #5
 80033fa:	4622      	mov	r2, r4
 80033fc:	462b      	mov	r3, r5
 80033fe:	1a12      	subs	r2, r2, r0
 8003400:	eb63 0301 	sbc.w	r3, r3, r1
 8003404:	f04f 0400 	mov.w	r4, #0
 8003408:	f04f 0500 	mov.w	r5, #0
 800340c:	009d      	lsls	r5, r3, #2
 800340e:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003412:	0094      	lsls	r4, r2, #2
 8003414:	4622      	mov	r2, r4
 8003416:	462b      	mov	r3, r5
 8003418:	1812      	adds	r2, r2, r0
 800341a:	eb41 0303 	adc.w	r3, r1, r3
 800341e:	f04f 0000 	mov.w	r0, #0
 8003422:	f04f 0100 	mov.w	r1, #0
 8003426:	00d9      	lsls	r1, r3, #3
 8003428:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800342c:	00d0      	lsls	r0, r2, #3
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8003436:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bdb0      	pop	{r4, r5, r7, pc}

08003444 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003452:	2205      	movs	r2, #5
 8003454:	492b      	ldr	r1, [pc, #172]	; (8003504 <SYSVIEW_AddTask+0xc0>)
 8003456:	68b8      	ldr	r0, [r7, #8]
 8003458:	f002 faaa 	bl	80059b0 <memcmp>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d04b      	beq.n	80034fa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003462:	4b29      	ldr	r3, [pc, #164]	; (8003508 <SYSVIEW_AddTask+0xc4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b07      	cmp	r3, #7
 8003468:	d903      	bls.n	8003472 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800346a:	4828      	ldr	r0, [pc, #160]	; (800350c <SYSVIEW_AddTask+0xc8>)
 800346c:	f002 f9f2 	bl	8005854 <SEGGER_SYSVIEW_Warn>
    return;
 8003470:	e044      	b.n	80034fc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003472:	4b25      	ldr	r3, [pc, #148]	; (8003508 <SYSVIEW_AddTask+0xc4>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4926      	ldr	r1, [pc, #152]	; (8003510 <SYSVIEW_AddTask+0xcc>)
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <SYSVIEW_AddTask+0xc4>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4921      	ldr	r1, [pc, #132]	; (8003510 <SYSVIEW_AddTask+0xcc>)
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	3304      	adds	r3, #4
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <SYSVIEW_AddTask+0xc4>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	491b      	ldr	r1, [pc, #108]	; (8003510 <SYSVIEW_AddTask+0xcc>)
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	3308      	adds	r3, #8
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <SYSVIEW_AddTask+0xc4>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4916      	ldr	r1, [pc, #88]	; (8003510 <SYSVIEW_AddTask+0xcc>)
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	330c      	adds	r3, #12
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <SYSVIEW_AddTask+0xc4>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4910      	ldr	r1, [pc, #64]	; (8003510 <SYSVIEW_AddTask+0xcc>)
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3310      	adds	r3, #16
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <SYSVIEW_AddTask+0xc4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	4a08      	ldr	r2, [pc, #32]	; (8003508 <SYSVIEW_AddTask+0xc4>)
 80034e6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f80e 	bl	8003514 <SYSVIEW_SendTaskInfo>
 80034f8:	e000      	b.n	80034fc <SYSVIEW_AddTask+0xb8>
    return;
 80034fa:	bf00      	nop

}
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	08005b00 	.word	0x08005b00
 8003508:	20012e00 	.word	0x20012e00
 800350c:	08005b08 	.word	0x08005b08
 8003510:	20012d60 	.word	0x20012d60

08003514 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003522:	f107 0314 	add.w	r3, r7, #20
 8003526:	2214      	movs	r2, #20
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f002 fa5c 	bl	80059e8 <memset>
  TaskInfo.TaskID     = TaskID;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003544:	f107 0314 	add.w	r3, r7, #20
 8003548:	4618      	mov	r0, r3
 800354a:	f001 fddf 	bl	800510c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800354e:	bf00      	nop
 8003550:	3728      	adds	r7, #40	; 0x28
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <__NVIC_EnableIRQ>:
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	2b00      	cmp	r3, #0
 8003568:	db0b      	blt.n	8003582 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	f003 021f 	and.w	r2, r3, #31
 8003570:	4907      	ldr	r1, [pc, #28]	; (8003590 <__NVIC_EnableIRQ+0x38>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2001      	movs	r0, #1
 800357a:	fa00 f202 	lsl.w	r2, r0, r2
 800357e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	e000e100 	.word	0xe000e100

08003594 <__NVIC_SetPriority>:
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	6039      	str	r1, [r7, #0]
 800359e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	db0a      	blt.n	80035be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	490c      	ldr	r1, [pc, #48]	; (80035e0 <__NVIC_SetPriority+0x4c>)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	0112      	lsls	r2, r2, #4
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	440b      	add	r3, r1
 80035b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035bc:	e00a      	b.n	80035d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4908      	ldr	r1, [pc, #32]	; (80035e4 <__NVIC_SetPriority+0x50>)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	3b04      	subs	r3, #4
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	440b      	add	r3, r1
 80035d2:	761a      	strb	r2, [r3, #24]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000e100 	.word	0xe000e100
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80035ee:	f002 f98d 	bl	800590c <SEGGER_SYSVIEW_IsStarted>
 80035f2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80035fa:	f001 fc0b 	bl	8004e14 <SEGGER_SYSVIEW_Start>
  }
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003612:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <_cbOnUARTRx+0x3c>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d806      	bhi.n	8003628 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <_cbOnUARTRx+0x3c>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <_cbOnUARTRx+0x3c>)
 8003624:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003626:	e009      	b.n	800363c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003628:	f7ff ffde 	bl	80035e8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <_cbOnUARTRx+0x3c>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4618      	mov	r0, r3
 8003632:	1dfb      	adds	r3, r7, #7
 8003634:	2201      	movs	r2, #1
 8003636:	4619      	mov	r1, r3
 8003638:	f000 fb9c 	bl	8003d74 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800363c:	bf00      	nop
}
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000014 	.word	0x20000014

08003648 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <_cbOnUARTTx+0x5c>)
 8003652:	785b      	ldrb	r3, [r3, #1]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d80f      	bhi.n	8003678 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <_cbOnUARTTx+0x5c>)
 800365a:	785b      	ldrb	r3, [r3, #1]
 800365c:	461a      	mov	r2, r3
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <_cbOnUARTTx+0x60>)
 8003660:	5c9a      	ldrb	r2, [r3, r2]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003666:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <_cbOnUARTTx+0x5c>)
 8003668:	785b      	ldrb	r3, [r3, #1]
 800366a:	3301      	adds	r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <_cbOnUARTTx+0x5c>)
 8003670:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003672:	2301      	movs	r3, #1
 8003674:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003676:	e00f      	b.n	8003698 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <_cbOnUARTTx+0x5c>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa1b 	bl	8003abc <SEGGER_RTT_ReadUpBufferNoLock>
 8003686:	4603      	mov	r3, r0
 8003688:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	da02      	bge.n	8003696 <_cbOnUARTTx+0x4e>
    r = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e000      	b.n	8003698 <_cbOnUARTTx+0x50>
  }
Done:
 8003696:	bf00      	nop
  return r;
 8003698:	68fb      	ldr	r3, [r7, #12]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000014 	.word	0x20000014
 80036a8:	08005b94 	.word	0x08005b94

080036ac <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <SEGGER_UART_init+0x1c>)
 80036b6:	4905      	ldr	r1, [pc, #20]	; (80036cc <SEGGER_UART_init+0x20>)
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f863 	bl	8003784 <HIF_UART_Init>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	08003609 	.word	0x08003609
 80036cc:	08003649 	.word	0x08003649

080036d0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80036d6:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <USART2_IRQHandler+0x80>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d011      	beq.n	800370a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <USART2_IRQHandler+0x84>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 030b 	and.w	r3, r3, #11
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d108      	bne.n	800370a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80036f8:	4b17      	ldr	r3, [pc, #92]	; (8003758 <USART2_IRQHandler+0x88>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d004      	beq.n	800370a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003700:	4b15      	ldr	r3, [pc, #84]	; (8003758 <USART2_IRQHandler+0x88>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	79fa      	ldrb	r2, [r7, #7]
 8003706:	4610      	mov	r0, r2
 8003708:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01a      	beq.n	800374a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <USART2_IRQHandler+0x8c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d015      	beq.n	8003748 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <USART2_IRQHandler+0x8c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	1dfa      	adds	r2, r7, #7
 8003722:	4610      	mov	r0, r2
 8003724:	4798      	blx	r3
 8003726:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <USART2_IRQHandler+0x90>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a0b      	ldr	r2, [pc, #44]	; (8003760 <USART2_IRQHandler+0x90>)
 8003734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e006      	b.n	800374a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <USART2_IRQHandler+0x80>)
 800373e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003740:	79fa      	ldrb	r2, [r7, #7]
 8003742:	4b04      	ldr	r3, [pc, #16]	; (8003754 <USART2_IRQHandler+0x84>)
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e000      	b.n	800374a <USART2_IRQHandler+0x7a>
      return;
 8003748:	bf00      	nop
    }
  }
}
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40004400 	.word	0x40004400
 8003754:	40004404 	.word	0x40004404
 8003758:	20012e04 	.word	0x20012e04
 800375c:	20012e08 	.word	0x20012e08
 8003760:	4000440c 	.word	0x4000440c

08003764 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a04      	ldr	r2, [pc, #16]	; (8003780 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800376e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003772:	6013      	str	r3, [r2, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	4000440c 	.word	0x4000440c

08003784 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003790:	4b2e      	ldr	r3, [pc, #184]	; (800384c <HIF_UART_Init+0xc8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2d      	ldr	r2, [pc, #180]	; (800384c <HIF_UART_Init+0xc8>)
 8003796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800379c:	4b2c      	ldr	r3, [pc, #176]	; (8003850 <HIF_UART_Init+0xcc>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2b      	ldr	r2, [pc, #172]	; (8003850 <HIF_UART_Init+0xcc>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80037a8:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <HIF_UART_Init+0xd0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80037bc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80037be:	4a25      	ldr	r2, [pc, #148]	; (8003854 <HIF_UART_Init+0xd0>)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <HIF_UART_Init+0xd4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80037d8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80037da:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HIF_UART_Init+0xd4>)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80037e0:	4b1e      	ldr	r3, [pc, #120]	; (800385c <HIF_UART_Init+0xd8>)
 80037e2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80037e6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HIF_UART_Init+0xdc>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HIF_UART_Init+0xe0>)
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80037fa:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HIF_UART_Init+0xe4>)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003802:	3301      	adds	r3, #1
 8003804:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003812:	d302      	bcc.n	800381a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003814:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003818:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	4a11      	ldr	r2, [pc, #68]	; (800386c <HIF_UART_Init+0xe8>)
 8003826:	b29b      	uxth	r3, r3
 8003828:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800382a:	4a11      	ldr	r2, [pc, #68]	; (8003870 <HIF_UART_Init+0xec>)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003830:	4a10      	ldr	r2, [pc, #64]	; (8003874 <HIF_UART_Init+0xf0>)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003836:	2106      	movs	r1, #6
 8003838:	2026      	movs	r0, #38	; 0x26
 800383a:	f7ff feab 	bl	8003594 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800383e:	2026      	movs	r0, #38	; 0x26
 8003840:	f7ff fe8a 	bl	8003558 <__NVIC_EnableIRQ>
}
 8003844:	bf00      	nop
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40023840 	.word	0x40023840
 8003850:	40023830 	.word	0x40023830
 8003854:	40020020 	.word	0x40020020
 8003858:	40020000 	.word	0x40020000
 800385c:	4000440c 	.word	0x4000440c
 8003860:	40004410 	.word	0x40004410
 8003864:	40004414 	.word	0x40004414
 8003868:	05f5e100 	.word	0x05f5e100
 800386c:	40004408 	.word	0x40004408
 8003870:	20012e04 	.word	0x20012e04
 8003874:	20012e08 	.word	0x20012e08

08003878 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <_DoInit+0xa0>)
 8003880:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003882:	22a8      	movs	r2, #168	; 0xa8
 8003884:	2100      	movs	r1, #0
 8003886:	6838      	ldr	r0, [r7, #0]
 8003888:	f002 f8ae 	bl	80059e8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2203      	movs	r2, #3
 8003890:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2203      	movs	r2, #3
 8003896:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4a20      	ldr	r2, [pc, #128]	; (800391c <_DoInit+0xa4>)
 800389c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	4a1f      	ldr	r2, [pc, #124]	; (8003920 <_DoInit+0xa8>)
 80038a2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038aa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2200      	movs	r2, #0
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2200      	movs	r2, #0
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2200      	movs	r2, #0
 80038bc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	4a16      	ldr	r2, [pc, #88]	; (800391c <_DoInit+0xa4>)
 80038c2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	4a17      	ldr	r2, [pc, #92]	; (8003924 <_DoInit+0xac>)
 80038c8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2210      	movs	r2, #16
 80038ce:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2200      	movs	r2, #0
 80038d4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2200      	movs	r2, #0
 80038da:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2200      	movs	r2, #0
 80038e0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80038e2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	e00c      	b.n	8003906 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1c3 030f 	rsb	r3, r3, #15
 80038f2:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <_DoInit+0xb0>)
 80038f4:	5cd1      	ldrb	r1, [r2, r3]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4413      	add	r3, r2
 80038fc:	460a      	mov	r2, r1
 80038fe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3301      	adds	r3, #1
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b0f      	cmp	r3, #15
 800390a:	d9ef      	bls.n	80038ec <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800390c:	f3bf 8f5f 	dmb	sy
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20014384 	.word	0x20014384
 800391c:	08005b58 	.word	0x08005b58
 8003920:	20012e0c 	.word	0x20012e0c
 8003924:	2001320c 	.word	0x2001320c
 8003928:	08005b98 	.word	0x08005b98

0800392c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	; 0x28
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003938:	2300      	movs	r3, #0
 800393a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	429a      	cmp	r2, r3
 800394e:	d905      	bls.n	800395c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
 800395a:	e007      	b.n	800396c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	69b9      	ldr	r1, [r7, #24]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	1acb      	subs	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3b01      	subs	r3, #1
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003976:	4293      	cmp	r3, r2
 8003978:	bf28      	it	cs
 800397a:	4613      	movcs	r3, r2
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4293      	cmp	r3, r2
 8003984:	bf28      	it	cs
 8003986:	4613      	movcs	r3, r2
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	6978      	ldr	r0, [r7, #20]
 800399a:	f002 f817 	bl	80059cc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800399e:	6a3a      	ldr	r2, [r7, #32]
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	4413      	add	r3, r2
 80039a4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	4413      	add	r3, r2
 80039ac:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	4413      	add	r3, r2
 80039bc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d101      	bne.n	80039cc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80039cc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1b2      	bne.n	8003942 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80039dc:	6a3b      	ldr	r3, [r7, #32]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3728      	adds	r7, #40	; 0x28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b088      	sub	sp, #32
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d911      	bls.n	8003a2e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	6938      	ldr	r0, [r7, #16]
 8003a1a:	f001 ffd7 	bl	80059cc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a1e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	441a      	add	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003a2c:	e01f      	b.n	8003a6e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	6938      	ldr	r0, [r7, #16]
 8003a42:	f001 ffc3 	bl	80059cc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	4413      	add	r3, r2
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6938      	ldr	r0, [r7, #16]
 8003a60:	f001 ffb4 	bl	80059cc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a64:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	60da      	str	r2, [r3, #12]
}
 8003a6e:	bf00      	nop
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003a76:	b480      	push	{r7}
 8003a78:	b087      	sub	sp, #28
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d808      	bhi.n	8003aa4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad2      	subs	r2, r2, r3
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	e004      	b.n	8003aae <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003aae:	697b      	ldr	r3, [r7, #20]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08c      	sub	sp, #48	; 0x30
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003ac8:	4b3e      	ldr	r3, [pc, #248]	; (8003bc4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003aca:	623b      	str	r3, [r7, #32]
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b53      	cmp	r3, #83	; 0x53
 8003ad4:	d001      	beq.n	8003ada <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003ad6:	f7ff fecf 	bl	8003878 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4a37      	ldr	r2, [pc, #220]	; (8003bc4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003ae8:	4413      	add	r3, r2
 8003aea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d92b      	bls.n	8003b60 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4293      	cmp	r3, r2
 8003b18:	bf28      	it	cs
 8003b1a:	4613      	movcs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	4413      	add	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	6939      	ldr	r1, [r7, #16]
 8003b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b2e:	f001 ff4d 	bl	80059cc <memcpy>
    NumBytesRead += NumBytesRem;
 8003b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	4413      	add	r3, r2
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	4413      	add	r3, r2
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	4413      	add	r3, r2
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d101      	bne.n	8003b60 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	bf28      	it	cs
 8003b70:	4613      	movcs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d019      	beq.n	8003bae <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	4413      	add	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	6939      	ldr	r1, [r7, #16]
 8003b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b8a:	f001 ff1f 	bl	80059cc <memcpy>
    NumBytesRead += NumBytesRem;
 8003b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4413      	add	r3, r2
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4413      	add	r3, r2
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3730      	adds	r7, #48	; 0x30
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20014384 	.word	0x20014384

08003bc8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	; 0x30
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003bd4:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003bd6:	623b      	str	r3, [r7, #32]
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b53      	cmp	r3, #83	; 0x53
 8003be0:	d001      	beq.n	8003be6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003be2:	f7ff fe49 	bl	8003878 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	3360      	adds	r3, #96	; 0x60
 8003bf2:	4a37      	ldr	r2, [pc, #220]	; (8003cd0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003bf4:	4413      	add	r3, r2
 8003bf6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d92b      	bls.n	8003c6c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4293      	cmp	r3, r2
 8003c24:	bf28      	it	cs
 8003c26:	4613      	movcs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	4413      	add	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	6939      	ldr	r1, [r7, #16]
 8003c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c3a:	f001 fec7 	bl	80059cc <memcpy>
    NumBytesRead += NumBytesRem;
 8003c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	4413      	add	r3, r2
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d101      	bne.n	8003c6c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bf28      	it	cs
 8003c7c:	4613      	movcs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d019      	beq.n	8003cba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	4413      	add	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	6939      	ldr	r1, [r7, #16]
 8003c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c96:	f001 fe99 	bl	80059cc <memcpy>
    NumBytesRead += NumBytesRem;
 8003c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3730      	adds	r7, #48	; 0x30
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20014384 	.word	0x20014384

08003cd4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4413      	add	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	3360      	adds	r3, #96	; 0x60
 8003cf0:	4a1f      	ldr	r2, [pc, #124]	; (8003d70 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003cf2:	4413      	add	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d029      	beq.n	8003d52 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d82e      	bhi.n	8003d60 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d013      	beq.n	8003d32 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003d0a:	e029      	b.n	8003d60 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003d0c:	6978      	ldr	r0, [r7, #20]
 8003d0e:	f7ff feb2 	bl	8003a76 <_GetAvailWriteSpace>
 8003d12:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d202      	bcs.n	8003d22 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003d20:	e021      	b.n	8003d66 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	69b9      	ldr	r1, [r7, #24]
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7ff fe5b 	bl	80039e6 <_WriteNoCheck>
    break;
 8003d30:	e019      	b.n	8003d66 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003d32:	6978      	ldr	r0, [r7, #20]
 8003d34:	f7ff fe9f 	bl	8003a76 <_GetAvailWriteSpace>
 8003d38:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	bf28      	it	cs
 8003d42:	4613      	movcs	r3, r2
 8003d44:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	69b9      	ldr	r1, [r7, #24]
 8003d4a:	6978      	ldr	r0, [r7, #20]
 8003d4c:	f7ff fe4b 	bl	80039e6 <_WriteNoCheck>
    break;
 8003d50:	e009      	b.n	8003d66 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	69b9      	ldr	r1, [r7, #24]
 8003d56:	6978      	ldr	r0, [r7, #20]
 8003d58:	f7ff fde8 	bl	800392c <_WriteBlocking>
 8003d5c:	61f8      	str	r0, [r7, #28]
    break;
 8003d5e:	e002      	b.n	8003d66 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
    break;
 8003d64:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003d66:	69fb      	ldr	r3, [r7, #28]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3720      	adds	r7, #32
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20014384 	.word	0x20014384

08003d74 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003d80:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b53      	cmp	r3, #83	; 0x53
 8003d8c:	d001      	beq.n	8003d92 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003d8e:	f7ff fd73 	bl	8003878 <_DoInit>
  SEGGER_RTT_LOCK();
 8003d92:	f3ef 8311 	mrs	r3, BASEPRI
 8003d96:	f04f 0120 	mov.w	r1, #32
 8003d9a:	f381 8811 	msr	BASEPRI, r1
 8003d9e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff ff95 	bl	8003cd4 <SEGGER_RTT_WriteDownBufferNoLock>
 8003daa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003db2:	697b      	ldr	r3, [r7, #20]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20014384 	.word	0x20014384

08003dc0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003dce:	4b3d      	ldr	r3, [pc, #244]	; (8003ec4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b53      	cmp	r3, #83	; 0x53
 8003dda:	d001      	beq.n	8003de0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003ddc:	f7ff fd4c 	bl	8003878 <_DoInit>
  SEGGER_RTT_LOCK();
 8003de0:	f3ef 8311 	mrs	r3, BASEPRI
 8003de4:	f04f 0120 	mov.w	r1, #32
 8003de8:	f381 8811 	msr	BASEPRI, r1
 8003dec:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003dee:	4b35      	ldr	r3, [pc, #212]	; (8003ec4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003df0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003df6:	6939      	ldr	r1, [r7, #16]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	440b      	add	r3, r1
 8003e06:	3304      	adds	r3, #4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	dbeb      	blt.n	8003df6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003e1e:	e000      	b.n	8003e22 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003e20:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	da3f      	bge.n	8003eac <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003e2c:	6939      	ldr	r1, [r7, #16]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	4613      	mov	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	4413      	add	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	440b      	add	r3, r1
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e40:	6939      	ldr	r1, [r7, #16]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	4613      	mov	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	440b      	add	r3, r1
 8003e50:	3304      	adds	r3, #4
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003e56:	6939      	ldr	r1, [r7, #16]
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	4413      	add	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	440b      	add	r3, r1
 8003e64:	3320      	adds	r3, #32
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003e6a:	6939      	ldr	r1, [r7, #16]
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	440b      	add	r3, r1
 8003e78:	3328      	adds	r3, #40	; 0x28
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003e7e:	6939      	ldr	r1, [r7, #16]
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	4613      	mov	r3, r2
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	4413      	add	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3324      	adds	r3, #36	; 0x24
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003e92:	6939      	ldr	r1, [r7, #16]
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	440b      	add	r3, r1
 8003ea0:	332c      	adds	r3, #44	; 0x2c
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ea6:	f3bf 8f5f 	dmb	sy
 8003eaa:	e002      	b.n	8003eb2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20014384 	.word	0x20014384

08003ec8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003ed6:	4b21      	ldr	r3, [pc, #132]	; (8003f5c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003ed8:	623b      	str	r3, [r7, #32]
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b53      	cmp	r3, #83	; 0x53
 8003ee2:	d001      	beq.n	8003ee8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003ee4:	f7ff fcc8 	bl	8003878 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ee8:	4b1c      	ldr	r3, [pc, #112]	; (8003f5c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003eea:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d82c      	bhi.n	8003f4c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003ef2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ef6:	f04f 0120 	mov.w	r1, #32
 8003efa:	f381 8811 	msr	BASEPRI, r1
 8003efe:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4613      	mov	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4413      	add	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	3360      	adds	r3, #96	; 0x60
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00e      	beq.n	8003f36 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2200      	movs	r2, #0
 8003f34:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f3a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f3c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4a:	e002      	b.n	8003f52 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3728      	adds	r7, #40	; 0x28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20014384 	.word	0x20014384

08003f60 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	60fa      	str	r2, [r7, #12]
 8003f76:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b80      	cmp	r3, #128	; 0x80
 8003f7c:	d90a      	bls.n	8003f94 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003f82:	e007      	b.n	8003f94 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	1c53      	adds	r3, r2, #1
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1c59      	adds	r1, r3, #1
 8003f8e:	60f9      	str	r1, [r7, #12]
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	1e5a      	subs	r2, r3, #1
 8003f98:	607a      	str	r2, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <_EncodeStr+0x46>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1ee      	bne.n	8003f84 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3307      	adds	r3, #7
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fde:	4b35      	ldr	r3, [pc, #212]	; (80040b4 <_HandleIncomingPacket+0xdc>)
 8003fe0:	7e1b      	ldrb	r3, [r3, #24]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	1cfb      	adds	r3, r7, #3
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f7ff fded 	bl	8003bc8 <SEGGER_RTT_ReadNoLock>
 8003fee:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d052      	beq.n	800409c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d031      	beq.n	8004060 <_HandleIncomingPacket+0x88>
 8003ffc:	2b80      	cmp	r3, #128	; 0x80
 8003ffe:	dc40      	bgt.n	8004082 <_HandleIncomingPacket+0xaa>
 8004000:	2b07      	cmp	r3, #7
 8004002:	dc15      	bgt.n	8004030 <_HandleIncomingPacket+0x58>
 8004004:	2b00      	cmp	r3, #0
 8004006:	dd3c      	ble.n	8004082 <_HandleIncomingPacket+0xaa>
 8004008:	3b01      	subs	r3, #1
 800400a:	2b06      	cmp	r3, #6
 800400c:	d839      	bhi.n	8004082 <_HandleIncomingPacket+0xaa>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <_HandleIncomingPacket+0x3c>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004037 	.word	0x08004037
 8004018:	0800403d 	.word	0x0800403d
 800401c:	08004043 	.word	0x08004043
 8004020:	08004049 	.word	0x08004049
 8004024:	0800404f 	.word	0x0800404f
 8004028:	08004055 	.word	0x08004055
 800402c:	0800405b 	.word	0x0800405b
 8004030:	2b7f      	cmp	r3, #127	; 0x7f
 8004032:	d035      	beq.n	80040a0 <_HandleIncomingPacket+0xc8>
 8004034:	e025      	b.n	8004082 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004036:	f000 feed 	bl	8004e14 <SEGGER_SYSVIEW_Start>
      break;
 800403a:	e036      	b.n	80040aa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800403c:	f000 ffa6 	bl	8004f8c <SEGGER_SYSVIEW_Stop>
      break;
 8004040:	e033      	b.n	80040aa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004042:	f001 f97f 	bl	8005344 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004046:	e030      	b.n	80040aa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004048:	f001 f944 	bl	80052d4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800404c:	e02d      	b.n	80040aa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800404e:	f000 ffc3 	bl	8004fd8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004052:	e02a      	b.n	80040aa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004054:	f001 fbac 	bl	80057b0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004058:	e027      	b.n	80040aa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800405a:	f001 fb8b 	bl	8005774 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800405e:	e024      	b.n	80040aa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004060:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <_HandleIncomingPacket+0xdc>)
 8004062:	7e1b      	ldrb	r3, [r3, #24]
 8004064:	4618      	mov	r0, r3
 8004066:	1cfb      	adds	r3, r7, #3
 8004068:	2201      	movs	r2, #1
 800406a:	4619      	mov	r1, r3
 800406c:	f7ff fdac 	bl	8003bc8 <SEGGER_RTT_ReadNoLock>
 8004070:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	4618      	mov	r0, r3
 800407c:	f001 faf0 	bl	8005660 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004080:	e010      	b.n	80040a4 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	b25b      	sxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	da0e      	bge.n	80040a8 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800408a:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <_HandleIncomingPacket+0xdc>)
 800408c:	7e1b      	ldrb	r3, [r3, #24]
 800408e:	4618      	mov	r0, r3
 8004090:	1cfb      	adds	r3, r7, #3
 8004092:	2201      	movs	r2, #1
 8004094:	4619      	mov	r1, r3
 8004096:	f7ff fd97 	bl	8003bc8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800409a:	e005      	b.n	80040a8 <_HandleIncomingPacket+0xd0>
    }
  }
 800409c:	bf00      	nop
 800409e:	e004      	b.n	80040aa <_HandleIncomingPacket+0xd2>
      break;
 80040a0:	bf00      	nop
 80040a2:	e002      	b.n	80040aa <_HandleIncomingPacket+0xd2>
      break;
 80040a4:	bf00      	nop
 80040a6:	e000      	b.n	80040aa <_HandleIncomingPacket+0xd2>
      break;
 80040a8:	bf00      	nop
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20014224 	.word	0x20014224

080040b8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08c      	sub	sp, #48	; 0x30
 80040bc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80040be:	2301      	movs	r3, #1
 80040c0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	3301      	adds	r3, #1
 80040c6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040cc:	4b32      	ldr	r3, [pc, #200]	; (8004198 <_TrySendOverflowPacket+0xe0>)
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d2:	e00b      	b.n	80040ec <_TrySendOverflowPacket+0x34>
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	1c59      	adds	r1, r3, #1
 80040dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	09db      	lsrs	r3, r3, #7
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	2b7f      	cmp	r3, #127	; 0x7f
 80040f0:	d8f0      	bhi.n	80040d4 <_TrySendOverflowPacket+0x1c>
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004100:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004102:	4b26      	ldr	r3, [pc, #152]	; (800419c <_TrySendOverflowPacket+0xe4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004108:	4b23      	ldr	r3, [pc, #140]	; (8004198 <_TrySendOverflowPacket+0xe0>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	623b      	str	r3, [r7, #32]
 800411a:	e00b      	b.n	8004134 <_TrySendOverflowPacket+0x7c>
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	1c59      	adds	r1, r3, #1
 8004124:	6279      	str	r1, [r7, #36]	; 0x24
 8004126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	09db      	lsrs	r3, r3, #7
 8004132:	623b      	str	r3, [r7, #32]
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	2b7f      	cmp	r3, #127	; 0x7f
 8004138:	d8f0      	bhi.n	800411c <_TrySendOverflowPacket+0x64>
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	627a      	str	r2, [r7, #36]	; 0x24
 8004140:	6a3a      	ldr	r2, [r7, #32]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <_TrySendOverflowPacket+0xe0>)
 800414c:	785b      	ldrb	r3, [r3, #1]
 800414e:	4618      	mov	r0, r3
 8004150:	1d3b      	adds	r3, r7, #4
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	461a      	mov	r2, r3
 8004158:	1d3b      	adds	r3, r7, #4
 800415a:	4619      	mov	r1, r3
 800415c:	f7fc f840 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004160:	4603      	mov	r3, r0
 8004162:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004164:	f7ff fafe 	bl	8003764 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800416e:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <_TrySendOverflowPacket+0xe0>)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004174:	4b08      	ldr	r3, [pc, #32]	; (8004198 <_TrySendOverflowPacket+0xe0>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	3b01      	subs	r3, #1
 800417a:	b2da      	uxtb	r2, r3
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <_TrySendOverflowPacket+0xe0>)
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	e004      	b.n	800418c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <_TrySendOverflowPacket+0xe0>)
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	3301      	adds	r3, #1
 8004188:	4a03      	ldr	r2, [pc, #12]	; (8004198 <_TrySendOverflowPacket+0xe0>)
 800418a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800418c:	693b      	ldr	r3, [r7, #16]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3730      	adds	r7, #48	; 0x30
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20014224 	.word	0x20014224
 800419c:	e0001004 	.word	0xe0001004

080041a0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80041ac:	4b9b      	ldr	r3, [pc, #620]	; (800441c <_SendPacket+0x27c>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d010      	beq.n	80041d6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80041b4:	4b99      	ldr	r3, [pc, #612]	; (800441c <_SendPacket+0x27c>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 812b 	beq.w	8004414 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80041be:	4b97      	ldr	r3, [pc, #604]	; (800441c <_SendPacket+0x27c>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d109      	bne.n	80041da <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80041c6:	f7ff ff77 	bl	80040b8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80041ca:	4b94      	ldr	r3, [pc, #592]	; (800441c <_SendPacket+0x27c>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	f040 8122 	bne.w	8004418 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 80041d4:	e001      	b.n	80041da <_SendPacket+0x3a>
    goto Send;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <_SendPacket+0x3c>
Send:
 80041da:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b1f      	cmp	r3, #31
 80041e0:	d809      	bhi.n	80041f6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80041e2:	4b8e      	ldr	r3, [pc, #568]	; (800441c <_SendPacket+0x27c>)
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f040 8117 	bne.w	8004424 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b17      	cmp	r3, #23
 80041fa:	d807      	bhi.n	800420c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3b01      	subs	r3, #1
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	e0c4      	b.n	8004396 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	2b7f      	cmp	r3, #127	; 0x7f
 8004218:	d912      	bls.n	8004240 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	09da      	lsrs	r2, r3, #7
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3b01      	subs	r3, #1
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	3a01      	subs	r2, #1
 8004232:	60fa      	str	r2, [r7, #12]
 8004234:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004238:	b2da      	uxtb	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e006      	b.n	800424e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3b01      	subs	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b7e      	cmp	r3, #126	; 0x7e
 8004252:	d807      	bhi.n	8004264 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3b01      	subs	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	e098      	b.n	8004396 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800426a:	d212      	bcs.n	8004292 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	09da      	lsrs	r2, r3, #7
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3b01      	subs	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	3a01      	subs	r2, #1
 8004284:	60fa      	str	r2, [r7, #12]
 8004286:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	e081      	b.n	8004396 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004298:	d21d      	bcs.n	80042d6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	0b9a      	lsrs	r2, r3, #14
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	09db      	lsrs	r3, r3, #7
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	3a01      	subs	r2, #1
 80042b4:	60fa      	str	r2, [r7, #12]
 80042b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	3a01      	subs	r2, #1
 80042c8:	60fa      	str	r2, [r7, #12]
 80042ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	701a      	strb	r2, [r3, #0]
 80042d4:	e05f      	b.n	8004396 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042dc:	d228      	bcs.n	8004330 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	0d5a      	lsrs	r2, r3, #21
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	0b9b      	lsrs	r3, r3, #14
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	3a01      	subs	r2, #1
 80042f8:	60fa      	str	r2, [r7, #12]
 80042fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	09db      	lsrs	r3, r3, #7
 8004308:	b2db      	uxtb	r3, r3
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	3a01      	subs	r2, #1
 800430e:	60fa      	str	r2, [r7, #12]
 8004310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	3a01      	subs	r2, #1
 8004322:	60fa      	str	r2, [r7, #12]
 8004324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004328:	b2da      	uxtb	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	e032      	b.n	8004396 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	0f1a      	lsrs	r2, r3, #28
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3b01      	subs	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	0d5b      	lsrs	r3, r3, #21
 8004344:	b2db      	uxtb	r3, r3
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	3a01      	subs	r2, #1
 800434a:	60fa      	str	r2, [r7, #12]
 800434c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004350:	b2da      	uxtb	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0b9b      	lsrs	r3, r3, #14
 800435a:	b2db      	uxtb	r3, r3
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	3a01      	subs	r2, #1
 8004360:	60fa      	str	r2, [r7, #12]
 8004362:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004366:	b2da      	uxtb	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	09db      	lsrs	r3, r3, #7
 8004370:	b2db      	uxtb	r3, r3
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	3a01      	subs	r2, #1
 8004376:	60fa      	str	r2, [r7, #12]
 8004378:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800437c:	b2da      	uxtb	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	3a01      	subs	r2, #1
 800438a:	60fa      	str	r2, [r7, #12]
 800438c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004396:	4b22      	ldr	r3, [pc, #136]	; (8004420 <_SendPacket+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800439c:	4b1f      	ldr	r3, [pc, #124]	; (800441c <_SendPacket+0x27c>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	623b      	str	r3, [r7, #32]
 80043ae:	e00b      	b.n	80043c8 <_SendPacket+0x228>
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	6279      	str	r1, [r7, #36]	; 0x24
 80043ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	09db      	lsrs	r3, r3, #7
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	2b7f      	cmp	r3, #127	; 0x7f
 80043cc:	d8f0      	bhi.n	80043b0 <_SendPacket+0x210>
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	627a      	str	r2, [r7, #36]	; 0x24
 80043d4:	6a3a      	ldr	r2, [r7, #32]
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80043de:	4b0f      	ldr	r3, [pc, #60]	; (800441c <_SendPacket+0x27c>)
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	4618      	mov	r0, r3
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	68f9      	ldr	r1, [r7, #12]
 80043ee:	f7fb fef7 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043f2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80043f4:	f7ff f9b6 	bl	8003764 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043fe:	4a07      	ldr	r2, [pc, #28]	; (800441c <_SendPacket+0x27c>)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	60d3      	str	r3, [r2, #12]
 8004404:	e00f      	b.n	8004426 <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <_SendPacket+0x27c>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4b03      	ldr	r3, [pc, #12]	; (800441c <_SendPacket+0x27c>)
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	e008      	b.n	8004426 <_SendPacket+0x286>
    goto SendDone;
 8004414:	bf00      	nop
 8004416:	e006      	b.n	8004426 <_SendPacket+0x286>
      goto SendDone;
 8004418:	bf00      	nop
 800441a:	e004      	b.n	8004426 <_SendPacket+0x286>
 800441c:	20014224 	.word	0x20014224
 8004420:	e0001004 	.word	0xe0001004
      goto SendDone;
 8004424:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004426:	4b14      	ldr	r3, [pc, #80]	; (8004478 <_SendPacket+0x2d8>)
 8004428:	7e1b      	ldrb	r3, [r3, #24]
 800442a:	4619      	mov	r1, r3
 800442c:	4a13      	ldr	r2, [pc, #76]	; (800447c <_SendPacket+0x2dc>)
 800442e:	460b      	mov	r3, r1
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	440b      	add	r3, r1
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	336c      	adds	r3, #108	; 0x6c
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <_SendPacket+0x2d8>)
 800443e:	7e1b      	ldrb	r3, [r3, #24]
 8004440:	4618      	mov	r0, r3
 8004442:	490e      	ldr	r1, [pc, #56]	; (800447c <_SendPacket+0x2dc>)
 8004444:	4603      	mov	r3, r0
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4403      	add	r3, r0
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	440b      	add	r3, r1
 800444e:	3370      	adds	r3, #112	; 0x70
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d00b      	beq.n	800446e <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <_SendPacket+0x2d8>)
 8004458:	789b      	ldrb	r3, [r3, #2]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d107      	bne.n	800446e <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <_SendPacket+0x2d8>)
 8004460:	2201      	movs	r2, #1
 8004462:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004464:	f7ff fdb8 	bl	8003fd8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <_SendPacket+0x2d8>)
 800446a:	2200      	movs	r2, #0
 800446c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800446e:	bf00      	nop
 8004470:	3728      	adds	r7, #40	; 0x28
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20014224 	.word	0x20014224
 800447c:	20014384 	.word	0x20014384

08004480 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	; 0x28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	3301      	adds	r3, #1
 8004496:	2b80      	cmp	r3, #128	; 0x80
 8004498:	d80a      	bhi.n	80044b0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	1c59      	adds	r1, r3, #1
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6051      	str	r1, [r2, #4]
 80044a4:	78fa      	ldrb	r2, [r7, #3]
 80044a6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b80      	cmp	r3, #128	; 0x80
 80044b6:	d15a      	bne.n	800456e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	623b      	str	r3, [r7, #32]
 80044d8:	e00b      	b.n	80044f2 <_StoreChar+0x72>
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	1c59      	adds	r1, r3, #1
 80044e2:	6279      	str	r1, [r7, #36]	; 0x24
 80044e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	09db      	lsrs	r3, r3, #7
 80044f0:	623b      	str	r3, [r7, #32]
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	2b7f      	cmp	r3, #127	; 0x7f
 80044f6:	d8f0      	bhi.n	80044da <_StoreChar+0x5a>
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	627a      	str	r2, [r7, #36]	; 0x24
 80044fe:	6a3a      	ldr	r2, [r7, #32]
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e00b      	b.n	800452a <_StoreChar+0xaa>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	1c59      	adds	r1, r3, #1
 800451a:	61f9      	str	r1, [r7, #28]
 800451c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	09db      	lsrs	r3, r3, #7
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b7f      	cmp	r3, #127	; 0x7f
 800452e:	d8f0      	bhi.n	8004512 <_StoreChar+0x92>
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	61fa      	str	r2, [r7, #28]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	221a      	movs	r2, #26
 8004546:	6939      	ldr	r1, [r7, #16]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fe29 	bl	80041a0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fd34 	bl	8003fc0 <_PreparePacket>
 8004558:	4602      	mov	r2, r0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]
  }
}
 800456e:	bf00      	nop
 8004570:	3728      	adds	r7, #40	; 0x28
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800458a:	2301      	movs	r3, #1
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800458e:	2301      	movs	r3, #1
 8004590:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004592:	e007      	b.n	80045a4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	623b      	str	r3, [r7, #32]
    Width++;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3301      	adds	r3, #1
 80045a2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d2f3      	bcs.n	8004594 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d901      	bls.n	80045b8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d11f      	bne.n	8004602 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01c      	beq.n	8004602 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80045c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <_PrintUnsigned+0x66>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <_PrintUnsigned+0x66>
        c = '0';
 80045d8:	2330      	movs	r3, #48	; 0x30
 80045da:	76fb      	strb	r3, [r7, #27]
 80045dc:	e001      	b.n	80045e2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80045de:	2320      	movs	r3, #32
 80045e0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045e2:	e007      	b.n	80045f4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	3b01      	subs	r3, #1
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80045ea:	7efb      	ldrb	r3, [r7, #27]
 80045ec:	4619      	mov	r1, r3
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f7ff ff46 	bl	8004480 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <_PrintUnsigned+0x8a>
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	429a      	cmp	r2, r3
 8004600:	d3f0      	bcc.n	80045e4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d903      	bls.n	8004610 <_PrintUnsigned+0x98>
      NumDigits--;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	3b01      	subs	r3, #1
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	e009      	b.n	8004624 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	429a      	cmp	r2, r3
 8004620:	d200      	bcs.n	8004624 <_PrintUnsigned+0xac>
        break;
 8004622:	e005      	b.n	8004630 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	fb02 f303 	mul.w	r3, r2, r3
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800462e:	e7e8      	b.n	8004602 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004648:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <_PrintUnsigned+0x128>)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	4413      	add	r3, r2
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	4619      	mov	r1, r3
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7ff ff14 	bl	8004480 <_StoreChar>
    Digit /= Base;
 8004658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e3      	bne.n	8004630 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d011      	beq.n	8004696 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00e      	beq.n	8004696 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004678:	e006      	b.n	8004688 <_PrintUnsigned+0x110>
        FieldWidth--;
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	3b01      	subs	r3, #1
 800467e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004680:	2120      	movs	r1, #32
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7ff fefc 	bl	8004480 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <_PrintUnsigned+0x11e>
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	429a      	cmp	r2, r3
 8004694:	d3f1      	bcc.n	800467a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004696:	bf00      	nop
 8004698:	3728      	adds	r7, #40	; 0x28
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	08005bb8 	.word	0x08005bb8

080046a4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bfb8      	it	lt
 80046b8:	425b      	neglt	r3, r3
 80046ba:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80046bc:	2301      	movs	r3, #1
 80046be:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80046c0:	e007      	b.n	80046d2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80046ca:	613b      	str	r3, [r7, #16]
    Width++;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	3301      	adds	r3, #1
 80046d0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	daf3      	bge.n	80046c2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d901      	bls.n	80046e6 <_PrintInt+0x42>
    Width = NumDigits;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <_PrintInt+0x5e>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	db04      	blt.n	80046fc <_PrintInt+0x58>
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <_PrintInt+0x5e>
    FieldWidth--;
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	3b01      	subs	r3, #1
 8004700:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <_PrintInt+0x6e>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d016      	beq.n	8004740 <_PrintInt+0x9c>
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d111      	bne.n	8004740 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00e      	beq.n	8004740 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004722:	e006      	b.n	8004732 <_PrintInt+0x8e>
        FieldWidth--;
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	3b01      	subs	r3, #1
 8004728:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800472a:	2120      	movs	r1, #32
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff fea7 	bl	8004480 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <_PrintInt+0x9c>
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	429a      	cmp	r2, r3
 800473e:	d3f1      	bcc.n	8004724 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	da07      	bge.n	8004756 <_PrintInt+0xb2>
    v = -v;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	425b      	negs	r3, r3
 800474a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800474c:	212d      	movs	r1, #45	; 0x2d
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff fe96 	bl	8004480 <_StoreChar>
 8004754:	e008      	b.n	8004768 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004760:	212b      	movs	r1, #43	; 0x2b
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff fe8c 	bl	8004480 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d019      	beq.n	80047a6 <_PrintInt+0x102>
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d114      	bne.n	80047a6 <_PrintInt+0x102>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d111      	bne.n	80047a6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00e      	beq.n	80047a6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004788:	e006      	b.n	8004798 <_PrintInt+0xf4>
        FieldWidth--;
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	3b01      	subs	r3, #1
 800478e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004790:	2130      	movs	r1, #48	; 0x30
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff fe74 	bl	8004480 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <_PrintInt+0x102>
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d3f1      	bcc.n	800478a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7ff fedf 	bl	8004578 <_PrintUnsigned>
}
 80047ba:	bf00      	nop
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b098      	sub	sp, #96	; 0x60
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80047d0:	f3ef 8311 	mrs	r3, BASEPRI
 80047d4:	f04f 0120 	mov.w	r1, #32
 80047d8:	f381 8811 	msr	BASEPRI, r1
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047de:	48b7      	ldr	r0, [pc, #732]	; (8004abc <_VPrintTarget+0x2f8>)
 80047e0:	f7ff fbee 	bl	8003fc0 <_PreparePacket>
 80047e4:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80047e6:	4bb5      	ldr	r3, [pc, #724]	; (8004abc <_VPrintTarget+0x2f8>)
 80047e8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80047ea:	2300      	movs	r3, #0
 80047ec:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	3301      	adds	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800480a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 81a8 	beq.w	8004b64 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004814:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004818:	2b25      	cmp	r3, #37	; 0x25
 800481a:	f040 8195 	bne.w	8004b48 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800481e:	2300      	movs	r3, #0
 8004820:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004822:	2301      	movs	r3, #1
 8004824:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800482e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004832:	3b23      	subs	r3, #35	; 0x23
 8004834:	2b0d      	cmp	r3, #13
 8004836:	d83f      	bhi.n	80048b8 <_VPrintTarget+0xf4>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <_VPrintTarget+0x7c>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	080048a9 	.word	0x080048a9
 8004844:	080048b9 	.word	0x080048b9
 8004848:	080048b9 	.word	0x080048b9
 800484c:	080048b9 	.word	0x080048b9
 8004850:	080048b9 	.word	0x080048b9
 8004854:	080048b9 	.word	0x080048b9
 8004858:	080048b9 	.word	0x080048b9
 800485c:	080048b9 	.word	0x080048b9
 8004860:	08004899 	.word	0x08004899
 8004864:	080048b9 	.word	0x080048b9
 8004868:	08004879 	.word	0x08004879
 800486c:	080048b9 	.word	0x080048b9
 8004870:	080048b9 	.word	0x080048b9
 8004874:	08004889 	.word	0x08004889
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e01a      	b.n	80048be <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800488a:	f043 0302 	orr.w	r3, r3, #2
 800488e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e012      	b.n	80048be <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489a:	f043 0304 	orr.w	r3, r3, #4
 800489e:	64bb      	str	r3, [r7, #72]	; 0x48
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	e00a      	b.n	80048be <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80048a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048aa:	f043 0308 	orr.w	r3, r3, #8
 80048ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	e002      	b.n	80048be <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80048b8:	2300      	movs	r3, #0
 80048ba:	653b      	str	r3, [r7, #80]	; 0x50
 80048bc:	bf00      	nop
        }
      } while (v);
 80048be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1b0      	bne.n	8004826 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80048c4:	2300      	movs	r3, #0
 80048c6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80048d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048d4:	2b2f      	cmp	r3, #47	; 0x2f
 80048d6:	d912      	bls.n	80048fe <_VPrintTarget+0x13a>
 80048d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048dc:	2b39      	cmp	r3, #57	; 0x39
 80048de:	d80e      	bhi.n	80048fe <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80048e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	461a      	mov	r2, r3
 80048f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048f6:	4413      	add	r3, r2
 80048f8:	3b30      	subs	r3, #48	; 0x30
 80048fa:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80048fc:	e7e4      	b.n	80048c8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80048fe:	2300      	movs	r3, #0
 8004900:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800490a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800490e:	2b2e      	cmp	r3, #46	; 0x2e
 8004910:	d11d      	bne.n	800494e <_VPrintTarget+0x18a>
        sFormat++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004924:	2b2f      	cmp	r3, #47	; 0x2f
 8004926:	d912      	bls.n	800494e <_VPrintTarget+0x18a>
 8004928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800492c:	2b39      	cmp	r3, #57	; 0x39
 800492e:	d80e      	bhi.n	800494e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3301      	adds	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	461a      	mov	r2, r3
 8004942:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004946:	4413      	add	r3, r2
 8004948:	3b30      	subs	r3, #48	; 0x30
 800494a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800494c:	e7e4      	b.n	8004918 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004956:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800495a:	2b6c      	cmp	r3, #108	; 0x6c
 800495c:	d003      	beq.n	8004966 <_VPrintTarget+0x1a2>
 800495e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004962:	2b68      	cmp	r3, #104	; 0x68
 8004964:	d107      	bne.n	8004976 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3301      	adds	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004974:	e7ef      	b.n	8004956 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004976:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800497a:	2b25      	cmp	r3, #37	; 0x25
 800497c:	f000 80d8 	beq.w	8004b30 <_VPrintTarget+0x36c>
 8004980:	2b25      	cmp	r3, #37	; 0x25
 8004982:	f2c0 80dc 	blt.w	8004b3e <_VPrintTarget+0x37a>
 8004986:	2b78      	cmp	r3, #120	; 0x78
 8004988:	f300 80d9 	bgt.w	8004b3e <_VPrintTarget+0x37a>
 800498c:	2b58      	cmp	r3, #88	; 0x58
 800498e:	f2c0 80d6 	blt.w	8004b3e <_VPrintTarget+0x37a>
 8004992:	3b58      	subs	r3, #88	; 0x58
 8004994:	2b20      	cmp	r3, #32
 8004996:	f200 80d2 	bhi.w	8004b3e <_VPrintTarget+0x37a>
 800499a:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <_VPrintTarget+0x1dc>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	08004a97 	.word	0x08004a97
 80049a4:	08004b3f 	.word	0x08004b3f
 80049a8:	08004b3f 	.word	0x08004b3f
 80049ac:	08004b3f 	.word	0x08004b3f
 80049b0:	08004b3f 	.word	0x08004b3f
 80049b4:	08004b3f 	.word	0x08004b3f
 80049b8:	08004b3f 	.word	0x08004b3f
 80049bc:	08004b3f 	.word	0x08004b3f
 80049c0:	08004b3f 	.word	0x08004b3f
 80049c4:	08004b3f 	.word	0x08004b3f
 80049c8:	08004b3f 	.word	0x08004b3f
 80049cc:	08004a25 	.word	0x08004a25
 80049d0:	08004a4b 	.word	0x08004a4b
 80049d4:	08004b3f 	.word	0x08004b3f
 80049d8:	08004b3f 	.word	0x08004b3f
 80049dc:	08004b3f 	.word	0x08004b3f
 80049e0:	08004b3f 	.word	0x08004b3f
 80049e4:	08004b3f 	.word	0x08004b3f
 80049e8:	08004b3f 	.word	0x08004b3f
 80049ec:	08004b3f 	.word	0x08004b3f
 80049f0:	08004b3f 	.word	0x08004b3f
 80049f4:	08004b3f 	.word	0x08004b3f
 80049f8:	08004b3f 	.word	0x08004b3f
 80049fc:	08004b3f 	.word	0x08004b3f
 8004a00:	08004b0b 	.word	0x08004b0b
 8004a04:	08004b3f 	.word	0x08004b3f
 8004a08:	08004b3f 	.word	0x08004b3f
 8004a0c:	08004ac1 	.word	0x08004ac1
 8004a10:	08004b3f 	.word	0x08004b3f
 8004a14:	08004a71 	.word	0x08004a71
 8004a18:	08004b3f 	.word	0x08004b3f
 8004a1c:	08004b3f 	.word	0x08004b3f
 8004a20:	08004a97 	.word	0x08004a97
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	1d19      	adds	r1, r3, #4
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6011      	str	r1, [r2, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8004a38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004a3c:	f107 0310 	add.w	r3, r7, #16
 8004a40:	4611      	mov	r1, r2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fd1c 	bl	8004480 <_StoreChar>
        break;
 8004a48:	e07a      	b.n	8004b40 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	1d19      	adds	r1, r3, #4
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6011      	str	r1, [r2, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004a58:	f107 0010 	add.w	r0, r7, #16
 8004a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a66:	220a      	movs	r2, #10
 8004a68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a6a:	f7ff fe1b 	bl	80046a4 <_PrintInt>
        break;
 8004a6e:	e067      	b.n	8004b40 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	1d19      	adds	r1, r3, #4
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6011      	str	r1, [r2, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004a7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a80:	f107 0010 	add.w	r0, r7, #16
 8004a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8e:	220a      	movs	r2, #10
 8004a90:	f7ff fd72 	bl	8004578 <_PrintUnsigned>
        break;
 8004a94:	e054      	b.n	8004b40 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	1d19      	adds	r1, r3, #4
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6011      	str	r1, [r2, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004aa4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004aa6:	f107 0010 	add.w	r0, r7, #16
 8004aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab4:	2210      	movs	r2, #16
 8004ab6:	f7ff fd5f 	bl	8004578 <_PrintUnsigned>
        break;
 8004aba:	e041      	b.n	8004b40 <_VPrintTarget+0x37c>
 8004abc:	20014254 	.word	0x20014254
      case 's':
        s = va_arg(*pParamList, const char*);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	1d19      	adds	r1, r3, #4
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6011      	str	r1, [r2, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8004ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <_VPrintTarget+0x314>
          s = "(null)";
 8004ad4:	4b4a      	ldr	r3, [pc, #296]	; (8004c00 <_VPrintTarget+0x43c>)
 8004ad6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8004ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8004ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8004ae6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00b      	beq.n	8004b06 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004aee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004af2:	f107 0310 	add.w	r3, r7, #16
 8004af6:	4611      	mov	r1, r2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff fcc1 	bl	8004480 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	2b7f      	cmp	r3, #127	; 0x7f
 8004b02:	d9e9      	bls.n	8004ad8 <_VPrintTarget+0x314>
        break;
 8004b04:	e01c      	b.n	8004b40 <_VPrintTarget+0x37c>
            break;
 8004b06:	bf00      	nop
        break;
 8004b08:	e01a      	b.n	8004b40 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	1d19      	adds	r1, r3, #4
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6011      	str	r1, [r2, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004b18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b1a:	f107 0010 	add.w	r0, r7, #16
 8004b1e:	2300      	movs	r3, #0
 8004b20:	9301      	str	r3, [sp, #4]
 8004b22:	2308      	movs	r3, #8
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	2308      	movs	r3, #8
 8004b28:	2210      	movs	r2, #16
 8004b2a:	f7ff fd25 	bl	8004578 <_PrintUnsigned>
        break;
 8004b2e:	e007      	b.n	8004b40 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004b30:	f107 0310 	add.w	r3, r7, #16
 8004b34:	2125      	movs	r1, #37	; 0x25
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fca2 	bl	8004480 <_StoreChar>
        break;
 8004b3c:	e000      	b.n	8004b40 <_VPrintTarget+0x37c>
      default:
        break;
 8004b3e:	bf00      	nop
      }
      sFormat++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	e007      	b.n	8004b58 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004b48:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004b4c:	f107 0310 	add.w	r3, r7, #16
 8004b50:	4611      	mov	r1, r2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff fc94 	bl	8004480 <_StoreChar>
    }
  } while (*sFormat);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f47f ae4d 	bne.w	80047fc <_VPrintTarget+0x38>
 8004b62:	e000      	b.n	8004b66 <_VPrintTarget+0x3a2>
      break;
 8004b64:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d041      	beq.n	8004bf0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b7c:	e00b      	b.n	8004b96 <_VPrintTarget+0x3d2>
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b84:	1c59      	adds	r1, r3, #1
 8004b86:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004b88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b92:	09db      	lsrs	r3, r3, #7
 8004b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	2b7f      	cmp	r3, #127	; 0x7f
 8004b9a:	d8f0      	bhi.n	8004b7e <_VPrintTarget+0x3ba>
 8004b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004baa:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb4:	e00b      	b.n	8004bce <_VPrintTarget+0x40a>
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbc:	1c59      	adds	r1, r3, #1
 8004bbe:	6379      	str	r1, [r7, #52]	; 0x34
 8004bc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	09db      	lsrs	r3, r3, #7
 8004bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8004bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8004bd2:	d8f0      	bhi.n	8004bb6 <_VPrintTarget+0x3f2>
 8004bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	637a      	str	r2, [r7, #52]	; 0x34
 8004bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	6979      	ldr	r1, [r7, #20]
 8004be8:	221a      	movs	r2, #26
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fad8 	bl	80041a0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004bf6:	bf00      	nop
 8004bf8:	3758      	adds	r7, #88	; 0x58
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	08005b64 	.word	0x08005b64

08004c04 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c12:	2300      	movs	r3, #0
 8004c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c18:	4917      	ldr	r1, [pc, #92]	; (8004c78 <SEGGER_SYSVIEW_Init+0x74>)
 8004c1a:	4818      	ldr	r0, [pc, #96]	; (8004c7c <SEGGER_SYSVIEW_Init+0x78>)
 8004c1c:	f7ff f8d0 	bl	8003dc0 <SEGGER_RTT_AllocUpBuffer>
 8004c20:	4603      	mov	r3, r0
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c26:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c28:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c2a:	785a      	ldrb	r2, [r3, #1]
 8004c2c:	4b14      	ldr	r3, [pc, #80]	; (8004c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c2e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c30:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c32:	7e1b      	ldrb	r3, [r3, #24]
 8004c34:	4618      	mov	r0, r3
 8004c36:	2300      	movs	r3, #0
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <SEGGER_SYSVIEW_Init+0x80>)
 8004c3e:	490f      	ldr	r1, [pc, #60]	; (8004c7c <SEGGER_SYSVIEW_Init+0x78>)
 8004c40:	f7ff f942 	bl	8003ec8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c44:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c4a:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <SEGGER_SYSVIEW_Init+0x84>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a0c      	ldr	r2, [pc, #48]	; (8004c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c50:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c52:	4a0b      	ldr	r2, [pc, #44]	; (8004c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c58:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c5e:	4a08      	ldr	r2, [pc, #32]	; (8004c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c64:	4a06      	ldr	r2, [pc, #24]	; (8004c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	2001321c 	.word	0x2001321c
 8004c7c:	08005b6c 	.word	0x08005b6c
 8004c80:	20014224 	.word	0x20014224
 8004c84:	2001421c 	.word	0x2001421c
 8004c88:	e0001004 	.word	0xe0001004

08004c8c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004c94:	4a04      	ldr	r2, [pc, #16]	; (8004ca8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6113      	str	r3, [r2, #16]
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20014224 	.word	0x20014224

08004cac <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004cb8:	f04f 0120 	mov.w	r1, #32
 8004cbc:	f381 8811 	msr	BASEPRI, r1
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	4808      	ldr	r0, [pc, #32]	; (8004ce4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004cc4:	f7ff f97c 	bl	8003fc0 <_PreparePacket>
 8004cc8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	68b8      	ldr	r0, [r7, #8]
 8004cd0:	f7ff fa66 	bl	80041a0 <_SendPacket>
  RECORD_END();
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f383 8811 	msr	BASEPRI, r3
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20014254 	.word	0x20014254

08004ce8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8004cf6:	f04f 0120 	mov.w	r1, #32
 8004cfa:	f381 8811 	msr	BASEPRI, r1
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	4816      	ldr	r0, [pc, #88]	; (8004d5c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004d02:	f7ff f95d 	bl	8003fc0 <_PreparePacket>
 8004d06:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	e00b      	b.n	8004d2e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	1c59      	adds	r1, r3, #1
 8004d1e:	61f9      	str	r1, [r7, #28]
 8004d20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	09db      	lsrs	r3, r3, #7
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b7f      	cmp	r3, #127	; 0x7f
 8004d32:	d8f0      	bhi.n	8004d16 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	61fa      	str	r2, [r7, #28]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	6938      	ldr	r0, [r7, #16]
 8004d4a:	f7ff fa29 	bl	80041a0 <_SendPacket>
  RECORD_END();
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f383 8811 	msr	BASEPRI, r3
}
 8004d54:	bf00      	nop
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20014254 	.word	0x20014254

08004d60 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08c      	sub	sp, #48	; 0x30
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d70:	f04f 0120 	mov.w	r1, #32
 8004d74:	f381 8811 	msr	BASEPRI, r1
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	4825      	ldr	r0, [pc, #148]	; (8004e10 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d7c:	f7ff f920 	bl	8003fc0 <_PreparePacket>
 8004d80:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d8e:	e00b      	b.n	8004da8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	1c59      	adds	r1, r3, #1
 8004d98:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	09db      	lsrs	r3, r3, #7
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	2b7f      	cmp	r3, #127	; 0x7f
 8004dac:	d8f0      	bhi.n	8004d90 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	e00b      	b.n	8004de0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	1c59      	adds	r1, r3, #1
 8004dd0:	6279      	str	r1, [r7, #36]	; 0x24
 8004dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	09db      	lsrs	r3, r3, #7
 8004dde:	623b      	str	r3, [r7, #32]
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	2b7f      	cmp	r3, #127	; 0x7f
 8004de4:	d8f0      	bhi.n	8004dc8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	627a      	str	r2, [r7, #36]	; 0x24
 8004dec:	6a3a      	ldr	r2, [r7, #32]
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	6979      	ldr	r1, [r7, #20]
 8004dfa:	69b8      	ldr	r0, [r7, #24]
 8004dfc:	f7ff f9d0 	bl	80041a0 <_SendPacket>
  RECORD_END();
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f383 8811 	msr	BASEPRI, r3
}
 8004e06:	bf00      	nop
 8004e08:	3730      	adds	r7, #48	; 0x30
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20014254 	.word	0x20014254

08004e14 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08c      	sub	sp, #48	; 0x30
 8004e18:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004e1a:	4b59      	ldr	r3, [pc, #356]	; (8004f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004e20:	f3ef 8311 	mrs	r3, BASEPRI
 8004e24:	f04f 0120 	mov.w	r1, #32
 8004e28:	f381 8811 	msr	BASEPRI, r1
 8004e2c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004e2e:	4b54      	ldr	r3, [pc, #336]	; (8004f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e30:	785b      	ldrb	r3, [r3, #1]
 8004e32:	220a      	movs	r2, #10
 8004e34:	4953      	ldr	r1, [pc, #332]	; (8004f84 <SEGGER_SYSVIEW_Start+0x170>)
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fb f9d2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004e42:	f7fe fc8f 	bl	8003764 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004e46:	200a      	movs	r0, #10
 8004e48:	f7ff ff30 	bl	8004cac <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e50:	f04f 0120 	mov.w	r1, #32
 8004e54:	f381 8811 	msr	BASEPRI, r1
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	484b      	ldr	r0, [pc, #300]	; (8004f88 <SEGGER_SYSVIEW_Start+0x174>)
 8004e5c:	f7ff f8b0 	bl	8003fc0 <_PreparePacket>
 8004e60:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e6a:	4b45      	ldr	r3, [pc, #276]	; (8004f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e70:	e00b      	b.n	8004e8a <SEGGER_SYSVIEW_Start+0x76>
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e78:	1c59      	adds	r1, r3, #1
 8004e7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	09db      	lsrs	r3, r3, #7
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e8e:	d8f0      	bhi.n	8004e72 <SEGGER_SYSVIEW_Start+0x5e>
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea4:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	623b      	str	r3, [r7, #32]
 8004eaa:	e00b      	b.n	8004ec4 <SEGGER_SYSVIEW_Start+0xb0>
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	1c59      	adds	r1, r3, #1
 8004eb4:	6279      	str	r1, [r7, #36]	; 0x24
 8004eb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	09db      	lsrs	r3, r3, #7
 8004ec2:	623b      	str	r3, [r7, #32]
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ec8:	d8f0      	bhi.n	8004eac <SEGGER_SYSVIEW_Start+0x98>
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	627a      	str	r2, [r7, #36]	; 0x24
 8004ed0:	6a3a      	ldr	r2, [r7, #32]
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	e00b      	b.n	8004efe <SEGGER_SYSVIEW_Start+0xea>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	1c59      	adds	r1, r3, #1
 8004eee:	61f9      	str	r1, [r7, #28]
 8004ef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	09db      	lsrs	r3, r3, #7
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b7f      	cmp	r3, #127	; 0x7f
 8004f02:	d8f0      	bhi.n	8004ee6 <SEGGER_SYSVIEW_Start+0xd2>
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	61fa      	str	r2, [r7, #28]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	e00b      	b.n	8004f36 <SEGGER_SYSVIEW_Start+0x122>
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	1c59      	adds	r1, r3, #1
 8004f26:	6179      	str	r1, [r7, #20]
 8004f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	09db      	lsrs	r3, r3, #7
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b7f      	cmp	r3, #127	; 0x7f
 8004f3a:	d8f0      	bhi.n	8004f1e <SEGGER_SYSVIEW_Start+0x10a>
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	617a      	str	r2, [r7, #20]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f4c:	2218      	movs	r2, #24
 8004f4e:	6839      	ldr	r1, [r7, #0]
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff f925 	bl	80041a0 <_SendPacket>
      RECORD_END();
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f5c:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004f6a:	f000 f9eb 	bl	8005344 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004f6e:	f000 f9b1 	bl	80052d4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004f72:	f000 fc1d 	bl	80057b0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004f76:	bf00      	nop
 8004f78:	3730      	adds	r7, #48	; 0x30
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20014224 	.word	0x20014224
 8004f84:	08005bac 	.word	0x08005bac
 8004f88:	20014254 	.word	0x20014254

08004f8c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f92:	f3ef 8311 	mrs	r3, BASEPRI
 8004f96:	f04f 0120 	mov.w	r1, #32
 8004f9a:	f381 8811 	msr	BASEPRI, r1
 8004f9e:	607b      	str	r3, [r7, #4]
 8004fa0:	480b      	ldr	r0, [pc, #44]	; (8004fd0 <SEGGER_SYSVIEW_Stop+0x44>)
 8004fa2:	f7ff f80d 	bl	8003fc0 <_PreparePacket>
 8004fa6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004fb0:	220b      	movs	r2, #11
 8004fb2:	6839      	ldr	r1, [r7, #0]
 8004fb4:	6838      	ldr	r0, [r7, #0]
 8004fb6:	f7ff f8f3 	bl	80041a0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f383 8811 	msr	BASEPRI, r3
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20014254 	.word	0x20014254
 8004fd4:	20014224 	.word	0x20014224

08004fd8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	; 0x30
 8004fdc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fde:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe2:	f04f 0120 	mov.w	r1, #32
 8004fe6:	f381 8811 	msr	BASEPRI, r1
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	4845      	ldr	r0, [pc, #276]	; (8005104 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004fee:	f7fe ffe7 	bl	8003fc0 <_PreparePacket>
 8004ff2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ffc:	4b42      	ldr	r3, [pc, #264]	; (8005108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
 8005002:	e00b      	b.n	800501c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	b2da      	uxtb	r2, r3
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500a:	1c59      	adds	r1, r3, #1
 800500c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800500e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	09db      	lsrs	r3, r3, #7
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	2b7f      	cmp	r3, #127	; 0x7f
 8005020:	d8f0      	bhi.n	8005004 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
 8005036:	4b34      	ldr	r3, [pc, #208]	; (8005108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	623b      	str	r3, [r7, #32]
 800503c:	e00b      	b.n	8005056 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	1c59      	adds	r1, r3, #1
 8005046:	6279      	str	r1, [r7, #36]	; 0x24
 8005048:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	09db      	lsrs	r3, r3, #7
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	2b7f      	cmp	r3, #127	; 0x7f
 800505a:	d8f0      	bhi.n	800503e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	627a      	str	r2, [r7, #36]	; 0x24
 8005062:	6a3a      	ldr	r2, [r7, #32]
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	4b25      	ldr	r3, [pc, #148]	; (8005108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	e00b      	b.n	8005090 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	b2da      	uxtb	r2, r3
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	1c59      	adds	r1, r3, #1
 8005080:	61f9      	str	r1, [r7, #28]
 8005082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	09db      	lsrs	r3, r3, #7
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b7f      	cmp	r3, #127	; 0x7f
 8005094:	d8f0      	bhi.n	8005078 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	61fa      	str	r2, [r7, #28]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e00b      	b.n	80050c8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	1c59      	adds	r1, r3, #1
 80050b8:	6179      	str	r1, [r7, #20]
 80050ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	09db      	lsrs	r3, r3, #7
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b7f      	cmp	r3, #127	; 0x7f
 80050cc:	d8f0      	bhi.n	80050b0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	617a      	str	r2, [r7, #20]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050de:	2218      	movs	r2, #24
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	68b8      	ldr	r0, [r7, #8]
 80050e4:	f7ff f85c 	bl	80041a0 <_SendPacket>
  RECORD_END();
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050ee:	4b06      	ldr	r3, [pc, #24]	; (8005108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80050f6:	4b04      	ldr	r3, [pc, #16]	; (8005108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	4798      	blx	r3
  }
}
 80050fc:	bf00      	nop
 80050fe:	3730      	adds	r7, #48	; 0x30
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20014254 	.word	0x20014254
 8005108:	20014224 	.word	0x20014224

0800510c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b092      	sub	sp, #72	; 0x48
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005114:	f3ef 8311 	mrs	r3, BASEPRI
 8005118:	f04f 0120 	mov.w	r1, #32
 800511c:	f381 8811 	msr	BASEPRI, r1
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	486a      	ldr	r0, [pc, #424]	; (80052cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005124:	f7fe ff4c 	bl	8003fc0 <_PreparePacket>
 8005128:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	647b      	str	r3, [r7, #68]	; 0x44
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	4b66      	ldr	r3, [pc, #408]	; (80052d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	643b      	str	r3, [r7, #64]	; 0x40
 800513e:	e00b      	b.n	8005158 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005142:	b2da      	uxtb	r2, r3
 8005144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005146:	1c59      	adds	r1, r3, #1
 8005148:	6479      	str	r1, [r7, #68]	; 0x44
 800514a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005154:	09db      	lsrs	r3, r3, #7
 8005156:	643b      	str	r3, [r7, #64]	; 0x40
 8005158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515a:	2b7f      	cmp	r3, #127	; 0x7f
 800515c:	d8f0      	bhi.n	8005140 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800515e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	647a      	str	r2, [r7, #68]	; 0x44
 8005164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	63bb      	str	r3, [r7, #56]	; 0x38
 8005178:	e00b      	b.n	8005192 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	b2da      	uxtb	r2, r3
 800517e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005180:	1c59      	adds	r1, r3, #1
 8005182:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518e:	09db      	lsrs	r3, r3, #7
 8005190:	63bb      	str	r3, [r7, #56]	; 0x38
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	2b7f      	cmp	r3, #127	; 0x7f
 8005196:	d8f0      	bhi.n	800517a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800519e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	4619      	mov	r1, r3
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7fe fed5 	bl	8003f60 <_EncodeStr>
 80051b6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80051b8:	2209      	movs	r2, #9
 80051ba:	68f9      	ldr	r1, [r7, #12]
 80051bc:	6938      	ldr	r0, [r7, #16]
 80051be:	f7fe ffef 	bl	80041a0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b40      	ldr	r3, [pc, #256]	; (80052d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	633b      	str	r3, [r7, #48]	; 0x30
 80051d6:	e00b      	b.n	80051f0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051de:	1c59      	adds	r1, r3, #1
 80051e0:	6379      	str	r1, [r7, #52]	; 0x34
 80051e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	09db      	lsrs	r3, r3, #7
 80051ee:	633b      	str	r3, [r7, #48]	; 0x30
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	2b7f      	cmp	r3, #127	; 0x7f
 80051f4:	d8f0      	bhi.n	80051d8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80051f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	637a      	str	r2, [r7, #52]	; 0x34
 80051fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005204:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005210:	e00b      	b.n	800522a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	b2da      	uxtb	r2, r3
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	1c59      	adds	r1, r3, #1
 800521a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800521c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	09db      	lsrs	r3, r3, #7
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	2b7f      	cmp	r3, #127	; 0x7f
 800522e:	d8f0      	bhi.n	8005212 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	623b      	str	r3, [r7, #32]
 800524a:	e00b      	b.n	8005264 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	b2da      	uxtb	r2, r3
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	1c59      	adds	r1, r3, #1
 8005254:	6279      	str	r1, [r7, #36]	; 0x24
 8005256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	09db      	lsrs	r3, r3, #7
 8005262:	623b      	str	r3, [r7, #32]
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	2b7f      	cmp	r3, #127	; 0x7f
 8005268:	d8f0      	bhi.n	800524c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	627a      	str	r2, [r7, #36]	; 0x24
 8005270:	6a3a      	ldr	r2, [r7, #32]
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	61fb      	str	r3, [r7, #28]
 800527e:	2300      	movs	r3, #0
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	e00b      	b.n	800529c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	1c59      	adds	r1, r3, #1
 800528c:	61f9      	str	r1, [r7, #28]
 800528e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	09db      	lsrs	r3, r3, #7
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2b7f      	cmp	r3, #127	; 0x7f
 80052a0:	d8f0      	bhi.n	8005284 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	61fa      	str	r2, [r7, #28]
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80052b2:	2215      	movs	r2, #21
 80052b4:	68f9      	ldr	r1, [r7, #12]
 80052b6:	6938      	ldr	r0, [r7, #16]
 80052b8:	f7fe ff72 	bl	80041a0 <_SendPacket>
  RECORD_END();
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f383 8811 	msr	BASEPRI, r3
}
 80052c2:	bf00      	nop
 80052c4:	3748      	adds	r7, #72	; 0x48
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20014254 	.word	0x20014254
 80052d0:	20014224 	.word	0x20014224

080052d4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80052d8:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80052e0:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80052ea:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4798      	blx	r3
  }
}
 80052f2:	bf00      	nop
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20014224 	.word	0x20014224

080052fc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005304:	f3ef 8311 	mrs	r3, BASEPRI
 8005308:	f04f 0120 	mov.w	r1, #32
 800530c:	f381 8811 	msr	BASEPRI, r1
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	480b      	ldr	r0, [pc, #44]	; (8005340 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005314:	f7fe fe54 	bl	8003fc0 <_PreparePacket>
 8005318:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800531a:	2280      	movs	r2, #128	; 0x80
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	6938      	ldr	r0, [r7, #16]
 8005320:	f7fe fe1e 	bl	8003f60 <_EncodeStr>
 8005324:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005326:	220e      	movs	r2, #14
 8005328:	68f9      	ldr	r1, [r7, #12]
 800532a:	6938      	ldr	r0, [r7, #16]
 800532c:	f7fe ff38 	bl	80041a0 <_SendPacket>
  RECORD_END();
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f383 8811 	msr	BASEPRI, r3
}
 8005336:	bf00      	nop
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20014254 	.word	0x20014254

08005344 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005344:	b590      	push	{r4, r7, lr}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800534a:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d01a      	beq.n	8005388 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005352:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d015      	beq.n	8005388 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800535c:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4798      	blx	r3
 8005364:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005368:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800536a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	000a      	movs	r2, r1
 8005378:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800537a:	4613      	mov	r3, r2
 800537c:	461a      	mov	r2, r3
 800537e:	4621      	mov	r1, r4
 8005380:	200d      	movs	r0, #13
 8005382:	f7ff fced 	bl	8004d60 <SEGGER_SYSVIEW_RecordU32x2>
 8005386:	e006      	b.n	8005396 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005388:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4619      	mov	r1, r3
 800538e:	200c      	movs	r0, #12
 8005390:	f7ff fcaa 	bl	8004ce8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bd90      	pop	{r4, r7, pc}
 800539e:	bf00      	nop
 80053a0:	20014224 	.word	0x20014224
 80053a4:	e0001004 	.word	0xe0001004

080053a8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053ae:	f3ef 8311 	mrs	r3, BASEPRI
 80053b2:	f04f 0120 	mov.w	r1, #32
 80053b6:	f381 8811 	msr	BASEPRI, r1
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	4819      	ldr	r0, [pc, #100]	; (8005424 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80053be:	f7fe fdff 	bl	8003fc0 <_PreparePacket>
 80053c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80053c8:	4b17      	ldr	r3, [pc, #92]	; (8005428 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	e00b      	b.n	80053f4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	1c59      	adds	r1, r3, #1
 80053e4:	6179      	str	r1, [r7, #20]
 80053e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	09db      	lsrs	r3, r3, #7
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b7f      	cmp	r3, #127	; 0x7f
 80053f8:	d8f0      	bhi.n	80053dc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	617a      	str	r2, [r7, #20]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800540a:	2202      	movs	r2, #2
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	68b8      	ldr	r0, [r7, #8]
 8005410:	f7fe fec6 	bl	80041a0 <_SendPacket>
  RECORD_END();
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f383 8811 	msr	BASEPRI, r3
}
 800541a:	bf00      	nop
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20014254 	.word	0x20014254
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005432:	f3ef 8311 	mrs	r3, BASEPRI
 8005436:	f04f 0120 	mov.w	r1, #32
 800543a:	f381 8811 	msr	BASEPRI, r1
 800543e:	607b      	str	r3, [r7, #4]
 8005440:	4807      	ldr	r0, [pc, #28]	; (8005460 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005442:	f7fe fdbd 	bl	8003fc0 <_PreparePacket>
 8005446:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005448:	2203      	movs	r2, #3
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	6838      	ldr	r0, [r7, #0]
 800544e:	f7fe fea7 	bl	80041a0 <_SendPacket>
  RECORD_END();
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f383 8811 	msr	BASEPRI, r3
}
 8005458:	bf00      	nop
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20014254 	.word	0x20014254

08005464 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800546a:	f3ef 8311 	mrs	r3, BASEPRI
 800546e:	f04f 0120 	mov.w	r1, #32
 8005472:	f381 8811 	msr	BASEPRI, r1
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	4807      	ldr	r0, [pc, #28]	; (8005498 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800547a:	f7fe fda1 	bl	8003fc0 <_PreparePacket>
 800547e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005480:	2212      	movs	r2, #18
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	6838      	ldr	r0, [r7, #0]
 8005486:	f7fe fe8b 	bl	80041a0 <_SendPacket>
  RECORD_END();
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f383 8811 	msr	BASEPRI, r3
}
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20014254 	.word	0x20014254

0800549c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054a2:	f3ef 8311 	mrs	r3, BASEPRI
 80054a6:	f04f 0120 	mov.w	r1, #32
 80054aa:	f381 8811 	msr	BASEPRI, r1
 80054ae:	607b      	str	r3, [r7, #4]
 80054b0:	4807      	ldr	r0, [pc, #28]	; (80054d0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80054b2:	f7fe fd85 	bl	8003fc0 <_PreparePacket>
 80054b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80054b8:	2211      	movs	r2, #17
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	6838      	ldr	r0, [r7, #0]
 80054be:	f7fe fe6f 	bl	80041a0 <_SendPacket>
  RECORD_END();
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f383 8811 	msr	BASEPRI, r3
}
 80054c8:	bf00      	nop
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20014254 	.word	0x20014254

080054d4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054dc:	f3ef 8311 	mrs	r3, BASEPRI
 80054e0:	f04f 0120 	mov.w	r1, #32
 80054e4:	f381 8811 	msr	BASEPRI, r1
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	4819      	ldr	r0, [pc, #100]	; (8005550 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80054ec:	f7fe fd68 	bl	8003fc0 <_PreparePacket>
 80054f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054f6:	4b17      	ldr	r3, [pc, #92]	; (8005554 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	e00b      	b.n	8005522 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	1c59      	adds	r1, r3, #1
 8005512:	61f9      	str	r1, [r7, #28]
 8005514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	09db      	lsrs	r3, r3, #7
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b7f      	cmp	r3, #127	; 0x7f
 8005526:	d8f0      	bhi.n	800550a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	61fa      	str	r2, [r7, #28]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005538:	2208      	movs	r2, #8
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	6938      	ldr	r0, [r7, #16]
 800553e:	f7fe fe2f 	bl	80041a0 <_SendPacket>
  RECORD_END();
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f383 8811 	msr	BASEPRI, r3
}
 8005548:	bf00      	nop
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20014254 	.word	0x20014254
 8005554:	20014224 	.word	0x20014224

08005558 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005560:	f3ef 8311 	mrs	r3, BASEPRI
 8005564:	f04f 0120 	mov.w	r1, #32
 8005568:	f381 8811 	msr	BASEPRI, r1
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	4819      	ldr	r0, [pc, #100]	; (80055d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005570:	f7fe fd26 	bl	8003fc0 <_PreparePacket>
 8005574:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800557a:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	e00b      	b.n	80055a6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	b2da      	uxtb	r2, r3
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	1c59      	adds	r1, r3, #1
 8005596:	61f9      	str	r1, [r7, #28]
 8005598:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	09db      	lsrs	r3, r3, #7
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	2b7f      	cmp	r3, #127	; 0x7f
 80055aa:	d8f0      	bhi.n	800558e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	61fa      	str	r2, [r7, #28]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80055bc:	2204      	movs	r2, #4
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	6938      	ldr	r0, [r7, #16]
 80055c2:	f7fe fded 	bl	80041a0 <_SendPacket>
  RECORD_END();
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f383 8811 	msr	BASEPRI, r3
}
 80055cc:	bf00      	nop
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20014254 	.word	0x20014254
 80055d8:	20014224 	.word	0x20014224

080055dc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055e4:	f3ef 8311 	mrs	r3, BASEPRI
 80055e8:	f04f 0120 	mov.w	r1, #32
 80055ec:	f381 8811 	msr	BASEPRI, r1
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	4819      	ldr	r0, [pc, #100]	; (8005658 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80055f4:	f7fe fce4 	bl	8003fc0 <_PreparePacket>
 80055f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055fe:	4b17      	ldr	r3, [pc, #92]	; (800565c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	e00b      	b.n	800562a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	b2da      	uxtb	r2, r3
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	1c59      	adds	r1, r3, #1
 800561a:	61f9      	str	r1, [r7, #28]
 800561c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	09db      	lsrs	r3, r3, #7
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b7f      	cmp	r3, #127	; 0x7f
 800562e:	d8f0      	bhi.n	8005612 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	61fa      	str	r2, [r7, #28]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	701a      	strb	r2, [r3, #0]
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005640:	2206      	movs	r2, #6
 8005642:	68f9      	ldr	r1, [r7, #12]
 8005644:	6938      	ldr	r0, [r7, #16]
 8005646:	f7fe fdab 	bl	80041a0 <_SendPacket>
  RECORD_END();
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f383 8811 	msr	BASEPRI, r3
}
 8005650:	bf00      	nop
 8005652:	3720      	adds	r7, #32
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20014254 	.word	0x20014254
 800565c:	20014224 	.word	0x20014224

08005660 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b08c      	sub	sp, #48	; 0x30
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800566a:	4b40      	ldr	r3, [pc, #256]	; (800576c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d077      	beq.n	8005762 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005672:	4b3e      	ldr	r3, [pc, #248]	; (800576c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005678:	2300      	movs	r3, #0
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
 800567c:	e008      	b.n	8005690 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d007      	beq.n	800569a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	3301      	adds	r3, #1
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005694:	429a      	cmp	r2, r3
 8005696:	d3f2      	bcc.n	800567e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005698:	e000      	b.n	800569c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800569a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d055      	beq.n	800574e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056a2:	f3ef 8311 	mrs	r3, BASEPRI
 80056a6:	f04f 0120 	mov.w	r1, #32
 80056aa:	f381 8811 	msr	BASEPRI, r1
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	482f      	ldr	r0, [pc, #188]	; (8005770 <SEGGER_SYSVIEW_SendModule+0x110>)
 80056b2:	f7fe fc85 	bl	8003fc0 <_PreparePacket>
 80056b6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	e00b      	b.n	80056de <SEGGER_SYSVIEW_SendModule+0x7e>
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	1c59      	adds	r1, r3, #1
 80056ce:	6279      	str	r1, [r7, #36]	; 0x24
 80056d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	09db      	lsrs	r3, r3, #7
 80056dc:	623b      	str	r3, [r7, #32]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	2b7f      	cmp	r3, #127	; 0x7f
 80056e2:	d8f0      	bhi.n	80056c6 <SEGGER_SYSVIEW_SendModule+0x66>
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	627a      	str	r2, [r7, #36]	; 0x24
 80056ea:	6a3a      	ldr	r2, [r7, #32]
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	e00b      	b.n	8005718 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	b2da      	uxtb	r2, r3
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	1c59      	adds	r1, r3, #1
 8005708:	61f9      	str	r1, [r7, #28]
 800570a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	09db      	lsrs	r3, r3, #7
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	2b7f      	cmp	r3, #127	; 0x7f
 800571c:	d8f0      	bhi.n	8005700 <SEGGER_SYSVIEW_SendModule+0xa0>
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	61fa      	str	r2, [r7, #28]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	4619      	mov	r1, r3
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7fe fc12 	bl	8003f60 <_EncodeStr>
 800573c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800573e:	2216      	movs	r2, #22
 8005740:	68f9      	ldr	r1, [r7, #12]
 8005742:	6938      	ldr	r0, [r7, #16]
 8005744:	f7fe fd2c 	bl	80041a0 <_SendPacket>
      RECORD_END();
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d006      	beq.n	8005762 <SEGGER_SYSVIEW_SendModule+0x102>
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4798      	blx	r3
    }
  }
}
 8005762:	bf00      	nop
 8005764:	3730      	adds	r7, #48	; 0x30
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	2001424c 	.word	0x2001424c
 8005770:	20014254 	.word	0x20014254

08005774 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800577a:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00f      	beq.n	80057a2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005782:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f2      	bne.n	8005788 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	2001424c 	.word	0x2001424c

080057b0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80057b6:	f3ef 8311 	mrs	r3, BASEPRI
 80057ba:	f04f 0120 	mov.w	r1, #32
 80057be:	f381 8811 	msr	BASEPRI, r1
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	4817      	ldr	r0, [pc, #92]	; (8005824 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80057c6:	f7fe fbfb 	bl	8003fc0 <_PreparePacket>
 80057ca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	4b14      	ldr	r3, [pc, #80]	; (8005828 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	e00b      	b.n	80057f4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	1c59      	adds	r1, r3, #1
 80057e4:	6179      	str	r1, [r7, #20]
 80057e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	09db      	lsrs	r3, r3, #7
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2b7f      	cmp	r3, #127	; 0x7f
 80057f8:	d8f0      	bhi.n	80057dc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	617a      	str	r2, [r7, #20]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800580a:	221b      	movs	r2, #27
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	68b8      	ldr	r0, [r7, #8]
 8005810:	f7fe fcc6 	bl	80041a0 <_SendPacket>
  RECORD_END();
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f383 8811 	msr	BASEPRI, r3
}
 800581a:	bf00      	nop
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20014254 	.word	0x20014254
 8005828:	20014250 	.word	0x20014250

0800582c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800582c:	b40f      	push	{r0, r1, r2, r3}
 800582e:	b580      	push	{r7, lr}
 8005830:	b082      	sub	sp, #8
 8005832:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005834:	f107 0314 	add.w	r3, r7, #20
 8005838:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	461a      	mov	r2, r3
 800583e:	2100      	movs	r1, #0
 8005840:	6938      	ldr	r0, [r7, #16]
 8005842:	f7fe ffbf 	bl	80047c4 <_VPrintTarget>
  va_end(ParamList);
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005850:	b004      	add	sp, #16
 8005852:	4770      	bx	lr

08005854 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	; 0x28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800585c:	f3ef 8311 	mrs	r3, BASEPRI
 8005860:	f04f 0120 	mov.w	r1, #32
 8005864:	f381 8811 	msr	BASEPRI, r1
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	4827      	ldr	r0, [pc, #156]	; (8005908 <SEGGER_SYSVIEW_Warn+0xb4>)
 800586c:	f7fe fba8 	bl	8003fc0 <_PreparePacket>
 8005870:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005872:	2280      	movs	r2, #128	; 0x80
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	6938      	ldr	r0, [r7, #16]
 8005878:	f7fe fb72 	bl	8003f60 <_EncodeStr>
 800587c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
 8005882:	2301      	movs	r3, #1
 8005884:	623b      	str	r3, [r7, #32]
 8005886:	e00b      	b.n	80058a0 <SEGGER_SYSVIEW_Warn+0x4c>
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	b2da      	uxtb	r2, r3
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	1c59      	adds	r1, r3, #1
 8005890:	6279      	str	r1, [r7, #36]	; 0x24
 8005892:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	09db      	lsrs	r3, r3, #7
 800589e:	623b      	str	r3, [r7, #32]
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	2b7f      	cmp	r3, #127	; 0x7f
 80058a4:	d8f0      	bhi.n	8005888 <SEGGER_SYSVIEW_Warn+0x34>
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	627a      	str	r2, [r7, #36]	; 0x24
 80058ac:	6a3a      	ldr	r2, [r7, #32]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	e00b      	b.n	80058d8 <SEGGER_SYSVIEW_Warn+0x84>
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	1c59      	adds	r1, r3, #1
 80058c8:	61f9      	str	r1, [r7, #28]
 80058ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	09db      	lsrs	r3, r3, #7
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	2b7f      	cmp	r3, #127	; 0x7f
 80058dc:	d8f0      	bhi.n	80058c0 <SEGGER_SYSVIEW_Warn+0x6c>
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	61fa      	str	r2, [r7, #28]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058ee:	221a      	movs	r2, #26
 80058f0:	68f9      	ldr	r1, [r7, #12]
 80058f2:	6938      	ldr	r0, [r7, #16]
 80058f4:	f7fe fc54 	bl	80041a0 <_SendPacket>
  RECORD_END();
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f383 8811 	msr	BASEPRI, r3
}
 80058fe:	bf00      	nop
 8005900:	3728      	adds	r7, #40	; 0x28
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20014254 	.word	0x20014254

0800590c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005910:	4b13      	ldr	r3, [pc, #76]	; (8005960 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005912:	7e1b      	ldrb	r3, [r3, #24]
 8005914:	4619      	mov	r1, r3
 8005916:	4a13      	ldr	r2, [pc, #76]	; (8005964 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005918:	460b      	mov	r3, r1
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	440b      	add	r3, r1
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4413      	add	r3, r2
 8005922:	336c      	adds	r3, #108	; 0x6c
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b0e      	ldr	r3, [pc, #56]	; (8005960 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005928:	7e1b      	ldrb	r3, [r3, #24]
 800592a:	4618      	mov	r0, r3
 800592c:	490d      	ldr	r1, [pc, #52]	; (8005964 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800592e:	4603      	mov	r3, r0
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	4403      	add	r3, r0
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	440b      	add	r3, r1
 8005938:	3370      	adds	r3, #112	; 0x70
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d00b      	beq.n	8005958 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005940:	4b07      	ldr	r3, [pc, #28]	; (8005960 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005942:	789b      	ldrb	r3, [r3, #2]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d107      	bne.n	8005958 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005948:	4b05      	ldr	r3, [pc, #20]	; (8005960 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800594a:	2201      	movs	r2, #1
 800594c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800594e:	f7fe fb43 	bl	8003fd8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005952:	4b03      	ldr	r3, [pc, #12]	; (8005960 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005954:	2200      	movs	r2, #0
 8005956:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005958:	4b01      	ldr	r3, [pc, #4]	; (8005960 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800595a:	781b      	ldrb	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20014224 	.word	0x20014224
 8005964:	20014384 	.word	0x20014384

08005968 <__libc_init_array>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	4d0d      	ldr	r5, [pc, #52]	; (80059a0 <__libc_init_array+0x38>)
 800596c:	4c0d      	ldr	r4, [pc, #52]	; (80059a4 <__libc_init_array+0x3c>)
 800596e:	1b64      	subs	r4, r4, r5
 8005970:	10a4      	asrs	r4, r4, #2
 8005972:	2600      	movs	r6, #0
 8005974:	42a6      	cmp	r6, r4
 8005976:	d109      	bne.n	800598c <__libc_init_array+0x24>
 8005978:	4d0b      	ldr	r5, [pc, #44]	; (80059a8 <__libc_init_array+0x40>)
 800597a:	4c0c      	ldr	r4, [pc, #48]	; (80059ac <__libc_init_array+0x44>)
 800597c:	f000 f83c 	bl	80059f8 <_init>
 8005980:	1b64      	subs	r4, r4, r5
 8005982:	10a4      	asrs	r4, r4, #2
 8005984:	2600      	movs	r6, #0
 8005986:	42a6      	cmp	r6, r4
 8005988:	d105      	bne.n	8005996 <__libc_init_array+0x2e>
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005990:	4798      	blx	r3
 8005992:	3601      	adds	r6, #1
 8005994:	e7ee      	b.n	8005974 <__libc_init_array+0xc>
 8005996:	f855 3b04 	ldr.w	r3, [r5], #4
 800599a:	4798      	blx	r3
 800599c:	3601      	adds	r6, #1
 800599e:	e7f2      	b.n	8005986 <__libc_init_array+0x1e>
 80059a0:	08005bd0 	.word	0x08005bd0
 80059a4:	08005bd0 	.word	0x08005bd0
 80059a8:	08005bd0 	.word	0x08005bd0
 80059ac:	08005bd4 	.word	0x08005bd4

080059b0 <memcmp>:
 80059b0:	b530      	push	{r4, r5, lr}
 80059b2:	3901      	subs	r1, #1
 80059b4:	2400      	movs	r4, #0
 80059b6:	42a2      	cmp	r2, r4
 80059b8:	d101      	bne.n	80059be <memcmp+0xe>
 80059ba:	2000      	movs	r0, #0
 80059bc:	e005      	b.n	80059ca <memcmp+0x1a>
 80059be:	5d03      	ldrb	r3, [r0, r4]
 80059c0:	3401      	adds	r4, #1
 80059c2:	5d0d      	ldrb	r5, [r1, r4]
 80059c4:	42ab      	cmp	r3, r5
 80059c6:	d0f6      	beq.n	80059b6 <memcmp+0x6>
 80059c8:	1b58      	subs	r0, r3, r5
 80059ca:	bd30      	pop	{r4, r5, pc}

080059cc <memcpy>:
 80059cc:	440a      	add	r2, r1
 80059ce:	4291      	cmp	r1, r2
 80059d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80059d4:	d100      	bne.n	80059d8 <memcpy+0xc>
 80059d6:	4770      	bx	lr
 80059d8:	b510      	push	{r4, lr}
 80059da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059e2:	4291      	cmp	r1, r2
 80059e4:	d1f9      	bne.n	80059da <memcpy+0xe>
 80059e6:	bd10      	pop	{r4, pc}

080059e8 <memset>:
 80059e8:	4402      	add	r2, r0
 80059ea:	4603      	mov	r3, r0
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d100      	bne.n	80059f2 <memset+0xa>
 80059f0:	4770      	bx	lr
 80059f2:	f803 1b01 	strb.w	r1, [r3], #1
 80059f6:	e7f9      	b.n	80059ec <memset+0x4>

080059f8 <_init>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr

08005a04 <_fini>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr
