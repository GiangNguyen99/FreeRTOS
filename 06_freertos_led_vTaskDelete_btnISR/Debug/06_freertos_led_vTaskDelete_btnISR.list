
06_freertos_led_vTaskDelete_btnISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006588  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08006728  08006728  00016728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006924  08006924  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006924  08006924  00016924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800692c  0800692c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006930  08006930  00016930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001448c  2000001c  08006950  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144a8  08006950  000244a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ccd  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3a  00000000  00000000  00036d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00039b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  0003ad08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001802a  00000000  00000000  0003bd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c14  00000000  00000000  00053d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099683  00000000  00000000  0006798e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101011  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004984  00000000  00000000  00101064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006710 	.word	0x08006710

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08006710 	.word	0x08006710

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20014400 	.word	0x20014400

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000572:	f000 fb75 	bl	8000c60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000576:	f000 f89d 	bl	80006b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800057a:	f000 f905 	bl	8000788 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	//Enable the CYCCNT counter.
	DWT_CTRL |= (1 << 0);
 800057e:	4b3e      	ldr	r3, [pc, #248]	; (8000678 <main+0x10c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a3d      	ldr	r2, [pc, #244]	; (8000678 <main+0x10c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 800058a:	f003 fb41 	bl	8003c10 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800058e:	f005 fabd 	bl	8005b0c <SEGGER_SYSVIEW_Start>

	SEGGER_UART_init(500000);
 8000592:	483a      	ldr	r0, [pc, #232]	; (800067c <main+0x110>)
 8000594:	f003 fdc6 	bl	8004124 <SEGGER_UART_init>
	 * 		LED
	 *
	 *
	 *
	 * */
	status = xTaskCreate(task_led_green, "led_green", 200, NULL, 4,
 8000598:	4b39      	ldr	r3, [pc, #228]	; (8000680 <main+0x114>)
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2304      	movs	r3, #4
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2300      	movs	r3, #0
 80005a2:	22c8      	movs	r2, #200	; 0xc8
 80005a4:	4937      	ldr	r1, [pc, #220]	; (8000684 <main+0x118>)
 80005a6:	4838      	ldr	r0, [pc, #224]	; (8000688 <main+0x11c>)
 80005a8:	f001 fe20 	bl	80021ec <xTaskCreate>
 80005ac:	6178      	str	r0, [r7, #20]
			&taskHandle_led_green);

	configASSERT(status == pdPASS);
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d00a      	beq.n	80005ca <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b8:	f383 8811 	msr	BASEPRI, r3
 80005bc:	f3bf 8f6f 	isb	sy
 80005c0:	f3bf 8f4f 	dsb	sy
 80005c4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c6:	bf00      	nop
 80005c8:	e7fe      	b.n	80005c8 <main+0x5c>
	next_task_handle = taskHandle_led_green;
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <main+0x114>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a2f      	ldr	r2, [pc, #188]	; (800068c <main+0x120>)
 80005d0:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(task_led_orange, "led_orange", 200, NULL, 3,
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <main+0x124>)
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2303      	movs	r3, #3
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	22c8      	movs	r2, #200	; 0xc8
 80005de:	492d      	ldr	r1, [pc, #180]	; (8000694 <main+0x128>)
 80005e0:	482d      	ldr	r0, [pc, #180]	; (8000698 <main+0x12c>)
 80005e2:	f001 fe03 	bl	80021ec <xTaskCreate>
 80005e6:	6178      	str	r0, [r7, #20]
			&taskHandle_led_orange);

	configASSERT(status == pdPASS);
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00a      	beq.n	8000604 <main+0x98>
        __asm volatile
 80005ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f2:	f383 8811 	msr	BASEPRI, r3
 80005f6:	f3bf 8f6f 	isb	sy
 80005fa:	f3bf 8f4f 	dsb	sy
 80005fe:	60fb      	str	r3, [r7, #12]
    }
 8000600:	bf00      	nop
 8000602:	e7fe      	b.n	8000602 <main+0x96>

	status = xTaskCreate(task_led_red, "led_red", 200, NULL, 2,
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <main+0x130>)
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2302      	movs	r3, #2
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2300      	movs	r3, #0
 800060e:	22c8      	movs	r2, #200	; 0xc8
 8000610:	4923      	ldr	r1, [pc, #140]	; (80006a0 <main+0x134>)
 8000612:	4824      	ldr	r0, [pc, #144]	; (80006a4 <main+0x138>)
 8000614:	f001 fdea 	bl	80021ec <xTaskCreate>
 8000618:	6178      	str	r0, [r7, #20]
			&taskHandle_led_red);

	configASSERT(status == pdPASS);
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d00a      	beq.n	8000636 <main+0xca>
        __asm volatile
 8000620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000624:	f383 8811 	msr	BASEPRI, r3
 8000628:	f3bf 8f6f 	isb	sy
 800062c:	f3bf 8f4f 	dsb	sy
 8000630:	60bb      	str	r3, [r7, #8]
    }
 8000632:	bf00      	nop
 8000634:	e7fe      	b.n	8000634 <main+0xc8>
	next_task_handle = taskHandle_led_green;
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <main+0x114>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <main+0x120>)
 800063c:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(task_led_blue, "led_blue", 200, NULL, 1,
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <main+0x13c>)
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	22c8      	movs	r2, #200	; 0xc8
 800064a:	4918      	ldr	r1, [pc, #96]	; (80006ac <main+0x140>)
 800064c:	4818      	ldr	r0, [pc, #96]	; (80006b0 <main+0x144>)
 800064e:	f001 fdcd 	bl	80021ec <xTaskCreate>
 8000652:	6178      	str	r0, [r7, #20]
			&taskHandle_led_blue);

	configASSERT(status == pdPASS);
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d00a      	beq.n	8000670 <main+0x104>
        __asm volatile
 800065a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065e:	f383 8811 	msr	BASEPRI, r3
 8000662:	f3bf 8f6f 	isb	sy
 8000666:	f3bf 8f4f 	dsb	sy
 800066a:	607b      	str	r3, [r7, #4]
    }
 800066c:	bf00      	nop
 800066e:	e7fe      	b.n	800066e <main+0x102>

	vTaskStartScheduler();
 8000670:	f001 fff2 	bl	8002658 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000674:	e7fe      	b.n	8000674 <main+0x108>
 8000676:	bf00      	nop
 8000678:	e0001000 	.word	0xe0001000
 800067c:	0007a120 	.word	0x0007a120
 8000680:	200143a4 	.word	0x200143a4
 8000684:	08006728 	.word	0x08006728
 8000688:	08000841 	.word	0x08000841
 800068c:	20000038 	.word	0x20000038
 8000690:	200143a8 	.word	0x200143a8
 8000694:	08006734 	.word	0x08006734
 8000698:	080008b1 	.word	0x080008b1
 800069c:	200143b0 	.word	0x200143b0
 80006a0:	08006740 	.word	0x08006740
 80006a4:	08000921 	.word	0x08000921
 80006a8:	200143ac 	.word	0x200143ac
 80006ac:	08006748 	.word	0x08006748
 80006b0:	08000991 	.word	0x08000991

080006b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 f81c 	bl	8006700 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a27      	ldr	r2, [pc, #156]	; (8000780 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <SystemClock_Config+0xd0>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 200;
 8000728:	23c8      	movs	r3, #200	; 0xc8
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072c:	2304      	movs	r3, #4
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fd91 	bl	8001260 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
		Error_Handler();
 8000744:	f000 f99e 	bl	8000a84 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000758:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2103      	movs	r1, #3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fff2 	bl	8001750 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc2>
		Error_Handler();
 8000772:	f000 f987 	bl	8000a84 <Error_Handler>
	}
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b24      	ldr	r3, [pc, #144]	; (8000834 <MX_GPIO_Init+0xac>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a23      	ldr	r2, [pc, #140]	; (8000834 <MX_GPIO_Init+0xac>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_GPIO_Init+0xac>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <MX_GPIO_Init+0xac>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_GPIO_Init+0xac>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_GPIO_Init+0xac>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007dc:	4816      	ldr	r0, [pc, #88]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007de:	f000 fce7 	bl	80011b0 <HAL_GPIO_WritePin>
	led_green_Pin | led_orange_Pin | led_red_Pin | led_blue_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : button_Pin */
	GPIO_InitStruct.Pin = button_Pin;
 80007e2:	2301      	movs	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4619      	mov	r1, r3
 80007f6:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_GPIO_Init+0xb4>)
 80007f8:	f000 fb56 	bl	8000ea8 <HAL_GPIO_Init>

	/*Configure GPIO pins : led_green_Pin led_orange_Pin led_red_Pin led_blue_Pin */
	GPIO_InitStruct.Pin = led_green_Pin | led_orange_Pin | led_red_Pin
 80007fc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000800:	60fb      	str	r3, [r7, #12]
			| led_blue_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000806:	2301      	movs	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4619      	mov	r1, r3
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <MX_GPIO_Init+0xb0>)
 8000816:	f000 fb47 	bl	8000ea8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 12, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	210c      	movs	r1, #12
 800081e:	2006      	movs	r0, #6
 8000820:	f000 fb18 	bl	8000e54 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000824:	2006      	movs	r0, #6
 8000826:	f000 fb31 	bl	8000e8c <HAL_NVIC_EnableIRQ>

}
 800082a:	bf00      	nop
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40020c00 	.word	0x40020c00
 800083c:	40020000 	.word	0x40020000

08000840 <task_led_green>:

/* USER CODE BEGIN 4 */

static void task_led_green(void *parameter) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af02      	add	r7, sp, #8
 8000846:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000848:	4814      	ldr	r0, [pc, #80]	; (800089c <task_led_green+0x5c>)
 800084a:	f005 fe7b 	bl	8006544 <SEGGER_SYSVIEW_PrintfTarget>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800084e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000852:	4813      	ldr	r0, [pc, #76]	; (80008a0 <task_led_green+0x60>)
 8000854:	f000 fcc5 	bl	80011e2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2300      	movs	r3, #0
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2000      	movs	r0, #0
 8000866:	f002 faa9 	bl	8002dbc <xTaskGenericNotifyWait>
 800086a:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d1ea      	bne.n	8000848 <task_led_green+0x8>
			vTaskSuspendAll();
 8000872:	f001 ff4d 	bl	8002710 <vTaskSuspendAll>
			next_task_handle = taskHandle_led_orange;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <task_led_green+0x64>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <task_led_green+0x68>)
 800087c:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800087e:	f001 ff55 	bl	800272c <xTaskResumeAll>

			HAL_GPIO_WritePin(GPIOD, led_green_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <task_led_green+0x60>)
 800088a:	f000 fc91 	bl	80011b0 <HAL_GPIO_WritePin>

			SEGGER_SYSVIEW_PrintfTarget("delete green LED");
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <task_led_green+0x6c>)
 8000890:	f005 fe58 	bl	8006544 <SEGGER_SYSVIEW_PrintfTarget>

			vTaskDelete(NULL);
 8000894:	2000      	movs	r0, #0
 8000896:	f001 fe31 	bl	80024fc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 800089a:	e7d5      	b.n	8000848 <task_led_green+0x8>
 800089c:	08006754 	.word	0x08006754
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	200143a8 	.word	0x200143a8
 80008a8:	20000038 	.word	0x20000038
 80008ac:	08006768 	.word	0x08006768

080008b0 <task_led_orange>:
		}
	}
}

static void task_led_orange(void *parameter) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80008b8:	4814      	ldr	r0, [pc, #80]	; (800090c <task_led_orange+0x5c>)
 80008ba:	f005 fe43 	bl	8006544 <SEGGER_SYSVIEW_PrintfTarget>

		HAL_GPIO_TogglePin(GPIOD, led_orange_Pin);
 80008be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c2:	4813      	ldr	r0, [pc, #76]	; (8000910 <task_led_orange+0x60>)
 80008c4:	f000 fc8d 	bl	80011e2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(500));
 80008c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2300      	movs	r3, #0
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2000      	movs	r0, #0
 80008d6:	f002 fa71 	bl	8002dbc <xTaskGenericNotifyWait>
 80008da:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d1ea      	bne.n	80008b8 <task_led_orange+0x8>
			vTaskSuspendAll();
 80008e2:	f001 ff15 	bl	8002710 <vTaskSuspendAll>

			next_task_handle = taskHandle_led_red;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <task_led_orange+0x64>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <task_led_orange+0x68>)
 80008ec:	6013      	str	r3, [r2, #0]

			xTaskResumeAll();
 80008ee:	f001 ff1d 	bl	800272c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, led_orange_Pin, GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <task_led_orange+0x60>)
 80008fa:	f000 fc59 	bl	80011b0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("delete orange LED");
 80008fe:	4807      	ldr	r0, [pc, #28]	; (800091c <task_led_orange+0x6c>)
 8000900:	f005 fe20 	bl	8006544 <SEGGER_SYSVIEW_PrintfTarget>

			vTaskDelete(NULL);
 8000904:	2000      	movs	r0, #0
 8000906:	f001 fdf9 	bl	80024fc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800090a:	e7d5      	b.n	80008b8 <task_led_orange+0x8>
 800090c:	0800677c 	.word	0x0800677c
 8000910:	40020c00 	.word	0x40020c00
 8000914:	200143b0 	.word	0x200143b0
 8000918:	20000038 	.word	0x20000038
 800091c:	08006790 	.word	0x08006790

08000920 <task_led_red>:
		}
	}
}

static void task_led_red(void *parameter) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af02      	add	r7, sp, #8
 8000926:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000928:	4814      	ldr	r0, [pc, #80]	; (800097c <task_led_red+0x5c>)
 800092a:	f005 fe0b 	bl	8006544 <SEGGER_SYSVIEW_PrintfTarget>

		HAL_GPIO_TogglePin(GPIOD, led_red_Pin);
 800092e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <task_led_red+0x60>)
 8000934:	f000 fc55 	bl	80011e2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(250));
 8000938:	23fa      	movs	r3, #250	; 0xfa
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2000      	movs	r0, #0
 8000944:	f002 fa3a 	bl	8002dbc <xTaskGenericNotifyWait>
 8000948:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d1eb      	bne.n	8000928 <task_led_red+0x8>
			vTaskSuspendAll();
 8000950:	f001 fede 	bl	8002710 <vTaskSuspendAll>
			next_task_handle = taskHandle_led_blue;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <task_led_red+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <task_led_red+0x68>)
 800095a:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800095c:	f001 fee6 	bl	800272c <xTaskResumeAll>

			HAL_GPIO_WritePin(GPIOD, led_red_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <task_led_red+0x60>)
 8000968:	f000 fc22 	bl	80011b0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("delete red LED");
 800096c:	4807      	ldr	r0, [pc, #28]	; (800098c <task_led_red+0x6c>)
 800096e:	f005 fde9 	bl	8006544 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000972:	2000      	movs	r0, #0
 8000974:	f001 fdc2 	bl	80024fc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000978:	e7d6      	b.n	8000928 <task_led_red+0x8>
 800097a:	bf00      	nop
 800097c:	080067a4 	.word	0x080067a4
 8000980:	40020c00 	.word	0x40020c00
 8000984:	200143ac 	.word	0x200143ac
 8000988:	20000038 	.word	0x20000038
 800098c:	080067b8 	.word	0x080067b8

08000990 <task_led_blue>:
		}
	}
}

static void task_led_blue(void *parameter) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af02      	add	r7, sp, #8
 8000996:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000998:	4817      	ldr	r0, [pc, #92]	; (80009f8 <task_led_blue+0x68>)
 800099a:	f005 fdd3 	bl	8006544 <SEGGER_SYSVIEW_PrintfTarget>

		HAL_GPIO_TogglePin(GPIOD, led_blue_Pin);
 800099e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a2:	4816      	ldr	r0, [pc, #88]	; (80009fc <task_led_blue+0x6c>)
 80009a4:	f000 fc1d 	bl	80011e2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(125));
 80009a8:	237d      	movs	r3, #125	; 0x7d
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2300      	movs	r3, #0
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2000      	movs	r0, #0
 80009b4:	f002 fa02 	bl	8002dbc <xTaskGenericNotifyWait>
 80009b8:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d1eb      	bne.n	8000998 <task_led_blue+0x8>
			vTaskSuspendAll();
 80009c0:	f001 fea6 	bl	8002710 <vTaskSuspendAll>
			next_task_handle = NULL;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <task_led_blue+0x70>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80009ca:	f001 feaf 	bl	800272c <xTaskResumeAll>

			HAL_GPIO_WritePin(GPIOD, led_blue_Pin, GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d4:	4809      	ldr	r0, [pc, #36]	; (80009fc <task_led_blue+0x6c>)
 80009d6:	f000 fbeb 	bl	80011b0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("delete blue LED");
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <task_led_blue+0x74>)
 80009dc:	f005 fdb2 	bl	8006544 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 fd8b 	bl	80024fc <vTaskDelete>
			SEGGER_SYSVIEW_PrintfTarget("delete button");
 80009e6:	4808      	ldr	r0, [pc, #32]	; (8000a08 <task_led_blue+0x78>)
 80009e8:	f005 fdac 	bl	8006544 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(taskHandle_btn);
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <task_led_blue+0x7c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fd83 	bl	80024fc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 80009f6:	e7cf      	b.n	8000998 <task_led_blue+0x8>
 80009f8:	080067c8 	.word	0x080067c8
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	20000038 	.word	0x20000038
 8000a04:	080067dc 	.word	0x080067dc
 8000a08:	080067ec 	.word	0x080067ec
 8000a0c:	200143a0 	.word	0x200143a0

08000a10 <btn_isr_handle>:

		}
	}
}

void btn_isr_handle(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af02      	add	r7, sp, #8

	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken = pdFALSE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 8000a1a:	f005 fb41 	bl	80060a0 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle, 0, eNoAction,
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <btn_isr_handle+0x48>)
 8000a20:	6818      	ldr	r0, [r3, #0]
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	2300      	movs	r3, #0
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f002 fa4c 	bl	8002ecc <xTaskGenericNotifyFromISR>
			&pxHigherPriorityTaskWoken);

	/* once the ISR exits, the below macro makes higher priority task which got unblocked to resume on the CPU */
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d007      	beq.n	8000a4a <btn_isr_handle+0x3a>
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <btn_isr_handle+0x4c>)
 8000a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	f3bf 8f4f 	dsb	sy
 8000a46:	f3bf 8f6f 	isb	sy

	traceISR_EXIT();
 8000a4a:	f005 fb6b 	bl	8006124 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000038 	.word	0x20000038
 8000a5c:	e000ed04 	.word	0xe000ed04

08000a60 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a72:	f000 f917 	bl	8000ca4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40000c00 	.word	0x40000c00

08000a84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000ace:	f002 fd1b 	bl	8003508 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	2032      	movs	r0, #50	; 0x32
 8000af6:	f000 f9ad 	bl	8000e54 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000afa:	2032      	movs	r0, #50	; 0x32
 8000afc:	f000 f9c6 	bl	8000e8c <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b1c:	f107 0210 	add.w	r2, r7, #16
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fffa 	bl	8001b20 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b2c:	f000 ffe4 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 8000b30:	4603      	mov	r3, r0
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <HAL_InitTick+0xa8>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	0c9b      	lsrs	r3, r3, #18
 8000b40:	3b01      	subs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_InitTick+0xac>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <HAL_InitTick+0xb0>)
 8000b48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_InitTick+0xac>)
 8000b4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b50:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_InitTick+0xac>)
 8000b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b56:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_InitTick+0xac>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_InitTick+0xac>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <HAL_InitTick+0xac>)
 8000b66:	f001 f80d 	bl	8001b84 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d104      	bne.n	8000b7a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000b70:	4806      	ldr	r0, [pc, #24]	; (8000b8c <HAL_InitTick+0xac>)
 8000b72:	f001 f861 	bl	8001c38 <HAL_TIM_Base_Start_IT>
 8000b76:	4603      	mov	r3, r0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3730      	adds	r7, #48	; 0x30
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	431bde83 	.word	0x431bde83
 8000b8c:	200143b4 	.word	0x200143b4
 8000b90:	40000c00 	.word	0x40000c00

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */

	btn_isr_handle();
 8000bc4:	f7ff ff24 	bl	8000a10 <btn_isr_handle>
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 fb25 	bl	8001218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM5_IRQHandler+0x10>)
 8000bda:	f001 f88f 	bl	8001cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200143b4 	.word	0x200143b4

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c12:	490e      	ldr	r1, [pc, #56]	; (8000c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c14:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c28:	4c0b      	ldr	r4, [pc, #44]	; (8000c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c36:	f7ff ffd7 	bl	8000be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f005 fd21 	bl	8006680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3e:	f7ff fc95 	bl	800056c <main>
  bx  lr    
 8000c42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c50:	08006934 	.word	0x08006934
  ldr r2, =_sbss
 8000c54:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c58:	200144a8 	.word	0x200144a8

08000c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <HAL_Init+0x40>)
 8000c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_Init+0x40>)
 8000c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x40>)
 8000c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f8d8 	bl	8000e3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f7ff ff26 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff fefc 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023c00 	.word	0x40023c00

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	200143fc 	.word	0x200143fc

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200143fc 	.word	0x200143fc

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <__NVIC_EnableIRQ+0x38>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ff4c 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e66:	f7ff ff61 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000e6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	68b9      	ldr	r1, [r7, #8]
 8000e70:	6978      	ldr	r0, [r7, #20]
 8000e72:	f7ff ffb1 	bl	8000dd8 <NVIC_EncodePriority>
 8000e76:	4602      	mov	r2, r0
 8000e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff80 	bl	8000d84 <__NVIC_SetPriority>
}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff54 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
 8000ec2:	e159      	b.n	8001178 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	f040 8148 	bne.w	8001172 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d005      	beq.n	8000efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d130      	bne.n	8000f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	f003 0201 	and.w	r2, r3, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d017      	beq.n	8000f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d123      	bne.n	8000fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	69b9      	ldr	r1, [r7, #24]
 8000fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0203 	and.w	r2, r3, #3
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80a2 	beq.w	8001172 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b57      	ldr	r3, [pc, #348]	; (8001190 <HAL_GPIO_Init+0x2e8>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a56      	ldr	r2, [pc, #344]	; (8001190 <HAL_GPIO_Init+0x2e8>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b54      	ldr	r3, [pc, #336]	; (8001190 <HAL_GPIO_Init+0x2e8>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104a:	4a52      	ldr	r2, [pc, #328]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3302      	adds	r3, #2
 8001052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	220f      	movs	r2, #15
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a49      	ldr	r2, [pc, #292]	; (8001198 <HAL_GPIO_Init+0x2f0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0x202>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a48      	ldr	r2, [pc, #288]	; (800119c <HAL_GPIO_Init+0x2f4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x1fe>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a47      	ldr	r2, [pc, #284]	; (80011a0 <HAL_GPIO_Init+0x2f8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x1fa>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a46      	ldr	r2, [pc, #280]	; (80011a4 <HAL_GPIO_Init+0x2fc>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x1f6>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a45      	ldr	r2, [pc, #276]	; (80011a8 <HAL_GPIO_Init+0x300>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x1f2>
 8001096:	2304      	movs	r3, #4
 8001098:	e008      	b.n	80010ac <HAL_GPIO_Init+0x204>
 800109a:	2307      	movs	r3, #7
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x204>
 800109e:	2303      	movs	r3, #3
 80010a0:	e004      	b.n	80010ac <HAL_GPIO_Init+0x204>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_Init+0x204>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_GPIO_Init+0x204>
 80010aa:	2300      	movs	r3, #0
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	f002 0203 	and.w	r2, r2, #3
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	4093      	lsls	r3, r2
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010bc:	4935      	ldr	r1, [pc, #212]	; (8001194 <HAL_GPIO_Init+0x2ec>)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_GPIO_Init+0x304>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ee:	4a2f      	ldr	r2, [pc, #188]	; (80011ac <HAL_GPIO_Init+0x304>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <HAL_GPIO_Init+0x304>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001118:	4a24      	ldr	r2, [pc, #144]	; (80011ac <HAL_GPIO_Init+0x304>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <HAL_GPIO_Init+0x304>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001142:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <HAL_GPIO_Init+0x304>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_GPIO_Init+0x304>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800116c:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <HAL_GPIO_Init+0x304>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3301      	adds	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	2b0f      	cmp	r3, #15
 800117c:	f67f aea2 	bls.w	8000ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40013800 	.word	0x40013800
 8001198:	40020000 	.word	0x40020000
 800119c:	40020400 	.word	0x40020400
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40013c00 	.word	0x40013c00

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011cc:	e003      	b.n	80011d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f4:	887a      	ldrh	r2, [r7, #2]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4013      	ands	r3, r2
 80011fa:	041a      	lsls	r2, r3, #16
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43d9      	mvns	r1, r3
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	400b      	ands	r3, r1
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f806 	bl	8001248 <HAL_GPIO_EXTI_Callback>
  }
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40013c00 	.word	0x40013c00

08001248 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e264      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d075      	beq.n	800136a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127e:	4ba3      	ldr	r3, [pc, #652]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b04      	cmp	r3, #4
 8001288:	d00c      	beq.n	80012a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4ba0      	ldr	r3, [pc, #640]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001292:	2b08      	cmp	r3, #8
 8001294:	d112      	bne.n	80012bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001296:	4b9d      	ldr	r3, [pc, #628]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012a2:	d10b      	bne.n	80012bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	4b99      	ldr	r3, [pc, #612]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d05b      	beq.n	8001368 <HAL_RCC_OscConfig+0x108>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d157      	bne.n	8001368 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e23f      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c4:	d106      	bne.n	80012d4 <HAL_RCC_OscConfig+0x74>
 80012c6:	4b91      	ldr	r3, [pc, #580]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a90      	ldr	r2, [pc, #576]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e01d      	b.n	8001310 <HAL_RCC_OscConfig+0xb0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x98>
 80012de:	4b8b      	ldr	r3, [pc, #556]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a8a      	ldr	r2, [pc, #552]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b88      	ldr	r3, [pc, #544]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a87      	ldr	r2, [pc, #540]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0xb0>
 80012f8:	4b84      	ldr	r3, [pc, #528]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a83      	ldr	r2, [pc, #524]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b81      	ldr	r3, [pc, #516]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a80      	ldr	r2, [pc, #512]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d013      	beq.n	8001340 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fcd8 	bl	8000ccc <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fcd4 	bl	8000ccc <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e204      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b76      	ldr	r3, [pc, #472]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0xc0>
 800133e:	e014      	b.n	800136a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fcc4 	bl	8000ccc <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fcc0 	bl	8000ccc <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1f0      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	4b6c      	ldr	r3, [pc, #432]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0xe8>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d063      	beq.n	800143e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	4b65      	ldr	r3, [pc, #404]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00b      	beq.n	800139a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b62      	ldr	r3, [pc, #392]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138a:	2b08      	cmp	r3, #8
 800138c:	d11c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138e:	4b5f      	ldr	r3, [pc, #380]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	4b5c      	ldr	r3, [pc, #368]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <HAL_RCC_OscConfig+0x152>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e1c4      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b56      	ldr	r3, [pc, #344]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4952      	ldr	r1, [pc, #328]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	e03a      	b.n	800143e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d0:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <HAL_RCC_OscConfig+0x2b0>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d6:	f7ff fc79 	bl	8000ccc <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fc75 	bl	8000ccc <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1a5      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4940      	ldr	r1, [pc, #256]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e015      	b.n	800143e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_RCC_OscConfig+0x2b0>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fc58 	bl	8000ccc <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff fc54 	bl	8000ccc <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e184      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	4b36      	ldr	r3, [pc, #216]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d030      	beq.n	80014ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d016      	beq.n	8001480 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001452:	4b30      	ldr	r3, [pc, #192]	; (8001514 <HAL_RCC_OscConfig+0x2b4>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001458:	f7ff fc38 	bl	8000ccc <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff fc34 	bl	8000ccc <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e164      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x200>
 800147e:	e015      	b.n	80014ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_RCC_OscConfig+0x2b4>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff fc21 	bl	8000ccc <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148e:	f7ff fc1d 	bl	8000ccc <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e14d      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80014a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80a0 	beq.w	80015fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10f      	bne.n	80014ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_OscConfig+0x2b8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d121      	bne.n	800153a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_RCC_OscConfig+0x2b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_RCC_OscConfig+0x2b8>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001502:	f7ff fbe3 	bl	8000ccc <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	e011      	b.n	800152e <HAL_RCC_OscConfig+0x2ce>
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	42470000 	.word	0x42470000
 8001514:	42470e80 	.word	0x42470e80
 8001518:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151c:	f7ff fbd6 	bl	8000ccc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e106      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152e:	4b85      	ldr	r3, [pc, #532]	; (8001744 <HAL_RCC_OscConfig+0x4e4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d106      	bne.n	8001550 <HAL_RCC_OscConfig+0x2f0>
 8001542:	4b81      	ldr	r3, [pc, #516]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a80      	ldr	r2, [pc, #512]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
 800154e:	e01c      	b.n	800158a <HAL_RCC_OscConfig+0x32a>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b05      	cmp	r3, #5
 8001556:	d10c      	bne.n	8001572 <HAL_RCC_OscConfig+0x312>
 8001558:	4b7b      	ldr	r3, [pc, #492]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a7a      	ldr	r2, [pc, #488]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
 8001564:	4b78      	ldr	r3, [pc, #480]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a77      	ldr	r2, [pc, #476]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
 8001570:	e00b      	b.n	800158a <HAL_RCC_OscConfig+0x32a>
 8001572:	4b75      	ldr	r3, [pc, #468]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	4a74      	ldr	r2, [pc, #464]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	6713      	str	r3, [r2, #112]	; 0x70
 800157e:	4b72      	ldr	r3, [pc, #456]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a71      	ldr	r2, [pc, #452]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001584:	f023 0304 	bic.w	r3, r3, #4
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d015      	beq.n	80015be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001592:	f7ff fb9b 	bl	8000ccc <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff fb97 	bl	8000ccc <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e0c5      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b0:	4b65      	ldr	r3, [pc, #404]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0ee      	beq.n	800159a <HAL_RCC_OscConfig+0x33a>
 80015bc:	e014      	b.n	80015e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff fb85 	bl	8000ccc <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff fb81 	bl	8000ccc <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e0af      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015dc:	4b5a      	ldr	r3, [pc, #360]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ee      	bne.n	80015c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d105      	bne.n	80015fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ee:	4b56      	ldr	r3, [pc, #344]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a55      	ldr	r2, [pc, #340]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 80015f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 809b 	beq.w	800173a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b08      	cmp	r3, #8
 800160e:	d05c      	beq.n	80016ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d141      	bne.n	800169c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b4c      	ldr	r3, [pc, #304]	; (800174c <HAL_RCC_OscConfig+0x4ec>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fb55 	bl	8000ccc <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff fb51 	bl	8000ccc <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e081      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001638:	4b43      	ldr	r3, [pc, #268]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f0      	bne.n	8001626 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69da      	ldr	r2, [r3, #28]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	019b      	lsls	r3, r3, #6
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	085b      	lsrs	r3, r3, #1
 800165c:	3b01      	subs	r3, #1
 800165e:	041b      	lsls	r3, r3, #16
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	061b      	lsls	r3, r3, #24
 8001668:	4937      	ldr	r1, [pc, #220]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <HAL_RCC_OscConfig+0x4ec>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb2a 	bl	8000ccc <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb26 	bl	8000ccc <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e056      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x41c>
 800169a:	e04e      	b.n	800173a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_RCC_OscConfig+0x4ec>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fb13 	bl	8000ccc <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff fb0f 	bl	8000ccc <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e03f      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x44a>
 80016c8:	e037      	b.n	800173a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e032      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d028      	beq.n	8001736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d121      	bne.n	8001736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d11a      	bne.n	8001736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001706:	4013      	ands	r3, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800170c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800170e:	4293      	cmp	r3, r2
 8001710:	d111      	bne.n	8001736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	085b      	lsrs	r3, r3, #1
 800171e:	3b01      	subs	r3, #1
 8001720:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d107      	bne.n	8001736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40007000 	.word	0x40007000
 8001748:	40023800 	.word	0x40023800
 800174c:	42470060 	.word	0x42470060

08001750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0cc      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d90c      	bls.n	800178c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b63      	ldr	r3, [pc, #396]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b8      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a58      	ldr	r2, [pc, #352]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	494d      	ldr	r1, [pc, #308]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d044      	beq.n	8001870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d119      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e07f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d003      	beq.n	800180e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	2b03      	cmp	r3, #3
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e067      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4934      	ldr	r1, [pc, #208]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001840:	f7ff fa44 	bl	8000ccc <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff fa40 	bl	8000ccc <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e04f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d20c      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e032      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4916      	ldr	r1, [pc, #88]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	490e      	ldr	r1, [pc, #56]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d6:	f000 f821 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018da:	4602      	mov	r2, r0
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	490a      	ldr	r1, [pc, #40]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	5ccb      	ldrb	r3, [r1, r3]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f8f2 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00
 800190c:	40023800 	.word	0x40023800
 8001910:	080068d0 	.word	0x080068d0
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	2300      	movs	r3, #0
 800192e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001934:	4b67      	ldr	r3, [pc, #412]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d00d      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x40>
 8001940:	2b08      	cmp	r3, #8
 8001942:	f200 80bd 	bhi.w	8001ac0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x34>
 800194a:	2b04      	cmp	r3, #4
 800194c:	d003      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x3a>
 800194e:	e0b7      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001952:	60bb      	str	r3, [r7, #8]
       break;
 8001954:	e0b7      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001956:	4b61      	ldr	r3, [pc, #388]	; (8001adc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001958:	60bb      	str	r3, [r7, #8]
      break;
 800195a:	e0b4      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800195c:	4b5d      	ldr	r3, [pc, #372]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001964:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001966:	4b5b      	ldr	r3, [pc, #364]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d04d      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001972:	4b58      	ldr	r3, [pc, #352]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	461a      	mov	r2, r3
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	ea02 0800 	and.w	r8, r2, r0
 800198a:	ea03 0901 	and.w	r9, r3, r1
 800198e:	4640      	mov	r0, r8
 8001990:	4649      	mov	r1, r9
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	014b      	lsls	r3, r1, #5
 800199c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019a0:	0142      	lsls	r2, r0, #5
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	ebb0 0008 	subs.w	r0, r0, r8
 80019aa:	eb61 0109 	sbc.w	r1, r1, r9
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019bc:	0182      	lsls	r2, r0, #6
 80019be:	1a12      	subs	r2, r2, r0
 80019c0:	eb63 0301 	sbc.w	r3, r3, r1
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	00d9      	lsls	r1, r3, #3
 80019ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019d2:	00d0      	lsls	r0, r2, #3
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	eb12 0208 	adds.w	r2, r2, r8
 80019dc:	eb43 0309 	adc.w	r3, r3, r9
 80019e0:	f04f 0000 	mov.w	r0, #0
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	0259      	lsls	r1, r3, #9
 80019ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019ee:	0250      	lsls	r0, r2, #9
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	461a      	mov	r2, r3
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	f7fe fc38 	bl	8000274 <__aeabi_uldivmod>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	e04a      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0e:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	099b      	lsrs	r3, r3, #6
 8001a14:	461a      	mov	r2, r3
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a1e:	f04f 0100 	mov.w	r1, #0
 8001a22:	ea02 0400 	and.w	r4, r2, r0
 8001a26:	ea03 0501 	and.w	r5, r3, r1
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	014b      	lsls	r3, r1, #5
 8001a38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a3c:	0142      	lsls	r2, r0, #5
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	1b00      	subs	r0, r0, r4
 8001a44:	eb61 0105 	sbc.w	r1, r1, r5
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	018b      	lsls	r3, r1, #6
 8001a52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a56:	0182      	lsls	r2, r0, #6
 8001a58:	1a12      	subs	r2, r2, r0
 8001a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a5e:	f04f 0000 	mov.w	r0, #0
 8001a62:	f04f 0100 	mov.w	r1, #0
 8001a66:	00d9      	lsls	r1, r3, #3
 8001a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a6c:	00d0      	lsls	r0, r2, #3
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	1912      	adds	r2, r2, r4
 8001a74:	eb45 0303 	adc.w	r3, r5, r3
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	f04f 0100 	mov.w	r1, #0
 8001a80:	0299      	lsls	r1, r3, #10
 8001a82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a86:	0290      	lsls	r0, r2, #10
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	461a      	mov	r2, r3
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	f7fe fbec 	bl	8000274 <__aeabi_uldivmod>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	60bb      	str	r3, [r7, #8]
      break;
 8001abe:	e002      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ac2:	60bb      	str	r3, [r7, #8]
      break;
 8001ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	00f42400 	.word	0x00f42400
 8001adc:	007a1200 	.word	0x007a1200

08001ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000

08001af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001afc:	f7ff fff0 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	0a9b      	lsrs	r3, r3, #10
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	4903      	ldr	r1, [pc, #12]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	080068e0 	.word	0x080068e0

08001b20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_RCC_GetClockConfig+0x5c>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_RCC_GetClockConfig+0x5c>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	08db      	lsrs	r3, r3, #3
 8001b5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <HAL_RCC_GetClockConfig+0x60>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0207 	and.w	r2, r3, #7
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	601a      	str	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e041      	b.n	8001c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f839 	bl	8001c22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f000 f9ca 	bl	8001f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d001      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e044      	b.n	8001cda <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d018      	beq.n	8001ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7a:	d013      	beq.n	8001ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <HAL_TIM_Base_Start_IT+0xb4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00e      	beq.n	8001ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d009      	beq.n	8001ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d004      	beq.n	8001ca4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a16      	ldr	r2, [pc, #88]	; (8001cf8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d111      	bne.n	8001cc8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d010      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc6:	e007      	b.n	8001cd8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	40000400 	.word	0x40000400
 8001cf0:	40000800 	.word	0x40000800
 8001cf4:	40000c00 	.word	0x40000c00
 8001cf8:	40014000 	.word	0x40014000

08001cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d122      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d11b      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0202 	mvn.w	r2, #2
 8001d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8ee 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8001d44:	e005      	b.n	8001d52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8e0 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8f1 	bl	8001f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d122      	bne.n	8001dac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d11b      	bne.n	8001dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0204 	mvn.w	r2, #4
 8001d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2202      	movs	r2, #2
 8001d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8c4 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8b6 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f8c7 	bl	8001f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0208 	mvn.w	r2, #8
 8001dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f89a 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f88c 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f89d 	bl	8001f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0210 	mvn.w	r2, #16
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f870 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f862 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f873 	bl	8001f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d10e      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0201 	mvn.w	r2, #1
 8001e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe fdf0 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8a:	2b80      	cmp	r3, #128	; 0x80
 8001e8c:	d10e      	bne.n	8001eac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e98:	2b80      	cmp	r3, #128	; 0x80
 8001e9a:	d107      	bne.n	8001eac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8e2 	bl	8002070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb6:	2b40      	cmp	r3, #64	; 0x40
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	d107      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f838 	bl	8001f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	d10e      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d107      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0220 	mvn.w	r2, #32
 8001efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8ac 	bl	800205c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a34      	ldr	r2, [pc, #208]	; (8002040 <TIM_Base_SetConfig+0xe4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00f      	beq.n	8001f94 <TIM_Base_SetConfig+0x38>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7a:	d00b      	beq.n	8001f94 <TIM_Base_SetConfig+0x38>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a31      	ldr	r2, [pc, #196]	; (8002044 <TIM_Base_SetConfig+0xe8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <TIM_Base_SetConfig+0x38>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a30      	ldr	r2, [pc, #192]	; (8002048 <TIM_Base_SetConfig+0xec>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <TIM_Base_SetConfig+0x38>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a2f      	ldr	r2, [pc, #188]	; (800204c <TIM_Base_SetConfig+0xf0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d108      	bne.n	8001fa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a25      	ldr	r2, [pc, #148]	; (8002040 <TIM_Base_SetConfig+0xe4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01b      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb4:	d017      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a22      	ldr	r2, [pc, #136]	; (8002044 <TIM_Base_SetConfig+0xe8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a21      	ldr	r2, [pc, #132]	; (8002048 <TIM_Base_SetConfig+0xec>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00f      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a20      	ldr	r2, [pc, #128]	; (800204c <TIM_Base_SetConfig+0xf0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00b      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a1f      	ldr	r2, [pc, #124]	; (8002050 <TIM_Base_SetConfig+0xf4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d007      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <TIM_Base_SetConfig+0xf8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d003      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <TIM_Base_SetConfig+0xfc>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d108      	bne.n	8001ff8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <TIM_Base_SetConfig+0xe4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	615a      	str	r2, [r3, #20]
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40010000 	.word	0x40010000
 8002044:	40000400 	.word	0x40000400
 8002048:	40000800 	.word	0x40000800
 800204c:	40000c00 	.word	0x40000c00
 8002050:	40014000 	.word	0x40014000
 8002054:	40014400 	.word	0x40014400
 8002058:	40014800 	.word	0x40014800

0800205c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f103 0208 	add.w	r2, r3, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f103 0208 	add.w	r2, r3, #8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f103 0208 	add.w	r2, r3, #8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020de:	b480      	push	{r7}
 80020e0:	b085      	sub	sp, #20
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	601a      	str	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d103      	bne.n	8002146 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e00c      	b.n	8002160 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3308      	adds	r3, #8
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e002      	b.n	8002154 <vListInsert+0x2e>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	429a      	cmp	r2, r3
 800215e:	d2f6      	bcs.n	800214e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	601a      	str	r2, [r3, #0]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6892      	ldr	r2, [r2, #8]
 80021ae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6852      	ldr	r2, [r2, #4]
 80021b8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d103      	bne.n	80021cc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1e5a      	subs	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af04      	add	r7, sp, #16
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4618      	mov	r0, r3
 8002202:	f001 fb2b 	bl	800385c <pvPortMalloc>
 8002206:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d013      	beq.n	8002236 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800220e:	2058      	movs	r0, #88	; 0x58
 8002210:	f001 fb24 	bl	800385c <pvPortMalloc>
 8002214:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800221c:	2258      	movs	r2, #88	; 0x58
 800221e:	2100      	movs	r1, #0
 8002220:	69f8      	ldr	r0, [r7, #28]
 8002222:	f004 fa6d 	bl	8006700 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
 800222c:	e005      	b.n	800223a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f001 fbce 	bl	80039d0 <vPortFree>
 8002234:	e001      	b.n	800223a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002240:	88fa      	ldrh	r2, [r7, #6]
 8002242:	2300      	movs	r3, #0
 8002244:	9303      	str	r3, [sp, #12]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f80e 	bl	8002278 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800225c:	69f8      	ldr	r0, [r7, #28]
 800225e:	f000 f899 	bl	8002394 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002262:	2301      	movs	r3, #1
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	e002      	b.n	800226e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002268:	f04f 33ff 	mov.w	r3, #4294967295
 800226c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800226e:	69bb      	ldr	r3, [r7, #24]
    }
 8002270:	4618      	mov	r0, r3
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	461a      	mov	r2, r3
 8002290:	21a5      	movs	r1, #165	; 0xa5
 8002292:	f004 fa35 	bl	8006700 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022a0:	3b01      	subs	r3, #1
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f023 0307 	bic.w	r3, r3, #7
 80022ae:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <prvInitialiseNewTask+0x58>
        __asm volatile
 80022ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	617b      	str	r3, [r7, #20]
    }
 80022cc:	bf00      	nop
 80022ce:	e7fe      	b.n	80022ce <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d01e      	beq.n	8002314 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	e012      	b.n	8002302 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	4413      	add	r3, r2
 80022e2:	7819      	ldrb	r1, [r3, #0]
 80022e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	3334      	adds	r3, #52	; 0x34
 80022ec:	460a      	mov	r2, r1
 80022ee:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	4413      	add	r3, r2
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	3301      	adds	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	2b09      	cmp	r3, #9
 8002306:	d9e9      	bls.n	80022dc <prvInitialiseNewTask+0x64>
 8002308:	e000      	b.n	800230c <prvInitialiseNewTask+0x94>
            {
                break;
 800230a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	2b09      	cmp	r3, #9
 8002318:	d90a      	bls.n	8002330 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800231a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231e:	f383 8811 	msr	BASEPRI, r3
 8002322:	f3bf 8f6f 	isb	sy
 8002326:	f3bf 8f4f 	dsb	sy
 800232a:	613b      	str	r3, [r7, #16]
    }
 800232c:	bf00      	nop
 800232e:	e7fe      	b.n	800232e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	2b09      	cmp	r3, #9
 8002334:	d901      	bls.n	800233a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002336:	2309      	movs	r3, #9
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800233e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002344:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	3304      	adds	r3, #4
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff feba 	bl	80020c4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002352:	3318      	adds	r3, #24
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff feb5 	bl	80020c4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800235e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002362:	f1c3 020a 	rsb	r2, r3, #10
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	68f9      	ldr	r1, [r7, #12]
 8002374:	69b8      	ldr	r0, [r7, #24]
 8002376:	f000 ff97 	bl	80032a8 <pxPortInitialiseStack>
 800237a:	4602      	mov	r2, r0
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800238a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800238c:	bf00      	nop
 800238e:	3720      	adds	r7, #32
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002394:	b5b0      	push	{r4, r5, r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af02      	add	r7, sp, #8
 800239a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800239c:	f001 f932 	bl	8003604 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023a0:	4b4f      	ldr	r3, [pc, #316]	; (80024e0 <prvAddNewTaskToReadyList+0x14c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	4a4e      	ldr	r2, [pc, #312]	; (80024e0 <prvAddNewTaskToReadyList+0x14c>)
 80023a8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023aa:	4b4e      	ldr	r3, [pc, #312]	; (80024e4 <prvAddNewTaskToReadyList+0x150>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023b2:	4a4c      	ldr	r2, [pc, #304]	; (80024e4 <prvAddNewTaskToReadyList+0x150>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <prvAddNewTaskToReadyList+0x14c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d110      	bne.n	80023e2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023c0:	f000 fc62 	bl	8002c88 <prvInitialiseTaskLists>
 80023c4:	e00d      	b.n	80023e2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023c6:	4b48      	ldr	r3, [pc, #288]	; (80024e8 <prvAddNewTaskToReadyList+0x154>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023ce:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <prvAddNewTaskToReadyList+0x150>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	429a      	cmp	r2, r3
 80023da:	d802      	bhi.n	80023e2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023dc:	4a41      	ldr	r2, [pc, #260]	; (80024e4 <prvAddNewTaskToReadyList+0x150>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023e2:	4b42      	ldr	r3, [pc, #264]	; (80024ec <prvAddNewTaskToReadyList+0x158>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3301      	adds	r3, #1
 80023e8:	4a40      	ldr	r2, [pc, #256]	; (80024ec <prvAddNewTaskToReadyList+0x158>)
 80023ea:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023ec:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <prvAddNewTaskToReadyList+0x158>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d016      	beq.n	8002428 <prvAddNewTaskToReadyList+0x94>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 fee5 	bl	80061cc <SEGGER_SYSVIEW_OnTaskCreate>
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	461d      	mov	r5, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	461c      	mov	r4, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	1ae3      	subs	r3, r4, r3
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	462b      	mov	r3, r5
 8002424:	f001 fc8e 	bl	8003d44 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4618      	mov	r0, r3
 800242c:	f003 ff52 	bl	80062d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	2201      	movs	r2, #1
 8002436:	409a      	lsls	r2, r3
 8002438:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <prvAddNewTaskToReadyList+0x15c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	4a2c      	ldr	r2, [pc, #176]	; (80024f0 <prvAddNewTaskToReadyList+0x15c>)
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002446:	492b      	ldr	r1, [pc, #172]	; (80024f4 <prvAddNewTaskToReadyList+0x160>)
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	3304      	adds	r3, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	3204      	adds	r2, #4
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1d1a      	adds	r2, r3, #4
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4a1b      	ldr	r2, [pc, #108]	; (80024f4 <prvAddNewTaskToReadyList+0x160>)
 8002486:	441a      	add	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	615a      	str	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002490:	4918      	ldr	r1, [pc, #96]	; (80024f4 <prvAddNewTaskToReadyList+0x160>)
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	1c59      	adds	r1, r3, #1
 80024a0:	4814      	ldr	r0, [pc, #80]	; (80024f4 <prvAddNewTaskToReadyList+0x160>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4403      	add	r3, r0
 80024ac:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80024ae:	f001 f8d9 	bl	8003664 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <prvAddNewTaskToReadyList+0x154>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00e      	beq.n	80024d8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <prvAddNewTaskToReadyList+0x150>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d207      	bcs.n	80024d8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <prvAddNewTaskToReadyList+0x164>)
 80024ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bdb0      	pop	{r4, r5, r7, pc}
 80024e0:	20000178 	.word	0x20000178
 80024e4:	2000003c 	.word	0x2000003c
 80024e8:	20000184 	.word	0x20000184
 80024ec:	20000194 	.word	0x20000194
 80024f0:	20000180 	.word	0x20000180
 80024f4:	20000040 	.word	0x20000040
 80024f8:	e000ed04 	.word	0xe000ed04

080024fc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002504:	f001 f87e 	bl	8003604 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <vTaskDelete+0x18>
 800250e:	4b48      	ldr	r3, [pc, #288]	; (8002630 <vTaskDelete+0x134>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	e000      	b.n	8002516 <vTaskDelete+0x1a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3304      	adds	r3, #4
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fe3b 	bl	8002198 <uxListRemove>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d115      	bne.n	8002554 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252c:	4941      	ldr	r1, [pc, #260]	; (8002634 <vTaskDelete+0x138>)
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10a      	bne.n	8002554 <vTaskDelete+0x58>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	2201      	movs	r2, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43da      	mvns	r2, r3
 800254a:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <vTaskDelete+0x13c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4013      	ands	r3, r2
 8002550:	4a39      	ldr	r2, [pc, #228]	; (8002638 <vTaskDelete+0x13c>)
 8002552:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	2b00      	cmp	r3, #0
 800255a:	d004      	beq.n	8002566 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3318      	adds	r3, #24
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fe19 	bl	8002198 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002566:	4b35      	ldr	r3, [pc, #212]	; (800263c <vTaskDelete+0x140>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	4a33      	ldr	r2, [pc, #204]	; (800263c <vTaskDelete+0x140>)
 800256e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002570:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <vTaskDelete+0x134>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	429a      	cmp	r2, r3
 8002578:	d118      	bne.n	80025ac <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3304      	adds	r3, #4
 800257e:	4619      	mov	r1, r3
 8002580:	482f      	ldr	r0, [pc, #188]	; (8002640 <vTaskDelete+0x144>)
 8002582:	f7ff fdac 	bl	80020de <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002586:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <vTaskDelete+0x148>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	4a2d      	ldr	r2, [pc, #180]	; (8002644 <vTaskDelete+0x148>)
 800258e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4618      	mov	r0, r3
 8002594:	f003 fee0 	bl	8006358 <SEGGER_SYSVIEW_ShrinkId>
 8002598:	4603      	mov	r3, r0
 800259a:	4619      	mov	r1, r3
 800259c:	2022      	movs	r0, #34	; 0x22
 800259e:	f003 f8df 	bl	8005760 <SEGGER_SYSVIEW_RecordU32>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f001 fc35 	bl	8003e14 <SYSVIEW_DeleteTask>
 80025aa:	e013      	b.n	80025d4 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80025ac:	4b26      	ldr	r3, [pc, #152]	; (8002648 <vTaskDelete+0x14c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	4a25      	ldr	r2, [pc, #148]	; (8002648 <vTaskDelete+0x14c>)
 80025b4:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 fecd 	bl	8006358 <SEGGER_SYSVIEW_ShrinkId>
 80025be:	4603      	mov	r3, r0
 80025c0:	4619      	mov	r1, r3
 80025c2:	2022      	movs	r0, #34	; 0x22
 80025c4:	f003 f8cc 	bl	8005760 <SEGGER_SYSVIEW_RecordU32>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 fc22 	bl	8003e14 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80025d0:	f000 fbd8 	bl	8002d84 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80025d4:	f001 f846 	bl	8003664 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <vTaskDelete+0x134>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d002      	beq.n	80025e8 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fbbe 	bl	8002d64 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80025e8:	4b18      	ldr	r3, [pc, #96]	; (800264c <vTaskDelete+0x150>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01b      	beq.n	8002628 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <vTaskDelete+0x134>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d116      	bne.n	8002628 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <vTaskDelete+0x154>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <vTaskDelete+0x11c>
        __asm volatile
 8002602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002606:	f383 8811 	msr	BASEPRI, r3
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	60bb      	str	r3, [r7, #8]
    }
 8002614:	bf00      	nop
 8002616:	e7fe      	b.n	8002616 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <vTaskDelete+0x158>)
 800261a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2000003c 	.word	0x2000003c
 8002634:	20000040 	.word	0x20000040
 8002638:	20000180 	.word	0x20000180
 800263c:	20000194 	.word	0x20000194
 8002640:	2000014c 	.word	0x2000014c
 8002644:	20000160 	.word	0x20000160
 8002648:	20000178 	.word	0x20000178
 800264c:	20000184 	.word	0x20000184
 8002650:	200001a0 	.word	0x200001a0
 8002654:	e000ed04 	.word	0xe000ed04

08002658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <vTaskStartScheduler+0x98>)
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	2300      	movs	r3, #0
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	2300      	movs	r3, #0
 8002668:	2282      	movs	r2, #130	; 0x82
 800266a:	4922      	ldr	r1, [pc, #136]	; (80026f4 <vTaskStartScheduler+0x9c>)
 800266c:	4822      	ldr	r0, [pc, #136]	; (80026f8 <vTaskStartScheduler+0xa0>)
 800266e:	f7ff fdbd 	bl	80021ec <xTaskCreate>
 8002672:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d124      	bne.n	80026c4 <vTaskStartScheduler+0x6c>
        __asm volatile
 800267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	60bb      	str	r3, [r7, #8]
    }
 800268c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <vTaskStartScheduler+0xa4>)
 8002690:	f04f 32ff 	mov.w	r2, #4294967295
 8002694:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <vTaskStartScheduler+0xa8>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <vTaskStartScheduler+0xac>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80026a2:	4b19      	ldr	r3, [pc, #100]	; (8002708 <vTaskStartScheduler+0xb0>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <vTaskStartScheduler+0x98>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d102      	bne.n	80026b4 <vTaskStartScheduler+0x5c>
 80026ae:	f003 fd71 	bl	8006194 <SEGGER_SYSVIEW_OnIdle>
 80026b2:	e004      	b.n	80026be <vTaskStartScheduler+0x66>
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <vTaskStartScheduler+0xb0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fdc9 	bl	8006250 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80026be:	f000 fe81 	bl	80033c4 <xPortStartScheduler>
 80026c2:	e00e      	b.n	80026e2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ca:	d10a      	bne.n	80026e2 <vTaskStartScheduler+0x8a>
        __asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	607b      	str	r3, [r7, #4]
    }
 80026de:	bf00      	nop
 80026e0:	e7fe      	b.n	80026e0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <vTaskStartScheduler+0xb4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000019c 	.word	0x2000019c
 80026f4:	080067fc 	.word	0x080067fc
 80026f8:	08002c59 	.word	0x08002c59
 80026fc:	20000198 	.word	0x20000198
 8002700:	20000184 	.word	0x20000184
 8002704:	2000017c 	.word	0x2000017c
 8002708:	2000003c 	.word	0x2000003c
 800270c:	2000000c 	.word	0x2000000c

08002710 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <vTaskSuspendAll+0x18>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	4a03      	ldr	r2, [pc, #12]	; (8002728 <vTaskSuspendAll+0x18>)
 800271c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	200001a0 	.word	0x200001a0

0800272c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800273a:	4b73      	ldr	r3, [pc, #460]	; (8002908 <xTaskResumeAll+0x1dc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10a      	bne.n	8002758 <xTaskResumeAll+0x2c>
        __asm volatile
 8002742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002746:	f383 8811 	msr	BASEPRI, r3
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	f3bf 8f4f 	dsb	sy
 8002752:	607b      	str	r3, [r7, #4]
    }
 8002754:	bf00      	nop
 8002756:	e7fe      	b.n	8002756 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002758:	f000 ff54 	bl	8003604 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800275c:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <xTaskResumeAll+0x1dc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3b01      	subs	r3, #1
 8002762:	4a69      	ldr	r2, [pc, #420]	; (8002908 <xTaskResumeAll+0x1dc>)
 8002764:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002766:	4b68      	ldr	r3, [pc, #416]	; (8002908 <xTaskResumeAll+0x1dc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f040 80c4 	bne.w	80028f8 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002770:	4b66      	ldr	r3, [pc, #408]	; (800290c <xTaskResumeAll+0x1e0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80bf 	beq.w	80028f8 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800277a:	e08e      	b.n	800289a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800277c:	4b64      	ldr	r3, [pc, #400]	; (8002910 <xTaskResumeAll+0x1e4>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	6a12      	ldr	r2, [r2, #32]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	69d2      	ldr	r2, [r2, #28]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3318      	adds	r3, #24
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d103      	bne.n	80027b2 <xTaskResumeAll+0x86>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	6a1a      	ldr	r2, [r3, #32]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	2200      	movs	r2, #0
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	1e5a      	subs	r2, r3, #1
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	68d2      	ldr	r2, [r2, #12]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	6892      	ldr	r2, [r2, #8]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	3304      	adds	r3, #4
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d103      	bne.n	80027f0 <xTaskResumeAll+0xc4>
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2200      	movs	r2, #0
 80027f4:	615a      	str	r2, [r3, #20]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1e5a      	subs	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	4618      	mov	r0, r3
 8002804:	f003 fd66 	bl	80062d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	2201      	movs	r2, #1
 800280e:	409a      	lsls	r2, r3
 8002810:	4b40      	ldr	r3, [pc, #256]	; (8002914 <xTaskResumeAll+0x1e8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4313      	orrs	r3, r2
 8002816:	4a3f      	ldr	r2, [pc, #252]	; (8002914 <xTaskResumeAll+0x1e8>)
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281e:	493e      	ldr	r1, [pc, #248]	; (8002918 <xTaskResumeAll+0x1ec>)
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	3304      	adds	r3, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	3204      	adds	r2, #4
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	1d1a      	adds	r2, r3, #4
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4a2e      	ldr	r2, [pc, #184]	; (8002918 <xTaskResumeAll+0x1ec>)
 800285e:	441a      	add	r2, r3
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	615a      	str	r2, [r3, #20]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002868:	492b      	ldr	r1, [pc, #172]	; (8002918 <xTaskResumeAll+0x1ec>)
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	1c59      	adds	r1, r3, #1
 8002878:	4827      	ldr	r0, [pc, #156]	; (8002918 <xTaskResumeAll+0x1ec>)
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4403      	add	r3, r0
 8002884:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288a:	4b24      	ldr	r3, [pc, #144]	; (800291c <xTaskResumeAll+0x1f0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	429a      	cmp	r2, r3
 8002892:	d302      	bcc.n	800289a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <xTaskResumeAll+0x1f4>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <xTaskResumeAll+0x1e4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f47f af6c 	bne.w	800277c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80028aa:	f000 fa6b 	bl	8002d84 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <xTaskResumeAll+0x1f8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d010      	beq.n	80028dc <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80028ba:	f000 f849 	bl	8002950 <xTaskIncrementTick>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <xTaskResumeAll+0x1f4>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f1      	bne.n	80028ba <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <xTaskResumeAll+0x1f8>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80028dc:	4b10      	ldr	r3, [pc, #64]	; (8002920 <xTaskResumeAll+0x1f4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80028e4:	2301      	movs	r3, #1
 80028e6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <xTaskResumeAll+0x1fc>)
 80028ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80028f8:	f000 feb4 	bl	8003664 <vPortExitCritical>

    return xAlreadyYielded;
 80028fc:	69bb      	ldr	r3, [r7, #24]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3720      	adds	r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200001a0 	.word	0x200001a0
 800290c:	20000178 	.word	0x20000178
 8002910:	20000138 	.word	0x20000138
 8002914:	20000180 	.word	0x20000180
 8002918:	20000040 	.word	0x20000040
 800291c:	2000003c 	.word	0x2000003c
 8002920:	2000018c 	.word	0x2000018c
 8002924:	20000188 	.word	0x20000188
 8002928:	e000ed04 	.word	0xe000ed04

0800292c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002932:	f000 ff53 	bl	80037dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <xTaskGetTickCountFromISR+0x20>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002940:	683b      	ldr	r3, [r7, #0]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	2000017c 	.word	0x2000017c

08002950 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800295a:	4b7f      	ldr	r3, [pc, #508]	; (8002b58 <xTaskIncrementTick+0x208>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 80f0 	bne.w	8002b44 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002964:	4b7d      	ldr	r3, [pc, #500]	; (8002b5c <xTaskIncrementTick+0x20c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800296c:	4a7b      	ldr	r2, [pc, #492]	; (8002b5c <xTaskIncrementTick+0x20c>)
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d120      	bne.n	80029ba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002978:	4b79      	ldr	r3, [pc, #484]	; (8002b60 <xTaskIncrementTick+0x210>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <xTaskIncrementTick+0x48>
        __asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	607b      	str	r3, [r7, #4]
    }
 8002994:	bf00      	nop
 8002996:	e7fe      	b.n	8002996 <xTaskIncrementTick+0x46>
 8002998:	4b71      	ldr	r3, [pc, #452]	; (8002b60 <xTaskIncrementTick+0x210>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	4b71      	ldr	r3, [pc, #452]	; (8002b64 <xTaskIncrementTick+0x214>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a6f      	ldr	r2, [pc, #444]	; (8002b60 <xTaskIncrementTick+0x210>)
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4a6f      	ldr	r2, [pc, #444]	; (8002b64 <xTaskIncrementTick+0x214>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b6e      	ldr	r3, [pc, #440]	; (8002b68 <xTaskIncrementTick+0x218>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a6d      	ldr	r2, [pc, #436]	; (8002b68 <xTaskIncrementTick+0x218>)
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	f000 f9e5 	bl	8002d84 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80029ba:	4b6c      	ldr	r3, [pc, #432]	; (8002b6c <xTaskIncrementTick+0x21c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a3a      	ldr	r2, [r7, #32]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	f0c0 80aa 	bcc.w	8002b1a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029c6:	4b66      	ldr	r3, [pc, #408]	; (8002b60 <xTaskIncrementTick+0x210>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d104      	bne.n	80029da <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029d0:	4b66      	ldr	r3, [pc, #408]	; (8002b6c <xTaskIncrementTick+0x21c>)
 80029d2:	f04f 32ff 	mov.w	r2, #4294967295
 80029d6:	601a      	str	r2, [r3, #0]
                    break;
 80029d8:	e09f      	b.n	8002b1a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029da:	4b61      	ldr	r3, [pc, #388]	; (8002b60 <xTaskIncrementTick+0x210>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80029ea:	6a3a      	ldr	r2, [r7, #32]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d203      	bcs.n	80029fa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029f2:	4a5e      	ldr	r2, [pc, #376]	; (8002b6c <xTaskIncrementTick+0x21c>)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80029f8:	e08f      	b.n	8002b1a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	68d2      	ldr	r2, [r2, #12]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	6892      	ldr	r2, [r2, #8]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d103      	bne.n	8002a28 <xTaskIncrementTick+0xd8>
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	615a      	str	r2, [r3, #20]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	1e5a      	subs	r2, r3, #1
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01e      	beq.n	8002a7e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	6a12      	ldr	r2, [r2, #32]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	69d2      	ldr	r2, [r2, #28]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	3318      	adds	r3, #24
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d103      	bne.n	8002a6e <xTaskIncrementTick+0x11e>
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6a1a      	ldr	r2, [r3, #32]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2200      	movs	r2, #0
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	1e5a      	subs	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 fc27 	bl	80062d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <xTaskIncrementTick+0x220>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	4a36      	ldr	r2, [pc, #216]	; (8002b70 <xTaskIncrementTick+0x220>)
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9c:	4935      	ldr	r1, [pc, #212]	; (8002b74 <xTaskIncrementTick+0x224>)
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	60da      	str	r2, [r3, #12]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	3204      	adds	r2, #4
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	1d1a      	adds	r2, r3, #4
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4a26      	ldr	r2, [pc, #152]	; (8002b74 <xTaskIncrementTick+0x224>)
 8002adc:	441a      	add	r2, r3
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	615a      	str	r2, [r3, #20]
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae6:	4923      	ldr	r1, [pc, #140]	; (8002b74 <xTaskIncrementTick+0x224>)
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	1c59      	adds	r1, r3, #1
 8002af6:	481f      	ldr	r0, [pc, #124]	; (8002b74 <xTaskIncrementTick+0x224>)
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4403      	add	r3, r0
 8002b02:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <xTaskIncrementTick+0x228>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	f67f af59 	bls.w	80029c6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002b14:	2301      	movs	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b18:	e755      	b.n	80029c6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <xTaskIncrementTick+0x228>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b20:	4914      	ldr	r1, [pc, #80]	; (8002b74 <xTaskIncrementTick+0x224>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d901      	bls.n	8002b36 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002b32:	2301      	movs	r3, #1
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <xTaskIncrementTick+0x22c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
 8002b42:	e004      	b.n	8002b4e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002b44:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <xTaskIncrementTick+0x230>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <xTaskIncrementTick+0x230>)
 8002b4c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3728      	adds	r7, #40	; 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	200001a0 	.word	0x200001a0
 8002b5c:	2000017c 	.word	0x2000017c
 8002b60:	20000130 	.word	0x20000130
 8002b64:	20000134 	.word	0x20000134
 8002b68:	20000190 	.word	0x20000190
 8002b6c:	20000198 	.word	0x20000198
 8002b70:	20000180 	.word	0x20000180
 8002b74:	20000040 	.word	0x20000040
 8002b78:	2000003c 	.word	0x2000003c
 8002b7c:	2000018c 	.word	0x2000018c
 8002b80:	20000188 	.word	0x20000188

08002b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b8a:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <vTaskSwitchContext+0xbc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002b92:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <vTaskSwitchContext+0xc0>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002b98:	e04d      	b.n	8002c36 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002b9a:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <vTaskSwitchContext+0xc0>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <vTaskSwitchContext+0xc4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	f1c3 031f 	rsb	r3, r3, #31
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	4925      	ldr	r1, [pc, #148]	; (8002c4c <vTaskSwitchContext+0xc8>)
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	607b      	str	r3, [r7, #4]
    }
 8002bdc:	bf00      	nop
 8002bde:	e7fe      	b.n	8002bde <vTaskSwitchContext+0x5a>
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <vTaskSwitchContext+0xc8>)
 8002bec:	4413      	add	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	3308      	adds	r3, #8
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d104      	bne.n	8002c10 <vTaskSwitchContext+0x8c>
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <vTaskSwitchContext+0xcc>)
 8002c18:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <vTaskSwitchContext+0xcc>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <vTaskSwitchContext+0xd0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d102      	bne.n	8002c2c <vTaskSwitchContext+0xa8>
 8002c26:	f003 fab5 	bl	8006194 <SEGGER_SYSVIEW_OnIdle>
}
 8002c2a:	e004      	b.n	8002c36 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <vTaskSwitchContext+0xcc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fb0d 	bl	8006250 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200001a0 	.word	0x200001a0
 8002c44:	2000018c 	.word	0x2000018c
 8002c48:	20000180 	.word	0x20000180
 8002c4c:	20000040 	.word	0x20000040
 8002c50:	2000003c 	.word	0x2000003c
 8002c54:	2000019c 	.word	0x2000019c

08002c58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002c60:	f000 f852 	bl	8002d08 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <prvIdleTask+0x28>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d9f9      	bls.n	8002c60 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <prvIdleTask+0x2c>)
 8002c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002c7c:	e7f0      	b.n	8002c60 <prvIdleTask+0x8>
 8002c7e:	bf00      	nop
 8002c80:	20000040 	.word	0x20000040
 8002c84:	e000ed04 	.word	0xe000ed04

08002c88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c8e:	2300      	movs	r3, #0
 8002c90:	607b      	str	r3, [r7, #4]
 8002c92:	e00c      	b.n	8002cae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <prvInitialiseTaskLists+0x60>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff f9ee 	bl	8002084 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3301      	adds	r3, #1
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b09      	cmp	r3, #9
 8002cb2:	d9ef      	bls.n	8002c94 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002cb4:	480d      	ldr	r0, [pc, #52]	; (8002cec <prvInitialiseTaskLists+0x64>)
 8002cb6:	f7ff f9e5 	bl	8002084 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002cba:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <prvInitialiseTaskLists+0x68>)
 8002cbc:	f7ff f9e2 	bl	8002084 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002cc0:	480c      	ldr	r0, [pc, #48]	; (8002cf4 <prvInitialiseTaskLists+0x6c>)
 8002cc2:	f7ff f9df 	bl	8002084 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002cc6:	480c      	ldr	r0, [pc, #48]	; (8002cf8 <prvInitialiseTaskLists+0x70>)
 8002cc8:	f7ff f9dc 	bl	8002084 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002ccc:	480b      	ldr	r0, [pc, #44]	; (8002cfc <prvInitialiseTaskLists+0x74>)
 8002cce:	f7ff f9d9 	bl	8002084 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <prvInitialiseTaskLists+0x78>)
 8002cd4:	4a05      	ldr	r2, [pc, #20]	; (8002cec <prvInitialiseTaskLists+0x64>)
 8002cd6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <prvInitialiseTaskLists+0x7c>)
 8002cda:	4a05      	ldr	r2, [pc, #20]	; (8002cf0 <prvInitialiseTaskLists+0x68>)
 8002cdc:	601a      	str	r2, [r3, #0]
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000040 	.word	0x20000040
 8002cec:	20000108 	.word	0x20000108
 8002cf0:	2000011c 	.word	0x2000011c
 8002cf4:	20000138 	.word	0x20000138
 8002cf8:	2000014c 	.word	0x2000014c
 8002cfc:	20000164 	.word	0x20000164
 8002d00:	20000130 	.word	0x20000130
 8002d04:	20000134 	.word	0x20000134

08002d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d0e:	e019      	b.n	8002d44 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002d10:	f000 fc78 	bl	8003604 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <prvCheckTasksWaitingTermination+0x50>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fa39 	bl	8002198 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <prvCheckTasksWaitingTermination+0x54>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <prvCheckTasksWaitingTermination+0x54>)
 8002d2e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <prvCheckTasksWaitingTermination+0x58>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <prvCheckTasksWaitingTermination+0x58>)
 8002d38:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002d3a:	f000 fc93 	bl	8003664 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f810 	bl	8002d64 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <prvCheckTasksWaitingTermination+0x58>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e1      	bne.n	8002d10 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	2000014c 	.word	0x2000014c
 8002d5c:	20000178 	.word	0x20000178
 8002d60:	20000160 	.word	0x20000160

08002d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fe2d 	bl	80039d0 <vPortFree>
            vPortFree( pxTCB );
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fe2a 	bl	80039d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <prvResetNextTaskUnblockTime+0x30>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <prvResetNextTaskUnblockTime+0x34>)
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d9a:	e005      	b.n	8002da8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <prvResetNextTaskUnblockTime+0x30>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <prvResetNextTaskUnblockTime+0x34>)
 8002da6:	6013      	str	r3, [r2, #0]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000130 	.word	0x20000130
 8002db8:	20000198 	.word	0x20000198

08002dbc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	613b      	str	r3, [r7, #16]
    }
 8002de2:	bf00      	nop
 8002de4:	e7fe      	b.n	8002de4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002de6:	f000 fc0d 	bl	8003604 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002dea:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <xTaskGenericNotifyWait+0x108>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	3354      	adds	r3, #84	; 0x54
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d022      	beq.n	8002e42 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002dfc:	4b31      	ldr	r3, [pc, #196]	; (8002ec4 <xTaskGenericNotifyWait+0x108>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	3214      	adds	r2, #20
 8002e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	43d2      	mvns	r2, r2
 8002e0c:	4011      	ands	r1, r2
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	3214      	adds	r2, #20
 8002e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002e16:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <xTaskGenericNotifyWait+0x108>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3354      	adds	r3, #84	; 0x54
 8002e20:	2201      	movs	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	6a38      	ldr	r0, [r7, #32]
 8002e2e:	f000 f9bb 	bl	80031a8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002e32:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <xTaskGenericNotifyWait+0x10c>)
 8002e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e42:	f000 fc0f 	bl	8003664 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002e46:	f000 fbdd 	bl	8003604 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	2040      	movs	r0, #64	; 0x40
 8002e58:	f002 fd18 	bl	800588c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002e62:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <xTaskGenericNotifyWait+0x108>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	3214      	adds	r2, #20
 8002e6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002e72:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <xTaskGenericNotifyWait+0x108>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4413      	add	r3, r2
 8002e7a:	3354      	adds	r3, #84	; 0x54
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d002      	beq.n	8002e8a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	e00e      	b.n	8002ea8 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <xTaskGenericNotifyWait+0x108>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	3214      	adds	r2, #20
 8002e92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	43d2      	mvns	r2, r2
 8002e9a:	4011      	ands	r1, r2
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	3214      	adds	r2, #20
 8002ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <xTaskGenericNotifyWait+0x108>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	3354      	adds	r3, #84	; 0x54
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002eb6:	f000 fbd5 	bl	8003664 <vPortExitCritical>

        return xReturn;
 8002eba:	697b      	ldr	r3, [r7, #20]
    }
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	2000003c 	.word	0x2000003c
 8002ec8:	e000ed04 	.word	0xe000ed04

08002ecc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b094      	sub	sp, #80	; 0x50
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8002eda:	2301      	movs	r3, #1
 8002edc:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002f12:	bf00      	nop
 8002f14:	e7fe      	b.n	8002f14 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f16:	f000 fc61 	bl	80037dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002f1e:	f3ef 8211 	mrs	r2, BASEPRI
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	623a      	str	r2, [r7, #32]
 8002f34:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002f36:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8002f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	3214      	adds	r2, #20
 8002f46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4413      	add	r3, r2
 8002f54:	3354      	adds	r3, #84	; 0x54
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4413      	add	r3, r2
 8002f62:	3354      	adds	r3, #84	; 0x54
 8002f64:	2202      	movs	r2, #2
 8002f66:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d83b      	bhi.n	8002fe6 <xTaskGenericNotifyFromISR+0x11a>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <xTaskGenericNotifyFromISR+0xa8>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08003005 	.word	0x08003005
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002fa5 	.word	0x08002fa5
 8002f80:	08002fbd 	.word	0x08002fbd
 8002f84:	08002fcb 	.word	0x08002fcb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	3214      	adds	r2, #20
 8002f8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	ea42 0103 	orr.w	r1, r2, r3
 8002f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	3214      	adds	r2, #20
 8002f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002fa2:	e032      	b.n	800300a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	3214      	adds	r2, #20
 8002faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	3214      	adds	r2, #20
 8002fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002fba:	e026      	b.n	800300a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	3214      	adds	r2, #20
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002fc8:	e01f      	b.n	800300a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002fca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d006      	beq.n	8002fe0 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	3214      	adds	r2, #20
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002fde:	e014      	b.n	800300a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8002fe4:	e011      	b.n	800300a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002fe6:	4b69      	ldr	r3, [pc, #420]	; (800318c <xTaskGenericNotifyFromISR+0x2c0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00c      	beq.n	8003008 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	61bb      	str	r3, [r7, #24]
    }
 8003000:	bf00      	nop
 8003002:	e7fe      	b.n	8003002 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003004:	bf00      	nop
 8003006:	e000      	b.n	800300a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003008:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800300a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300c:	4618      	mov	r0, r3
 800300e:	f003 f9a3 	bl	8006358 <SEGGER_SYSVIEW_ShrinkId>
 8003012:	78f9      	ldrb	r1, [r7, #3]
 8003014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003016:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003018:	9201      	str	r2, [sp, #4]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	460b      	mov	r3, r1
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4601      	mov	r1, r0
 8003022:	203f      	movs	r0, #63	; 0x3f
 8003024:	f002 fcc4 	bl	80059b0 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003028:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800302c:	2b01      	cmp	r3, #1
 800302e:	f040 80a2 	bne.w	8003176 <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	617b      	str	r3, [r7, #20]
    }
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003050:	4b4f      	ldr	r3, [pc, #316]	; (8003190 <xTaskGenericNotifyFromISR+0x2c4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d162      	bne.n	800311e <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
 800305e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003064:	68d2      	ldr	r2, [r2, #12]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800306e:	6892      	ldr	r2, [r2, #8]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003078:	3304      	adds	r3, #4
 800307a:	429a      	cmp	r2, r3
 800307c:	d103      	bne.n	8003086 <xTaskGenericNotifyFromISR+0x1ba>
 800307e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003088:	2200      	movs	r2, #0
 800308a:	615a      	str	r2, [r3, #20]
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	1e5a      	subs	r2, r3, #1
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003098:	4618      	mov	r0, r3
 800309a:	f003 f91b 	bl	80062d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800309e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	2201      	movs	r2, #1
 80030a4:	409a      	lsls	r2, r3
 80030a6:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <xTaskGenericNotifyFromISR+0x2c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	4a39      	ldr	r2, [pc, #228]	; (8003194 <xTaskGenericNotifyFromISR+0x2c8>)
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b4:	4938      	ldr	r1, [pc, #224]	; (8003198 <xTaskGenericNotifyFromISR+0x2cc>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3304      	adds	r3, #4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d2:	60da      	str	r2, [r3, #12]
 80030d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030da:	3204      	adds	r2, #4
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e0:	1d1a      	adds	r2, r3, #4
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4a29      	ldr	r2, [pc, #164]	; (8003198 <xTaskGenericNotifyFromISR+0x2cc>)
 80030f4:	441a      	add	r2, r3
 80030f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f8:	615a      	str	r2, [r3, #20]
 80030fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fe:	4926      	ldr	r1, [pc, #152]	; (8003198 <xTaskGenericNotifyFromISR+0x2cc>)
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	1c59      	adds	r1, r3, #1
 800310e:	4822      	ldr	r0, [pc, #136]	; (8003198 <xTaskGenericNotifyFromISR+0x2cc>)
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4403      	add	r3, r0
 800311a:	6019      	str	r1, [r3, #0]
 800311c:	e01b      	b.n	8003156 <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800311e:	4b1f      	ldr	r3, [pc, #124]	; (800319c <xTaskGenericNotifyFromISR+0x2d0>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	637b      	str	r3, [r7, #52]	; 0x34
 8003124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003128:	61da      	str	r2, [r3, #28]
 800312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003130:	621a      	str	r2, [r3, #32]
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003138:	3218      	adds	r2, #24
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313e:	f103 0218 	add.w	r2, r3, #24
 8003142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <xTaskGenericNotifyFromISR+0x2d0>)
 800314a:	629a      	str	r2, [r3, #40]	; 0x28
 800314c:	4b13      	ldr	r3, [pc, #76]	; (800319c <xTaskGenericNotifyFromISR+0x2d0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	4a12      	ldr	r2, [pc, #72]	; (800319c <xTaskGenericNotifyFromISR+0x2d0>)
 8003154:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <xTaskGenericNotifyFromISR+0x2d4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	429a      	cmp	r2, r3
 8003162:	d908      	bls.n	8003176 <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800316a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <xTaskGenericNotifyFromISR+0x2d8>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003178:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003180:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003184:	4618      	mov	r0, r3
 8003186:	3748      	adds	r7, #72	; 0x48
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	2000017c 	.word	0x2000017c
 8003190:	200001a0 	.word	0x200001a0
 8003194:	20000180 	.word	0x20000180
 8003198:	20000040 	.word	0x20000040
 800319c:	20000138 	.word	0x20000138
 80031a0:	2000003c 	.word	0x2000003c
 80031a4:	2000018c 	.word	0x2000018c

080031a8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80031b2:	4b36      	ldr	r3, [pc, #216]	; (800328c <prvAddCurrentTaskToDelayedList+0xe4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031b8:	4b35      	ldr	r3, [pc, #212]	; (8003290 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3304      	adds	r3, #4
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fe ffea 	bl	8002198 <uxListRemove>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10b      	bne.n	80031e2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80031ca:	4b31      	ldr	r3, [pc, #196]	; (8003290 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	2201      	movs	r2, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	4b2e      	ldr	r3, [pc, #184]	; (8003294 <prvAddCurrentTaskToDelayedList+0xec>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4013      	ands	r3, r2
 80031de:	4a2d      	ldr	r2, [pc, #180]	; (8003294 <prvAddCurrentTaskToDelayedList+0xec>)
 80031e0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d124      	bne.n	8003234 <prvAddCurrentTaskToDelayedList+0x8c>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d021      	beq.n	8003234 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031f0:	4b29      	ldr	r3, [pc, #164]	; (8003298 <prvAddCurrentTaskToDelayedList+0xf0>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	4b26      	ldr	r3, [pc, #152]	; (8003290 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	4b24      	ldr	r3, [pc, #144]	; (8003290 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	6892      	ldr	r2, [r2, #8]
 8003206:	60da      	str	r2, [r3, #12]
 8003208:	4b21      	ldr	r3, [pc, #132]	; (8003290 <prvAddCurrentTaskToDelayedList+0xe8>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	3204      	adds	r2, #4
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	4b1e      	ldr	r3, [pc, #120]	; (8003290 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	1d1a      	adds	r2, r3, #4
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003224:	615a      	str	r2, [r3, #20]
 8003226:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	4a1a      	ldr	r2, [pc, #104]	; (8003298 <prvAddCurrentTaskToDelayedList+0xf0>)
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003232:	e026      	b.n	8003282 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <prvAddCurrentTaskToDelayedList+0xe8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	429a      	cmp	r2, r3
 800324a:	d209      	bcs.n	8003260 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <prvAddCurrentTaskToDelayedList+0xf4>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3304      	adds	r3, #4
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f7fe ff64 	bl	8002126 <vListInsert>
}
 800325e:	e010      	b.n	8003282 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3304      	adds	r3, #4
 800326a:	4619      	mov	r1, r3
 800326c:	4610      	mov	r0, r2
 800326e:	f7fe ff5a 	bl	8002126 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003272:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	429a      	cmp	r2, r3
 800327a:	d202      	bcs.n	8003282 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800327c:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6013      	str	r3, [r2, #0]
}
 8003282:	bf00      	nop
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	2000017c 	.word	0x2000017c
 8003290:	2000003c 	.word	0x2000003c
 8003294:	20000180 	.word	0x20000180
 8003298:	20000164 	.word	0x20000164
 800329c:	20000134 	.word	0x20000134
 80032a0:	20000130 	.word	0x20000130
 80032a4:	20000198 	.word	0x20000198

080032a8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3b04      	subs	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3b04      	subs	r3, #4
 80032c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3b04      	subs	r3, #4
 80032d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80032d8:	4a0c      	ldr	r2, [pc, #48]	; (800330c <pxPortInitialiseStack+0x64>)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3b14      	subs	r3, #20
 80032e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3b04      	subs	r3, #4
 80032ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f06f 0202 	mvn.w	r2, #2
 80032f6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3b20      	subs	r3, #32
 80032fc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80032fe:	68fb      	ldr	r3, [r7, #12]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	08003311 	.word	0x08003311

08003310 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <prvTaskExitError+0x54>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d00a      	beq.n	800333a <prvTaskExitError+0x2a>
        __asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	60fb      	str	r3, [r7, #12]
    }
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <prvTaskExitError+0x28>
        __asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	60bb      	str	r3, [r7, #8]
    }
 800334c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800334e:	bf00      	nop
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0fc      	beq.n	8003350 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	20000010 	.word	0x20000010
	...

08003370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <pxCurrentTCBConst2>)
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	6808      	ldr	r0, [r1, #0]
 8003376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800337a:	f380 8809 	msr	PSP, r0
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f04f 0000 	mov.w	r0, #0
 8003386:	f380 8811 	msr	BASEPRI, r0
 800338a:	4770      	bx	lr
 800338c:	f3af 8000 	nop.w

08003390 <pxCurrentTCBConst2>:
 8003390:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop

08003398 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003398:	4808      	ldr	r0, [pc, #32]	; (80033bc <prvPortStartFirstTask+0x24>)
 800339a:	6800      	ldr	r0, [r0, #0]
 800339c:	6800      	ldr	r0, [r0, #0]
 800339e:	f380 8808 	msr	MSP, r0
 80033a2:	f04f 0000 	mov.w	r0, #0
 80033a6:	f380 8814 	msr	CONTROL, r0
 80033aa:	b662      	cpsie	i
 80033ac:	b661      	cpsie	f
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	df00      	svc	0
 80033b8:	bf00      	nop
 80033ba:	0000      	.short	0x0000
 80033bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop

080033c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80033ca:	4b46      	ldr	r3, [pc, #280]	; (80034e4 <xPortStartScheduler+0x120>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a46      	ldr	r2, [pc, #280]	; (80034e8 <xPortStartScheduler+0x124>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d10a      	bne.n	80033ea <xPortStartScheduler+0x26>
        __asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	613b      	str	r3, [r7, #16]
    }
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033ea:	4b3e      	ldr	r3, [pc, #248]	; (80034e4 <xPortStartScheduler+0x120>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a3f      	ldr	r2, [pc, #252]	; (80034ec <xPortStartScheduler+0x128>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d10a      	bne.n	800340a <xPortStartScheduler+0x46>
        __asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	60fb      	str	r3, [r7, #12]
    }
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800340a:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <xPortStartScheduler+0x12c>)
 800340c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	22ff      	movs	r2, #255	; 0xff
 800341a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <xPortStartScheduler+0x130>)
 8003430:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003432:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <xPortStartScheduler+0x134>)
 8003434:	2207      	movs	r2, #7
 8003436:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003438:	e009      	b.n	800344e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800343a:	4b2f      	ldr	r3, [pc, #188]	; (80034f8 <xPortStartScheduler+0x134>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3b01      	subs	r3, #1
 8003440:	4a2d      	ldr	r2, [pc, #180]	; (80034f8 <xPortStartScheduler+0x134>)
 8003442:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003456:	2b80      	cmp	r3, #128	; 0x80
 8003458:	d0ef      	beq.n	800343a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <xPortStartScheduler+0x134>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f1c3 0307 	rsb	r3, r3, #7
 8003462:	2b04      	cmp	r3, #4
 8003464:	d00a      	beq.n	800347c <xPortStartScheduler+0xb8>
        __asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	60bb      	str	r3, [r7, #8]
    }
 8003478:	bf00      	nop
 800347a:	e7fe      	b.n	800347a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800347c:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <xPortStartScheduler+0x134>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <xPortStartScheduler+0x134>)
 8003484:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003486:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <xPortStartScheduler+0x134>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800348e:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <xPortStartScheduler+0x134>)
 8003490:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	b2da      	uxtb	r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800349a:	4b18      	ldr	r3, [pc, #96]	; (80034fc <xPortStartScheduler+0x138>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a17      	ldr	r2, [pc, #92]	; (80034fc <xPortStartScheduler+0x138>)
 80034a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <xPortStartScheduler+0x138>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a14      	ldr	r2, [pc, #80]	; (80034fc <xPortStartScheduler+0x138>)
 80034ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80034b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80034b2:	f000 f963 	bl	800377c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <xPortStartScheduler+0x13c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80034bc:	f000 f982 	bl	80037c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <xPortStartScheduler+0x140>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0f      	ldr	r2, [pc, #60]	; (8003504 <xPortStartScheduler+0x140>)
 80034c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80034ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80034cc:	f7ff ff64 	bl	8003398 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80034d0:	f7ff fb58 	bl	8002b84 <vTaskSwitchContext>
    prvTaskExitError();
 80034d4:	f7ff ff1c 	bl	8003310 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	e000ed00 	.word	0xe000ed00
 80034e8:	410fc271 	.word	0x410fc271
 80034ec:	410fc270 	.word	0x410fc270
 80034f0:	e000e400 	.word	0xe000e400
 80034f4:	200001a4 	.word	0x200001a4
 80034f8:	200001a8 	.word	0x200001a8
 80034fc:	e000ed20 	.word	0xe000ed20
 8003500:	20000010 	.word	0x20000010
 8003504:	e000ef34 	.word	0xe000ef34

08003508 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800350e:	4b37      	ldr	r3, [pc, #220]	; (80035ec <vInitPrioGroupValue+0xe4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a37      	ldr	r2, [pc, #220]	; (80035f0 <vInitPrioGroupValue+0xe8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d10a      	bne.n	800352e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	613b      	str	r3, [r7, #16]
    }
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800352e:	4b2f      	ldr	r3, [pc, #188]	; (80035ec <vInitPrioGroupValue+0xe4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a30      	ldr	r2, [pc, #192]	; (80035f4 <vInitPrioGroupValue+0xec>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d10a      	bne.n	800354e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	60fb      	str	r3, [r7, #12]
    }
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800354e:	4b2a      	ldr	r3, [pc, #168]	; (80035f8 <vInitPrioGroupValue+0xf0>)
 8003550:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	22ff      	movs	r2, #255	; 0xff
 800355e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003570:	b2da      	uxtb	r2, r3
 8003572:	4b22      	ldr	r3, [pc, #136]	; (80035fc <vInitPrioGroupValue+0xf4>)
 8003574:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003576:	4b22      	ldr	r3, [pc, #136]	; (8003600 <vInitPrioGroupValue+0xf8>)
 8003578:	2207      	movs	r2, #7
 800357a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800357c:	e009      	b.n	8003592 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <vInitPrioGroupValue+0xf8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3b01      	subs	r3, #1
 8003584:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <vInitPrioGroupValue+0xf8>)
 8003586:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d0ef      	beq.n	800357e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <vInitPrioGroupValue+0xf8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f1c3 0307 	rsb	r3, r3, #7
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d00a      	beq.n	80035c0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	60bb      	str	r3, [r7, #8]
    }
 80035bc:	bf00      	nop
 80035be:	e7fe      	b.n	80035be <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <vInitPrioGroupValue+0xf8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	4a0e      	ldr	r2, [pc, #56]	; (8003600 <vInitPrioGroupValue+0xf8>)
 80035c8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <vInitPrioGroupValue+0xf8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035d2:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <vInitPrioGroupValue+0xf8>)
 80035d4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000ed00 	.word	0xe000ed00
 80035f0:	410fc271 	.word	0x410fc271
 80035f4:	410fc270 	.word	0x410fc270
 80035f8:	e000e400 	.word	0xe000e400
 80035fc:	200001a4 	.word	0x200001a4
 8003600:	200001a8 	.word	0x200001a8

08003604 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
        __asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	607b      	str	r3, [r7, #4]
    }
 800361c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <vPortEnterCritical+0x58>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3301      	adds	r3, #1
 8003624:	4a0d      	ldr	r2, [pc, #52]	; (800365c <vPortEnterCritical+0x58>)
 8003626:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <vPortEnterCritical+0x58>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d10f      	bne.n	8003650 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <vPortEnterCritical+0x5c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <vPortEnterCritical+0x4c>
        __asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	603b      	str	r3, [r7, #0]
    }
 800364c:	bf00      	nop
 800364e:	e7fe      	b.n	800364e <vPortEnterCritical+0x4a>
    }
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	20000010 	.word	0x20000010
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <vPortExitCritical+0x50>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <vPortExitCritical+0x24>
        __asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	607b      	str	r3, [r7, #4]
    }
 8003684:	bf00      	nop
 8003686:	e7fe      	b.n	8003686 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <vPortExitCritical+0x50>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3b01      	subs	r3, #1
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <vPortExitCritical+0x50>)
 8003690:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <vPortExitCritical+0x50>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d105      	bne.n	80036a6 <vPortExitCritical+0x42>
 800369a:	2300      	movs	r3, #0
 800369c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f383 8811 	msr	BASEPRI, r3
    }
 80036a4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000010 	.word	0x20000010
	...

080036c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80036c0:	f3ef 8009 	mrs	r0, PSP
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	4b15      	ldr	r3, [pc, #84]	; (8003720 <pxCurrentTCBConst>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	f01e 0f10 	tst.w	lr, #16
 80036d0:	bf08      	it	eq
 80036d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036da:	6010      	str	r0, [r2, #0]
 80036dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80036e4:	f380 8811 	msr	BASEPRI, r0
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f7ff fa48 	bl	8002b84 <vTaskSwitchContext>
 80036f4:	f04f 0000 	mov.w	r0, #0
 80036f8:	f380 8811 	msr	BASEPRI, r0
 80036fc:	bc09      	pop	{r0, r3}
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	6808      	ldr	r0, [r1, #0]
 8003702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003706:	f01e 0f10 	tst.w	lr, #16
 800370a:	bf08      	it	eq
 800370c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003710:	f380 8809 	msr	PSP, r0
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	f3af 8000 	nop.w

08003720 <pxCurrentTCBConst>:
 8003720:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop

08003728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
        __asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	607b      	str	r3, [r7, #4]
    }
 8003740:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003742:	f002 fcad 	bl	80060a0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003746:	f7ff f903 	bl	8002950 <xTaskIncrementTick>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d006      	beq.n	800375e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003750:	f002 fd04 	bl	800615c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <SysTick_Handler+0x50>)
 8003756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	e001      	b.n	8003762 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800375e:	f002 fce1 	bl	8006124 <SEGGER_SYSVIEW_RecordExitISR>
 8003762:	2300      	movs	r3, #0
 8003764:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	f383 8811 	msr	BASEPRI, r3
    }
 800376c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	e000ed04 	.word	0xe000ed04

0800377c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <vPortSetupTimerInterrupt+0x34>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <vPortSetupTimerInterrupt+0x38>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <vPortSetupTimerInterrupt+0x3c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <vPortSetupTimerInterrupt+0x40>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <vPortSetupTimerInterrupt+0x44>)
 800379a:	3b01      	subs	r3, #1
 800379c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <vPortSetupTimerInterrupt+0x34>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	601a      	str	r2, [r3, #0]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000e010 	.word	0xe000e010
 80037b4:	e000e018 	.word	0xe000e018
 80037b8:	20000000 	.word	0x20000000
 80037bc:	10624dd3 	.word	0x10624dd3
 80037c0:	e000e014 	.word	0xe000e014

080037c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80037c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80037d4 <vPortEnableVFP+0x10>
 80037c8:	6801      	ldr	r1, [r0, #0]
 80037ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037ce:	6001      	str	r1, [r0, #0]
 80037d0:	4770      	bx	lr
 80037d2:	0000      	.short	0x0000
 80037d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop

080037dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80037e2:	f3ef 8305 	mrs	r3, IPSR
 80037e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b0f      	cmp	r3, #15
 80037ec:	d914      	bls.n	8003818 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80037ee:	4a17      	ldr	r2, [pc, #92]	; (800384c <vPortValidateInterruptPriority+0x70>)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80037f8:	4b15      	ldr	r3, [pc, #84]	; (8003850 <vPortValidateInterruptPriority+0x74>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	7afa      	ldrb	r2, [r7, #11]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d20a      	bcs.n	8003818 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	607b      	str	r3, [r7, #4]
    }
 8003814:	bf00      	nop
 8003816:	e7fe      	b.n	8003816 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <vPortValidateInterruptPriority+0x78>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <vPortValidateInterruptPriority+0x7c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d90a      	bls.n	800383e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	603b      	str	r3, [r7, #0]
    }
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <vPortValidateInterruptPriority+0x60>
    }
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	e000e3f0 	.word	0xe000e3f0
 8003850:	200001a4 	.word	0x200001a4
 8003854:	e000ed0c 	.word	0xe000ed0c
 8003858:	200001a8 	.word	0x200001a8

0800385c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003868:	f7fe ff52 	bl	8002710 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800386c:	4b53      	ldr	r3, [pc, #332]	; (80039bc <pvPortMalloc+0x160>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003874:	f000 f908 	bl	8003a88 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d012      	beq.n	80038a4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800387e:	2208      	movs	r2, #8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	3308      	adds	r3, #8
 800388a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	43db      	mvns	r3, r3
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	d804      	bhi.n	80038a0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	4413      	add	r3, r2
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	e001      	b.n	80038a4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db70      	blt.n	800398c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d06d      	beq.n	800398c <pvPortMalloc+0x130>
 80038b0:	4b43      	ldr	r3, [pc, #268]	; (80039c0 <pvPortMalloc+0x164>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d868      	bhi.n	800398c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80038ba:	4b42      	ldr	r3, [pc, #264]	; (80039c4 <pvPortMalloc+0x168>)
 80038bc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80038be:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <pvPortMalloc+0x168>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038c4:	e004      	b.n	80038d0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d903      	bls.n	80038e2 <pvPortMalloc+0x86>
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f1      	bne.n	80038c6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80038e2:	4b36      	ldr	r3, [pc, #216]	; (80039bc <pvPortMalloc+0x160>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d04f      	beq.n	800398c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2208      	movs	r2, #8
 80038f2:	4413      	add	r3, r2
 80038f4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	1ad2      	subs	r2, r2, r3
 8003906:	2308      	movs	r3, #8
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	429a      	cmp	r2, r3
 800390c:	d91f      	bls.n	800394e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4413      	add	r3, r2
 8003914:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <pvPortMalloc+0xda>
        __asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	613b      	str	r3, [r7, #16]
    }
 8003932:	bf00      	nop
 8003934:	e7fe      	b.n	8003934 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	1ad2      	subs	r2, r2, r3
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003948:	6978      	ldr	r0, [r7, #20]
 800394a:	f000 f8f9 	bl	8003b40 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800394e:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <pvPortMalloc+0x164>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	4a19      	ldr	r2, [pc, #100]	; (80039c0 <pvPortMalloc+0x164>)
 800395a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800395c:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <pvPortMalloc+0x164>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <pvPortMalloc+0x16c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d203      	bcs.n	8003970 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <pvPortMalloc+0x164>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <pvPortMalloc+0x16c>)
 800396e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <pvPortMalloc+0x170>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3301      	adds	r3, #1
 8003988:	4a10      	ldr	r2, [pc, #64]	; (80039cc <pvPortMalloc+0x170>)
 800398a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800398c:	f7fe fece 	bl	800272c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <pvPortMalloc+0x154>
        __asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	60fb      	str	r3, [r7, #12]
    }
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <pvPortMalloc+0x152>
    return pvReturn;
 80039b0:	69fb      	ldr	r3, [r7, #28]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3728      	adds	r7, #40	; 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20012db4 	.word	0x20012db4
 80039c0:	20012db8 	.word	0x20012db8
 80039c4:	20012dac 	.word	0x20012dac
 80039c8:	20012dbc 	.word	0x20012dbc
 80039cc:	20012dc0 	.word	0x20012dc0

080039d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d049      	beq.n	8003a76 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80039e2:	2308      	movs	r3, #8
 80039e4:	425b      	negs	r3, r3
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4413      	add	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	db0a      	blt.n	8003a0e <vPortFree+0x3e>
        __asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	60fb      	str	r3, [r7, #12]
    }
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <vPortFree+0x5c>
        __asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	60bb      	str	r3, [r7, #8]
    }
 8003a28:	bf00      	nop
 8003a2a:	e7fe      	b.n	8003a2a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	0fdb      	lsrs	r3, r3, #31
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01c      	beq.n	8003a76 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d118      	bne.n	8003a76 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003a50:	f7fe fe5e 	bl	8002710 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <vPortFree+0xb0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <vPortFree+0xb0>)
 8003a60:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a62:	6938      	ldr	r0, [r7, #16]
 8003a64:	f000 f86c 	bl	8003b40 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <vPortFree+0xb4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <vPortFree+0xb4>)
 8003a70:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003a72:	f7fe fe5b 	bl	800272c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003a76:	bf00      	nop
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20012db8 	.word	0x20012db8
 8003a84:	20012dc4 	.word	0x20012dc4

08003a88 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a8e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003a92:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003a94:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <prvHeapInit+0xa4>)
 8003a96:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00c      	beq.n	8003abc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3307      	adds	r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0307 	bic.w	r3, r3, #7
 8003aae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <prvHeapInit+0xa4>)
 8003ab8:	4413      	add	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <prvHeapInit+0xa8>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003ac6:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <prvHeapInit+0xa8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0307 	bic.w	r3, r3, #7
 8003ae2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <prvHeapInit+0xac>)
 8003ae8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <prvHeapInit+0xac>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003af2:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <prvHeapInit+0xac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	1ad2      	subs	r2, r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <prvHeapInit+0xac>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4a08      	ldr	r2, [pc, #32]	; (8003b38 <prvHeapInit+0xb0>)
 8003b16:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a07      	ldr	r2, [pc, #28]	; (8003b3c <prvHeapInit+0xb4>)
 8003b1e:	6013      	str	r3, [r2, #0]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	200001ac 	.word	0x200001ac
 8003b30:	20012dac 	.word	0x20012dac
 8003b34:	20012db4 	.word	0x20012db4
 8003b38:	20012dbc 	.word	0x20012dbc
 8003b3c:	20012db8 	.word	0x20012db8

08003b40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <prvInsertBlockIntoFreeList+0xac>)
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	e002      	b.n	8003b54 <prvInsertBlockIntoFreeList+0x14>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d8f7      	bhi.n	8003b4e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4413      	add	r3, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d108      	bne.n	8003b82 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	441a      	add	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	441a      	add	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d118      	bne.n	8003bc8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <prvInsertBlockIntoFreeList+0xb0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d00d      	beq.n	8003bbe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	441a      	add	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e008      	b.n	8003bd0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <prvInsertBlockIntoFreeList+0xb0>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e003      	b.n	8003bd0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d002      	beq.n	8003bde <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20012dac 	.word	0x20012dac
 8003bf0:	20012db4 	.word	0x20012db4

08003bf4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003bf8:	4803      	ldr	r0, [pc, #12]	; (8003c08 <_cbSendSystemDesc+0x14>)
 8003bfa:	f002 f9fb 	bl	8005ff4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003bfe:	4803      	ldr	r0, [pc, #12]	; (8003c0c <_cbSendSystemDesc+0x18>)
 8003c00:	f002 f9f8 	bl	8005ff4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	08006804 	.word	0x08006804
 8003c0c:	0800684c 	.word	0x0800684c

08003c10 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <SEGGER_SYSVIEW_Conf+0x20>)
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <SEGGER_SYSVIEW_Conf+0x20>)
 8003c1a:	6819      	ldr	r1, [r3, #0]
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <SEGGER_SYSVIEW_Conf+0x24>)
 8003c1e:	4a06      	ldr	r2, [pc, #24]	; (8003c38 <SEGGER_SYSVIEW_Conf+0x28>)
 8003c20:	f001 fd2c 	bl	800567c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003c24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003c28:	f001 fd6c 	bl	8005704 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003c2c:	bf00      	nop
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20000000 	.word	0x20000000
 8003c34:	08003bf5 	.word	0x08003bf5
 8003c38:	080068e8 	.word	0x080068e8

08003c3c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	e033      	b.n	8003cb0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003c48:	491e      	ldr	r1, [pc, #120]	; (8003cc4 <_cbSendTaskList+0x88>)
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	491a      	ldr	r1, [pc, #104]	; (8003cc4 <_cbSendTaskList+0x88>)
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	3304      	adds	r3, #4
 8003c68:	6819      	ldr	r1, [r3, #0]
 8003c6a:	4c16      	ldr	r4, [pc, #88]	; (8003cc4 <_cbSendTaskList+0x88>)
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4423      	add	r3, r4
 8003c78:	3308      	adds	r3, #8
 8003c7a:	681c      	ldr	r4, [r3, #0]
 8003c7c:	4d11      	ldr	r5, [pc, #68]	; (8003cc4 <_cbSendTaskList+0x88>)
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	442b      	add	r3, r5
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	681d      	ldr	r5, [r3, #0]
 8003c8e:	4e0d      	ldr	r6, [pc, #52]	; (8003cc4 <_cbSendTaskList+0x88>)
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4433      	add	r3, r6
 8003c9c:	3310      	adds	r3, #16
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	462b      	mov	r3, r5
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	f000 f971 	bl	8003f8c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3301      	adds	r3, #1
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <_cbSendTaskList+0x8c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d3c6      	bcc.n	8003c48 <_cbSendTaskList+0xc>
  }
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc4:	20012dc8 	.word	0x20012dc8
 8003cc8:	20012e68 	.word	0x20012e68

08003ccc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003ccc:	b5b0      	push	{r4, r5, r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003cd2:	f7fe fe2b 	bl	800292c <xTaskGetTickCountFromISR>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003ce2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	f04f 0400 	mov.w	r4, #0
 8003cee:	f04f 0500 	mov.w	r5, #0
 8003cf2:	015d      	lsls	r5, r3, #5
 8003cf4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003cf8:	0154      	lsls	r4, r2, #5
 8003cfa:	4622      	mov	r2, r4
 8003cfc:	462b      	mov	r3, r5
 8003cfe:	1a12      	subs	r2, r2, r0
 8003d00:	eb63 0301 	sbc.w	r3, r3, r1
 8003d04:	f04f 0400 	mov.w	r4, #0
 8003d08:	f04f 0500 	mov.w	r5, #0
 8003d0c:	009d      	lsls	r5, r3, #2
 8003d0e:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003d12:	0094      	lsls	r4, r2, #2
 8003d14:	4622      	mov	r2, r4
 8003d16:	462b      	mov	r3, r5
 8003d18:	1812      	adds	r2, r2, r0
 8003d1a:	eb41 0303 	adc.w	r3, r1, r3
 8003d1e:	f04f 0000 	mov.w	r0, #0
 8003d22:	f04f 0100 	mov.w	r1, #0
 8003d26:	00d9      	lsls	r1, r3, #3
 8003d28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d2c:	00d0      	lsls	r0, r2, #3
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8003d36:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bdb0      	pop	{r4, r5, r7, pc}

08003d44 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003d52:	2205      	movs	r2, #5
 8003d54:	492b      	ldr	r1, [pc, #172]	; (8003e04 <SYSVIEW_AddTask+0xc0>)
 8003d56:	68b8      	ldr	r0, [r7, #8]
 8003d58:	f002 fcb6 	bl	80066c8 <memcmp>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d04b      	beq.n	8003dfa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003d62:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <SYSVIEW_AddTask+0xc4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b07      	cmp	r3, #7
 8003d68:	d903      	bls.n	8003d72 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003d6a:	4828      	ldr	r0, [pc, #160]	; (8003e0c <SYSVIEW_AddTask+0xc8>)
 8003d6c:	f002 fbfe 	bl	800656c <SEGGER_SYSVIEW_Warn>
    return;
 8003d70:	e044      	b.n	8003dfc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003d72:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <SYSVIEW_AddTask+0xc4>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4926      	ldr	r1, [pc, #152]	; (8003e10 <SYSVIEW_AddTask+0xcc>)
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003d86:	4b20      	ldr	r3, [pc, #128]	; (8003e08 <SYSVIEW_AddTask+0xc4>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4921      	ldr	r1, [pc, #132]	; (8003e10 <SYSVIEW_AddTask+0xcc>)
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	3304      	adds	r3, #4
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <SYSVIEW_AddTask+0xc4>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	491b      	ldr	r1, [pc, #108]	; (8003e10 <SYSVIEW_AddTask+0xcc>)
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	3308      	adds	r3, #8
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003db2:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <SYSVIEW_AddTask+0xc4>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4916      	ldr	r1, [pc, #88]	; (8003e10 <SYSVIEW_AddTask+0xcc>)
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <SYSVIEW_AddTask+0xc4>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4910      	ldr	r1, [pc, #64]	; (8003e10 <SYSVIEW_AddTask+0xcc>)
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3310      	adds	r3, #16
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003dde:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <SYSVIEW_AddTask+0xc4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3301      	adds	r3, #1
 8003de4:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <SYSVIEW_AddTask+0xc4>)
 8003de6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f8ca 	bl	8003f8c <SYSVIEW_SendTaskInfo>
 8003df8:	e000      	b.n	8003dfc <SYSVIEW_AddTask+0xb8>
    return;
 8003dfa:	bf00      	nop

}
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	0800685c 	.word	0x0800685c
 8003e08:	20012e68 	.word	0x20012e68
 8003e0c:	08006864 	.word	0x08006864
 8003e10:	20012dc8 	.word	0x20012dc8

08003e14 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003e1c:	4b59      	ldr	r3, [pc, #356]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80ab 	beq.w	8003f7c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e00d      	b.n	8003e48 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003e2c:	4956      	ldr	r1, [pc, #344]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d008      	beq.n	8003e54 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3301      	adds	r3, #1
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	4b4e      	ldr	r3, [pc, #312]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d3ec      	bcc.n	8003e2c <SYSVIEW_DeleteTask+0x18>
 8003e52:	e000      	b.n	8003e56 <SYSVIEW_DeleteTask+0x42>
      break;
 8003e54:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003e56:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d111      	bne.n	8003e86 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4a46      	ldr	r2, [pc, #280]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003e6e:	4413      	add	r3, r2
 8003e70:	2214      	movs	r2, #20
 8003e72:	2100      	movs	r1, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f002 fc43 	bl	8006700 <memset>
    _NumTasks--;
 8003e7a:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	4a40      	ldr	r2, [pc, #256]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	e07b      	b.n	8003f7e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003e86:	4b3f      	ldr	r3, [pc, #252]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d276      	bcs.n	8003f7e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003e90:	4b3c      	ldr	r3, [pc, #240]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	1e5a      	subs	r2, r3, #1
 8003e96:	493c      	ldr	r1, [pc, #240]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	4838      	ldr	r0, [pc, #224]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4403      	add	r3, r0
 8003eb2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003eb4:	4b33      	ldr	r3, [pc, #204]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	1e5a      	subs	r2, r3, #1
 8003eba:	4933      	ldr	r1, [pc, #204]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	482f      	ldr	r0, [pc, #188]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4403      	add	r3, r0
 8003ed8:	3304      	adds	r3, #4
 8003eda:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003edc:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	1e5a      	subs	r2, r3, #1
 8003ee2:	4929      	ldr	r1, [pc, #164]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	3308      	adds	r3, #8
 8003ef0:	6819      	ldr	r1, [r3, #0]
 8003ef2:	4825      	ldr	r0, [pc, #148]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4403      	add	r3, r0
 8003f00:	3308      	adds	r3, #8
 8003f02:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003f04:	4b1f      	ldr	r3, [pc, #124]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	491f      	ldr	r1, [pc, #124]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	330c      	adds	r3, #12
 8003f18:	6819      	ldr	r1, [r3, #0]
 8003f1a:	481b      	ldr	r0, [pc, #108]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4403      	add	r3, r0
 8003f28:	330c      	adds	r3, #12
 8003f2a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003f2c:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	1e5a      	subs	r2, r3, #1
 8003f32:	4915      	ldr	r1, [pc, #84]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	3310      	adds	r3, #16
 8003f40:	6819      	ldr	r1, [r3, #0]
 8003f42:	4811      	ldr	r0, [pc, #68]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4403      	add	r3, r0
 8003f50:	3310      	adds	r3, #16
 8003f52:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	1e5a      	subs	r2, r3, #1
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4a09      	ldr	r2, [pc, #36]	; (8003f88 <SYSVIEW_DeleteTask+0x174>)
 8003f64:	4413      	add	r3, r2
 8003f66:	2214      	movs	r2, #20
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f002 fbc8 	bl	8006700 <memset>
    _NumTasks--;
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	4a03      	ldr	r2, [pc, #12]	; (8003f84 <SYSVIEW_DeleteTask+0x170>)
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e000      	b.n	8003f7e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003f7c:	bf00      	nop
  }
}
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20012e68 	.word	0x20012e68
 8003f88:	20012dc8 	.word	0x20012dc8

08003f8c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003f9a:	f107 0314 	add.w	r3, r7, #20
 8003f9e:	2214      	movs	r2, #20
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f002 fbac 	bl	8006700 <memset>
  TaskInfo.TaskID     = TaskID;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003fbc:	f107 0314 	add.w	r3, r7, #20
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 ff1f 	bl	8005e04 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003fc6:	bf00      	nop
 8003fc8:	3728      	adds	r7, #40	; 0x28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <__NVIC_EnableIRQ>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	db0b      	blt.n	8003ffa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	f003 021f 	and.w	r2, r3, #31
 8003fe8:	4907      	ldr	r1, [pc, #28]	; (8004008 <__NVIC_EnableIRQ+0x38>)
 8003fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	e000e100 	.word	0xe000e100

0800400c <__NVIC_SetPriority>:
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	6039      	str	r1, [r7, #0]
 8004016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401c:	2b00      	cmp	r3, #0
 800401e:	db0a      	blt.n	8004036 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	490c      	ldr	r1, [pc, #48]	; (8004058 <__NVIC_SetPriority+0x4c>)
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	0112      	lsls	r2, r2, #4
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	440b      	add	r3, r1
 8004030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004034:	e00a      	b.n	800404c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	4908      	ldr	r1, [pc, #32]	; (800405c <__NVIC_SetPriority+0x50>)
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	3b04      	subs	r3, #4
 8004044:	0112      	lsls	r2, r2, #4
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	440b      	add	r3, r1
 800404a:	761a      	strb	r2, [r3, #24]
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	e000e100 	.word	0xe000e100
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004066:	f002 fadd 	bl	8006624 <SEGGER_SYSVIEW_IsStarted>
 800406a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004072:	f001 fd4b 	bl	8005b0c <SEGGER_SYSVIEW_Start>
  }
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <_cbOnUARTRx+0x3c>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d806      	bhi.n	80040a0 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004092:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <_cbOnUARTRx+0x3c>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	3301      	adds	r3, #1
 8004098:	b2da      	uxtb	r2, r3
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <_cbOnUARTRx+0x3c>)
 800409c:	701a      	strb	r2, [r3, #0]
    goto Done;
 800409e:	e009      	b.n	80040b4 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80040a0:	f7ff ffde 	bl	8004060 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <_cbOnUARTRx+0x3c>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4618      	mov	r0, r3
 80040aa:	1dfb      	adds	r3, r7, #7
 80040ac:	2201      	movs	r2, #1
 80040ae:	4619      	mov	r1, r3
 80040b0:	f000 fb9c 	bl	80047ec <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80040b4:	bf00      	nop
}
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20000014 	.word	0x20000014

080040c0 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80040c8:	4b14      	ldr	r3, [pc, #80]	; (800411c <_cbOnUARTTx+0x5c>)
 80040ca:	785b      	ldrb	r3, [r3, #1]
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d80f      	bhi.n	80040f0 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80040d0:	4b12      	ldr	r3, [pc, #72]	; (800411c <_cbOnUARTTx+0x5c>)
 80040d2:	785b      	ldrb	r3, [r3, #1]
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b12      	ldr	r3, [pc, #72]	; (8004120 <_cbOnUARTTx+0x60>)
 80040d8:	5c9a      	ldrb	r2, [r3, r2]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <_cbOnUARTTx+0x5c>)
 80040e0:	785b      	ldrb	r3, [r3, #1]
 80040e2:	3301      	adds	r3, #1
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	4b0d      	ldr	r3, [pc, #52]	; (800411c <_cbOnUARTTx+0x5c>)
 80040e8:	705a      	strb	r2, [r3, #1]
    r = 1;
 80040ea:	2301      	movs	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]
    goto Done;
 80040ee:	e00f      	b.n	8004110 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <_cbOnUARTTx+0x5c>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fa1b 	bl	8004534 <SEGGER_RTT_ReadUpBufferNoLock>
 80040fe:	4603      	mov	r3, r0
 8004100:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	da02      	bge.n	800410e <_cbOnUARTTx+0x4e>
    r = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e000      	b.n	8004110 <_cbOnUARTTx+0x50>
  }
Done:
 800410e:	bf00      	nop
  return r;
 8004110:	68fb      	ldr	r3, [r7, #12]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000014 	.word	0x20000014
 8004120:	080068f0 	.word	0x080068f0

08004124 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800412c:	4a04      	ldr	r2, [pc, #16]	; (8004140 <SEGGER_UART_init+0x1c>)
 800412e:	4905      	ldr	r1, [pc, #20]	; (8004144 <SEGGER_UART_init+0x20>)
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f863 	bl	80041fc <HIF_UART_Init>
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	08004081 	.word	0x08004081
 8004144:	080040c1 	.word	0x080040c1

08004148 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800414e:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <USART2_IRQHandler+0x80>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d011      	beq.n	8004182 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <USART2_IRQHandler+0x84>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 030b 	and.w	r3, r3, #11
 800416c:	2b00      	cmp	r3, #0
 800416e:	d108      	bne.n	8004182 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004170:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <USART2_IRQHandler+0x88>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004178:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <USART2_IRQHandler+0x88>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	79fa      	ldrb	r2, [r7, #7]
 800417e:	4610      	mov	r0, r2
 8004180:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01a      	beq.n	80041c2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <USART2_IRQHandler+0x8c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d015      	beq.n	80041c0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <USART2_IRQHandler+0x8c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	1dfa      	adds	r2, r7, #7
 800419a:	4610      	mov	r0, r2
 800419c:	4798      	blx	r3
 800419e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <USART2_IRQHandler+0x90>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a0b      	ldr	r2, [pc, #44]	; (80041d8 <USART2_IRQHandler+0x90>)
 80041ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e006      	b.n	80041c2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <USART2_IRQHandler+0x80>)
 80041b6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80041b8:	79fa      	ldrb	r2, [r7, #7]
 80041ba:	4b04      	ldr	r3, [pc, #16]	; (80041cc <USART2_IRQHandler+0x84>)
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e000      	b.n	80041c2 <USART2_IRQHandler+0x7a>
      return;
 80041c0:	bf00      	nop
    }
  }
}
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40004400 	.word	0x40004400
 80041cc:	40004404 	.word	0x40004404
 80041d0:	20012e6c 	.word	0x20012e6c
 80041d4:	20012e70 	.word	0x20012e70
 80041d8:	4000440c 	.word	0x4000440c

080041dc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80041e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ea:	6013      	str	r3, [r2, #0]
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	4000440c 	.word	0x4000440c

080041fc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004208:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <HIF_UART_Init+0xc8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <HIF_UART_Init+0xc8>)
 800420e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004212:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004214:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <HIF_UART_Init+0xcc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <HIF_UART_Init+0xcc>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004220:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <HIF_UART_Init+0xd0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800422c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004234:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004236:	4a25      	ldr	r2, [pc, #148]	; (80042cc <HIF_UART_Init+0xd0>)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800423c:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <HIF_UART_Init+0xd4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004248:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004250:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004252:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <HIF_UART_Init+0xd4>)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004258:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <HIF_UART_Init+0xd8>)
 800425a:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800425e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004260:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HIF_UART_Init+0xdc>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004266:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <HIF_UART_Init+0xe0>)
 8004268:	2280      	movs	r2, #128	; 0x80
 800426a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004272:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <HIF_UART_Init+0xe4>)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	fbb2 f3f3 	udiv	r3, r2, r3
 800427a:	3301      	adds	r3, #1
 800427c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428a:	d302      	bcc.n	8004292 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800428c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004290:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	4a11      	ldr	r2, [pc, #68]	; (80042e4 <HIF_UART_Init+0xe8>)
 800429e:	b29b      	uxth	r3, r3
 80042a0:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80042a2:	4a11      	ldr	r2, [pc, #68]	; (80042e8 <HIF_UART_Init+0xec>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80042a8:	4a10      	ldr	r2, [pc, #64]	; (80042ec <HIF_UART_Init+0xf0>)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80042ae:	2106      	movs	r1, #6
 80042b0:	2026      	movs	r0, #38	; 0x26
 80042b2:	f7ff feab 	bl	800400c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80042b6:	2026      	movs	r0, #38	; 0x26
 80042b8:	f7ff fe8a 	bl	8003fd0 <__NVIC_EnableIRQ>
}
 80042bc:	bf00      	nop
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023840 	.word	0x40023840
 80042c8:	40023830 	.word	0x40023830
 80042cc:	40020020 	.word	0x40020020
 80042d0:	40020000 	.word	0x40020000
 80042d4:	4000440c 	.word	0x4000440c
 80042d8:	40004410 	.word	0x40004410
 80042dc:	40004414 	.word	0x40004414
 80042e0:	05f5e100 	.word	0x05f5e100
 80042e4:	40004408 	.word	0x40004408
 80042e8:	20012e6c 	.word	0x20012e6c
 80042ec:	20012e70 	.word	0x20012e70

080042f0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80042f6:	4b26      	ldr	r3, [pc, #152]	; (8004390 <_DoInit+0xa0>)
 80042f8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80042fa:	22a8      	movs	r2, #168	; 0xa8
 80042fc:	2100      	movs	r1, #0
 80042fe:	6838      	ldr	r0, [r7, #0]
 8004300:	f002 f9fe 	bl	8006700 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2203      	movs	r2, #3
 8004308:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2203      	movs	r2, #3
 800430e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	4a20      	ldr	r2, [pc, #128]	; (8004394 <_DoInit+0xa4>)
 8004314:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	4a1f      	ldr	r2, [pc, #124]	; (8004398 <_DoInit+0xa8>)
 800431a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004322:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2200      	movs	r2, #0
 8004328:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2200      	movs	r2, #0
 800432e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	4a16      	ldr	r2, [pc, #88]	; (8004394 <_DoInit+0xa4>)
 800433a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4a17      	ldr	r2, [pc, #92]	; (800439c <_DoInit+0xac>)
 8004340:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2210      	movs	r2, #16
 8004346:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2200      	movs	r2, #0
 800434c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2200      	movs	r2, #0
 8004352:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2200      	movs	r2, #0
 8004358:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800435a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800435e:	2300      	movs	r3, #0
 8004360:	607b      	str	r3, [r7, #4]
 8004362:	e00c      	b.n	800437e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f1c3 030f 	rsb	r3, r3, #15
 800436a:	4a0d      	ldr	r2, [pc, #52]	; (80043a0 <_DoInit+0xb0>)
 800436c:	5cd1      	ldrb	r1, [r2, r3]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4413      	add	r3, r2
 8004374:	460a      	mov	r2, r1
 8004376:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3301      	adds	r3, #1
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b0f      	cmp	r3, #15
 8004382:	d9ef      	bls.n	8004364 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004384:	f3bf 8f5f 	dmb	sy
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20014400 	.word	0x20014400
 8004394:	080068b4 	.word	0x080068b4
 8004398:	20012e74 	.word	0x20012e74
 800439c:	20013274 	.word	0x20013274
 80043a0:	080068f4 	.word	0x080068f4

080043a4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	; 0x28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80043b0:	2300      	movs	r3, #0
 80043b2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d905      	bls.n	80043d4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	e007      	b.n	80043e4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	69b9      	ldr	r1, [r7, #24]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	1acb      	subs	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	3b01      	subs	r3, #1
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ee:	4293      	cmp	r3, r2
 80043f0:	bf28      	it	cs
 80043f2:	4613      	movcs	r3, r2
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80043f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4293      	cmp	r3, r2
 80043fc:	bf28      	it	cs
 80043fe:	4613      	movcs	r3, r2
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	4413      	add	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800440c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	6978      	ldr	r0, [r7, #20]
 8004412:	f002 f967 	bl	80066e4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004416:	6a3a      	ldr	r2, [r7, #32]
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	4413      	add	r3, r2
 800441c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	4413      	add	r3, r2
 8004424:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	4413      	add	r3, r2
 8004434:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	429a      	cmp	r2, r3
 800443e:	d101      	bne.n	8004444 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004444:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1b2      	bne.n	80043ba <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004454:	6a3b      	ldr	r3, [r7, #32]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3728      	adds	r7, #40	; 0x28
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800445e:	b580      	push	{r7, lr}
 8004460:	b088      	sub	sp, #32
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	429a      	cmp	r2, r3
 8004480:	d911      	bls.n	80044a6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	4413      	add	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	6938      	ldr	r0, [r7, #16]
 8004492:	f002 f927 	bl	80066e4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004496:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	441a      	add	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80044a4:	e01f      	b.n	80044e6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	4413      	add	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	6938      	ldr	r0, [r7, #16]
 80044ba:	f002 f913 	bl	80066e4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	4413      	add	r3, r2
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4619      	mov	r1, r3
 80044d6:	6938      	ldr	r0, [r7, #16]
 80044d8:	f002 f904 	bl	80066e4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80044dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	60da      	str	r2, [r3, #12]
}
 80044e6:	bf00      	nop
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80044ee:	b480      	push	{r7}
 80044f0:	b087      	sub	sp, #28
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	429a      	cmp	r2, r3
 8004508:	d808      	bhi.n	800451c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad2      	subs	r2, r2, r3
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	3b01      	subs	r3, #1
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e004      	b.n	8004526 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004526:	697b      	ldr	r3, [r7, #20]
}
 8004528:	4618      	mov	r0, r3
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b08c      	sub	sp, #48	; 0x30
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004540:	4b3e      	ldr	r3, [pc, #248]	; (800463c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004542:	623b      	str	r3, [r7, #32]
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b53      	cmp	r3, #83	; 0x53
 800454c:	d001      	beq.n	8004552 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800454e:	f7ff fecf 	bl	80042f0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	4613      	mov	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4413      	add	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4a37      	ldr	r2, [pc, #220]	; (800463c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004560:	4413      	add	r3, r2
 8004562:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004574:	2300      	movs	r3, #0
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	429a      	cmp	r2, r3
 800457e:	d92b      	bls.n	80045d8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4293      	cmp	r3, r2
 8004590:	bf28      	it	cs
 8004592:	4613      	movcs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	4413      	add	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	6939      	ldr	r1, [r7, #16]
 80045a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045a6:	f002 f89d 	bl	80066e4 <memcpy>
    NumBytesRead += NumBytesRem;
 80045aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	4413      	add	r3, r2
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80045b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4413      	add	r3, r2
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	4413      	add	r3, r2
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d101      	bne.n	80045d8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80045d4:	2300      	movs	r3, #0
 80045d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4293      	cmp	r3, r2
 80045e6:	bf28      	it	cs
 80045e8:	4613      	movcs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d019      	beq.n	8004626 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	4413      	add	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	6939      	ldr	r1, [r7, #16]
 8004600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004602:	f002 f86f 	bl	80066e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	4413      	add	r3, r2
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800460e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	4413      	add	r3, r2
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800461e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	4413      	add	r3, r2
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004630:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004634:	4618      	mov	r0, r3
 8004636:	3730      	adds	r7, #48	; 0x30
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20014400 	.word	0x20014400

08004640 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	; 0x30
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800464c:	4b3e      	ldr	r3, [pc, #248]	; (8004748 <SEGGER_RTT_ReadNoLock+0x108>)
 800464e:	623b      	str	r3, [r7, #32]
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b53      	cmp	r3, #83	; 0x53
 8004658:	d001      	beq.n	800465e <SEGGER_RTT_ReadNoLock+0x1e>
 800465a:	f7ff fe49 	bl	80042f0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4613      	mov	r3, r2
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	4413      	add	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	3360      	adds	r3, #96	; 0x60
 800466a:	4a37      	ldr	r2, [pc, #220]	; (8004748 <SEGGER_RTT_ReadNoLock+0x108>)
 800466c:	4413      	add	r3, r2
 800466e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004680:	2300      	movs	r3, #0
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	429a      	cmp	r2, r3
 800468a:	d92b      	bls.n	80046e4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4293      	cmp	r3, r2
 800469c:	bf28      	it	cs
 800469e:	4613      	movcs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	4413      	add	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	6939      	ldr	r1, [r7, #16]
 80046b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046b2:	f002 f817 	bl	80066e4 <memcpy>
    NumBytesRead += NumBytesRem;
 80046b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	4413      	add	r3, r2
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80046be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	4413      	add	r3, r2
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80046ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	4413      	add	r3, r2
 80046d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046dc:	429a      	cmp	r2, r3
 80046de:	d101      	bne.n	80046e4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80046e0:	2300      	movs	r3, #0
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4293      	cmp	r3, r2
 80046f2:	bf28      	it	cs
 80046f4:	4613      	movcs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d019      	beq.n	8004732 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	4413      	add	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	6939      	ldr	r1, [r7, #16]
 800470c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800470e:	f001 ffe9 	bl	80066e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	4413      	add	r3, r2
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4413      	add	r3, r2
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800472a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4413      	add	r3, r2
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800473c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004740:	4618      	mov	r0, r3
 8004742:	3730      	adds	r7, #48	; 0x30
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20014400 	.word	0x20014400

0800474c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4613      	mov	r3, r2
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4413      	add	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	3360      	adds	r3, #96	; 0x60
 8004768:	4a1f      	ldr	r2, [pc, #124]	; (80047e8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800476a:	4413      	add	r3, r2
 800476c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d029      	beq.n	80047ca <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004776:	2b02      	cmp	r3, #2
 8004778:	d82e      	bhi.n	80047d8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800477e:	2b01      	cmp	r3, #1
 8004780:	d013      	beq.n	80047aa <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004782:	e029      	b.n	80047d8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004784:	6978      	ldr	r0, [r7, #20]
 8004786:	f7ff feb2 	bl	80044ee <_GetAvailWriteSpace>
 800478a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	429a      	cmp	r2, r3
 8004792:	d202      	bcs.n	800479a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004798:	e021      	b.n	80047de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	69b9      	ldr	r1, [r7, #24]
 80047a2:	6978      	ldr	r0, [r7, #20]
 80047a4:	f7ff fe5b 	bl	800445e <_WriteNoCheck>
    break;
 80047a8:	e019      	b.n	80047de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80047aa:	6978      	ldr	r0, [r7, #20]
 80047ac:	f7ff fe9f 	bl	80044ee <_GetAvailWriteSpace>
 80047b0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4293      	cmp	r3, r2
 80047b8:	bf28      	it	cs
 80047ba:	4613      	movcs	r3, r2
 80047bc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	69b9      	ldr	r1, [r7, #24]
 80047c2:	6978      	ldr	r0, [r7, #20]
 80047c4:	f7ff fe4b 	bl	800445e <_WriteNoCheck>
    break;
 80047c8:	e009      	b.n	80047de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	69b9      	ldr	r1, [r7, #24]
 80047ce:	6978      	ldr	r0, [r7, #20]
 80047d0:	f7ff fde8 	bl	80043a4 <_WriteBlocking>
 80047d4:	61f8      	str	r0, [r7, #28]
    break;
 80047d6:	e002      	b.n	80047de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80047d8:	2300      	movs	r3, #0
 80047da:	61fb      	str	r3, [r7, #28]
    break;
 80047dc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80047de:	69fb      	ldr	r3, [r7, #28]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20014400 	.word	0x20014400

080047ec <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80047fa:	61fb      	str	r3, [r7, #28]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b53      	cmp	r3, #83	; 0x53
 8004804:	d001      	beq.n	800480a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004806:	f7ff fd73 	bl	80042f0 <_DoInit>
  SEGGER_RTT_LOCK();
 800480a:	f3ef 8311 	mrs	r3, BASEPRI
 800480e:	f04f 0120 	mov.w	r1, #32
 8004812:	f381 8811 	msr	BASEPRI, r1
 8004816:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff ff95 	bl	800474c <SEGGER_RTT_WriteDownBufferNoLock>
 8004822:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800482a:	697b      	ldr	r3, [r7, #20]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20014400 	.word	0x20014400

08004838 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004846:	4b3d      	ldr	r3, [pc, #244]	; (800493c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b53      	cmp	r3, #83	; 0x53
 8004852:	d001      	beq.n	8004858 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004854:	f7ff fd4c 	bl	80042f0 <_DoInit>
  SEGGER_RTT_LOCK();
 8004858:	f3ef 8311 	mrs	r3, BASEPRI
 800485c:	f04f 0120 	mov.w	r1, #32
 8004860:	f381 8811 	msr	BASEPRI, r1
 8004864:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004866:	4b35      	ldr	r3, [pc, #212]	; (800493c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004868:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800486e:	6939      	ldr	r1, [r7, #16]
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	4613      	mov	r3, r2
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	4413      	add	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	440b      	add	r3, r1
 800487e:	3304      	adds	r3, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	3301      	adds	r3, #1
 800488a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	429a      	cmp	r2, r3
 8004894:	dbeb      	blt.n	800486e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004896:	e000      	b.n	800489a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004898:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	da3f      	bge.n	8004924 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80048a4:	6939      	ldr	r1, [r7, #16]
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	4613      	mov	r3, r2
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	4413      	add	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	440b      	add	r3, r1
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80048b8:	6939      	ldr	r1, [r7, #16]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	4613      	mov	r3, r2
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	4413      	add	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	440b      	add	r3, r1
 80048c8:	3304      	adds	r3, #4
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80048ce:	6939      	ldr	r1, [r7, #16]
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	4613      	mov	r3, r2
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	4413      	add	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	440b      	add	r3, r1
 80048dc:	3320      	adds	r3, #32
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80048e2:	6939      	ldr	r1, [r7, #16]
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	4613      	mov	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	440b      	add	r3, r1
 80048f0:	3328      	adds	r3, #40	; 0x28
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80048f6:	6939      	ldr	r1, [r7, #16]
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	4613      	mov	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	4413      	add	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	440b      	add	r3, r1
 8004904:	3324      	adds	r3, #36	; 0x24
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800490a:	6939      	ldr	r1, [r7, #16]
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	440b      	add	r3, r1
 8004918:	332c      	adds	r3, #44	; 0x2c
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800491e:	f3bf 8f5f 	dmb	sy
 8004922:	e002      	b.n	800492a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004924:	f04f 33ff 	mov.w	r3, #4294967295
 8004928:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004930:	69fb      	ldr	r3, [r7, #28]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20014400 	.word	0x20014400

08004940 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800494e:	4b21      	ldr	r3, [pc, #132]	; (80049d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004950:	623b      	str	r3, [r7, #32]
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b53      	cmp	r3, #83	; 0x53
 800495a:	d001      	beq.n	8004960 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800495c:	f7ff fcc8 	bl	80042f0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004960:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004962:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d82c      	bhi.n	80049c4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800496a:	f3ef 8311 	mrs	r3, BASEPRI
 800496e:	f04f 0120 	mov.w	r1, #32
 8004972:	f381 8811 	msr	BASEPRI, r1
 8004976:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	3360      	adds	r3, #96	; 0x60
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00e      	beq.n	80049ae <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2200      	movs	r2, #0
 80049ac:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80049b4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
 80049c2:	e002      	b.n	80049ca <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3728      	adds	r7, #40	; 0x28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20014400 	.word	0x20014400

080049d8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	60fa      	str	r2, [r7, #12]
 80049ee:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b80      	cmp	r3, #128	; 0x80
 80049f4:	d90a      	bls.n	8004a0c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80049fa:	e007      	b.n	8004a0c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	1c53      	adds	r3, r2, #1
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1c59      	adds	r1, r3, #1
 8004a06:	60f9      	str	r1, [r7, #12]
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	607a      	str	r2, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <_EncodeStr+0x46>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ee      	bne.n	80049fc <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3307      	adds	r3, #7
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a56:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <_HandleIncomingPacket+0xdc>)
 8004a58:	7e1b      	ldrb	r3, [r3, #24]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	1cfb      	adds	r3, r7, #3
 8004a5e:	2201      	movs	r2, #1
 8004a60:	4619      	mov	r1, r3
 8004a62:	f7ff fded 	bl	8004640 <SEGGER_RTT_ReadNoLock>
 8004a66:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d052      	beq.n	8004b14 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	2b80      	cmp	r3, #128	; 0x80
 8004a72:	d031      	beq.n	8004ad8 <_HandleIncomingPacket+0x88>
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	dc40      	bgt.n	8004afa <_HandleIncomingPacket+0xaa>
 8004a78:	2b07      	cmp	r3, #7
 8004a7a:	dc15      	bgt.n	8004aa8 <_HandleIncomingPacket+0x58>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	dd3c      	ble.n	8004afa <_HandleIncomingPacket+0xaa>
 8004a80:	3b01      	subs	r3, #1
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d839      	bhi.n	8004afa <_HandleIncomingPacket+0xaa>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <_HandleIncomingPacket+0x3c>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004aaf 	.word	0x08004aaf
 8004a90:	08004ab5 	.word	0x08004ab5
 8004a94:	08004abb 	.word	0x08004abb
 8004a98:	08004ac1 	.word	0x08004ac1
 8004a9c:	08004ac7 	.word	0x08004ac7
 8004aa0:	08004acd 	.word	0x08004acd
 8004aa4:	08004ad3 	.word	0x08004ad3
 8004aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8004aaa:	d035      	beq.n	8004b18 <_HandleIncomingPacket+0xc8>
 8004aac:	e025      	b.n	8004afa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004aae:	f001 f82d 	bl	8005b0c <SEGGER_SYSVIEW_Start>
      break;
 8004ab2:	e036      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004ab4:	f001 f8e6 	bl	8005c84 <SEGGER_SYSVIEW_Stop>
      break;
 8004ab8:	e033      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004aba:	f001 fabf 	bl	800603c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004abe:	e030      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004ac0:	f001 fa84 	bl	8005fcc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004ac4:	e02d      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004ac6:	f001 f903 	bl	8005cd0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004aca:	e02a      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004acc:	f001 fcfc 	bl	80064c8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004ad0:	e027      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004ad2:	f001 fcdb 	bl	800648c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004ad6:	e024      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ad8:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <_HandleIncomingPacket+0xdc>)
 8004ada:	7e1b      	ldrb	r3, [r3, #24]
 8004adc:	4618      	mov	r0, r3
 8004ade:	1cfb      	adds	r3, r7, #3
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	f7ff fdac 	bl	8004640 <SEGGER_RTT_ReadNoLock>
 8004ae8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d015      	beq.n	8004b1c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f001 fc40 	bl	8006378 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004af8:	e010      	b.n	8004b1c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	b25b      	sxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da0e      	bge.n	8004b20 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <_HandleIncomingPacket+0xdc>)
 8004b04:	7e1b      	ldrb	r3, [r3, #24]
 8004b06:	4618      	mov	r0, r3
 8004b08:	1cfb      	adds	r3, r7, #3
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f7ff fd97 	bl	8004640 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004b12:	e005      	b.n	8004b20 <_HandleIncomingPacket+0xd0>
    }
  }
 8004b14:	bf00      	nop
 8004b16:	e004      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
      break;
 8004b18:	bf00      	nop
 8004b1a:	e002      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
      break;
 8004b1c:	bf00      	nop
 8004b1e:	e000      	b.n	8004b22 <_HandleIncomingPacket+0xd2>
      break;
 8004b20:	bf00      	nop
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	2001428c 	.word	0x2001428c

08004b30 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08c      	sub	sp, #48	; 0x30
 8004b34:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004b36:	2301      	movs	r3, #1
 8004b38:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b44:	4b32      	ldr	r3, [pc, #200]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b4a:	e00b      	b.n	8004b64 <_TrySendOverflowPacket+0x34>
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	1c59      	adds	r1, r3, #1
 8004b54:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	09db      	lsrs	r3, r3, #7
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	2b7f      	cmp	r3, #127	; 0x7f
 8004b68:	d8f0      	bhi.n	8004b4c <_TrySendOverflowPacket+0x1c>
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b7a:	4b26      	ldr	r3, [pc, #152]	; (8004c14 <_TrySendOverflowPacket+0xe4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b80:	4b23      	ldr	r3, [pc, #140]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	623b      	str	r3, [r7, #32]
 8004b92:	e00b      	b.n	8004bac <_TrySendOverflowPacket+0x7c>
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	1c59      	adds	r1, r3, #1
 8004b9c:	6279      	str	r1, [r7, #36]	; 0x24
 8004b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	09db      	lsrs	r3, r3, #7
 8004baa:	623b      	str	r3, [r7, #32]
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	2b7f      	cmp	r3, #127	; 0x7f
 8004bb0:	d8f0      	bhi.n	8004b94 <_TrySendOverflowPacket+0x64>
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	627a      	str	r2, [r7, #36]	; 0x24
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004bc4:	785b      	ldrb	r3, [r3, #1]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	1d3b      	adds	r3, r7, #4
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	1d3b      	adds	r3, r7, #4
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	f7fb fb04 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004bdc:	f7ff fafe 	bl	80041dc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004be6:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	e004      	b.n	8004c04 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	4a03      	ldr	r2, [pc, #12]	; (8004c10 <_TrySendOverflowPacket+0xe0>)
 8004c02:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004c04:	693b      	ldr	r3, [r7, #16]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3730      	adds	r7, #48	; 0x30
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	2001428c 	.word	0x2001428c
 8004c14:	e0001004 	.word	0xe0001004

08004c18 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004c24:	4b9b      	ldr	r3, [pc, #620]	; (8004e94 <_SendPacket+0x27c>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d010      	beq.n	8004c4e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004c2c:	4b99      	ldr	r3, [pc, #612]	; (8004e94 <_SendPacket+0x27c>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 812b 	beq.w	8004e8c <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004c36:	4b97      	ldr	r3, [pc, #604]	; (8004e94 <_SendPacket+0x27c>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d109      	bne.n	8004c52 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004c3e:	f7ff ff77 	bl	8004b30 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004c42:	4b94      	ldr	r3, [pc, #592]	; (8004e94 <_SendPacket+0x27c>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	f040 8122 	bne.w	8004e90 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 8004c4c:	e001      	b.n	8004c52 <_SendPacket+0x3a>
    goto Send;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <_SendPacket+0x3c>
Send:
 8004c52:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b1f      	cmp	r3, #31
 8004c58:	d809      	bhi.n	8004c6e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004c5a:	4b8e      	ldr	r3, [pc, #568]	; (8004e94 <_SendPacket+0x27c>)
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f040 8117 	bne.w	8004e9c <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b17      	cmp	r3, #23
 8004c72:	d807      	bhi.n	8004c84 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	e0c4      	b.n	8004e0e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c90:	d912      	bls.n	8004cb8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	09da      	lsrs	r2, r3, #7
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	60fa      	str	r2, [r7, #12]
 8004cac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e006      	b.n	8004cc6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b7e      	cmp	r3, #126	; 0x7e
 8004cca:	d807      	bhi.n	8004cdc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	e098      	b.n	8004e0e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce2:	d212      	bcs.n	8004d0a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	09da      	lsrs	r2, r3, #7
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	3a01      	subs	r2, #1
 8004cfc:	60fa      	str	r2, [r7, #12]
 8004cfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e081      	b.n	8004e0e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d10:	d21d      	bcs.n	8004d4e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	0b9a      	lsrs	r2, r3, #14
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	09db      	lsrs	r3, r3, #7
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	3a01      	subs	r2, #1
 8004d2c:	60fa      	str	r2, [r7, #12]
 8004d2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	3a01      	subs	r2, #1
 8004d40:	60fa      	str	r2, [r7, #12]
 8004d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	e05f      	b.n	8004e0e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d54:	d228      	bcs.n	8004da8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	0d5a      	lsrs	r2, r3, #21
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	0b9b      	lsrs	r3, r3, #14
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	3a01      	subs	r2, #1
 8004d70:	60fa      	str	r2, [r7, #12]
 8004d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	09db      	lsrs	r3, r3, #7
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	3a01      	subs	r2, #1
 8004d86:	60fa      	str	r2, [r7, #12]
 8004d88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	3a01      	subs	r2, #1
 8004d9a:	60fa      	str	r2, [r7, #12]
 8004d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	e032      	b.n	8004e0e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	0f1a      	lsrs	r2, r3, #28
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	0d5b      	lsrs	r3, r3, #21
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	3a01      	subs	r2, #1
 8004dc2:	60fa      	str	r2, [r7, #12]
 8004dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	0b9b      	lsrs	r3, r3, #14
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	3a01      	subs	r2, #1
 8004dd8:	60fa      	str	r2, [r7, #12]
 8004dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	09db      	lsrs	r3, r3, #7
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	3a01      	subs	r2, #1
 8004dee:	60fa      	str	r2, [r7, #12]
 8004df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	3a01      	subs	r2, #1
 8004e02:	60fa      	str	r2, [r7, #12]
 8004e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e0e:	4b22      	ldr	r3, [pc, #136]	; (8004e98 <_SendPacket+0x280>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e14:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <_SendPacket+0x27c>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	e00b      	b.n	8004e40 <_SendPacket+0x228>
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	6279      	str	r1, [r7, #36]	; 0x24
 8004e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	09db      	lsrs	r3, r3, #7
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2b7f      	cmp	r3, #127	; 0x7f
 8004e44:	d8f0      	bhi.n	8004e28 <_SendPacket+0x210>
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004e4c:	6a3a      	ldr	r2, [r7, #32]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004e56:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <_SendPacket+0x27c>)
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	68f9      	ldr	r1, [r7, #12]
 8004e66:	f7fb f9bb 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e6a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004e6c:	f7ff f9b6 	bl	80041dc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e76:	4a07      	ldr	r2, [pc, #28]	; (8004e94 <_SendPacket+0x27c>)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	60d3      	str	r3, [r2, #12]
 8004e7c:	e00f      	b.n	8004e9e <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <_SendPacket+0x27c>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <_SendPacket+0x27c>)
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	e008      	b.n	8004e9e <_SendPacket+0x286>
    goto SendDone;
 8004e8c:	bf00      	nop
 8004e8e:	e006      	b.n	8004e9e <_SendPacket+0x286>
      goto SendDone;
 8004e90:	bf00      	nop
 8004e92:	e004      	b.n	8004e9e <_SendPacket+0x286>
 8004e94:	2001428c 	.word	0x2001428c
 8004e98:	e0001004 	.word	0xe0001004
      goto SendDone;
 8004e9c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004e9e:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <_SendPacket+0x2d8>)
 8004ea0:	7e1b      	ldrb	r3, [r3, #24]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4a13      	ldr	r2, [pc, #76]	; (8004ef4 <_SendPacket+0x2dc>)
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	440b      	add	r3, r1
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4413      	add	r3, r2
 8004eb0:	336c      	adds	r3, #108	; 0x6c
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <_SendPacket+0x2d8>)
 8004eb6:	7e1b      	ldrb	r3, [r3, #24]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	490e      	ldr	r1, [pc, #56]	; (8004ef4 <_SendPacket+0x2dc>)
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	4403      	add	r3, r0
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	440b      	add	r3, r1
 8004ec6:	3370      	adds	r3, #112	; 0x70
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d00b      	beq.n	8004ee6 <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004ece:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <_SendPacket+0x2d8>)
 8004ed0:	789b      	ldrb	r3, [r3, #2]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d107      	bne.n	8004ee6 <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <_SendPacket+0x2d8>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004edc:	f7ff fdb8 	bl	8004a50 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004ee0:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <_SendPacket+0x2d8>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004ee6:	bf00      	nop
 8004ee8:	3728      	adds	r7, #40	; 0x28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	2001428c 	.word	0x2001428c
 8004ef4:	20014400 	.word	0x20014400

08004ef8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d80a      	bhi.n	8004f28 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6051      	str	r1, [r2, #4]
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b80      	cmp	r3, #128	; 0x80
 8004f2e:	d15a      	bne.n	8004fe6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	623b      	str	r3, [r7, #32]
 8004f50:	e00b      	b.n	8004f6a <_StoreChar+0x72>
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	1c59      	adds	r1, r3, #1
 8004f5a:	6279      	str	r1, [r7, #36]	; 0x24
 8004f5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	09db      	lsrs	r3, r3, #7
 8004f68:	623b      	str	r3, [r7, #32]
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f6e:	d8f0      	bhi.n	8004f52 <_StoreChar+0x5a>
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	627a      	str	r2, [r7, #36]	; 0x24
 8004f76:	6a3a      	ldr	r2, [r7, #32]
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	2300      	movs	r3, #0
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	e00b      	b.n	8004fa2 <_StoreChar+0xaa>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	1c59      	adds	r1, r3, #1
 8004f92:	61f9      	str	r1, [r7, #28]
 8004f94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	09db      	lsrs	r3, r3, #7
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa6:	d8f0      	bhi.n	8004f8a <_StoreChar+0x92>
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	61fa      	str	r2, [r7, #28]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	221a      	movs	r2, #26
 8004fbe:	6939      	ldr	r1, [r7, #16]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fe29 	bl	8004c18 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fd34 	bl	8004a38 <_PreparePacket>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	611a      	str	r2, [r3, #16]
  }
}
 8004fe6:	bf00      	nop
 8004fe8:	3728      	adds	r7, #40	; 0x28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005002:	2301      	movs	r3, #1
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005006:	2301      	movs	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800500a:	e007      	b.n	800501c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800500c:	6a3a      	ldr	r2, [r7, #32]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	623b      	str	r3, [r7, #32]
    Width++;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3301      	adds	r3, #1
 800501a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800501c:	6a3a      	ldr	r2, [r7, #32]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d2f3      	bcs.n	800500c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	429a      	cmp	r2, r3
 800502a:	d901      	bls.n	8005030 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d11f      	bne.n	800507a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01c      	beq.n	800507a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <_PrintUnsigned+0x66>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d102      	bne.n	8005056 <_PrintUnsigned+0x66>
        c = '0';
 8005050:	2330      	movs	r3, #48	; 0x30
 8005052:	76fb      	strb	r3, [r7, #27]
 8005054:	e001      	b.n	800505a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005056:	2320      	movs	r3, #32
 8005058:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800505a:	e007      	b.n	800506c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	3b01      	subs	r3, #1
 8005060:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005062:	7efb      	ldrb	r3, [r7, #27]
 8005064:	4619      	mov	r1, r3
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff ff46 	bl	8004ef8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <_PrintUnsigned+0x8a>
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	429a      	cmp	r2, r3
 8005078:	d3f0      	bcc.n	800505c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d903      	bls.n	8005088 <_PrintUnsigned+0x98>
      NumDigits--;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	3b01      	subs	r3, #1
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	e009      	b.n	800509c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d200      	bcs.n	800509c <_PrintUnsigned+0xac>
        break;
 800509a:	e005      	b.n	80050a8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	fb02 f303 	mul.w	r3, r2, r3
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80050a6:	e7e8      	b.n	800507a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80050c0:	4a15      	ldr	r2, [pc, #84]	; (8005118 <_PrintUnsigned+0x128>)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	4413      	add	r3, r2
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	4619      	mov	r1, r3
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff ff14 	bl	8004ef8 <_StoreChar>
    Digit /= Base;
 80050d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e3      	bne.n	80050a8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80050e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d011      	beq.n	800510e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00e      	beq.n	800510e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80050f0:	e006      	b.n	8005100 <_PrintUnsigned+0x110>
        FieldWidth--;
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	3b01      	subs	r3, #1
 80050f6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80050f8:	2120      	movs	r1, #32
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7ff fefc 	bl	8004ef8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <_PrintUnsigned+0x11e>
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	429a      	cmp	r2, r3
 800510c:	d3f1      	bcc.n	80050f2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800510e:	bf00      	nop
 8005110:	3728      	adds	r7, #40	; 0x28
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	08006914 	.word	0x08006914

0800511c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	bfb8      	it	lt
 8005130:	425b      	neglt	r3, r3
 8005132:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005138:	e007      	b.n	800514a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005142:	613b      	str	r3, [r7, #16]
    Width++;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	3301      	adds	r3, #1
 8005148:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	429a      	cmp	r2, r3
 8005150:	daf3      	bge.n	800513a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	429a      	cmp	r2, r3
 8005158:	d901      	bls.n	800515e <_PrintInt+0x42>
    Width = NumDigits;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <_PrintInt+0x5e>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	db04      	blt.n	8005174 <_PrintInt+0x58>
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <_PrintInt+0x5e>
    FieldWidth--;
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	3b01      	subs	r3, #1
 8005178:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <_PrintInt+0x6e>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <_PrintInt+0x9c>
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d111      	bne.n	80051b8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00e      	beq.n	80051b8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800519a:	e006      	b.n	80051aa <_PrintInt+0x8e>
        FieldWidth--;
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	3b01      	subs	r3, #1
 80051a0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80051a2:	2120      	movs	r1, #32
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f7ff fea7 	bl	8004ef8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <_PrintInt+0x9c>
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d3f1      	bcc.n	800519c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	da07      	bge.n	80051ce <_PrintInt+0xb2>
    v = -v;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	425b      	negs	r3, r3
 80051c2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80051c4:	212d      	movs	r1, #45	; 0x2d
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f7ff fe96 	bl	8004ef8 <_StoreChar>
 80051cc:	e008      	b.n	80051e0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80051d8:	212b      	movs	r1, #43	; 0x2b
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f7ff fe8c 	bl	8004ef8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d019      	beq.n	800521e <_PrintInt+0x102>
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d114      	bne.n	800521e <_PrintInt+0x102>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d111      	bne.n	800521e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00e      	beq.n	800521e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005200:	e006      	b.n	8005210 <_PrintInt+0xf4>
        FieldWidth--;
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	3b01      	subs	r3, #1
 8005206:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005208:	2130      	movs	r1, #48	; 0x30
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f7ff fe74 	bl	8004ef8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <_PrintInt+0x102>
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	429a      	cmp	r2, r3
 800521c:	d3f1      	bcc.n	8005202 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff fedf 	bl	8004ff0 <_PrintUnsigned>
}
 8005232:	bf00      	nop
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b098      	sub	sp, #96	; 0x60
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005248:	f3ef 8311 	mrs	r3, BASEPRI
 800524c:	f04f 0120 	mov.w	r1, #32
 8005250:	f381 8811 	msr	BASEPRI, r1
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005256:	48b7      	ldr	r0, [pc, #732]	; (8005534 <_VPrintTarget+0x2f8>)
 8005258:	f7ff fbee 	bl	8004a38 <_PreparePacket>
 800525c:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800525e:	4bb5      	ldr	r3, [pc, #724]	; (8005534 <_VPrintTarget+0x2f8>)
 8005260:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005262:	2300      	movs	r3, #0
 8005264:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	3301      	adds	r3, #1
 800526e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3301      	adds	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005282:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 81a8 	beq.w	80055dc <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 800528c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005290:	2b25      	cmp	r3, #37	; 0x25
 8005292:	f040 8195 	bne.w	80055c0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005296:	2300      	movs	r3, #0
 8005298:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800529a:	2301      	movs	r3, #1
 800529c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80052a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052aa:	3b23      	subs	r3, #35	; 0x23
 80052ac:	2b0d      	cmp	r3, #13
 80052ae:	d83f      	bhi.n	8005330 <_VPrintTarget+0xf4>
 80052b0:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <_VPrintTarget+0x7c>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	08005321 	.word	0x08005321
 80052bc:	08005331 	.word	0x08005331
 80052c0:	08005331 	.word	0x08005331
 80052c4:	08005331 	.word	0x08005331
 80052c8:	08005331 	.word	0x08005331
 80052cc:	08005331 	.word	0x08005331
 80052d0:	08005331 	.word	0x08005331
 80052d4:	08005331 	.word	0x08005331
 80052d8:	08005311 	.word	0x08005311
 80052dc:	08005331 	.word	0x08005331
 80052e0:	080052f1 	.word	0x080052f1
 80052e4:	08005331 	.word	0x08005331
 80052e8:	08005331 	.word	0x08005331
 80052ec:	08005301 	.word	0x08005301
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80052f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3301      	adds	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e01a      	b.n	8005336 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005302:	f043 0302 	orr.w	r3, r3, #2
 8005306:	64bb      	str	r3, [r7, #72]	; 0x48
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e012      	b.n	8005336 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005312:	f043 0304 	orr.w	r3, r3, #4
 8005316:	64bb      	str	r3, [r7, #72]	; 0x48
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3301      	adds	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e00a      	b.n	8005336 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005322:	f043 0308 	orr.w	r3, r3, #8
 8005326:	64bb      	str	r3, [r7, #72]	; 0x48
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e002      	b.n	8005336 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005330:	2300      	movs	r3, #0
 8005332:	653b      	str	r3, [r7, #80]	; 0x50
 8005334:	bf00      	nop
        }
      } while (v);
 8005336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1b0      	bne.n	800529e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800533c:	2300      	movs	r3, #0
 800533e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800534c:	2b2f      	cmp	r3, #47	; 0x2f
 800534e:	d912      	bls.n	8005376 <_VPrintTarget+0x13a>
 8005350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005354:	2b39      	cmp	r3, #57	; 0x39
 8005356:	d80e      	bhi.n	8005376 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3301      	adds	r3, #1
 800535c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800535e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	461a      	mov	r2, r3
 800536a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800536e:	4413      	add	r3, r2
 8005370:	3b30      	subs	r3, #48	; 0x30
 8005372:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005374:	e7e4      	b.n	8005340 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005376:	2300      	movs	r3, #0
 8005378:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005382:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005386:	2b2e      	cmp	r3, #46	; 0x2e
 8005388:	d11d      	bne.n	80053c6 <_VPrintTarget+0x18a>
        sFormat++;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3301      	adds	r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800539c:	2b2f      	cmp	r3, #47	; 0x2f
 800539e:	d912      	bls.n	80053c6 <_VPrintTarget+0x18a>
 80053a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053a4:	2b39      	cmp	r3, #57	; 0x39
 80053a6:	d80e      	bhi.n	80053c6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80053ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	461a      	mov	r2, r3
 80053ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053be:	4413      	add	r3, r2
 80053c0:	3b30      	subs	r3, #48	; 0x30
 80053c2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80053c4:	e7e4      	b.n	8005390 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80053ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053d2:	2b6c      	cmp	r3, #108	; 0x6c
 80053d4:	d003      	beq.n	80053de <_VPrintTarget+0x1a2>
 80053d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053da:	2b68      	cmp	r3, #104	; 0x68
 80053dc:	d107      	bne.n	80053ee <_VPrintTarget+0x1b2>
          c = *sFormat;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3301      	adds	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80053ec:	e7ef      	b.n	80053ce <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80053ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053f2:	2b25      	cmp	r3, #37	; 0x25
 80053f4:	f000 80d8 	beq.w	80055a8 <_VPrintTarget+0x36c>
 80053f8:	2b25      	cmp	r3, #37	; 0x25
 80053fa:	f2c0 80dc 	blt.w	80055b6 <_VPrintTarget+0x37a>
 80053fe:	2b78      	cmp	r3, #120	; 0x78
 8005400:	f300 80d9 	bgt.w	80055b6 <_VPrintTarget+0x37a>
 8005404:	2b58      	cmp	r3, #88	; 0x58
 8005406:	f2c0 80d6 	blt.w	80055b6 <_VPrintTarget+0x37a>
 800540a:	3b58      	subs	r3, #88	; 0x58
 800540c:	2b20      	cmp	r3, #32
 800540e:	f200 80d2 	bhi.w	80055b6 <_VPrintTarget+0x37a>
 8005412:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <_VPrintTarget+0x1dc>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	0800550f 	.word	0x0800550f
 800541c:	080055b7 	.word	0x080055b7
 8005420:	080055b7 	.word	0x080055b7
 8005424:	080055b7 	.word	0x080055b7
 8005428:	080055b7 	.word	0x080055b7
 800542c:	080055b7 	.word	0x080055b7
 8005430:	080055b7 	.word	0x080055b7
 8005434:	080055b7 	.word	0x080055b7
 8005438:	080055b7 	.word	0x080055b7
 800543c:	080055b7 	.word	0x080055b7
 8005440:	080055b7 	.word	0x080055b7
 8005444:	0800549d 	.word	0x0800549d
 8005448:	080054c3 	.word	0x080054c3
 800544c:	080055b7 	.word	0x080055b7
 8005450:	080055b7 	.word	0x080055b7
 8005454:	080055b7 	.word	0x080055b7
 8005458:	080055b7 	.word	0x080055b7
 800545c:	080055b7 	.word	0x080055b7
 8005460:	080055b7 	.word	0x080055b7
 8005464:	080055b7 	.word	0x080055b7
 8005468:	080055b7 	.word	0x080055b7
 800546c:	080055b7 	.word	0x080055b7
 8005470:	080055b7 	.word	0x080055b7
 8005474:	080055b7 	.word	0x080055b7
 8005478:	08005583 	.word	0x08005583
 800547c:	080055b7 	.word	0x080055b7
 8005480:	080055b7 	.word	0x080055b7
 8005484:	08005539 	.word	0x08005539
 8005488:	080055b7 	.word	0x080055b7
 800548c:	080054e9 	.word	0x080054e9
 8005490:	080055b7 	.word	0x080055b7
 8005494:	080055b7 	.word	0x080055b7
 8005498:	0800550f 	.word	0x0800550f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	1d19      	adds	r1, r3, #4
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6011      	str	r1, [r2, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80054aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80054b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80054b4:	f107 0310 	add.w	r3, r7, #16
 80054b8:	4611      	mov	r1, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fd1c 	bl	8004ef8 <_StoreChar>
        break;
 80054c0:	e07a      	b.n	80055b8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	1d19      	adds	r1, r3, #4
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6011      	str	r1, [r2, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80054d0:	f107 0010 	add.w	r0, r7, #16
 80054d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054de:	220a      	movs	r2, #10
 80054e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054e2:	f7ff fe1b 	bl	800511c <_PrintInt>
        break;
 80054e6:	e067      	b.n	80055b8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	1d19      	adds	r1, r3, #4
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6011      	str	r1, [r2, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80054f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054f8:	f107 0010 	add.w	r0, r7, #16
 80054fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005506:	220a      	movs	r2, #10
 8005508:	f7ff fd72 	bl	8004ff0 <_PrintUnsigned>
        break;
 800550c:	e054      	b.n	80055b8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	1d19      	adds	r1, r3, #4
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6011      	str	r1, [r2, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800551c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800551e:	f107 0010 	add.w	r0, r7, #16
 8005522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552c:	2210      	movs	r2, #16
 800552e:	f7ff fd5f 	bl	8004ff0 <_PrintUnsigned>
        break;
 8005532:	e041      	b.n	80055b8 <_VPrintTarget+0x37c>
 8005534:	200142bc 	.word	0x200142bc
      case 's':
        s = va_arg(*pParamList, const char*);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	1d19      	adds	r1, r3, #4
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6011      	str	r1, [r2, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <_VPrintTarget+0x314>
          s = "(null)";
 800554c:	4b4a      	ldr	r3, [pc, #296]	; (8005678 <_VPrintTarget+0x43c>)
 800554e:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800555a:	3301      	adds	r3, #1
 800555c:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 800555e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00b      	beq.n	800557e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005566:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800556a:	f107 0310 	add.w	r3, r7, #16
 800556e:	4611      	mov	r1, r2
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff fcc1 	bl	8004ef8 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	2b7f      	cmp	r3, #127	; 0x7f
 800557a:	d9e9      	bls.n	8005550 <_VPrintTarget+0x314>
        break;
 800557c:	e01c      	b.n	80055b8 <_VPrintTarget+0x37c>
            break;
 800557e:	bf00      	nop
        break;
 8005580:	e01a      	b.n	80055b8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	1d19      	adds	r1, r3, #4
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6011      	str	r1, [r2, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005590:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005592:	f107 0010 	add.w	r0, r7, #16
 8005596:	2300      	movs	r3, #0
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	2308      	movs	r3, #8
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	2308      	movs	r3, #8
 80055a0:	2210      	movs	r2, #16
 80055a2:	f7ff fd25 	bl	8004ff0 <_PrintUnsigned>
        break;
 80055a6:	e007      	b.n	80055b8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80055a8:	f107 0310 	add.w	r3, r7, #16
 80055ac:	2125      	movs	r1, #37	; 0x25
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff fca2 	bl	8004ef8 <_StoreChar>
        break;
 80055b4:	e000      	b.n	80055b8 <_VPrintTarget+0x37c>
      default:
        break;
 80055b6:	bf00      	nop
      }
      sFormat++;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3301      	adds	r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	e007      	b.n	80055d0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80055c0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80055c4:	f107 0310 	add.w	r3, r7, #16
 80055c8:	4611      	mov	r1, r2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff fc94 	bl	8004ef8 <_StoreChar>
    }
  } while (*sFormat);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f47f ae4d 	bne.w	8005274 <_VPrintTarget+0x38>
 80055da:	e000      	b.n	80055de <_VPrintTarget+0x3a2>
      break;
 80055dc:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d041      	beq.n	8005668 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80055e4:	6a3a      	ldr	r2, [r7, #32]
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80055f4:	e00b      	b.n	800560e <_VPrintTarget+0x3d2>
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fc:	1c59      	adds	r1, r3, #1
 80055fe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005600:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	09db      	lsrs	r3, r3, #7
 800560c:	63bb      	str	r3, [r7, #56]	; 0x38
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	2b7f      	cmp	r3, #127	; 0x7f
 8005612:	d8f0      	bhi.n	80055f6 <_VPrintTarget+0x3ba>
 8005614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	63fa      	str	r2, [r7, #60]	; 0x3c
 800561a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005622:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
 8005628:	2300      	movs	r3, #0
 800562a:	633b      	str	r3, [r7, #48]	; 0x30
 800562c:	e00b      	b.n	8005646 <_VPrintTarget+0x40a>
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	b2da      	uxtb	r2, r3
 8005632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005634:	1c59      	adds	r1, r3, #1
 8005636:	6379      	str	r1, [r7, #52]	; 0x34
 8005638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	701a      	strb	r2, [r3, #0]
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	09db      	lsrs	r3, r3, #7
 8005644:	633b      	str	r3, [r7, #48]	; 0x30
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	2b7f      	cmp	r3, #127	; 0x7f
 800564a:	d8f0      	bhi.n	800562e <_VPrintTarget+0x3f2>
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	637a      	str	r2, [r7, #52]	; 0x34
 8005652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	6979      	ldr	r1, [r7, #20]
 8005660:	221a      	movs	r2, #26
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff fad8 	bl	8004c18 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800566e:	bf00      	nop
 8005670:	3758      	adds	r7, #88	; 0x58
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	080068c0 	.word	0x080068c0

0800567c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800568a:	2300      	movs	r3, #0
 800568c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005690:	4917      	ldr	r1, [pc, #92]	; (80056f0 <SEGGER_SYSVIEW_Init+0x74>)
 8005692:	4818      	ldr	r0, [pc, #96]	; (80056f4 <SEGGER_SYSVIEW_Init+0x78>)
 8005694:	f7ff f8d0 	bl	8004838 <SEGGER_RTT_AllocUpBuffer>
 8005698:	4603      	mov	r3, r0
 800569a:	b2da      	uxtb	r2, r3
 800569c:	4b16      	ldr	r3, [pc, #88]	; (80056f8 <SEGGER_SYSVIEW_Init+0x7c>)
 800569e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80056a0:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056a2:	785a      	ldrb	r2, [r3, #1]
 80056a4:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056a6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80056a8:	4b13      	ldr	r3, [pc, #76]	; (80056f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056aa:	7e1b      	ldrb	r3, [r3, #24]
 80056ac:	4618      	mov	r0, r3
 80056ae:	2300      	movs	r3, #0
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	2308      	movs	r3, #8
 80056b4:	4a11      	ldr	r2, [pc, #68]	; (80056fc <SEGGER_SYSVIEW_Init+0x80>)
 80056b6:	490f      	ldr	r1, [pc, #60]	; (80056f4 <SEGGER_SYSVIEW_Init+0x78>)
 80056b8:	f7ff f942 	bl	8004940 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80056bc:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056be:	2200      	movs	r2, #0
 80056c0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056c2:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <SEGGER_SYSVIEW_Init+0x84>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a0c      	ldr	r2, [pc, #48]	; (80056f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056c8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80056ca:	4a0b      	ldr	r2, [pc, #44]	; (80056f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80056d0:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80056d6:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80056dc:	4a06      	ldr	r2, [pc, #24]	; (80056f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80056e2:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80056e8:	bf00      	nop
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20013284 	.word	0x20013284
 80056f4:	080068c8 	.word	0x080068c8
 80056f8:	2001428c 	.word	0x2001428c
 80056fc:	20014284 	.word	0x20014284
 8005700:	e0001004 	.word	0xe0001004

08005704 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800570c:	4a04      	ldr	r2, [pc, #16]	; (8005720 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6113      	str	r3, [r2, #16]
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	2001428c 	.word	0x2001428c

08005724 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800572c:	f3ef 8311 	mrs	r3, BASEPRI
 8005730:	f04f 0120 	mov.w	r1, #32
 8005734:	f381 8811 	msr	BASEPRI, r1
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	4808      	ldr	r0, [pc, #32]	; (800575c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800573c:	f7ff f97c 	bl	8004a38 <_PreparePacket>
 8005740:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	68b8      	ldr	r0, [r7, #8]
 8005748:	f7ff fa66 	bl	8004c18 <_SendPacket>
  RECORD_END();
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f383 8811 	msr	BASEPRI, r3
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	200142bc 	.word	0x200142bc

08005760 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800576a:	f3ef 8311 	mrs	r3, BASEPRI
 800576e:	f04f 0120 	mov.w	r1, #32
 8005772:	f381 8811 	msr	BASEPRI, r1
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	4816      	ldr	r0, [pc, #88]	; (80057d4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800577a:	f7ff f95d 	bl	8004a38 <_PreparePacket>
 800577e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e00b      	b.n	80057a6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	1c59      	adds	r1, r3, #1
 8005796:	61f9      	str	r1, [r7, #28]
 8005798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	09db      	lsrs	r3, r3, #7
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b7f      	cmp	r3, #127	; 0x7f
 80057aa:	d8f0      	bhi.n	800578e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	61fa      	str	r2, [r7, #28]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	6938      	ldr	r0, [r7, #16]
 80057c2:	f7ff fa29 	bl	8004c18 <_SendPacket>
  RECORD_END();
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f383 8811 	msr	BASEPRI, r3
}
 80057cc:	bf00      	nop
 80057ce:	3720      	adds	r7, #32
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	200142bc 	.word	0x200142bc

080057d8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08c      	sub	sp, #48	; 0x30
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057e4:	f3ef 8311 	mrs	r3, BASEPRI
 80057e8:	f04f 0120 	mov.w	r1, #32
 80057ec:	f381 8811 	msr	BASEPRI, r1
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	4825      	ldr	r0, [pc, #148]	; (8005888 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80057f4:	f7ff f920 	bl	8004a38 <_PreparePacket>
 80057f8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	62bb      	str	r3, [r7, #40]	; 0x28
 8005806:	e00b      	b.n	8005820 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	b2da      	uxtb	r2, r3
 800580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580e:	1c59      	adds	r1, r3, #1
 8005810:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005812:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	09db      	lsrs	r3, r3, #7
 800581e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	2b7f      	cmp	r3, #127	; 0x7f
 8005824:	d8f0      	bhi.n	8005808 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800582c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005834:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	e00b      	b.n	8005858 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	b2da      	uxtb	r2, r3
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	1c59      	adds	r1, r3, #1
 8005848:	6279      	str	r1, [r7, #36]	; 0x24
 800584a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	09db      	lsrs	r3, r3, #7
 8005856:	623b      	str	r3, [r7, #32]
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	2b7f      	cmp	r3, #127	; 0x7f
 800585c:	d8f0      	bhi.n	8005840 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	627a      	str	r2, [r7, #36]	; 0x24
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	6979      	ldr	r1, [r7, #20]
 8005872:	69b8      	ldr	r0, [r7, #24]
 8005874:	f7ff f9d0 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f383 8811 	msr	BASEPRI, r3
}
 800587e:	bf00      	nop
 8005880:	3730      	adds	r7, #48	; 0x30
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	200142bc 	.word	0x200142bc

0800588c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b090      	sub	sp, #64	; 0x40
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800589a:	f3ef 8311 	mrs	r3, BASEPRI
 800589e:	f04f 0120 	mov.w	r1, #32
 80058a2:	f381 8811 	msr	BASEPRI, r1
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	4840      	ldr	r0, [pc, #256]	; (80059ac <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80058aa:	f7ff f8c5 	bl	8004a38 <_PreparePacket>
 80058ae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80058bc:	e00b      	b.n	80058d6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c4:	1c59      	adds	r1, r3, #1
 80058c6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80058c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	09db      	lsrs	r3, r3, #7
 80058d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d8:	2b7f      	cmp	r3, #127	; 0x7f
 80058da:	d8f0      	bhi.n	80058be <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80058dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	637b      	str	r3, [r7, #52]	; 0x34
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	633b      	str	r3, [r7, #48]	; 0x30
 80058f4:	e00b      	b.n	800590e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fc:	1c59      	adds	r1, r3, #1
 80058fe:	6379      	str	r1, [r7, #52]	; 0x34
 8005900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	09db      	lsrs	r3, r3, #7
 800590c:	633b      	str	r3, [r7, #48]	; 0x30
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	2b7f      	cmp	r3, #127	; 0x7f
 8005912:	d8f0      	bhi.n	80058f6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	637a      	str	r2, [r7, #52]	; 0x34
 800591a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005922:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	62bb      	str	r3, [r7, #40]	; 0x28
 800592c:	e00b      	b.n	8005946 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	b2da      	uxtb	r2, r3
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	1c59      	adds	r1, r3, #1
 8005936:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005938:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	09db      	lsrs	r3, r3, #7
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	2b7f      	cmp	r3, #127	; 0x7f
 800594a:	d8f0      	bhi.n	800592e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
 8005960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005962:	623b      	str	r3, [r7, #32]
 8005964:	e00b      	b.n	800597e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	b2da      	uxtb	r2, r3
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	1c59      	adds	r1, r3, #1
 800596e:	6279      	str	r1, [r7, #36]	; 0x24
 8005970:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	09db      	lsrs	r3, r3, #7
 800597c:	623b      	str	r3, [r7, #32]
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	2b7f      	cmp	r3, #127	; 0x7f
 8005982:	d8f0      	bhi.n	8005966 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	627a      	str	r2, [r7, #36]	; 0x24
 800598a:	6a3a      	ldr	r2, [r7, #32]
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	6979      	ldr	r1, [r7, #20]
 8005998:	69b8      	ldr	r0, [r7, #24]
 800599a:	f7ff f93d 	bl	8004c18 <_SendPacket>
  RECORD_END();
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f383 8811 	msr	BASEPRI, r3
}
 80059a4:	bf00      	nop
 80059a6:	3740      	adds	r7, #64	; 0x40
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	200142bc 	.word	0x200142bc

080059b0 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b092      	sub	sp, #72	; 0x48
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80059be:	f3ef 8311 	mrs	r3, BASEPRI
 80059c2:	f04f 0120 	mov.w	r1, #32
 80059c6:	f381 8811 	msr	BASEPRI, r1
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	484e      	ldr	r0, [pc, #312]	; (8005b08 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80059ce:	f7ff f833 	bl	8004a38 <_PreparePacket>
 80059d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	647b      	str	r3, [r7, #68]	; 0x44
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	643b      	str	r3, [r7, #64]	; 0x40
 80059e0:	e00b      	b.n	80059fa <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80059e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e8:	1c59      	adds	r1, r3, #1
 80059ea:	6479      	str	r1, [r7, #68]	; 0x44
 80059ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f6:	09db      	lsrs	r3, r3, #7
 80059f8:	643b      	str	r3, [r7, #64]	; 0x40
 80059fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fc:	2b7f      	cmp	r3, #127	; 0x7f
 80059fe:	d8f0      	bhi.n	80059e2 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8005a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	647a      	str	r2, [r7, #68]	; 0x44
 8005a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a18:	e00b      	b.n	8005a32 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2e:	09db      	lsrs	r3, r3, #7
 8005a30:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	2b7f      	cmp	r3, #127	; 0x7f
 8005a36:	d8f0      	bhi.n	8005a1a <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8005a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a50:	e00b      	b.n	8005a6a <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a58:	1c59      	adds	r1, r3, #1
 8005a5a:	6379      	str	r1, [r7, #52]	; 0x34
 8005a5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	09db      	lsrs	r3, r3, #7
 8005a68:	633b      	str	r3, [r7, #48]	; 0x30
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a6e:	d8f0      	bhi.n	8005a52 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8005a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	637a      	str	r2, [r7, #52]	; 0x34
 8005a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a88:	e00b      	b.n	8005aa2 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	1c59      	adds	r1, r3, #1
 8005a92:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	09db      	lsrs	r3, r3, #7
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa6:	d8f0      	bhi.n	8005a8a <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
 8005abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abe:	623b      	str	r3, [r7, #32]
 8005ac0:	e00b      	b.n	8005ada <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	1c59      	adds	r1, r3, #1
 8005aca:	6279      	str	r1, [r7, #36]	; 0x24
 8005acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	09db      	lsrs	r3, r3, #7
 8005ad8:	623b      	str	r3, [r7, #32]
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ade:	d8f0      	bhi.n	8005ac2 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ae6:	6a3a      	ldr	r2, [r7, #32]
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	6979      	ldr	r1, [r7, #20]
 8005af4:	69b8      	ldr	r0, [r7, #24]
 8005af6:	f7ff f88f 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f383 8811 	msr	BASEPRI, r3
}
 8005b00:	bf00      	nop
 8005b02:	3748      	adds	r7, #72	; 0x48
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	200142bc 	.word	0x200142bc

08005b0c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	; 0x30
 8005b10:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005b12:	4b59      	ldr	r3, [pc, #356]	; (8005c78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005b18:	f3ef 8311 	mrs	r3, BASEPRI
 8005b1c:	f04f 0120 	mov.w	r1, #32
 8005b20:	f381 8811 	msr	BASEPRI, r1
 8005b24:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005b26:	4b54      	ldr	r3, [pc, #336]	; (8005c78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	220a      	movs	r2, #10
 8005b2c:	4953      	ldr	r1, [pc, #332]	; (8005c7c <SEGGER_SYSVIEW_Start+0x170>)
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fa fb56 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005b3a:	f7fe fb4f 	bl	80041dc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005b3e:	200a      	movs	r0, #10
 8005b40:	f7ff fdf0 	bl	8005724 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b44:	f3ef 8311 	mrs	r3, BASEPRI
 8005b48:	f04f 0120 	mov.w	r1, #32
 8005b4c:	f381 8811 	msr	BASEPRI, r1
 8005b50:	60bb      	str	r3, [r7, #8]
 8005b52:	484b      	ldr	r0, [pc, #300]	; (8005c80 <SEGGER_SYSVIEW_Start+0x174>)
 8005b54:	f7fe ff70 	bl	8004a38 <_PreparePacket>
 8005b58:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b62:	4b45      	ldr	r3, [pc, #276]	; (8005c78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b68:	e00b      	b.n	8005b82 <SEGGER_SYSVIEW_Start+0x76>
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	1c59      	adds	r1, r3, #1
 8005b72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	09db      	lsrs	r3, r3, #7
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	2b7f      	cmp	r3, #127	; 0x7f
 8005b86:	d8f0      	bhi.n	8005b6a <SEGGER_SYSVIEW_Start+0x5e>
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9c:	4b36      	ldr	r3, [pc, #216]	; (8005c78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	623b      	str	r3, [r7, #32]
 8005ba2:	e00b      	b.n	8005bbc <SEGGER_SYSVIEW_Start+0xb0>
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	1c59      	adds	r1, r3, #1
 8005bac:	6279      	str	r1, [r7, #36]	; 0x24
 8005bae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	09db      	lsrs	r3, r3, #7
 8005bba:	623b      	str	r3, [r7, #32]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc0:	d8f0      	bhi.n	8005ba4 <SEGGER_SYSVIEW_Start+0x98>
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	627a      	str	r2, [r7, #36]	; 0x24
 8005bc8:	6a3a      	ldr	r2, [r7, #32]
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	4b28      	ldr	r3, [pc, #160]	; (8005c78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	e00b      	b.n	8005bf6 <SEGGER_SYSVIEW_Start+0xea>
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	1c59      	adds	r1, r3, #1
 8005be6:	61f9      	str	r1, [r7, #28]
 8005be8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	09db      	lsrs	r3, r3, #7
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bfa:	d8f0      	bhi.n	8005bde <SEGGER_SYSVIEW_Start+0xd2>
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	61fa      	str	r2, [r7, #28]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	2300      	movs	r3, #0
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	e00b      	b.n	8005c2e <SEGGER_SYSVIEW_Start+0x122>
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	1c59      	adds	r1, r3, #1
 8005c1e:	6179      	str	r1, [r7, #20]
 8005c20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	09db      	lsrs	r3, r3, #7
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b7f      	cmp	r3, #127	; 0x7f
 8005c32:	d8f0      	bhi.n	8005c16 <SEGGER_SYSVIEW_Start+0x10a>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	617a      	str	r2, [r7, #20]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c44:	2218      	movs	r2, #24
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7fe ffe5 	bl	8004c18 <_SendPacket>
      RECORD_END();
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c54:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005c5c:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005c62:	f000 f9eb 	bl	800603c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005c66:	f000 f9b1 	bl	8005fcc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005c6a:	f000 fc2d 	bl	80064c8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005c6e:	bf00      	nop
 8005c70:	3730      	adds	r7, #48	; 0x30
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	2001428c 	.word	0x2001428c
 8005c7c:	08006908 	.word	0x08006908
 8005c80:	200142bc 	.word	0x200142bc

08005c84 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c8e:	f04f 0120 	mov.w	r1, #32
 8005c92:	f381 8811 	msr	BASEPRI, r1
 8005c96:	607b      	str	r3, [r7, #4]
 8005c98:	480b      	ldr	r0, [pc, #44]	; (8005cc8 <SEGGER_SYSVIEW_Stop+0x44>)
 8005c9a:	f7fe fecd 	bl	8004a38 <_PreparePacket>
 8005c9e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005ca0:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <SEGGER_SYSVIEW_Stop+0x48>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005ca8:	220b      	movs	r2, #11
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6838      	ldr	r0, [r7, #0]
 8005cae:	f7fe ffb3 	bl	8004c18 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005cb2:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <SEGGER_SYSVIEW_Stop+0x48>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f383 8811 	msr	BASEPRI, r3
}
 8005cbe:	bf00      	nop
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200142bc 	.word	0x200142bc
 8005ccc:	2001428c 	.word	0x2001428c

08005cd0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08c      	sub	sp, #48	; 0x30
 8005cd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005cda:	f04f 0120 	mov.w	r1, #32
 8005cde:	f381 8811 	msr	BASEPRI, r1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	4845      	ldr	r0, [pc, #276]	; (8005dfc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005ce6:	f7fe fea7 	bl	8004a38 <_PreparePacket>
 8005cea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf4:	4b42      	ldr	r3, [pc, #264]	; (8005e00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfa:	e00b      	b.n	8005d14 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	1c59      	adds	r1, r3, #1
 8005d04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	09db      	lsrs	r3, r3, #7
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	2b7f      	cmp	r3, #127	; 0x7f
 8005d18:	d8f0      	bhi.n	8005cfc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2e:	4b34      	ldr	r3, [pc, #208]	; (8005e00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	623b      	str	r3, [r7, #32]
 8005d34:	e00b      	b.n	8005d4e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	1c59      	adds	r1, r3, #1
 8005d3e:	6279      	str	r1, [r7, #36]	; 0x24
 8005d40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	09db      	lsrs	r3, r3, #7
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	2b7f      	cmp	r3, #127	; 0x7f
 8005d52:	d8f0      	bhi.n	8005d36 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	627a      	str	r2, [r7, #36]	; 0x24
 8005d5a:	6a3a      	ldr	r2, [r7, #32]
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	4b25      	ldr	r3, [pc, #148]	; (8005e00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	e00b      	b.n	8005d88 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	1c59      	adds	r1, r3, #1
 8005d78:	61f9      	str	r1, [r7, #28]
 8005d7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	09db      	lsrs	r3, r3, #7
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d8c:	d8f0      	bhi.n	8005d70 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	61fa      	str	r2, [r7, #28]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	e00b      	b.n	8005dc0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	1c59      	adds	r1, r3, #1
 8005db0:	6179      	str	r1, [r7, #20]
 8005db2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	09db      	lsrs	r3, r3, #7
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc4:	d8f0      	bhi.n	8005da8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	617a      	str	r2, [r7, #20]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005dd6:	2218      	movs	r2, #24
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	68b8      	ldr	r0, [r7, #8]
 8005ddc:	f7fe ff1c 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005de6:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005dee:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	4798      	blx	r3
  }
}
 8005df4:	bf00      	nop
 8005df6:	3730      	adds	r7, #48	; 0x30
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	200142bc 	.word	0x200142bc
 8005e00:	2001428c 	.word	0x2001428c

08005e04 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b092      	sub	sp, #72	; 0x48
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005e0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e10:	f04f 0120 	mov.w	r1, #32
 8005e14:	f381 8811 	msr	BASEPRI, r1
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	486a      	ldr	r0, [pc, #424]	; (8005fc4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005e1c:	f7fe fe0c 	bl	8004a38 <_PreparePacket>
 8005e20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	647b      	str	r3, [r7, #68]	; 0x44
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	4b66      	ldr	r3, [pc, #408]	; (8005fc8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	643b      	str	r3, [r7, #64]	; 0x40
 8005e36:	e00b      	b.n	8005e50 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3e:	1c59      	adds	r1, r3, #1
 8005e40:	6479      	str	r1, [r7, #68]	; 0x44
 8005e42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4c:	09db      	lsrs	r3, r3, #7
 8005e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e52:	2b7f      	cmp	r3, #127	; 0x7f
 8005e54:	d8f0      	bhi.n	8005e38 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	647a      	str	r2, [r7, #68]	; 0x44
 8005e5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e70:	e00b      	b.n	8005e8a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e78:	1c59      	adds	r1, r3, #1
 8005e7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005e7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	09db      	lsrs	r3, r3, #7
 8005e88:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8e:	d8f0      	bhi.n	8005e72 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7fe fd95 	bl	80049d8 <_EncodeStr>
 8005eae:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005eb0:	2209      	movs	r2, #9
 8005eb2:	68f9      	ldr	r1, [r7, #12]
 8005eb4:	6938      	ldr	r0, [r7, #16]
 8005eb6:	f7fe feaf 	bl	8004c18 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4b40      	ldr	r3, [pc, #256]	; (8005fc8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ece:	e00b      	b.n	8005ee8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed6:	1c59      	adds	r1, r3, #1
 8005ed8:	6379      	str	r1, [r7, #52]	; 0x34
 8005eda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	09db      	lsrs	r3, r3, #7
 8005ee6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	2b7f      	cmp	r3, #127	; 0x7f
 8005eec:	d8f0      	bhi.n	8005ed0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	637a      	str	r2, [r7, #52]	; 0x34
 8005ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f08:	e00b      	b.n	8005f22 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	1c59      	adds	r1, r3, #1
 8005f12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]
 8005f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1e:	09db      	lsrs	r3, r3, #7
 8005f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f24:	2b7f      	cmp	r3, #127	; 0x7f
 8005f26:	d8f0      	bhi.n	8005f0a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	623b      	str	r3, [r7, #32]
 8005f42:	e00b      	b.n	8005f5c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	1c59      	adds	r1, r3, #1
 8005f4c:	6279      	str	r1, [r7, #36]	; 0x24
 8005f4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	09db      	lsrs	r3, r3, #7
 8005f5a:	623b      	str	r3, [r7, #32]
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f60:	d8f0      	bhi.n	8005f44 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	627a      	str	r2, [r7, #36]	; 0x24
 8005f68:	6a3a      	ldr	r2, [r7, #32]
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	2300      	movs	r3, #0
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	e00b      	b.n	8005f94 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	1c59      	adds	r1, r3, #1
 8005f84:	61f9      	str	r1, [r7, #28]
 8005f86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	09db      	lsrs	r3, r3, #7
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b7f      	cmp	r3, #127	; 0x7f
 8005f98:	d8f0      	bhi.n	8005f7c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	61fa      	str	r2, [r7, #28]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005faa:	2215      	movs	r2, #21
 8005fac:	68f9      	ldr	r1, [r7, #12]
 8005fae:	6938      	ldr	r0, [r7, #16]
 8005fb0:	f7fe fe32 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f383 8811 	msr	BASEPRI, r3
}
 8005fba:	bf00      	nop
 8005fbc:	3748      	adds	r7, #72	; 0x48
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	200142bc 	.word	0x200142bc
 8005fc8:	2001428c 	.word	0x2001428c

08005fcc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005fd0:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005fd8:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005fe2:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	4798      	blx	r3
  }
}
 8005fea:	bf00      	nop
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	2001428c 	.word	0x2001428c

08005ff4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ffc:	f3ef 8311 	mrs	r3, BASEPRI
 8006000:	f04f 0120 	mov.w	r1, #32
 8006004:	f381 8811 	msr	BASEPRI, r1
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	480b      	ldr	r0, [pc, #44]	; (8006038 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800600c:	f7fe fd14 	bl	8004a38 <_PreparePacket>
 8006010:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006012:	2280      	movs	r2, #128	; 0x80
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	6938      	ldr	r0, [r7, #16]
 8006018:	f7fe fcde 	bl	80049d8 <_EncodeStr>
 800601c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800601e:	220e      	movs	r2, #14
 8006020:	68f9      	ldr	r1, [r7, #12]
 8006022:	6938      	ldr	r0, [r7, #16]
 8006024:	f7fe fdf8 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f383 8811 	msr	BASEPRI, r3
}
 800602e:	bf00      	nop
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	200142bc 	.word	0x200142bc

0800603c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800603c:	b590      	push	{r4, r7, lr}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006042:	4b15      	ldr	r3, [pc, #84]	; (8006098 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01a      	beq.n	8006080 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800604a:	4b13      	ldr	r3, [pc, #76]	; (8006098 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d015      	beq.n	8006080 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006054:	4b10      	ldr	r3, [pc, #64]	; (8006098 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4798      	blx	r3
 800605c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006060:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	000a      	movs	r2, r1
 8006070:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006072:	4613      	mov	r3, r2
 8006074:	461a      	mov	r2, r3
 8006076:	4621      	mov	r1, r4
 8006078:	200d      	movs	r0, #13
 800607a:	f7ff fbad 	bl	80057d8 <SEGGER_SYSVIEW_RecordU32x2>
 800607e:	e006      	b.n	800608e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006080:	4b06      	ldr	r3, [pc, #24]	; (800609c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4619      	mov	r1, r3
 8006086:	200c      	movs	r0, #12
 8006088:	f7ff fb6a 	bl	8005760 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800608c:	bf00      	nop
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	bd90      	pop	{r4, r7, pc}
 8006096:	bf00      	nop
 8006098:	2001428c 	.word	0x2001428c
 800609c:	e0001004 	.word	0xe0001004

080060a0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060a6:	f3ef 8311 	mrs	r3, BASEPRI
 80060aa:	f04f 0120 	mov.w	r1, #32
 80060ae:	f381 8811 	msr	BASEPRI, r1
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	4819      	ldr	r0, [pc, #100]	; (800611c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80060b6:	f7fe fcbf 	bl	8004a38 <_PreparePacket>
 80060ba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80060c0:	4b17      	ldr	r3, [pc, #92]	; (8006120 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	e00b      	b.n	80060ec <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	1c59      	adds	r1, r3, #1
 80060dc:	6179      	str	r1, [r7, #20]
 80060de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	09db      	lsrs	r3, r3, #7
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	2b7f      	cmp	r3, #127	; 0x7f
 80060f0:	d8f0      	bhi.n	80060d4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	617a      	str	r2, [r7, #20]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006102:	2202      	movs	r2, #2
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	68b8      	ldr	r0, [r7, #8]
 8006108:	f7fe fd86 	bl	8004c18 <_SendPacket>
  RECORD_END();
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f383 8811 	msr	BASEPRI, r3
}
 8006112:	bf00      	nop
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	200142bc 	.word	0x200142bc
 8006120:	e000ed04 	.word	0xe000ed04

08006124 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800612a:	f3ef 8311 	mrs	r3, BASEPRI
 800612e:	f04f 0120 	mov.w	r1, #32
 8006132:	f381 8811 	msr	BASEPRI, r1
 8006136:	607b      	str	r3, [r7, #4]
 8006138:	4807      	ldr	r0, [pc, #28]	; (8006158 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800613a:	f7fe fc7d 	bl	8004a38 <_PreparePacket>
 800613e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006140:	2203      	movs	r2, #3
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6838      	ldr	r0, [r7, #0]
 8006146:	f7fe fd67 	bl	8004c18 <_SendPacket>
  RECORD_END();
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f383 8811 	msr	BASEPRI, r3
}
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	200142bc 	.word	0x200142bc

0800615c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006162:	f3ef 8311 	mrs	r3, BASEPRI
 8006166:	f04f 0120 	mov.w	r1, #32
 800616a:	f381 8811 	msr	BASEPRI, r1
 800616e:	607b      	str	r3, [r7, #4]
 8006170:	4807      	ldr	r0, [pc, #28]	; (8006190 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006172:	f7fe fc61 	bl	8004a38 <_PreparePacket>
 8006176:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006178:	2212      	movs	r2, #18
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	6838      	ldr	r0, [r7, #0]
 800617e:	f7fe fd4b 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f383 8811 	msr	BASEPRI, r3
}
 8006188:	bf00      	nop
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	200142bc 	.word	0x200142bc

08006194 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800619a:	f3ef 8311 	mrs	r3, BASEPRI
 800619e:	f04f 0120 	mov.w	r1, #32
 80061a2:	f381 8811 	msr	BASEPRI, r1
 80061a6:	607b      	str	r3, [r7, #4]
 80061a8:	4807      	ldr	r0, [pc, #28]	; (80061c8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80061aa:	f7fe fc45 	bl	8004a38 <_PreparePacket>
 80061ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80061b0:	2211      	movs	r2, #17
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6838      	ldr	r0, [r7, #0]
 80061b6:	f7fe fd2f 	bl	8004c18 <_SendPacket>
  RECORD_END();
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f383 8811 	msr	BASEPRI, r3
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	200142bc 	.word	0x200142bc

080061cc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061d4:	f3ef 8311 	mrs	r3, BASEPRI
 80061d8:	f04f 0120 	mov.w	r1, #32
 80061dc:	f381 8811 	msr	BASEPRI, r1
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	4819      	ldr	r0, [pc, #100]	; (8006248 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80061e4:	f7fe fc28 	bl	8004a38 <_PreparePacket>
 80061e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061ee:	4b17      	ldr	r3, [pc, #92]	; (800624c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	e00b      	b.n	800621a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	b2da      	uxtb	r2, r3
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	1c59      	adds	r1, r3, #1
 800620a:	61f9      	str	r1, [r7, #28]
 800620c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	09db      	lsrs	r3, r3, #7
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	2b7f      	cmp	r3, #127	; 0x7f
 800621e:	d8f0      	bhi.n	8006202 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	61fa      	str	r2, [r7, #28]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006230:	2208      	movs	r2, #8
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	6938      	ldr	r0, [r7, #16]
 8006236:	f7fe fcef 	bl	8004c18 <_SendPacket>
  RECORD_END();
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f383 8811 	msr	BASEPRI, r3
}
 8006240:	bf00      	nop
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	200142bc 	.word	0x200142bc
 800624c:	2001428c 	.word	0x2001428c

08006250 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006258:	f3ef 8311 	mrs	r3, BASEPRI
 800625c:	f04f 0120 	mov.w	r1, #32
 8006260:	f381 8811 	msr	BASEPRI, r1
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	4819      	ldr	r0, [pc, #100]	; (80062cc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006268:	f7fe fbe6 	bl	8004a38 <_PreparePacket>
 800626c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006272:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	61fb      	str	r3, [r7, #28]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	e00b      	b.n	800629e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	b2da      	uxtb	r2, r3
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	1c59      	adds	r1, r3, #1
 800628e:	61f9      	str	r1, [r7, #28]
 8006290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	09db      	lsrs	r3, r3, #7
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	2b7f      	cmp	r3, #127	; 0x7f
 80062a2:	d8f0      	bhi.n	8006286 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	61fa      	str	r2, [r7, #28]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80062b4:	2204      	movs	r2, #4
 80062b6:	68f9      	ldr	r1, [r7, #12]
 80062b8:	6938      	ldr	r0, [r7, #16]
 80062ba:	f7fe fcad 	bl	8004c18 <_SendPacket>
  RECORD_END();
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f383 8811 	msr	BASEPRI, r3
}
 80062c4:	bf00      	nop
 80062c6:	3720      	adds	r7, #32
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	200142bc 	.word	0x200142bc
 80062d0:	2001428c 	.word	0x2001428c

080062d4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062dc:	f3ef 8311 	mrs	r3, BASEPRI
 80062e0:	f04f 0120 	mov.w	r1, #32
 80062e4:	f381 8811 	msr	BASEPRI, r1
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	4819      	ldr	r0, [pc, #100]	; (8006350 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80062ec:	f7fe fba4 	bl	8004a38 <_PreparePacket>
 80062f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062f6:	4b17      	ldr	r3, [pc, #92]	; (8006354 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	61fb      	str	r3, [r7, #28]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	e00b      	b.n	8006322 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	1c59      	adds	r1, r3, #1
 8006312:	61f9      	str	r1, [r7, #28]
 8006314:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b7f      	cmp	r3, #127	; 0x7f
 8006326:	d8f0      	bhi.n	800630a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	61fa      	str	r2, [r7, #28]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006338:	2206      	movs	r2, #6
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	6938      	ldr	r0, [r7, #16]
 800633e:	f7fe fc6b 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f383 8811 	msr	BASEPRI, r3
}
 8006348:	bf00      	nop
 800634a:	3720      	adds	r7, #32
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	200142bc 	.word	0x200142bc
 8006354:	2001428c 	.word	0x2001428c

08006358 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006360:	4b04      	ldr	r3, [pc, #16]	; (8006374 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	1ad3      	subs	r3, r2, r3
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	2001428c 	.word	0x2001428c

08006378 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006378:	b580      	push	{r7, lr}
 800637a:	b08c      	sub	sp, #48	; 0x30
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006382:	4b40      	ldr	r3, [pc, #256]	; (8006484 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d077      	beq.n	800647a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800638a:	4b3e      	ldr	r3, [pc, #248]	; (8006484 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006390:	2300      	movs	r3, #0
 8006392:	62bb      	str	r3, [r7, #40]	; 0x28
 8006394:	e008      	b.n	80063a8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	3301      	adds	r3, #1
 80063a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d3f2      	bcc.n	8006396 <SEGGER_SYSVIEW_SendModule+0x1e>
 80063b0:	e000      	b.n	80063b4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80063b2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80063b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d055      	beq.n	8006466 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063ba:	f3ef 8311 	mrs	r3, BASEPRI
 80063be:	f04f 0120 	mov.w	r1, #32
 80063c2:	f381 8811 	msr	BASEPRI, r1
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	482f      	ldr	r0, [pc, #188]	; (8006488 <SEGGER_SYSVIEW_SendModule+0x110>)
 80063ca:	f7fe fb35 	bl	8004a38 <_PreparePacket>
 80063ce:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	623b      	str	r3, [r7, #32]
 80063dc:	e00b      	b.n	80063f6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	1c59      	adds	r1, r3, #1
 80063e6:	6279      	str	r1, [r7, #36]	; 0x24
 80063e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	09db      	lsrs	r3, r3, #7
 80063f4:	623b      	str	r3, [r7, #32]
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	2b7f      	cmp	r3, #127	; 0x7f
 80063fa:	d8f0      	bhi.n	80063de <SEGGER_SYSVIEW_SendModule+0x66>
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	627a      	str	r2, [r7, #36]	; 0x24
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	61fb      	str	r3, [r7, #28]
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	e00b      	b.n	8006430 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	1c59      	adds	r1, r3, #1
 8006420:	61f9      	str	r1, [r7, #28]
 8006422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	09db      	lsrs	r3, r3, #7
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	2b7f      	cmp	r3, #127	; 0x7f
 8006434:	d8f0      	bhi.n	8006418 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	61fa      	str	r2, [r7, #28]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2280      	movs	r2, #128	; 0x80
 800644c:	4619      	mov	r1, r3
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7fe fac2 	bl	80049d8 <_EncodeStr>
 8006454:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006456:	2216      	movs	r2, #22
 8006458:	68f9      	ldr	r1, [r7, #12]
 800645a:	6938      	ldr	r0, [r7, #16]
 800645c:	f7fe fbdc 	bl	8004c18 <_SendPacket>
      RECORD_END();
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d006      	beq.n	800647a <SEGGER_SYSVIEW_SendModule+0x102>
 800646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4798      	blx	r3
    }
  }
}
 800647a:	bf00      	nop
 800647c:	3730      	adds	r7, #48	; 0x30
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	200142b4 	.word	0x200142b4
 8006488:	200142bc 	.word	0x200142bc

0800648c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006492:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00f      	beq.n	80064ba <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800649a:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f2      	bne.n	80064a0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	200142b4 	.word	0x200142b4

080064c8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80064ce:	f3ef 8311 	mrs	r3, BASEPRI
 80064d2:	f04f 0120 	mov.w	r1, #32
 80064d6:	f381 8811 	msr	BASEPRI, r1
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	4817      	ldr	r0, [pc, #92]	; (800653c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80064de:	f7fe faab 	bl	8004a38 <_PreparePacket>
 80064e2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	4b14      	ldr	r3, [pc, #80]	; (8006540 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	e00b      	b.n	800650c <SEGGER_SYSVIEW_SendNumModules+0x44>
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	1c59      	adds	r1, r3, #1
 80064fc:	6179      	str	r1, [r7, #20]
 80064fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	09db      	lsrs	r3, r3, #7
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b7f      	cmp	r3, #127	; 0x7f
 8006510:	d8f0      	bhi.n	80064f4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	617a      	str	r2, [r7, #20]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006522:	221b      	movs	r2, #27
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	68b8      	ldr	r0, [r7, #8]
 8006528:	f7fe fb76 	bl	8004c18 <_SendPacket>
  RECORD_END();
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f383 8811 	msr	BASEPRI, r3
}
 8006532:	bf00      	nop
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200142bc 	.word	0x200142bc
 8006540:	200142b8 	.word	0x200142b8

08006544 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006544:	b40f      	push	{r0, r1, r2, r3}
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800654c:	f107 0314 	add.w	r3, r7, #20
 8006550:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	461a      	mov	r2, r3
 8006556:	2100      	movs	r1, #0
 8006558:	6938      	ldr	r0, [r7, #16]
 800655a:	f7fe fe6f 	bl	800523c <_VPrintTarget>
  va_end(ParamList);
}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006568:	b004      	add	sp, #16
 800656a:	4770      	bx	lr

0800656c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	; 0x28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006574:	f3ef 8311 	mrs	r3, BASEPRI
 8006578:	f04f 0120 	mov.w	r1, #32
 800657c:	f381 8811 	msr	BASEPRI, r1
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	4827      	ldr	r0, [pc, #156]	; (8006620 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006584:	f7fe fa58 	bl	8004a38 <_PreparePacket>
 8006588:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800658a:	2280      	movs	r2, #128	; 0x80
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	6938      	ldr	r0, [r7, #16]
 8006590:	f7fe fa22 	bl	80049d8 <_EncodeStr>
 8006594:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
 800659a:	2301      	movs	r3, #1
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	e00b      	b.n	80065b8 <SEGGER_SYSVIEW_Warn+0x4c>
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	1c59      	adds	r1, r3, #1
 80065a8:	6279      	str	r1, [r7, #36]	; 0x24
 80065aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	09db      	lsrs	r3, r3, #7
 80065b6:	623b      	str	r3, [r7, #32]
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	2b7f      	cmp	r3, #127	; 0x7f
 80065bc:	d8f0      	bhi.n	80065a0 <SEGGER_SYSVIEW_Warn+0x34>
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	627a      	str	r2, [r7, #36]	; 0x24
 80065c4:	6a3a      	ldr	r2, [r7, #32]
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	2300      	movs	r3, #0
 80065d4:	61bb      	str	r3, [r7, #24]
 80065d6:	e00b      	b.n	80065f0 <SEGGER_SYSVIEW_Warn+0x84>
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	61f9      	str	r1, [r7, #28]
 80065e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	09db      	lsrs	r3, r3, #7
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2b7f      	cmp	r3, #127	; 0x7f
 80065f4:	d8f0      	bhi.n	80065d8 <SEGGER_SYSVIEW_Warn+0x6c>
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	61fa      	str	r2, [r7, #28]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006606:	221a      	movs	r2, #26
 8006608:	68f9      	ldr	r1, [r7, #12]
 800660a:	6938      	ldr	r0, [r7, #16]
 800660c:	f7fe fb04 	bl	8004c18 <_SendPacket>
  RECORD_END();
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f383 8811 	msr	BASEPRI, r3
}
 8006616:	bf00      	nop
 8006618:	3728      	adds	r7, #40	; 0x28
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	200142bc 	.word	0x200142bc

08006624 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006628:	4b13      	ldr	r3, [pc, #76]	; (8006678 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800662a:	7e1b      	ldrb	r3, [r3, #24]
 800662c:	4619      	mov	r1, r3
 800662e:	4a13      	ldr	r2, [pc, #76]	; (800667c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006630:	460b      	mov	r3, r1
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	440b      	add	r3, r1
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	4413      	add	r3, r2
 800663a:	336c      	adds	r3, #108	; 0x6c
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	4b0e      	ldr	r3, [pc, #56]	; (8006678 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006640:	7e1b      	ldrb	r3, [r3, #24]
 8006642:	4618      	mov	r0, r3
 8006644:	490d      	ldr	r1, [pc, #52]	; (800667c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006646:	4603      	mov	r3, r0
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	4403      	add	r3, r0
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	440b      	add	r3, r1
 8006650:	3370      	adds	r3, #112	; 0x70
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d00b      	beq.n	8006670 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006658:	4b07      	ldr	r3, [pc, #28]	; (8006678 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800665a:	789b      	ldrb	r3, [r3, #2]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d107      	bne.n	8006670 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006660:	4b05      	ldr	r3, [pc, #20]	; (8006678 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006662:	2201      	movs	r2, #1
 8006664:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006666:	f7fe f9f3 	bl	8004a50 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800666a:	4b03      	ldr	r3, [pc, #12]	; (8006678 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800666c:	2200      	movs	r2, #0
 800666e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006670:	4b01      	ldr	r3, [pc, #4]	; (8006678 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006672:	781b      	ldrb	r3, [r3, #0]
}
 8006674:	4618      	mov	r0, r3
 8006676:	bd80      	pop	{r7, pc}
 8006678:	2001428c 	.word	0x2001428c
 800667c:	20014400 	.word	0x20014400

08006680 <__libc_init_array>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4d0d      	ldr	r5, [pc, #52]	; (80066b8 <__libc_init_array+0x38>)
 8006684:	4c0d      	ldr	r4, [pc, #52]	; (80066bc <__libc_init_array+0x3c>)
 8006686:	1b64      	subs	r4, r4, r5
 8006688:	10a4      	asrs	r4, r4, #2
 800668a:	2600      	movs	r6, #0
 800668c:	42a6      	cmp	r6, r4
 800668e:	d109      	bne.n	80066a4 <__libc_init_array+0x24>
 8006690:	4d0b      	ldr	r5, [pc, #44]	; (80066c0 <__libc_init_array+0x40>)
 8006692:	4c0c      	ldr	r4, [pc, #48]	; (80066c4 <__libc_init_array+0x44>)
 8006694:	f000 f83c 	bl	8006710 <_init>
 8006698:	1b64      	subs	r4, r4, r5
 800669a:	10a4      	asrs	r4, r4, #2
 800669c:	2600      	movs	r6, #0
 800669e:	42a6      	cmp	r6, r4
 80066a0:	d105      	bne.n	80066ae <__libc_init_array+0x2e>
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a8:	4798      	blx	r3
 80066aa:	3601      	adds	r6, #1
 80066ac:	e7ee      	b.n	800668c <__libc_init_array+0xc>
 80066ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b2:	4798      	blx	r3
 80066b4:	3601      	adds	r6, #1
 80066b6:	e7f2      	b.n	800669e <__libc_init_array+0x1e>
 80066b8:	0800692c 	.word	0x0800692c
 80066bc:	0800692c 	.word	0x0800692c
 80066c0:	0800692c 	.word	0x0800692c
 80066c4:	08006930 	.word	0x08006930

080066c8 <memcmp>:
 80066c8:	b530      	push	{r4, r5, lr}
 80066ca:	3901      	subs	r1, #1
 80066cc:	2400      	movs	r4, #0
 80066ce:	42a2      	cmp	r2, r4
 80066d0:	d101      	bne.n	80066d6 <memcmp+0xe>
 80066d2:	2000      	movs	r0, #0
 80066d4:	e005      	b.n	80066e2 <memcmp+0x1a>
 80066d6:	5d03      	ldrb	r3, [r0, r4]
 80066d8:	3401      	adds	r4, #1
 80066da:	5d0d      	ldrb	r5, [r1, r4]
 80066dc:	42ab      	cmp	r3, r5
 80066de:	d0f6      	beq.n	80066ce <memcmp+0x6>
 80066e0:	1b58      	subs	r0, r3, r5
 80066e2:	bd30      	pop	{r4, r5, pc}

080066e4 <memcpy>:
 80066e4:	440a      	add	r2, r1
 80066e6:	4291      	cmp	r1, r2
 80066e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066ec:	d100      	bne.n	80066f0 <memcpy+0xc>
 80066ee:	4770      	bx	lr
 80066f0:	b510      	push	{r4, lr}
 80066f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066fa:	4291      	cmp	r1, r2
 80066fc:	d1f9      	bne.n	80066f2 <memcpy+0xe>
 80066fe:	bd10      	pop	{r4, pc}

08006700 <memset>:
 8006700:	4402      	add	r2, r0
 8006702:	4603      	mov	r3, r0
 8006704:	4293      	cmp	r3, r2
 8006706:	d100      	bne.n	800670a <memset+0xa>
 8006708:	4770      	bx	lr
 800670a:	f803 1b01 	strb.w	r1, [r3], #1
 800670e:	e7f9      	b.n	8006704 <memset+0x4>

08006710 <_init>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	bf00      	nop
 8006714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006716:	bc08      	pop	{r3}
 8006718:	469e      	mov	lr, r3
 800671a:	4770      	bx	lr

0800671c <_fini>:
 800671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671e:	bf00      	nop
 8006720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006722:	bc08      	pop	{r3}
 8006724:	469e      	mov	lr, r3
 8006726:	4770      	bx	lr
