
11_freertos_queues_2tasks_keypad_tm1638.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008594  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08008734  08008734  00018734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088ac  080088ac  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080088ac  080088ac  000188ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088b4  080088b4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088b4  080088b4  000188b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088b8  080088b8  000188b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080088bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017524  200000b0  0800896c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200175d4  0800896c  000275d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d23f  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b80  00000000  00000000  0003d31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  00040ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  00042410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e8e  00000000  00000000  000437c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190a4  00000000  00000000  0005d656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d1ee  00000000  00000000  000766fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001138e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d2c  00000000  00000000  0011393c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800871c 	.word	0x0800871c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	0800871c 	.word	0x0800871c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001751c 	.word	0x2001751c
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800061e:	f000 fbef 	bl	8000e00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000622:	f000 f869 	bl	80006f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000626:	f000 f909 	bl	800083c <MX_GPIO_Init>
	MX_SPI1_Init();
 800062a:	f000 f8cf 	bl	80007cc <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	tm1638_init();
 800062e:	f007 f89d 	bl	800776c <tm1638_init>

	//Enable the CYCCNT counter.
	DWT_CTRL |= (1 << 0);
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <main+0xb4>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a25      	ldr	r2, [pc, #148]	; (80006cc <main+0xb4>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 800063e:	f004 fab9 	bl	8004bb4 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8000642:	f006 f8d3 	bl	80067ec <SEGGER_SYSVIEW_Start>

	SEGGER_UART_init(500000);
 8000646:	4822      	ldr	r0, [pc, #136]	; (80006d0 <main+0xb8>)
 8000648:	f004 fc82 	bl	8004f50 <SEGGER_UART_init>

	status = xTaskCreate(handle_tm1638, "tm1638", 5000, "this is task tm1638",
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <main+0xbc>)
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	2302      	movs	r3, #2
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <main+0xc0>)
 8000656:	f241 3288 	movw	r2, #5000	; 0x1388
 800065a:	4920      	ldr	r1, [pc, #128]	; (80006dc <main+0xc4>)
 800065c:	4820      	ldr	r0, [pc, #128]	; (80006e0 <main+0xc8>)
 800065e:	f002 fd4d 	bl	80030fc <xTaskCreate>
 8000662:	60f8      	str	r0, [r7, #12]
			2, &tm1638);
	configASSERT(status == pdPASS);
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d00a      	beq.n	8000680 <main+0x68>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800066a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800066e:	f383 8811 	msr	BASEPRI, r3
 8000672:	f3bf 8f6f 	isb	sy
 8000676:	f3bf 8f4f 	dsb	sy
 800067a:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800067c:	bf00      	nop
 800067e:	e7fe      	b.n	800067e <main+0x66>

	status = xTaskCreate(handle_keypad, "keypad_task", 500,
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <main+0xcc>)
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	2303      	movs	r3, #3
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <main+0xd0>)
 800068a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800068e:	4917      	ldr	r1, [pc, #92]	; (80006ec <main+0xd4>)
 8000690:	4817      	ldr	r0, [pc, #92]	; (80006f0 <main+0xd8>)
 8000692:	f002 fd33 	bl	80030fc <xTaskCreate>
 8000696:	60f8      	str	r0, [r7, #12]
			"this is task keypad", 3, &keypad);
	configASSERT(status == pdPASS);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d00a      	beq.n	80006b4 <main+0x9c>
        __asm volatile
 800069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a2:	f383 8811 	msr	BASEPRI, r3
 80006a6:	f3bf 8f6f 	isb	sy
 80006aa:	f3bf 8f4f 	dsb	sy
 80006ae:	607b      	str	r3, [r7, #4]
    }
 80006b0:	bf00      	nop
 80006b2:	e7fe      	b.n	80006b2 <main+0x9a>

	qdata_key = xQueueCreate(1, sizeof(char));
 80006b4:	2200      	movs	r2, #0
 80006b6:	2101      	movs	r1, #1
 80006b8:	2001      	movs	r0, #1
 80006ba:	f002 f981 	bl	80029c0 <xQueueGenericCreate>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <main+0xdc>)
 80006c2:	6013      	str	r3, [r2, #0]
	if (qdata_key == NULL) {
		/* Queue was not created and must not be used. */
	}

	vTaskStartScheduler();
 80006c4:	f003 f882 	bl	80037cc <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006c8:	e7fe      	b.n	80006c8 <main+0xb0>
 80006ca:	bf00      	nop
 80006cc:	e0001000 	.word	0xe0001000
 80006d0:	0007a120 	.word	0x0007a120
 80006d4:	20017474 	.word	0x20017474
 80006d8:	08008734 	.word	0x08008734
 80006dc:	08008748 	.word	0x08008748
 80006e0:	08000985 	.word	0x08000985
 80006e4:	20017470 	.word	0x20017470
 80006e8:	08008750 	.word	0x08008750
 80006ec:	08008764 	.word	0x08008764
 80006f0:	08000aad 	.word	0x08000aad
 80006f4:	2001746c 	.word	0x2001746c

080006f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f007 fbcc 	bl	8007ea4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <SystemClock_Config+0xcc>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SystemClock_Config+0xd0>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 200;
 800076c:	23c8      	movs	r3, #200	; 0xc8
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000770:	2304      	movs	r3, #4
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fe61 	bl	8001444 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x94>
		Error_Handler();
 8000788:	f000 f9d0 	bl	8000b2c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2103      	movs	r1, #3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 f8c2 	bl	8001934 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xc2>
		Error_Handler();
 80007b6:	f000 f9b9 	bl	8000b2c <Error_Handler>
	}
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	; 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_SPI1_Init+0x68>)
 80007d2:	4a19      	ldr	r2, [pc, #100]	; (8000838 <MX_SPI1_Init+0x6c>)
 80007d4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_SPI1_Init+0x68>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_SPI1_Init+0x68>)
 80007e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007e4:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_SPI1_Init+0x68>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_SPI1_Init+0x68>)
 80007ee:	2202      	movs	r2, #2
 80007f0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_SPI1_Init+0x68>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_SPI1_Init+0x68>)
 80007fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fe:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_SPI1_Init+0x68>)
 8000802:	2230      	movs	r2, #48	; 0x30
 8000804:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_SPI1_Init+0x68>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_SPI1_Init+0x68>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_SPI1_Init+0x68>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_SPI1_Init+0x68>)
 800081a:	220a      	movs	r2, #10
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_SPI1_Init+0x68>)
 8000820:	f001 faa2 	bl	8001d68 <HAL_SPI_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_SPI1_Init+0x62>
		Error_Handler();
 800082a:	f000 f97f 	bl	8000b2c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20017478 	.word	0x20017478
 8000838:	40013000 	.word	0x40013000

0800083c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b48      	ldr	r3, [pc, #288]	; (8000978 <MX_GPIO_Init+0x13c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a47      	ldr	r2, [pc, #284]	; (8000978 <MX_GPIO_Init+0x13c>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b45      	ldr	r3, [pc, #276]	; (8000978 <MX_GPIO_Init+0x13c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b41      	ldr	r3, [pc, #260]	; (8000978 <MX_GPIO_Init+0x13c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a40      	ldr	r2, [pc, #256]	; (8000978 <MX_GPIO_Init+0x13c>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b3e      	ldr	r3, [pc, #248]	; (8000978 <MX_GPIO_Init+0x13c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <MX_GPIO_Init+0x13c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a39      	ldr	r2, [pc, #228]	; (8000978 <MX_GPIO_Init+0x13c>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <MX_GPIO_Init+0x13c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b33      	ldr	r3, [pc, #204]	; (8000978 <MX_GPIO_Init+0x13c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a32      	ldr	r2, [pc, #200]	; (8000978 <MX_GPIO_Init+0x13c>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b30      	ldr	r3, [pc, #192]	; (8000978 <MX_GPIO_Init+0x13c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	2110      	movs	r1, #16
 80008c6:	482d      	ldr	r0, [pc, #180]	; (800097c <MX_GPIO_Init+0x140>)
 80008c8:	f000 fd7e 	bl	80013c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80008cc:	2200      	movs	r2, #0
 80008ce:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 80008d2:	482b      	ldr	r0, [pc, #172]	; (8000980 <MX_GPIO_Init+0x144>)
 80008d4:	f000 fd78 	bl	80013c8 <HAL_GPIO_WritePin>
			LD3_Pin | LD4_Pin | LD5_Pin | LD6_Pin | ROW_0_Pin | ROW_1_Pin
					| ROW_2_Pin | ROW_3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : BTN_Pin */
	GPIO_InitStruct.Pin = BTN_Pin;
 80008d8:	2301      	movs	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4823      	ldr	r0, [pc, #140]	; (800097c <MX_GPIO_Init+0x140>)
 80008ee:	f000 fbcf 	bl	8001090 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_NSS_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80008f2:	2310      	movs	r3, #16
 80008f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	481c      	ldr	r0, [pc, #112]	; (800097c <MX_GPIO_Init+0x140>)
 800090a:	f000 fbc1 	bl	8001090 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin | LD5_Pin | LD6_Pin;
 800090e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000912:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4816      	ldr	r0, [pc, #88]	; (8000980 <MX_GPIO_Init+0x144>)
 8000928:	f000 fbb2 	bl	8001090 <HAL_GPIO_Init>

	/*Configure GPIO pins : COL_0_Pin COL_1_Pin COL_2_Pin COL_3_Pin */
	GPIO_InitStruct.Pin = COL_0_Pin | COL_1_Pin | COL_2_Pin | COL_3_Pin;
 800092c:	230f      	movs	r3, #15
 800092e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <MX_GPIO_Init+0x144>)
 8000940:	f000 fba6 	bl	8001090 <HAL_GPIO_Init>

	/*Configure GPIO pins : ROW_0_Pin ROW_1_Pin ROW_2_Pin ROW_3_Pin */
	GPIO_InitStruct.Pin = ROW_0_Pin | ROW_1_Pin | ROW_2_Pin | ROW_3_Pin;
 8000944:	23f0      	movs	r3, #240	; 0xf0
 8000946:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800094c:	2302      	movs	r3, #2
 800094e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <MX_GPIO_Init+0x144>)
 800095c:	f000 fb98 	bl	8001090 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2107      	movs	r1, #7
 8000964:	2006      	movs	r0, #6
 8000966:	f000 fb69 	bl	800103c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800096a:	2006      	movs	r0, #6
 800096c:	f000 fb82 	bl	8001074 <HAL_NVIC_EnableIRQ>

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000
 8000980:	40020c00 	.word	0x40020c00

08000984 <handle_tm1638>:

/* USER CODE BEGIN 4 */
void handle_tm1638(void *parameters) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b09c      	sub	sp, #112	; 0x70
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	char data_receive;
	char data_temp;
	char msg[100];
	while (1) {
		snprintf(msg, 100, "%s\n", (char*) parameters);
 800098c:	f107 0008 	add.w	r0, r7, #8
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a3f      	ldr	r2, [pc, #252]	; (8000a90 <handle_tm1638+0x10c>)
 8000994:	2164      	movs	r1, #100	; 0x64
 8000996:	f007 fa8d 	bl	8007eb4 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4618      	mov	r0, r3
 80009a0:	f006 fc96 	bl	80072d0 <SEGGER_SYSVIEW_PrintfTarget>
		if (qdata_key != NULL) {
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <handle_tm1638+0x110>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d041      	beq.n	8000a30 <handle_tm1638+0xac>
			if (xQueueReceive(qdata_key, &data_receive,
 80009ac:	4b39      	ldr	r3, [pc, #228]	; (8000a94 <handle_tm1638+0x110>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 80009b4:	2264      	movs	r2, #100	; 0x64
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 f998 	bl	8002cec <xQueueReceive>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d136      	bne.n	8000a30 <handle_tm1638+0xac>
					(TickType_t) 100) == pdPASS) {

				if (data_receive == 'A' || data_receive == 'B') {
 80009c2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80009c6:	2b41      	cmp	r3, #65	; 0x41
 80009c8:	d003      	beq.n	80009d2 <handle_tm1638+0x4e>
 80009ca:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80009ce:	2b42      	cmp	r3, #66	; 0x42
 80009d0:	d12e      	bne.n	8000a30 <handle_tm1638+0xac>
					data_temp = data_receive;
 80009d2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80009d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					data_receive = 'x';
 80009da:	2378      	movs	r3, #120	; 0x78
 80009dc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
					tm1638_reset();
 80009e0:	f006 fefc 	bl	80077dc <tm1638_reset>
					if (data_temp == 'A') {
 80009e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80009e8:	2b41      	cmp	r3, #65	; 0x41
 80009ea:	d110      	bne.n	8000a0e <handle_tm1638+0x8a>
						state0 = 0;
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <handle_tm1638+0x114>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
						var_time_down = 0;
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <handle_tm1638+0x118>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
						tm1638_toggle_led(address_led[0]);
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <handle_tm1638+0x11c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f006 ffd7 	bl	80079b0 <tm1638_toggle_led>
						var_time_down = keypad_enter();
 8000a02:	f006 fd55 	bl	80074b0 <keypad_enter>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a24      	ldr	r2, [pc, #144]	; (8000a9c <handle_tm1638+0x118>)
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e010      	b.n	8000a30 <handle_tm1638+0xac>

					} else if (data_temp == 'B') {
 8000a0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a12:	2b42      	cmp	r3, #66	; 0x42
 8000a14:	d10c      	bne.n	8000a30 <handle_tm1638+0xac>
						var_time_up = 0;
 8000a16:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <handle_tm1638+0x120>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
						tm1638_toggle_led(address_led[1]);
 8000a1c:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <handle_tm1638+0x11c>)
 8000a1e:	785b      	ldrb	r3, [r3, #1]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f006 ffc5 	bl	80079b0 <tm1638_toggle_led>
						var_time_up = keypad_enter();
 8000a26:	f006 fd43 	bl	80074b0 <keypad_enter>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <handle_tm1638+0x120>)
 8000a2e:	6013      	str	r3, [r2, #0]

				}
			}
		}

		if (data_temp == 'A') {
 8000a30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a34:	2b41      	cmp	r3, #65	; 0x41
 8000a36:	d112      	bne.n	8000a5e <handle_tm1638+0xda>
			tm1638_cnt_down_non_bl(var_time_down);
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <handle_tm1638+0x118>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f006 ffd7 	bl	80079f0 <tm1638_cnt_down_non_bl>
			if (var_time_down > 0)
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <handle_tm1638+0x118>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d005      	beq.n	8000a56 <handle_tm1638+0xd2>
				var_time_down--;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <handle_tm1638+0x118>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <handle_tm1638+0x118>)
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	e79a      	b.n	800098c <handle_tm1638+0x8>
			else {
				data_temp = 'x';
 8000a56:	2378      	movs	r3, #120	; 0x78
 8000a58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000a5c:	e796      	b.n	800098c <handle_tm1638+0x8>
			}
		} else if (data_temp == 'B') {
 8000a5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a62:	2b42      	cmp	r3, #66	; 0x42
 8000a64:	d192      	bne.n	800098c <handle_tm1638+0x8>
			tm1638_cnt_up_non_bl(var_time_up);
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <handle_tm1638+0x120>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f007 f8b8 	bl	8007be0 <tm1638_cnt_up_non_bl>
			if (var_time_up < 100000000)
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <handle_tm1638+0x120>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <handle_tm1638+0x124>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d805      	bhi.n	8000a86 <handle_tm1638+0x102>
				var_time_up++;
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <handle_tm1638+0x120>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <handle_tm1638+0x120>)
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	e782      	b.n	800098c <handle_tm1638+0x8>
			else
				data_temp = 'x';
 8000a86:	2378      	movs	r3, #120	; 0x78
 8000a88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000a8c:	e77e      	b.n	800098c <handle_tm1638+0x8>
 8000a8e:	bf00      	nop
 8000a90:	08008770 	.word	0x08008770
 8000a94:	2001746c 	.word	0x2001746c
 8000a98:	200000d4 	.word	0x200000d4
 8000a9c:	200000cc 	.word	0x200000cc
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	200000d0 	.word	0x200000d0
 8000aa8:	05f5e0ff 	.word	0x05f5e0ff

08000aac <handle_keypad>:
		}
	}
}
void handle_keypad(void *parameters) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	char data_trans;
	while (1) {
		data_trans = keypad_read();
 8000ab4:	f006 fcaa 	bl	800740c <keypad_read>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	73fb      	strb	r3, [r7, #15]
		if (data_trans == 'C') {
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	2b43      	cmp	r3, #67	; 0x43
 8000ac0:	d105      	bne.n	8000ace <handle_keypad+0x22>
			vTaskSuspend(tm1638);
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <handle_keypad+0x54>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 fd36 	bl	8003538 <vTaskSuspend>
 8000acc:	e007      	b.n	8000ade <handle_keypad+0x32>
		} else if (data_trans == 'D') {
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	2b44      	cmp	r3, #68	; 0x44
 8000ad2:	d104      	bne.n	8000ade <handle_keypad+0x32>
			vTaskResume(tm1638);
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <handle_keypad+0x54>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 fe0d 	bl	80036f8 <vTaskResume>
		}
		if (data_trans != 'x') {
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	2b78      	cmp	r3, #120	; 0x78
 8000ae2:	d008      	beq.n	8000af6 <handle_keypad+0x4a>
			xQueueSend(qdata_key, (void* )&data_trans, portMAX_DELAY);
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <handle_keypad+0x58>)
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	f107 010f 	add.w	r1, r7, #15
 8000aec:	2300      	movs	r3, #0
 8000aee:	f04f 32ff 	mov.w	r2, #4294967295
 8000af2:	f001 ffed 	bl	8002ad0 <xQueueGenericSend>

		}
		vTaskDelay(pdMS_TO_TICKS(50));
 8000af6:	2032      	movs	r0, #50	; 0x32
 8000af8:	f002 fce6 	bl	80034c8 <vTaskDelay>
		data_trans = keypad_read();
 8000afc:	e7da      	b.n	8000ab4 <handle_keypad+0x8>
 8000afe:	bf00      	nop
 8000b00:	20017474 	.word	0x20017474
 8000b04:	2001746c 	.word	0x2001746c

08000b08 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d101      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b1a:	f000 f993 	bl	8000e44 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40000c00 	.word	0x40000c00

08000b2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b76:	f003 fc67 	bl	8004448 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <HAL_SPI_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12b      	bne.n	8000c02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000be2:	23a0      	movs	r3, #160	; 0xa0
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <HAL_SPI_MspInit+0x8c>)
 8000bfe:	f000 fa47 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40013000 	.word	0x40013000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000

08000c18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	; 0x30
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	2032      	movs	r0, #50	; 0x32
 8000c2e:	f000 fa05 	bl	800103c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c32:	2032      	movs	r0, #50	; 0x32
 8000c34:	f000 fa1e 	bl	8001074 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <HAL_InitTick+0xa4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <HAL_InitTick+0xa4>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <HAL_InitTick+0xa4>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c54:	f107 0210 	add.w	r2, r7, #16
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 f850 	bl	8001d04 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c64:	f001 f83a 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <HAL_InitTick+0xa8>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	0c9b      	lsrs	r3, r3, #18
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_InitTick+0xac>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <HAL_InitTick+0xb0>)
 8000c80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_InitTick+0xac>)
 8000c84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c88:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <HAL_InitTick+0xac>)
 8000c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <HAL_InitTick+0xac>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_InitTick+0xac>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <HAL_InitTick+0xac>)
 8000c9e:	f001 faf3 	bl	8002288 <HAL_TIM_Base_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d104      	bne.n	8000cb2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000ca8:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <HAL_InitTick+0xac>)
 8000caa:	f001 fb47 	bl	800233c <HAL_TIM_Base_Start_IT>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3730      	adds	r7, #48	; 0x30
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	431bde83 	.word	0x431bde83
 8000cc4:	200174d0 	.word	0x200174d0
 8000cc8:	40000c00 	.word	0x40000c00

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
//	btn_user();

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f000 fb7d 	bl	80013fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <TIM5_IRQHandler+0x10>)
 8000d0e:	f001 fb77 	bl	8002400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200174d0 	.word	0x200174d0

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f007 f864 	bl	8007e18 <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20020000 	.word	0x20020000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	200000d8 	.word	0x200000d8
 8000d84:	200175d8 	.word	0x200175d8

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db2:	490e      	ldr	r1, [pc, #56]	; (8000dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc8:	4c0b      	ldr	r4, [pc, #44]	; (8000df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dd6:	f7ff ffd7 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f007 f823 	bl	8007e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fc1b 	bl	8000618 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000df0:	080088bc 	.word	0x080088bc
  ldr r2, =_sbss
 8000df4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000df8:	200175d4 	.word	0x200175d4

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f8fc 	bl	8001026 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	200f      	movs	r0, #15
 8000e30:	f7ff fef2 	bl	8000c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fe80 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x24>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_IncTick+0x24>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000018 	.word	0x20000018
 8000e68:	20017518 	.word	0x20017518

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20017518 	.word	0x20017518

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff ffee 	bl	8000e6c <HAL_GetTick>
 8000e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_Delay+0x44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eaa:	bf00      	nop
 8000eac:	f7ff ffde 	bl	8000e6c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000018 	.word	0x20000018

08000ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ff4c 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104e:	f7ff ff61 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001052:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	68b9      	ldr	r1, [r7, #8]
 8001058:	6978      	ldr	r0, [r7, #20]
 800105a:	f7ff ffb1 	bl	8000fc0 <NVIC_EncodePriority>
 800105e:	4602      	mov	r2, r0
 8001060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff80 	bl	8000f6c <__NVIC_SetPriority>
}
 800106c:	bf00      	nop
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff54 	bl	8000f30 <__NVIC_EnableIRQ>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e159      	b.n	8001360 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f040 8148 	bne.w	800135a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d005      	beq.n	80010e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d130      	bne.n	8001144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 0201 	and.w	r2, r3, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b03      	cmp	r3, #3
 800114e:	d017      	beq.n	8001180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d123      	bne.n	80011d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	69b9      	ldr	r1, [r7, #24]
 80011d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0203 	and.w	r2, r3, #3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80a2 	beq.w	800135a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b57      	ldr	r3, [pc, #348]	; (8001378 <HAL_GPIO_Init+0x2e8>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a56      	ldr	r2, [pc, #344]	; (8001378 <HAL_GPIO_Init+0x2e8>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b54      	ldr	r3, [pc, #336]	; (8001378 <HAL_GPIO_Init+0x2e8>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001232:	4a52      	ldr	r2, [pc, #328]	; (800137c <HAL_GPIO_Init+0x2ec>)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a49      	ldr	r2, [pc, #292]	; (8001380 <HAL_GPIO_Init+0x2f0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x202>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a48      	ldr	r2, [pc, #288]	; (8001384 <HAL_GPIO_Init+0x2f4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x1fe>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a47      	ldr	r2, [pc, #284]	; (8001388 <HAL_GPIO_Init+0x2f8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x1fa>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a46      	ldr	r2, [pc, #280]	; (800138c <HAL_GPIO_Init+0x2fc>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x1f6>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a45      	ldr	r2, [pc, #276]	; (8001390 <HAL_GPIO_Init+0x300>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x1f2>
 800127e:	2304      	movs	r3, #4
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001282:	2307      	movs	r3, #7
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x204>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x204>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x204>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	; (800137c <HAL_GPIO_Init+0x2ec>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b2:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_GPIO_Init+0x304>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d6:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x304>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <HAL_GPIO_Init+0x304>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132a:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <HAL_GPIO_Init+0x304>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001354:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f aea2 	bls.w	80010ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	887b      	ldrh	r3, [r7, #2]
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e001      	b.n	80013ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f806 	bl	800142c <HAL_GPIO_EXTI_Callback>
  }
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40013c00 	.word	0x40013c00

0800142c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e264      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d075      	beq.n	800154e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001462:	4ba3      	ldr	r3, [pc, #652]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b04      	cmp	r3, #4
 800146c:	d00c      	beq.n	8001488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146e:	4ba0      	ldr	r3, [pc, #640]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001476:	2b08      	cmp	r3, #8
 8001478:	d112      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147a:	4b9d      	ldr	r3, [pc, #628]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001486:	d10b      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	4b99      	ldr	r3, [pc, #612]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d05b      	beq.n	800154c <HAL_RCC_OscConfig+0x108>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d157      	bne.n	800154c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e23f      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d106      	bne.n	80014b8 <HAL_RCC_OscConfig+0x74>
 80014aa:	4b91      	ldr	r3, [pc, #580]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a90      	ldr	r2, [pc, #576]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e01d      	b.n	80014f4 <HAL_RCC_OscConfig+0xb0>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x98>
 80014c2:	4b8b      	ldr	r3, [pc, #556]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a8a      	ldr	r2, [pc, #552]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a87      	ldr	r2, [pc, #540]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0xb0>
 80014dc:	4b84      	ldr	r3, [pc, #528]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a83      	ldr	r2, [pc, #524]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b81      	ldr	r3, [pc, #516]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a80      	ldr	r2, [pc, #512]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d013      	beq.n	8001524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fcb6 	bl	8000e6c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fcb2 	bl	8000e6c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e204      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	4b76      	ldr	r3, [pc, #472]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0xc0>
 8001522:	e014      	b.n	800154e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fca2 	bl	8000e6c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff fc9e 	bl	8000e6c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b64      	cmp	r3, #100	; 0x64
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e1f0      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153e:	4b6c      	ldr	r3, [pc, #432]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0xe8>
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d063      	beq.n	8001622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155a:	4b65      	ldr	r3, [pc, #404]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00b      	beq.n	800157e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001566:	4b62      	ldr	r3, [pc, #392]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156e:	2b08      	cmp	r3, #8
 8001570:	d11c      	bne.n	80015ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001572:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d116      	bne.n	80015ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	4b5c      	ldr	r3, [pc, #368]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <HAL_RCC_OscConfig+0x152>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e1c4      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001596:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4952      	ldr	r1, [pc, #328]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	e03a      	b.n	8001622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d020      	beq.n	80015f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b4:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <HAL_RCC_OscConfig+0x2b0>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff fc57 	bl	8000e6c <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c2:	f7ff fc53 	bl	8000e6c <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e1a5      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d4:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4940      	ldr	r1, [pc, #256]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
 80015f4:	e015      	b.n	8001622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_RCC_OscConfig+0x2b0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fc36 	bl	8000e6c <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001604:	f7ff fc32 	bl	8000e6c <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e184      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001616:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d030      	beq.n	8001690 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d016      	beq.n	8001664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <HAL_RCC_OscConfig+0x2b4>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fc16 	bl	8000e6c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fc12 	bl	8000e6c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e164      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x200>
 8001662:	e015      	b.n	8001690 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <HAL_RCC_OscConfig+0x2b4>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fbff 	bl	8000e6c <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001672:	f7ff fbfb 	bl	8000e6c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e14d      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 8001686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80a0 	beq.w	80017de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10f      	bne.n	80016ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ca:	2301      	movs	r3, #1
 80016cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_RCC_OscConfig+0x2b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d121      	bne.n	800171e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_RCC_OscConfig+0x2b8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_RCC_OscConfig+0x2b8>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fbc1 	bl	8000e6c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	e011      	b.n	8001712 <HAL_RCC_OscConfig+0x2ce>
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	42470000 	.word	0x42470000
 80016f8:	42470e80 	.word	0x42470e80
 80016fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001700:	f7ff fbb4 	bl	8000e6c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e106      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	4b85      	ldr	r3, [pc, #532]	; (8001928 <HAL_RCC_OscConfig+0x4e4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d106      	bne.n	8001734 <HAL_RCC_OscConfig+0x2f0>
 8001726:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a80      	ldr	r2, [pc, #512]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
 8001732:	e01c      	b.n	800176e <HAL_RCC_OscConfig+0x32a>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b05      	cmp	r3, #5
 800173a:	d10c      	bne.n	8001756 <HAL_RCC_OscConfig+0x312>
 800173c:	4b7b      	ldr	r3, [pc, #492]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001740:	4a7a      	ldr	r2, [pc, #488]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6713      	str	r3, [r2, #112]	; 0x70
 8001748:	4b78      	ldr	r3, [pc, #480]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	4a77      	ldr	r2, [pc, #476]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6713      	str	r3, [r2, #112]	; 0x70
 8001754:	e00b      	b.n	800176e <HAL_RCC_OscConfig+0x32a>
 8001756:	4b75      	ldr	r3, [pc, #468]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	4a74      	ldr	r2, [pc, #464]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6713      	str	r3, [r2, #112]	; 0x70
 8001762:	4b72      	ldr	r3, [pc, #456]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001766:	4a71      	ldr	r2, [pc, #452]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d015      	beq.n	80017a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001776:	f7ff fb79 	bl	8000e6c <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7ff fb75 	bl	8000e6c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f241 3288 	movw	r2, #5000	; 0x1388
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0c5      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001794:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ee      	beq.n	800177e <HAL_RCC_OscConfig+0x33a>
 80017a0:	e014      	b.n	80017cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff fb63 	bl	8000e6c <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7ff fb5f 	bl	8000e6c <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0af      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c0:	4b5a      	ldr	r3, [pc, #360]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1ee      	bne.n	80017aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d105      	bne.n	80017de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d2:	4b56      	ldr	r3, [pc, #344]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a55      	ldr	r2, [pc, #340]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 80017d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 809b 	beq.w	800191e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e8:	4b50      	ldr	r3, [pc, #320]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d05c      	beq.n	80018ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d141      	bne.n	8001880 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fc:	4b4c      	ldr	r3, [pc, #304]	; (8001930 <HAL_RCC_OscConfig+0x4ec>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff fb33 	bl	8000e6c <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff fb2f 	bl	8000e6c <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e081      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f0      	bne.n	800180a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69da      	ldr	r2, [r3, #28]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	019b      	lsls	r3, r3, #6
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	085b      	lsrs	r3, r3, #1
 8001840:	3b01      	subs	r3, #1
 8001842:	041b      	lsls	r3, r3, #16
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	061b      	lsls	r3, r3, #24
 800184c:	4937      	ldr	r1, [pc, #220]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_RCC_OscConfig+0x4ec>)
 8001854:	2201      	movs	r2, #1
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fb08 	bl	8000e6c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fb04 	bl	8000e6c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e056      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x41c>
 800187e:	e04e      	b.n	800191e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_OscConfig+0x4ec>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff faf1 	bl	8000e6c <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff faed 	bl	8000e6c <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e03f      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x44a>
 80018ac:	e037      	b.n	800191e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e032      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_RCC_OscConfig+0x4e8>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d028      	beq.n	800191a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d121      	bne.n	800191a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d11a      	bne.n	800191a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018ea:	4013      	ands	r3, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d111      	bne.n	800191a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	3b01      	subs	r3, #1
 8001904:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d107      	bne.n	800191a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40007000 	.word	0x40007000
 800192c:	40023800 	.word	0x40023800
 8001930:	42470060 	.word	0x42470060

08001934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0cc      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001948:	4b68      	ldr	r3, [pc, #416]	; (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d90c      	bls.n	8001970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b65      	ldr	r3, [pc, #404]	; (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0b8      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001988:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a58      	ldr	r2, [pc, #352]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a0:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	494d      	ldr	r1, [pc, #308]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d044      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d119      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e07f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d003      	beq.n	80019f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e06f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e067      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a12:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f023 0203 	bic.w	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4934      	ldr	r1, [pc, #208]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a24:	f7ff fa22 	bl	8000e6c <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2c:	f7ff fa1e 	bl	8000e6c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e04f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 020c 	and.w	r2, r3, #12
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1eb      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d20c      	bcs.n	8001a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e032      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4916      	ldr	r1, [pc, #88]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	490e      	ldr	r1, [pc, #56]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aba:	f000 f821 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	490a      	ldr	r1, [pc, #40]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	5ccb      	ldrb	r3, [r1, r3]
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_RCC_ClockConfig+0x1c8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f89c 	bl	8000c18 <HAL_InitTick>

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00
 8001af0:	40023800 	.word	0x40023800
 8001af4:	08008838 	.word	0x08008838
 8001af8:	20000010 	.word	0x20000010
 8001afc:	20000014 	.word	0x20000014

08001b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	2300      	movs	r3, #0
 8001b12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b18:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d00d      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x40>
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	f200 80bd 	bhi.w	8001ca4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x34>
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b32:	e0b7      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b36:	60bb      	str	r3, [r7, #8]
       break;
 8001b38:	e0b7      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b3a:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b3c:	60bb      	str	r3, [r7, #8]
      break;
 8001b3e:	e0b4      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b40:	4b5d      	ldr	r3, [pc, #372]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d04d      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b56:	4b58      	ldr	r3, [pc, #352]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	099b      	lsrs	r3, r3, #6
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	ea02 0800 	and.w	r8, r2, r0
 8001b6e:	ea03 0901 	and.w	r9, r3, r1
 8001b72:	4640      	mov	r0, r8
 8001b74:	4649      	mov	r1, r9
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	014b      	lsls	r3, r1, #5
 8001b80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b84:	0142      	lsls	r2, r0, #5
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	ebb0 0008 	subs.w	r0, r0, r8
 8001b8e:	eb61 0109 	sbc.w	r1, r1, r9
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	018b      	lsls	r3, r1, #6
 8001b9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ba0:	0182      	lsls	r2, r0, #6
 8001ba2:	1a12      	subs	r2, r2, r0
 8001ba4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ba8:	f04f 0000 	mov.w	r0, #0
 8001bac:	f04f 0100 	mov.w	r1, #0
 8001bb0:	00d9      	lsls	r1, r3, #3
 8001bb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bb6:	00d0      	lsls	r0, r2, #3
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	eb12 0208 	adds.w	r2, r2, r8
 8001bc0:	eb43 0309 	adc.w	r3, r3, r9
 8001bc4:	f04f 0000 	mov.w	r0, #0
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	0259      	lsls	r1, r3, #9
 8001bce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bd2:	0250      	lsls	r0, r2, #9
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	f7fe fb9c 	bl	8000320 <__aeabi_uldivmod>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4613      	mov	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e04a      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	099b      	lsrs	r3, r3, #6
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c02:	f04f 0100 	mov.w	r1, #0
 8001c06:	ea02 0400 	and.w	r4, r2, r0
 8001c0a:	ea03 0501 	and.w	r5, r3, r1
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	014b      	lsls	r3, r1, #5
 8001c1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c20:	0142      	lsls	r2, r0, #5
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	1b00      	subs	r0, r0, r4
 8001c28:	eb61 0105 	sbc.w	r1, r1, r5
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	018b      	lsls	r3, r1, #6
 8001c36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c3a:	0182      	lsls	r2, r0, #6
 8001c3c:	1a12      	subs	r2, r2, r0
 8001c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c42:	f04f 0000 	mov.w	r0, #0
 8001c46:	f04f 0100 	mov.w	r1, #0
 8001c4a:	00d9      	lsls	r1, r3, #3
 8001c4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c50:	00d0      	lsls	r0, r2, #3
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	1912      	adds	r2, r2, r4
 8001c58:	eb45 0303 	adc.w	r3, r5, r3
 8001c5c:	f04f 0000 	mov.w	r0, #0
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	0299      	lsls	r1, r3, #10
 8001c66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c6a:	0290      	lsls	r0, r2, #10
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	461a      	mov	r2, r3
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	f7fe fb50 	bl	8000320 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	0c1b      	lsrs	r3, r3, #16
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	3301      	adds	r3, #1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	60bb      	str	r3, [r7, #8]
      break;
 8001ca2:	e002      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ca6:	60bb      	str	r3, [r7, #8]
      break;
 8001ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001caa:	68bb      	ldr	r3, [r7, #8]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	00f42400 	.word	0x00f42400
 8001cc0:	007a1200 	.word	0x007a1200

08001cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000010 	.word	0x20000010

08001cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ce0:	f7ff fff0 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	0a9b      	lsrs	r3, r3, #10
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4903      	ldr	r1, [pc, #12]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	08008848 	.word	0x08008848

08001d04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	220f      	movs	r2, #15
 8001d12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_GetClockConfig+0x5c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0203 	and.w	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <HAL_RCC_GetClockConfig+0x5c>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_GetClockConfig+0x5c>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	08db      	lsrs	r3, r3, #3
 8001d3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <HAL_RCC_GetClockConfig+0x60>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0207 	and.w	r2, r3, #7
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	601a      	str	r2, [r3, #0]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40023c00 	.word	0x40023c00

08001d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e07b      	b.n	8001e72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d108      	bne.n	8001d94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d8a:	d009      	beq.n	8001da0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
 8001d92:	e005      	b.n	8001da0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fee4 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e24:	ea42 0103 	orr.w	r1, r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	f003 0104 	and.w	r1, r3, #4
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	f003 0210 	and.w	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b088      	sub	sp, #32
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4613      	mov	r3, r2
 8001e88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_SPI_Transmit+0x22>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e126      	b.n	80020ea <HAL_SPI_Transmit+0x270>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ea4:	f7fe ffe2 	bl	8000e6c <HAL_GetTick>
 8001ea8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d002      	beq.n	8001ec0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ebe:	e10b      	b.n	80020d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <HAL_SPI_Transmit+0x52>
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ed0:	e102      	b.n	80020d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	88fa      	ldrh	r2, [r7, #6]
 8001eea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f18:	d10f      	bne.n	8001f3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b40      	cmp	r3, #64	; 0x40
 8001f46:	d007      	beq.n	8001f58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f60:	d14b      	bne.n	8001ffa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <HAL_SPI_Transmit+0xf6>
 8001f6a:	8afb      	ldrh	r3, [r7, #22]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d13e      	bne.n	8001fee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	881a      	ldrh	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	1c9a      	adds	r2, r3, #2
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f94:	e02b      	b.n	8001fee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d112      	bne.n	8001fca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	881a      	ldrh	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	1c9a      	adds	r2, r3, #2
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fc8:	e011      	b.n	8001fee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fca:	f7fe ff4f 	bl	8000e6c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d803      	bhi.n	8001fe2 <HAL_SPI_Transmit+0x168>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d102      	bne.n	8001fe8 <HAL_SPI_Transmit+0x16e>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fec:	e074      	b.n	80020d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ce      	bne.n	8001f96 <HAL_SPI_Transmit+0x11c>
 8001ff8:	e04c      	b.n	8002094 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_SPI_Transmit+0x18e>
 8002002:	8afb      	ldrh	r3, [r7, #22]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d140      	bne.n	800208a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	330c      	adds	r3, #12
 8002012:	7812      	ldrb	r2, [r2, #0]
 8002014:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800202e:	e02c      	b.n	800208a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b02      	cmp	r3, #2
 800203c:	d113      	bne.n	8002066 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	330c      	adds	r3, #12
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	86da      	strh	r2, [r3, #54]	; 0x36
 8002064:	e011      	b.n	800208a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002066:	f7fe ff01 	bl	8000e6c <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d803      	bhi.n	800207e <HAL_SPI_Transmit+0x204>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d102      	bne.n	8002084 <HAL_SPI_Transmit+0x20a>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002088:	e026      	b.n	80020d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1cd      	bne.n	8002030 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	6839      	ldr	r1, [r7, #0]
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 f8b3 	bl	8002204 <SPI_EndRxTxTransaction>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10a      	bne.n	80020c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	77fb      	strb	r3, [r7, #31]
 80020d4:	e000      	b.n	80020d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80020d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002104:	f7fe feb2 	bl	8000e6c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4413      	add	r3, r2
 8002112:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002114:	f7fe feaa 	bl	8000e6c <HAL_GetTick>
 8002118:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800211a:	4b39      	ldr	r3, [pc, #228]	; (8002200 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	015b      	lsls	r3, r3, #5
 8002120:	0d1b      	lsrs	r3, r3, #20
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	fb02 f303 	mul.w	r3, r2, r3
 8002128:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800212a:	e054      	b.n	80021d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002132:	d050      	beq.n	80021d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002134:	f7fe fe9a 	bl	8000e6c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	429a      	cmp	r2, r3
 8002142:	d902      	bls.n	800214a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d13d      	bne.n	80021c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002162:	d111      	bne.n	8002188 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800216c:	d004      	beq.n	8002178 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002176:	d107      	bne.n	8002188 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002186:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002190:	d10f      	bne.n	80021b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e017      	b.n	80021f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4013      	ands	r3, r2
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d19b      	bne.n	800212c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000010 	.word	0x20000010

08002204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <SPI_EndRxTxTransaction+0x7c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <SPI_EndRxTxTransaction+0x80>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0d5b      	lsrs	r3, r3, #21
 800221c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800222e:	d112      	bne.n	8002256 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2200      	movs	r2, #0
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7ff ff5a 	bl	80020f4 <SPI_WaitFlagStateUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d016      	beq.n	8002274 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f043 0220 	orr.w	r2, r3, #32
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e00f      	b.n	8002276 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3b01      	subs	r3, #1
 8002260:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226c:	2b80      	cmp	r3, #128	; 0x80
 800226e:	d0f2      	beq.n	8002256 <SPI_EndRxTxTransaction+0x52>
 8002270:	e000      	b.n	8002274 <SPI_EndRxTxTransaction+0x70>
        break;
 8002272:	bf00      	nop
  }

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000010 	.word	0x20000010
 8002284:	165e9f81 	.word	0x165e9f81

08002288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e041      	b.n	800231e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f839 	bl	8002326 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3304      	adds	r3, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4610      	mov	r0, r2
 80022c8:	f000 f9ca 	bl	8002660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d001      	beq.n	8002354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e044      	b.n	80023de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <HAL_TIM_Base_Start_IT+0xb0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d018      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237e:	d013      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00e      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x6c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d009      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d004      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x6c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a16      	ldr	r2, [pc, #88]	; (80023fc <HAL_TIM_Base_Start_IT+0xc0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d111      	bne.n	80023cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d010      	beq.n	80023dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ca:	e007      	b.n	80023dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40000800 	.word	0x40000800
 80023f8:	40000c00 	.word	0x40000c00
 80023fc:	40014000 	.word	0x40014000

08002400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d122      	bne.n	800245c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b02      	cmp	r3, #2
 8002422:	d11b      	bne.n	800245c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0202 	mvn.w	r2, #2
 800242c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8ee 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 8002448:	e005      	b.n	8002456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8e0 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8f1 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b04      	cmp	r3, #4
 8002468:	d122      	bne.n	80024b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b04      	cmp	r3, #4
 8002476:	d11b      	bne.n	80024b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0204 	mvn.w	r2, #4
 8002480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2202      	movs	r2, #2
 8002486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f8c4 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 800249c:	e005      	b.n	80024aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f8b6 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f8c7 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d122      	bne.n	8002504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d11b      	bne.n	8002504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0208 	mvn.w	r2, #8
 80024d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2204      	movs	r2, #4
 80024da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f89a 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f88c 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f89d 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b10      	cmp	r3, #16
 8002510:	d122      	bne.n	8002558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b10      	cmp	r3, #16
 800251e:	d11b      	bne.n	8002558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0210 	mvn.w	r2, #16
 8002528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2208      	movs	r2, #8
 800252e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f870 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 8002544:	e005      	b.n	8002552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f862 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f873 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10e      	bne.n	8002584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0201 	mvn.w	r2, #1
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe fac2 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b80      	cmp	r3, #128	; 0x80
 8002590:	d10e      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d107      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8e2 	bl	8002774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d10e      	bne.n	80025dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d107      	bne.n	80025dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f838 	bl	800264c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d10e      	bne.n	8002608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d107      	bne.n	8002608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0220 	mvn.w	r2, #32
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8ac 	bl	8002760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a34      	ldr	r2, [pc, #208]	; (8002744 <TIM_Base_SetConfig+0xe4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00f      	beq.n	8002698 <TIM_Base_SetConfig+0x38>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267e:	d00b      	beq.n	8002698 <TIM_Base_SetConfig+0x38>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a31      	ldr	r2, [pc, #196]	; (8002748 <TIM_Base_SetConfig+0xe8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d007      	beq.n	8002698 <TIM_Base_SetConfig+0x38>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a30      	ldr	r2, [pc, #192]	; (800274c <TIM_Base_SetConfig+0xec>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d003      	beq.n	8002698 <TIM_Base_SetConfig+0x38>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <TIM_Base_SetConfig+0xf0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d108      	bne.n	80026aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a25      	ldr	r2, [pc, #148]	; (8002744 <TIM_Base_SetConfig+0xe4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01b      	beq.n	80026ea <TIM_Base_SetConfig+0x8a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b8:	d017      	beq.n	80026ea <TIM_Base_SetConfig+0x8a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a22      	ldr	r2, [pc, #136]	; (8002748 <TIM_Base_SetConfig+0xe8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <TIM_Base_SetConfig+0x8a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a21      	ldr	r2, [pc, #132]	; (800274c <TIM_Base_SetConfig+0xec>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00f      	beq.n	80026ea <TIM_Base_SetConfig+0x8a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a20      	ldr	r2, [pc, #128]	; (8002750 <TIM_Base_SetConfig+0xf0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00b      	beq.n	80026ea <TIM_Base_SetConfig+0x8a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <TIM_Base_SetConfig+0xf4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <TIM_Base_SetConfig+0x8a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <TIM_Base_SetConfig+0xf8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d003      	beq.n	80026ea <TIM_Base_SetConfig+0x8a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a1d      	ldr	r2, [pc, #116]	; (800275c <TIM_Base_SetConfig+0xfc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d108      	bne.n	80026fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a08      	ldr	r2, [pc, #32]	; (8002744 <TIM_Base_SetConfig+0xe4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d103      	bne.n	8002730 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	615a      	str	r2, [r3, #20]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40010000 	.word	0x40010000
 8002748:	40000400 	.word	0x40000400
 800274c:	40000800 	.word	0x40000800
 8002750:	40000c00 	.word	0x40000c00
 8002754:	40014000 	.word	0x40014000
 8002758:	40014400 	.word	0x40014400
 800275c:	40014800 	.word	0x40014800

08002760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f103 0208 	add.w	r2, r3, #8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f103 0208 	add.w	r2, r3, #8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f103 0208 	add.w	r2, r3, #8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800282a:	b480      	push	{r7}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d103      	bne.n	800284a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e00c      	b.n	8002864 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3308      	adds	r3, #8
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	e002      	b.n	8002858 <vListInsert+0x2e>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	429a      	cmp	r2, r3
 8002862:	d2f6      	bcs.n	8002852 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	601a      	str	r2, [r3, #0]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6892      	ldr	r2, [r2, #8]
 80028b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6852      	ldr	r2, [r2, #4]
 80028bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d103      	bne.n	80028d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	1e5a      	subs	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <xQueueGenericReset+0x2a>
        __asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	60bb      	str	r3, [r7, #8]
    }
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800291a:	f001 fe13 	bl	8004544 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	68f9      	ldr	r1, [r7, #12]
 8002928:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	441a      	add	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	3b01      	subs	r3, #1
 800294c:	68f9      	ldr	r1, [r7, #12]
 800294e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	441a      	add	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	22ff      	movs	r2, #255	; 0xff
 800295e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	22ff      	movs	r2, #255	; 0xff
 8002966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d114      	bne.n	800299a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01a      	beq.n	80029ae <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3310      	adds	r3, #16
 800297c:	4618      	mov	r0, r3
 800297e:	f001 f99b 	bl	8003cb8 <xTaskRemoveFromEventList>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d012      	beq.n	80029ae <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <xQueueGenericReset+0xcc>)
 800298a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	e009      	b.n	80029ae <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3310      	adds	r3, #16
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fef2 	bl	8002788 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3324      	adds	r3, #36	; 0x24
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff feed 	bl	8002788 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80029ae:	f001 fdf9 	bl	80045a4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	e000ed04 	.word	0xe000ed04

080029c0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	4613      	mov	r3, r2
 80029cc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xQueueGenericCreate+0x2a>
        __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	61bb      	str	r3, [r7, #24]
    }
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <xQueueGenericCreate+0x48>
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d101      	bne.n	8002a0c <xQueueGenericCreate+0x4c>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <xQueueGenericCreate+0x4e>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <xQueueGenericCreate+0x68>
        __asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	617b      	str	r3, [r7, #20]
    }
 8002a24:	bf00      	nop
 8002a26:	e7fe      	b.n	8002a26 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002a2e:	d90a      	bls.n	8002a46 <xQueueGenericCreate+0x86>
        __asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	613b      	str	r3, [r7, #16]
    }
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	3350      	adds	r3, #80	; 0x50
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 fea6 	bl	800479c <pvPortMalloc>
 8002a50:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	3350      	adds	r3, #80	; 0x50
 8002a60:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a62:	79fa      	ldrb	r2, [r7, #7]
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f805 	bl	8002a7e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002a74:	6a3b      	ldr	r3, [r7, #32]
    }
 8002a76:	4618      	mov	r0, r3
 8002a78:	3728      	adds	r7, #40	; 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	e002      	b.n	8002aa0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002aac:	2101      	movs	r1, #1
 8002aae:	69b8      	ldr	r0, [r7, #24]
 8002ab0:	f7ff ff1e 	bl	80028f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	68f9      	ldr	r1, [r7, #12]
 8002ac2:	2073      	movs	r0, #115	; 0x73
 8002ac4:	f003 fd8a 	bl	80065dc <SEGGER_SYSVIEW_RecordU32x3>
}
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08e      	sub	sp, #56	; 0x38
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <xQueueGenericSend+0x32>
        __asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	623b      	str	r3, [r7, #32]
    }
 8002afe:	bf00      	nop
 8002b00:	e7fe      	b.n	8002b00 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d103      	bne.n	8002b10 <xQueueGenericSend+0x40>
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <xQueueGenericSend+0x44>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <xQueueGenericSend+0x46>
 8002b14:	2300      	movs	r3, #0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10a      	bne.n	8002b30 <xQueueGenericSend+0x60>
        __asm volatile
 8002b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	61fb      	str	r3, [r7, #28]
    }
 8002b2c:	bf00      	nop
 8002b2e:	e7fe      	b.n	8002b2e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d103      	bne.n	8002b3e <xQueueGenericSend+0x6e>
 8002b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <xQueueGenericSend+0x72>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <xQueueGenericSend+0x74>
 8002b42:	2300      	movs	r3, #0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <xQueueGenericSend+0x8e>
        __asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	61bb      	str	r3, [r7, #24]
    }
 8002b5a:	bf00      	nop
 8002b5c:	e7fe      	b.n	8002b5c <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b5e:	f001 fcf1 	bl	8004544 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d302      	bcc.n	8002b74 <xQueueGenericSend+0xa4>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d136      	bne.n	8002be2 <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	4618      	mov	r0, r3
 8002b78:	f004 fabe 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	460b      	mov	r3, r1
 8002b86:	4601      	mov	r1, r0
 8002b88:	205a      	movs	r0, #90	; 0x5a
 8002b8a:	f003 fd9d 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b94:	f000 f9a2 	bl	8002edc <prvCopyDataToQueue>
 8002b98:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d010      	beq.n	8002bc4 <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	3324      	adds	r3, #36	; 0x24
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 f886 	bl	8003cb8 <xTaskRemoveFromEventList>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d013      	beq.n	8002bda <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002bb2:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <xQueueGenericSend+0x218>)
 8002bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	e00a      	b.n	8002bda <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <xQueueGenericSend+0x218>)
 8002bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002bda:	f001 fce3 	bl	80045a4 <vPortExitCritical>
                return pdPASS;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e07d      	b.n	8002cde <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d110      	bne.n	8002c0a <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002be8:	f001 fcdc 	bl	80045a4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f004 fa82 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4601      	mov	r1, r0
 8002c00:	205a      	movs	r0, #90	; 0x5a
 8002c02:	f003 fd61 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e069      	b.n	8002cde <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d106      	bne.n	8002c1e <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c10:	f107 0310 	add.w	r3, r7, #16
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 f8b5 	bl	8003d84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c1e:	f001 fcc1 	bl	80045a4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c22:	f000 fe2f 	bl	8003884 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c26:	f001 fc8d 	bl	8004544 <vPortEnterCritical>
 8002c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c30:	b25b      	sxtb	r3, r3
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c36:	d103      	bne.n	8002c40 <xQueueGenericSend+0x170>
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d103      	bne.n	8002c56 <xQueueGenericSend+0x186>
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c56:	f001 fca5 	bl	80045a4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c5a:	1d3a      	adds	r2, r7, #4
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f8a4 	bl	8003db0 <xTaskCheckForTimeOut>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d124      	bne.n	8002cb8 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c70:	f000 fa2c 	bl	80030cc <prvIsQueueFull>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d018      	beq.n	8002cac <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	3310      	adds	r3, #16
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fff4 	bl	8003c70 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c8a:	f000 f9b7 	bl	8002ffc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002c8e:	f000 fe07 	bl	80038a0 <xTaskResumeAll>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f47f af62 	bne.w	8002b5e <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002c9a:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <xQueueGenericSend+0x218>)
 8002c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	e758      	b.n	8002b5e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cae:	f000 f9a5 	bl	8002ffc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002cb2:	f000 fdf5 	bl	80038a0 <xTaskResumeAll>
 8002cb6:	e752      	b.n	8002b5e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cba:	f000 f99f 	bl	8002ffc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002cbe:	f000 fdef 	bl	80038a0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 fa17 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4601      	mov	r1, r0
 8002cd6:	205a      	movs	r0, #90	; 0x5a
 8002cd8:	f003 fcf6 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002cdc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3730      	adds	r7, #48	; 0x30
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	e000ed04 	.word	0xe000ed04

08002cec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b08f      	sub	sp, #60	; 0x3c
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <xQueueReceive+0x30>
        __asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	623b      	str	r3, [r7, #32]
    }
 8002d18:	bf00      	nop
 8002d1a:	e7fe      	b.n	8002d1a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <xQueueReceive+0x3e>
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <xQueueReceive+0x42>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <xQueueReceive+0x44>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <xQueueReceive+0x5e>
        __asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	61fb      	str	r3, [r7, #28]
    }
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d4a:	f001 fbfb 	bl	8004544 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d02f      	beq.n	8002dba <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d5e:	f000 f927 	bl	8002fb0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	4618      	mov	r0, r3
 8002d66:	f004 f9c7 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f004 f9c3 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002d72:	4602      	mov	r2, r0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2101      	movs	r1, #1
 8002d78:	9100      	str	r1, [sp, #0]
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	205c      	movs	r0, #92	; 0x5c
 8002d7e:	f003 fca3 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	1e5a      	subs	r2, r3, #1
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00f      	beq.n	8002db2 <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	3310      	adds	r3, #16
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 ff8e 	bl	8003cb8 <xTaskRemoveFromEventList>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d007      	beq.n	8002db2 <xQueueReceive+0xc6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002da2:	4b4d      	ldr	r3, [pc, #308]	; (8002ed8 <xQueueReceive+0x1ec>)
 8002da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002db2:	f001 fbf7 	bl	80045a4 <vPortExitCritical>
                return pdPASS;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e08a      	b.n	8002ed0 <xQueueReceive+0x1e4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d113      	bne.n	8002de8 <xQueueReceive+0xfc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002dc0:	f001 fbf0 	bl	80045a4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 f996 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002dcc:	4604      	mov	r4, r0
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f004 f992 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	9100      	str	r1, [sp, #0]
 8002ddc:	4621      	mov	r1, r4
 8002dde:	205c      	movs	r0, #92	; 0x5c
 8002de0:	f003 fc72 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e073      	b.n	8002ed0 <xQueueReceive+0x1e4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <xQueueReceive+0x110>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 ffc6 	bl	8003d84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002dfc:	f001 fbd2 	bl	80045a4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e00:	f000 fd40 	bl	8003884 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e04:	f001 fb9e 	bl	8004544 <vPortEnterCritical>
 8002e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e0e:	b25b      	sxtb	r3, r3
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d103      	bne.n	8002e1e <xQueueReceive+0x132>
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e24:	b25b      	sxtb	r3, r3
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d103      	bne.n	8002e34 <xQueueReceive+0x148>
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e34:	f001 fbb6 	bl	80045a4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e38:	1d3a      	adds	r2, r7, #4
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 ffb5 	bl	8003db0 <xTaskCheckForTimeOut>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d124      	bne.n	8002e96 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e4e:	f000 f927 	bl	80030a0 <prvIsQueueEmpty>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d018      	beq.n	8002e8a <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	3324      	adds	r3, #36	; 0x24
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 ff05 	bl	8003c70 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e68:	f000 f8c8 	bl	8002ffc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002e6c:	f000 fd18 	bl	80038a0 <xTaskResumeAll>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f47f af69 	bne.w	8002d4a <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8002e78:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <xQueueReceive+0x1ec>)
 8002e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	e75f      	b.n	8002d4a <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e8c:	f000 f8b6 	bl	8002ffc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002e90:	f000 fd06 	bl	80038a0 <xTaskResumeAll>
 8002e94:	e759      	b.n	8002d4a <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e98:	f000 f8b0 	bl	8002ffc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002e9c:	f000 fd00 	bl	80038a0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea2:	f000 f8fd 	bl	80030a0 <prvIsQueueEmpty>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f43f af4e 	beq.w	8002d4a <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f004 f921 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f004 f91d 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	9100      	str	r1, [sp, #0]
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	205c      	movs	r0, #92	; 0x5c
 8002eca:	f003 fbfd 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002ece:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3734      	adds	r7, #52	; 0x34
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd90      	pop	{r4, r7, pc}
 8002ed8:	e000ed04 	.word	0xe000ed04

08002edc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10d      	bne.n	8002f16 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d14d      	bne.n	8002f9e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 f876 	bl	8003ff8 <xTaskPriorityDisinherit>
 8002f0c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	e043      	b.n	8002f9e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d119      	bne.n	8002f50 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6858      	ldr	r0, [r3, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	461a      	mov	r2, r3
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	f004 ffae 	bl	8007e88 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	441a      	add	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d32b      	bcc.n	8002f9e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e026      	b.n	8002f9e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	68d8      	ldr	r0, [r3, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	f004 ff94 	bl	8007e88 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	425b      	negs	r3, r3
 8002f6a:	441a      	add	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d207      	bcs.n	8002f8c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	425b      	negs	r3, r3
 8002f86:	441a      	add	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d105      	bne.n	8002f9e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002fa6:	697b      	ldr	r3, [r7, #20]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d018      	beq.n	8002ff4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	441a      	add	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d303      	bcc.n	8002fe4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68d9      	ldr	r1, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	461a      	mov	r2, r3
 8002fee:	6838      	ldr	r0, [r7, #0]
 8002ff0:	f004 ff4a 	bl	8007e88 <memcpy>
    }
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003004:	f001 fa9e 	bl	8004544 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800300e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003010:	e011      	b.n	8003036 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2b00      	cmp	r3, #0
 8003018:	d012      	beq.n	8003040 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3324      	adds	r3, #36	; 0x24
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fe4a 	bl	8003cb8 <xTaskRemoveFromEventList>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800302a:	f000 ff27 	bl	8003e7c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	3b01      	subs	r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303a:	2b00      	cmp	r3, #0
 800303c:	dce9      	bgt.n	8003012 <prvUnlockQueue+0x16>
 800303e:	e000      	b.n	8003042 <prvUnlockQueue+0x46>
                        break;
 8003040:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	22ff      	movs	r2, #255	; 0xff
 8003046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800304a:	f001 faab 	bl	80045a4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800304e:	f001 fa79 	bl	8004544 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003058:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800305a:	e011      	b.n	8003080 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d012      	beq.n	800308a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3310      	adds	r3, #16
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fe25 	bl	8003cb8 <xTaskRemoveFromEventList>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003074:	f000 ff02 	bl	8003e7c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003078:	7bbb      	ldrb	r3, [r7, #14]
 800307a:	3b01      	subs	r3, #1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003084:	2b00      	cmp	r3, #0
 8003086:	dce9      	bgt.n	800305c <prvUnlockQueue+0x60>
 8003088:	e000      	b.n	800308c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800308a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	22ff      	movs	r2, #255	; 0xff
 8003090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003094:	f001 fa86 	bl	80045a4 <vPortExitCritical>
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80030a8:	f001 fa4c 	bl	8004544 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e001      	b.n	80030be <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80030be:	f001 fa71 	bl	80045a4 <vPortExitCritical>

    return xReturn;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80030d4:	f001 fa36 	bl	8004544 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d102      	bne.n	80030ea <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e001      	b.n	80030ee <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80030ee:	f001 fa59 	bl	80045a4 <vPortExitCritical>

    return xReturn;
 80030f2:	68fb      	ldr	r3, [r7, #12]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08c      	sub	sp, #48	; 0x30
 8003100:	af04      	add	r7, sp, #16
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4618      	mov	r0, r3
 8003112:	f001 fb43 	bl	800479c <pvPortMalloc>
 8003116:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00e      	beq.n	800313c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800311e:	205c      	movs	r0, #92	; 0x5c
 8003120:	f001 fb3c 	bl	800479c <pvPortMalloc>
 8003124:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
 8003132:	e005      	b.n	8003140 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003134:	6978      	ldr	r0, [r7, #20]
 8003136:	f001 fc11 	bl	800495c <vPortFree>
 800313a:	e001      	b.n	8003140 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800313c:	2300      	movs	r3, #0
 800313e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d013      	beq.n	800316e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	2300      	movs	r3, #0
 800314a:	9303      	str	r3, [sp, #12]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	9302      	str	r3, [sp, #8]
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f80e 	bl	800317e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003162:	69f8      	ldr	r0, [r7, #28]
 8003164:	f000 f8a2 	bl	80032ac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003168:	2301      	movs	r3, #1
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	e002      	b.n	8003174 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800316e:	f04f 33ff 	mov.w	r3, #4294967295
 8003172:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003174:	69bb      	ldr	r3, [r7, #24]
    }
 8003176:	4618      	mov	r0, r3
 8003178:	3720      	adds	r7, #32
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b088      	sub	sp, #32
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	461a      	mov	r2, r3
 8003196:	21a5      	movs	r1, #165	; 0xa5
 8003198:	f004 fe84 	bl	8007ea4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031a6:	3b01      	subs	r3, #1
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f023 0307 	bic.w	r3, r3, #7
 80031b4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	617b      	str	r3, [r7, #20]
    }
 80031d2:	bf00      	nop
 80031d4:	e7fe      	b.n	80031d4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01f      	beq.n	800321c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	e012      	b.n	8003208 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	7819      	ldrb	r1, [r3, #0]
 80031ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4413      	add	r3, r2
 80031f0:	3334      	adds	r3, #52	; 0x34
 80031f2:	460a      	mov	r2, r1
 80031f4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	4413      	add	r3, r2
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d006      	beq.n	8003210 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b0e      	cmp	r3, #14
 800320c:	d9e9      	bls.n	80031e2 <prvInitialiseNewTask+0x64>
 800320e:	e000      	b.n	8003212 <prvInitialiseNewTask+0x94>
            {
                break;
 8003210:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321a:	e003      	b.n	8003224 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	2b09      	cmp	r3, #9
 8003228:	d901      	bls.n	800322e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800322a:	2309      	movs	r3, #9
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003238:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	2200      	movs	r2, #0
 800323e:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	3304      	adds	r3, #4
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fabf 	bl	80027c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	3318      	adds	r3, #24
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff faba 	bl	80027c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003258:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	f1c3 020a 	rsb	r2, r3, #10
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	3354      	adds	r3, #84	; 0x54
 800326e:	2204      	movs	r2, #4
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f004 fe16 	bl	8007ea4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	3358      	adds	r3, #88	; 0x58
 800327c:	2201      	movs	r2, #1
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f004 fe0f 	bl	8007ea4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	68f9      	ldr	r1, [r7, #12]
 800328a:	69b8      	ldr	r0, [r7, #24]
 800328c:	f000 ffac 	bl	80041e8 <pxPortInitialiseStack>
 8003290:	4602      	mov	r2, r0
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032a2:	bf00      	nop
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80032ac:	b5b0      	push	{r4, r5, r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80032b4:	f001 f946 	bl	8004544 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80032b8:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <prvAddNewTaskToReadyList+0xfc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	4a3a      	ldr	r2, [pc, #232]	; (80033a8 <prvAddNewTaskToReadyList+0xfc>)
 80032c0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80032c2:	4b3a      	ldr	r3, [pc, #232]	; (80033ac <prvAddNewTaskToReadyList+0x100>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80032ca:	4a38      	ldr	r2, [pc, #224]	; (80033ac <prvAddNewTaskToReadyList+0x100>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032d0:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <prvAddNewTaskToReadyList+0xfc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d110      	bne.n	80032fa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80032d8:	f000 fdf4 	bl	8003ec4 <prvInitialiseTaskLists>
 80032dc:	e00d      	b.n	80032fa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80032de:	4b34      	ldr	r3, [pc, #208]	; (80033b0 <prvAddNewTaskToReadyList+0x104>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032e6:	4b31      	ldr	r3, [pc, #196]	; (80033ac <prvAddNewTaskToReadyList+0x100>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d802      	bhi.n	80032fa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80032f4:	4a2d      	ldr	r2, [pc, #180]	; (80033ac <prvAddNewTaskToReadyList+0x100>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80032fa:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <prvAddNewTaskToReadyList+0x108>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3301      	adds	r3, #1
 8003300:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <prvAddNewTaskToReadyList+0x108>)
 8003302:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003304:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <prvAddNewTaskToReadyList+0x108>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <prvAddNewTaskToReadyList+0x94>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4618      	mov	r0, r3
 8003316:	f003 fdc9 	bl	8006eac <SEGGER_SYSVIEW_OnTaskCreate>
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	461d      	mov	r5, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461c      	mov	r4, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	1ae3      	subs	r3, r4, r3
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	462b      	mov	r3, r5
 800333c:	f001 fcd4 	bl	8004ce8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4618      	mov	r0, r3
 8003344:	f003 fe36 	bl	8006fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	2201      	movs	r2, #1
 800334e:	409a      	lsls	r2, r3
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <prvAddNewTaskToReadyList+0x10c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <prvAddNewTaskToReadyList+0x10c>)
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4a15      	ldr	r2, [pc, #84]	; (80033bc <prvAddNewTaskToReadyList+0x110>)
 8003368:	441a      	add	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f7ff fa36 	bl	80027e2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003376:	f001 f915 	bl	80045a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <prvAddNewTaskToReadyList+0x104>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00e      	beq.n	80033a0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <prvAddNewTaskToReadyList+0x100>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	429a      	cmp	r2, r3
 800338e:	d207      	bcs.n	80033a0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <prvAddNewTaskToReadyList+0x114>)
 8003392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bdb0      	pop	{r4, r5, r7, pc}
 80033a8:	20000218 	.word	0x20000218
 80033ac:	200000dc 	.word	0x200000dc
 80033b0:	20000224 	.word	0x20000224
 80033b4:	20000234 	.word	0x20000234
 80033b8:	20000220 	.word	0x20000220
 80033bc:	200000e0 	.word	0x200000e0
 80033c0:	e000ed04 	.word	0xe000ed04

080033c4 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <xTaskDelayUntil+0x2a>
        __asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	617b      	str	r3, [r7, #20]
    }
 80033ea:	bf00      	nop
 80033ec:	e7fe      	b.n	80033ec <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <xTaskDelayUntil+0x46>
        __asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	613b      	str	r3, [r7, #16]
    }
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <xTaskDelayUntil+0xf8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <xTaskDelayUntil+0x64>
        __asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	60fb      	str	r3, [r7, #12]
    }
 8003424:	bf00      	nop
 8003426:	e7fe      	b.n	8003426 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8003428:	f000 fa2c 	bl	8003884 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800342c:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <xTaskDelayUntil+0xfc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	4413      	add	r3, r2
 800343a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	429a      	cmp	r2, r3
 8003444:	d20b      	bcs.n	800345e <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	429a      	cmp	r2, r3
 800344e:	d211      	bcs.n	8003474 <xTaskDelayUntil+0xb0>
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	429a      	cmp	r2, r3
 8003456:	d90d      	bls.n	8003474 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003458:	2301      	movs	r3, #1
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
 800345c:	e00a      	b.n	8003474 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	429a      	cmp	r2, r3
 8003466:	d303      	bcc.n	8003470 <xTaskDelayUntil+0xac>
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	429a      	cmp	r2, r3
 800346e:	d901      	bls.n	8003474 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003470:	2301      	movs	r3, #1
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8003480:	2024      	movs	r0, #36	; 0x24
 8003482:	f002 fff7 	bl	8006474 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2100      	movs	r1, #0
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fe32 	bl	80040f8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003494:	f000 fa04 	bl	80038a0 <xTaskResumeAll>
 8003498:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 80034a0:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <xTaskDelayUntil+0x100>)
 80034a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80034b2:	4618      	mov	r0, r3
 80034b4:	3728      	adds	r7, #40	; 0x28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000240 	.word	0x20000240
 80034c0:	2000021c 	.word	0x2000021c
 80034c4:	e000ed04 	.word	0xe000ed04

080034c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01b      	beq.n	8003512 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <vTaskDelay+0x68>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <vTaskDelay+0x30>
        __asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	60bb      	str	r3, [r7, #8]
    }
 80034f4:	bf00      	nop
 80034f6:	e7fe      	b.n	80034f6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80034f8:	f000 f9c4 	bl	8003884 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	2023      	movs	r0, #35	; 0x23
 8003500:	f002 ffd6 	bl	80064b0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003504:	2100      	movs	r1, #0
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fdf6 	bl	80040f8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800350c:	f000 f9c8 	bl	80038a0 <xTaskResumeAll>
 8003510:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d107      	bne.n	8003528 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <vTaskDelay+0x6c>)
 800351a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000240 	.word	0x20000240
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003540:	f001 f800 	bl	8004544 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <vTaskSuspend+0x18>
 800354a:	4b4a      	ldr	r3, [pc, #296]	; (8003674 <vTaskSuspend+0x13c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	e000      	b.n	8003552 <vTaskSuspend+0x1a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4618      	mov	r0, r3
 8003558:	f003 fdce 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 800355c:	4603      	mov	r3, r0
 800355e:	4619      	mov	r1, r3
 8003560:	2029      	movs	r0, #41	; 0x29
 8003562:	f002 ffa5 	bl	80064b0 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	3304      	adds	r3, #4
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f996 	bl	800289c <uxListRemove>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d115      	bne.n	80035a2 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357a:	493f      	ldr	r1, [pc, #252]	; (8003678 <vTaskSuspend+0x140>)
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <vTaskSuspend+0x6a>
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	2201      	movs	r2, #1
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43da      	mvns	r2, r3
 8003598:	4b38      	ldr	r3, [pc, #224]	; (800367c <vTaskSuspend+0x144>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4013      	ands	r3, r2
 800359e:	4a37      	ldr	r2, [pc, #220]	; (800367c <vTaskSuspend+0x144>)
 80035a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	3318      	adds	r3, #24
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff f974 	bl	800289c <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	211b      	movs	r1, #27
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 fd3d 	bl	8007038 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	3304      	adds	r3, #4
 80035c2:	4619      	mov	r1, r3
 80035c4:	482e      	ldr	r0, [pc, #184]	; (8003680 <vTaskSuspend+0x148>)
 80035c6:	f7ff f90c 	bl	80027e2 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e010      	b.n	80035f2 <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	4413      	add	r3, r2
 80035d6:	3358      	adds	r3, #88	; 0x58
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	4413      	add	r3, r2
 80035e6:	3358      	adds	r3, #88	; 0x58
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3301      	adds	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	ddeb      	ble.n	80035d0 <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 80035f8:	f000 ffd4 	bl	80045a4 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80035fc:	4b21      	ldr	r3, [pc, #132]	; (8003684 <vTaskSuspend+0x14c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8003604:	f000 ff9e 	bl	8004544 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8003608:	f000 fcda 	bl	8003fc0 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 800360c:	f000 ffca 	bl	80045a4 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8003610:	4b18      	ldr	r3, [pc, #96]	; (8003674 <vTaskSuspend+0x13c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	429a      	cmp	r2, r3
 8003618:	d127      	bne.n	800366a <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 800361a:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <vTaskSuspend+0x14c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d017      	beq.n	8003652 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8003622:	4b19      	ldr	r3, [pc, #100]	; (8003688 <vTaskSuspend+0x150>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <vTaskSuspend+0x108>
        __asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	60fb      	str	r3, [r7, #12]
    }
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8003640:	4b12      	ldr	r3, [pc, #72]	; (800368c <vTaskSuspend+0x154>)
 8003642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003650:	e00b      	b.n	800366a <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <vTaskSuspend+0x148>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <vTaskSuspend+0x158>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d103      	bne.n	8003666 <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <vTaskSuspend+0x13c>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
    }
 8003664:	e001      	b.n	800366a <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8003666:	f000 fa99 	bl	8003b9c <vTaskSwitchContext>
    }
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	200000dc 	.word	0x200000dc
 8003678:	200000e0 	.word	0x200000e0
 800367c:	20000220 	.word	0x20000220
 8003680:	20000204 	.word	0x20000204
 8003684:	20000224 	.word	0x20000224
 8003688:	20000240 	.word	0x20000240
 800368c:	e000ed04 	.word	0xe000ed04
 8003690:	20000218 	.word	0x20000218

08003694 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	60fb      	str	r3, [r7, #12]
    }
 80036bc:	bf00      	nop
 80036be:	e7fe      	b.n	80036be <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <prvTaskIsTaskSuspended+0x5c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d10a      	bne.n	80036e0 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <prvTaskIsTaskSuspended+0x60>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d005      	beq.n	80036e0 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 80036dc:	2301      	movs	r3, #1
 80036de:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80036e0:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80036e2:	4618      	mov	r0, r3
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000204 	.word	0x20000204
 80036f4:	200001d8 	.word	0x200001d8

080036f8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <vTaskResume+0x28>
        __asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	60bb      	str	r3, [r7, #8]
    }
 800371c:	bf00      	nop
 800371e:	e7fe      	b.n	800371e <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003720:	4b26      	ldr	r3, [pc, #152]	; (80037bc <vTaskResume+0xc4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	429a      	cmp	r2, r3
 8003728:	d044      	beq.n	80037b4 <vTaskResume+0xbc>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d041      	beq.n	80037b4 <vTaskResume+0xbc>
        {
            taskENTER_CRITICAL();
 8003730:	f000 ff08 	bl	8004544 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7ff ffad 	bl	8003694 <prvTaskIsTaskSuspended>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d037      	beq.n	80037b0 <vTaskResume+0xb8>
                {
                    traceTASK_RESUME( pxTCB );
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4618      	mov	r0, r3
 8003744:	f003 fcd8 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8003748:	4603      	mov	r3, r0
 800374a:	4619      	mov	r1, r3
 800374c:	202a      	movs	r0, #42	; 0x2a
 800374e:	f002 feaf 	bl	80064b0 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3304      	adds	r3, #4
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff f8a0 	bl	800289c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4618      	mov	r0, r3
 8003760:	f003 fc28 	bl	8006fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	2201      	movs	r2, #1
 800376a:	409a      	lsls	r2, r3
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <vTaskResume+0xc8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <vTaskResume+0xc8>)
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4a10      	ldr	r2, [pc, #64]	; (80037c4 <vTaskResume+0xcc>)
 8003784:	441a      	add	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3304      	adds	r3, #4
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f7ff f828 	bl	80027e2 <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <vTaskResume+0xc4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	429a      	cmp	r2, r3
 800379e:	d307      	bcc.n	80037b0 <vTaskResume+0xb8>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 80037a0:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <vTaskResume+0xd0>)
 80037a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80037b0:	f000 fef8 	bl	80045a4 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	200000dc 	.word	0x200000dc
 80037c0:	20000220 	.word	0x20000220
 80037c4:	200000e0 	.word	0x200000e0
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80037d2:	4b24      	ldr	r3, [pc, #144]	; (8003864 <vTaskStartScheduler+0x98>)
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	2300      	movs	r3, #0
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	2282      	movs	r2, #130	; 0x82
 80037de:	4922      	ldr	r1, [pc, #136]	; (8003868 <vTaskStartScheduler+0x9c>)
 80037e0:	4822      	ldr	r0, [pc, #136]	; (800386c <vTaskStartScheduler+0xa0>)
 80037e2:	f7ff fc8b 	bl	80030fc <xTaskCreate>
 80037e6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d124      	bne.n	8003838 <vTaskStartScheduler+0x6c>
        __asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	60bb      	str	r3, [r7, #8]
    }
 8003800:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003802:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <vTaskStartScheduler+0xa4>)
 8003804:	f04f 32ff 	mov.w	r2, #4294967295
 8003808:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800380a:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <vTaskStartScheduler+0xa8>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <vTaskStartScheduler+0xac>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003816:	4b19      	ldr	r3, [pc, #100]	; (800387c <vTaskStartScheduler+0xb0>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <vTaskStartScheduler+0x98>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d102      	bne.n	8003828 <vTaskStartScheduler+0x5c>
 8003822:	f003 fb27 	bl	8006e74 <SEGGER_SYSVIEW_OnIdle>
 8003826:	e004      	b.n	8003832 <vTaskStartScheduler+0x66>
 8003828:	4b14      	ldr	r3, [pc, #80]	; (800387c <vTaskStartScheduler+0xb0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f003 fb7f 	bl	8006f30 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003832:	f000 fd67 	bl	8004304 <xPortStartScheduler>
 8003836:	e00e      	b.n	8003856 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d10a      	bne.n	8003856 <vTaskStartScheduler+0x8a>
        __asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	607b      	str	r3, [r7, #4]
    }
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <vTaskStartScheduler+0xb4>)
 8003858:	681b      	ldr	r3, [r3, #0]
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	2000023c 	.word	0x2000023c
 8003868:	08008774 	.word	0x08008774
 800386c:	08003e95 	.word	0x08003e95
 8003870:	20000238 	.word	0x20000238
 8003874:	20000224 	.word	0x20000224
 8003878:	2000021c 	.word	0x2000021c
 800387c:	200000dc 	.word	0x200000dc
 8003880:	2000001c 	.word	0x2000001c

08003884 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <vTaskSuspendAll+0x18>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	4a03      	ldr	r2, [pc, #12]	; (800389c <vTaskSuspendAll+0x18>)
 8003890:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003892:	bf00      	nop
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	20000240 	.word	0x20000240

080038a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80038ae:	4b43      	ldr	r3, [pc, #268]	; (80039bc <xTaskResumeAll+0x11c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <xTaskResumeAll+0x2c>
        __asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	603b      	str	r3, [r7, #0]
    }
 80038c8:	bf00      	nop
 80038ca:	e7fe      	b.n	80038ca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80038cc:	f000 fe3a 	bl	8004544 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80038d0:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <xTaskResumeAll+0x11c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	4a39      	ldr	r2, [pc, #228]	; (80039bc <xTaskResumeAll+0x11c>)
 80038d8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038da:	4b38      	ldr	r3, [pc, #224]	; (80039bc <xTaskResumeAll+0x11c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d165      	bne.n	80039ae <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038e2:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <xTaskResumeAll+0x120>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d061      	beq.n	80039ae <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038ea:	e032      	b.n	8003952 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ec:	4b35      	ldr	r3, [pc, #212]	; (80039c4 <xTaskResumeAll+0x124>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3318      	adds	r3, #24
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe ffcf 	bl	800289c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3304      	adds	r3, #4
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe ffca 	bl	800289c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4618      	mov	r0, r3
 800390c:	f003 fb52 	bl	8006fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	2201      	movs	r2, #1
 8003916:	409a      	lsls	r2, r3
 8003918:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <xTaskResumeAll+0x128>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	4a2a      	ldr	r2, [pc, #168]	; (80039c8 <xTaskResumeAll+0x128>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4a27      	ldr	r2, [pc, #156]	; (80039cc <xTaskResumeAll+0x12c>)
 8003930:	441a      	add	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3304      	adds	r3, #4
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f7fe ff52 	bl	80027e2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003942:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <xTaskResumeAll+0x130>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	429a      	cmp	r2, r3
 800394a:	d302      	bcc.n	8003952 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <xTaskResumeAll+0x134>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003952:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <xTaskResumeAll+0x124>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1c8      	bne.n	80038ec <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003960:	f000 fb2e 	bl	8003fc0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003964:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <xTaskResumeAll+0x138>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d010      	beq.n	8003992 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003970:	f000 f858 	bl	8003a24 <xTaskIncrementTick>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <xTaskResumeAll+0x134>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f1      	bne.n	8003970 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800398c:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <xTaskResumeAll+0x138>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <xTaskResumeAll+0x134>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800399a:	2301      	movs	r3, #1
 800399c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <xTaskResumeAll+0x13c>)
 80039a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80039ae:	f000 fdf9 	bl	80045a4 <vPortExitCritical>

    return xAlreadyYielded;
 80039b2:	68bb      	ldr	r3, [r7, #8]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000240 	.word	0x20000240
 80039c0:	20000218 	.word	0x20000218
 80039c4:	200001d8 	.word	0x200001d8
 80039c8:	20000220 	.word	0x20000220
 80039cc:	200000e0 	.word	0x200000e0
 80039d0:	200000dc 	.word	0x200000dc
 80039d4:	2000022c 	.word	0x2000022c
 80039d8:	20000228 	.word	0x20000228
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <xTaskGetTickCount+0x1c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80039ec:	687b      	ldr	r3, [r7, #4]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	2000021c 	.word	0x2000021c

08003a00 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a06:	f000 fe89 	bl	800471c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <xTaskGetTickCountFromISR+0x20>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003a14:	683b      	ldr	r3, [r7, #0]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	2000021c 	.word	0x2000021c

08003a24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a2e:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <xTaskIncrementTick+0x14c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 8092 	bne.w	8003b5c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a38:	4b4e      	ldr	r3, [pc, #312]	; (8003b74 <xTaskIncrementTick+0x150>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003a40:	4a4c      	ldr	r2, [pc, #304]	; (8003b74 <xTaskIncrementTick+0x150>)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d120      	bne.n	8003a8e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003a4c:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <xTaskIncrementTick+0x154>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <xTaskIncrementTick+0x48>
        __asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	603b      	str	r3, [r7, #0]
    }
 8003a68:	bf00      	nop
 8003a6a:	e7fe      	b.n	8003a6a <xTaskIncrementTick+0x46>
 8003a6c:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <xTaskIncrementTick+0x154>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	4b42      	ldr	r3, [pc, #264]	; (8003b7c <xTaskIncrementTick+0x158>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a40      	ldr	r2, [pc, #256]	; (8003b78 <xTaskIncrementTick+0x154>)
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4a40      	ldr	r2, [pc, #256]	; (8003b7c <xTaskIncrementTick+0x158>)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <xTaskIncrementTick+0x15c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	4a3e      	ldr	r2, [pc, #248]	; (8003b80 <xTaskIncrementTick+0x15c>)
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	f000 fa99 	bl	8003fc0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003a8e:	4b3d      	ldr	r3, [pc, #244]	; (8003b84 <xTaskIncrementTick+0x160>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d34c      	bcc.n	8003b32 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a98:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <xTaskIncrementTick+0x154>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d104      	bne.n	8003aac <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa2:	4b38      	ldr	r3, [pc, #224]	; (8003b84 <xTaskIncrementTick+0x160>)
 8003aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa8:	601a      	str	r2, [r3, #0]
                    break;
 8003aaa:	e042      	b.n	8003b32 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aac:	4b32      	ldr	r3, [pc, #200]	; (8003b78 <xTaskIncrementTick+0x154>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d203      	bcs.n	8003acc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003ac4:	4a2f      	ldr	r2, [pc, #188]	; (8003b84 <xTaskIncrementTick+0x160>)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003aca:	e032      	b.n	8003b32 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fee3 	bl	800289c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3318      	adds	r3, #24
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe feda 	bl	800289c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f003 fa62 	bl	8006fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	2201      	movs	r2, #1
 8003af6:	409a      	lsls	r2, r3
 8003af8:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <xTaskIncrementTick+0x164>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <xTaskIncrementTick+0x164>)
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <xTaskIncrementTick+0x168>)
 8003b10:	441a      	add	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f7fe fe62 	bl	80027e2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <xTaskIncrementTick+0x16c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d3b5      	bcc.n	8003a98 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b30:	e7b2      	b.n	8003a98 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b32:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <xTaskIncrementTick+0x16c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b38:	4914      	ldr	r1, [pc, #80]	; (8003b8c <xTaskIncrementTick+0x168>)
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d901      	bls.n	8003b4e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <xTaskIncrementTick+0x170>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003b56:	2301      	movs	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e004      	b.n	8003b66 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <xTaskIncrementTick+0x174>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <xTaskIncrementTick+0x174>)
 8003b64:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003b66:	697b      	ldr	r3, [r7, #20]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000240 	.word	0x20000240
 8003b74:	2000021c 	.word	0x2000021c
 8003b78:	200001d0 	.word	0x200001d0
 8003b7c:	200001d4 	.word	0x200001d4
 8003b80:	20000230 	.word	0x20000230
 8003b84:	20000238 	.word	0x20000238
 8003b88:	20000220 	.word	0x20000220
 8003b8c:	200000e0 	.word	0x200000e0
 8003b90:	200000dc 	.word	0x200000dc
 8003b94:	2000022c 	.word	0x2000022c
 8003b98:	20000228 	.word	0x20000228

08003b9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <vTaskSwitchContext+0xbc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <vTaskSwitchContext+0xc0>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003bb0:	e04d      	b.n	8003c4e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003bb2:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <vTaskSwitchContext+0xc0>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb8:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <vTaskSwitchContext+0xc4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003bc6:	7afb      	ldrb	r3, [r7, #11]
 8003bc8:	f1c3 031f 	rsb	r3, r3, #31
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	4925      	ldr	r1, [pc, #148]	; (8003c64 <vTaskSwitchContext+0xc8>)
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	607b      	str	r3, [r7, #4]
    }
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <vTaskSwitchContext+0x5a>
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4a18      	ldr	r2, [pc, #96]	; (8003c64 <vTaskSwitchContext+0xc8>)
 8003c04:	4413      	add	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d104      	bne.n	8003c28 <vTaskSwitchContext+0x8c>
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <vTaskSwitchContext+0xcc>)
 8003c30:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003c32:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <vTaskSwitchContext+0xcc>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <vTaskSwitchContext+0xd0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d102      	bne.n	8003c44 <vTaskSwitchContext+0xa8>
 8003c3e:	f003 f919 	bl	8006e74 <SEGGER_SYSVIEW_OnIdle>
}
 8003c42:	e004      	b.n	8003c4e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003c44:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <vTaskSwitchContext+0xcc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f003 f971 	bl	8006f30 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000240 	.word	0x20000240
 8003c5c:	2000022c 	.word	0x2000022c
 8003c60:	20000220 	.word	0x20000220
 8003c64:	200000e0 	.word	0x200000e0
 8003c68:	200000dc 	.word	0x200000dc
 8003c6c:	2000023c 	.word	0x2000023c

08003c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
    }
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c96:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <vTaskPlaceOnEventList+0x44>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fe fdc3 	bl	800282a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 fa26 	bl	80040f8 <prvAddCurrentTaskToDelayedList>
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	200000dc 	.word	0x200000dc

08003cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	60fb      	str	r3, [r7, #12]
    }
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	3318      	adds	r3, #24
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe fdd7 	bl	800289c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cee:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <xTaskRemoveFromEventList+0xb4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d120      	bne.n	8003d38 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe fdce 	bl	800289c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f003 f956 	bl	8006fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <xTaskRemoveFromEventList+0xb8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <xTaskRemoveFromEventList+0xb8>)
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <xTaskRemoveFromEventList+0xbc>)
 8003d28:	441a      	add	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f7fe fd56 	bl	80027e2 <vListInsertEnd>
 8003d36:	e005      	b.n	8003d44 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	3318      	adds	r3, #24
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	480e      	ldr	r0, [pc, #56]	; (8003d78 <xTaskRemoveFromEventList+0xc0>)
 8003d40:	f7fe fd4f 	bl	80027e2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <xTaskRemoveFromEventList+0xc4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d905      	bls.n	8003d5e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003d52:	2301      	movs	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003d56:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <xTaskRemoveFromEventList+0xc8>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	e001      	b.n	8003d62 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003d62:	697b      	ldr	r3, [r7, #20]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000240 	.word	0x20000240
 8003d70:	20000220 	.word	0x20000220
 8003d74:	200000e0 	.word	0x200000e0
 8003d78:	200001d8 	.word	0x200001d8
 8003d7c:	200000dc 	.word	0x200000dc
 8003d80:	2000022c 	.word	0x2000022c

08003d84 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <vTaskInternalSetTimeOutState+0x24>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <vTaskInternalSetTimeOutState+0x28>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	605a      	str	r2, [r3, #4]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	20000230 	.word	0x20000230
 8003dac:	2000021c 	.word	0x2000021c

08003db0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	613b      	str	r3, [r7, #16]
    }
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	60fb      	str	r3, [r7, #12]
    }
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003df2:	f000 fba7 	bl	8004544 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003df6:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <xTaskCheckForTimeOut+0xc4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d102      	bne.n	8003e16 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	e026      	b.n	8003e64 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <xTaskCheckForTimeOut+0xc8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d00a      	beq.n	8003e38 <xTaskCheckForTimeOut+0x88>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d305      	bcc.n	8003e38 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e015      	b.n	8003e64 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d20b      	bcs.n	8003e5a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	1ad2      	subs	r2, r2, r3
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff98 	bl	8003d84 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	e004      	b.n	8003e64 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003e64:	f000 fb9e 	bl	80045a4 <vPortExitCritical>

    return xReturn;
 8003e68:	69fb      	ldr	r3, [r7, #28]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3720      	adds	r7, #32
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	2000021c 	.word	0x2000021c
 8003e78:	20000230 	.word	0x20000230

08003e7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <vTaskMissedYield+0x14>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
}
 8003e86:	bf00      	nop
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	2000022c 	.word	0x2000022c

08003e94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003e9c:	f000 f852 	bl	8003f44 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <prvIdleTask+0x28>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d9f9      	bls.n	8003e9c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <prvIdleTask+0x2c>)
 8003eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003eb8:	e7f0      	b.n	8003e9c <prvIdleTask+0x8>
 8003eba:	bf00      	nop
 8003ebc:	200000e0 	.word	0x200000e0
 8003ec0:	e000ed04 	.word	0xe000ed04

08003ec4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eca:	2300      	movs	r3, #0
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	e00c      	b.n	8003eea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <prvInitialiseTaskLists+0x60>)
 8003edc:	4413      	add	r3, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fc52 	bl	8002788 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b09      	cmp	r3, #9
 8003eee:	d9ef      	bls.n	8003ed0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ef0:	480d      	ldr	r0, [pc, #52]	; (8003f28 <prvInitialiseTaskLists+0x64>)
 8003ef2:	f7fe fc49 	bl	8002788 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ef6:	480d      	ldr	r0, [pc, #52]	; (8003f2c <prvInitialiseTaskLists+0x68>)
 8003ef8:	f7fe fc46 	bl	8002788 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003efc:	480c      	ldr	r0, [pc, #48]	; (8003f30 <prvInitialiseTaskLists+0x6c>)
 8003efe:	f7fe fc43 	bl	8002788 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003f02:	480c      	ldr	r0, [pc, #48]	; (8003f34 <prvInitialiseTaskLists+0x70>)
 8003f04:	f7fe fc40 	bl	8002788 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003f08:	480b      	ldr	r0, [pc, #44]	; (8003f38 <prvInitialiseTaskLists+0x74>)
 8003f0a:	f7fe fc3d 	bl	8002788 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <prvInitialiseTaskLists+0x78>)
 8003f10:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <prvInitialiseTaskLists+0x64>)
 8003f12:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <prvInitialiseTaskLists+0x7c>)
 8003f16:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <prvInitialiseTaskLists+0x68>)
 8003f18:	601a      	str	r2, [r3, #0]
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	200000e0 	.word	0x200000e0
 8003f28:	200001a8 	.word	0x200001a8
 8003f2c:	200001bc 	.word	0x200001bc
 8003f30:	200001d8 	.word	0x200001d8
 8003f34:	200001ec 	.word	0x200001ec
 8003f38:	20000204 	.word	0x20000204
 8003f3c:	200001d0 	.word	0x200001d0
 8003f40:	200001d4 	.word	0x200001d4

08003f44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f4a:	e019      	b.n	8003f80 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003f4c:	f000 fafa 	bl	8004544 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f50:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <prvCheckTasksWaitingTermination+0x50>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fe fc9d 	bl	800289c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003f62:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <prvCheckTasksWaitingTermination+0x54>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <prvCheckTasksWaitingTermination+0x54>)
 8003f6a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <prvCheckTasksWaitingTermination+0x58>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <prvCheckTasksWaitingTermination+0x58>)
 8003f74:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003f76:	f000 fb15 	bl	80045a4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f810 	bl	8003fa0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <prvCheckTasksWaitingTermination+0x58>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e1      	bne.n	8003f4c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200001ec 	.word	0x200001ec
 8003f98:	20000218 	.word	0x20000218
 8003f9c:	20000200 	.word	0x20000200

08003fa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fcd5 	bl	800495c <vPortFree>
                vPortFree( pxTCB );
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fcd2 	bl	800495c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <prvResetNextTaskUnblockTime+0x30>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <prvResetNextTaskUnblockTime+0x34>)
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003fd6:	e005      	b.n	8003fe4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <prvResetNextTaskUnblockTime+0x30>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <prvResetNextTaskUnblockTime+0x34>)
 8003fe2:	6013      	str	r3, [r2, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	200001d0 	.word	0x200001d0
 8003ff4:	20000238 	.word	0x20000238

08003ff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d068      	beq.n	80040e0 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800400e:	4b37      	ldr	r3, [pc, #220]	; (80040ec <xTaskPriorityDisinherit+0xf4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	429a      	cmp	r2, r3
 8004016:	d00a      	beq.n	800402e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60fb      	str	r3, [r7, #12]
    }
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10a      	bne.n	800404c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	60bb      	str	r3, [r7, #8]
    }
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004050:	1e5a      	subs	r2, r3, #1
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	429a      	cmp	r2, r3
 8004060:	d03e      	beq.n	80040e0 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004066:	2b00      	cmp	r3, #0
 8004068:	d13a      	bne.n	80040e0 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	3304      	adds	r3, #4
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fc14 	bl	800289c <uxListRemove>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	2201      	movs	r2, #1
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43da      	mvns	r2, r3
 8004086:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <xTaskPriorityDisinherit+0xf8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4013      	ands	r3, r2
 800408c:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <xTaskPriorityDisinherit+0xf8>)
 800408e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4619      	mov	r1, r3
 8004094:	204a      	movs	r0, #74	; 0x4a
 8004096:	f002 fa0b 	bl	80064b0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	f1c3 020a 	rsb	r2, r3, #10
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	2201      	movs	r2, #1
 80040b4:	409a      	lsls	r2, r3
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <xTaskPriorityDisinherit+0xf8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <xTaskPriorityDisinherit+0xf8>)
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <xTaskPriorityDisinherit+0xfc>)
 80040ce:	441a      	add	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f7fe fb83 	bl	80027e2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80040dc:	2301      	movs	r3, #1
 80040de:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80040e0:	697b      	ldr	r3, [r7, #20]
    }
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	200000dc 	.word	0x200000dc
 80040f0:	20000220 	.word	0x20000220
 80040f4:	200000e0 	.word	0x200000e0

080040f8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004102:	4b32      	ldr	r3, [pc, #200]	; (80041cc <prvAddCurrentTaskToDelayedList+0xd4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004108:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3304      	adds	r3, #4
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fbc4 	bl	800289c <uxListRemove>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10b      	bne.n	8004132 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800411a:	4b2d      	ldr	r3, [pc, #180]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	2201      	movs	r2, #1
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43da      	mvns	r2, r3
 8004128:	4b2a      	ldr	r3, [pc, #168]	; (80041d4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4013      	ands	r3, r2
 800412e:	4a29      	ldr	r2, [pc, #164]	; (80041d4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004130:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d110      	bne.n	800415c <prvAddCurrentTaskToDelayedList+0x64>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00d      	beq.n	800415c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004140:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	211b      	movs	r1, #27
 8004146:	4618      	mov	r0, r3
 8004148:	f002 ff76 	bl	8007038 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800414c:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3304      	adds	r3, #4
 8004152:	4619      	mov	r1, r3
 8004154:	4820      	ldr	r0, [pc, #128]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004156:	f7fe fb44 	bl	80027e2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800415a:	e032      	b.n	80041c2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004164:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	429a      	cmp	r2, r3
 8004172:	d20f      	bcs.n	8004194 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004174:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2104      	movs	r1, #4
 800417a:	4618      	mov	r0, r3
 800417c:	f002 ff5c 	bl	8007038 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004180:	4b16      	ldr	r3, [pc, #88]	; (80041dc <prvAddCurrentTaskToDelayedList+0xe4>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3304      	adds	r3, #4
 800418a:	4619      	mov	r1, r3
 800418c:	4610      	mov	r0, r2
 800418e:	f7fe fb4c 	bl	800282a <vListInsert>
}
 8004192:	e016      	b.n	80041c2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004194:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2104      	movs	r1, #4
 800419a:	4618      	mov	r0, r3
 800419c:	f002 ff4c 	bl	8007038 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3304      	adds	r3, #4
 80041aa:	4619      	mov	r1, r3
 80041ac:	4610      	mov	r0, r2
 80041ae:	f7fe fb3c 	bl	800282a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80041b2:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <prvAddCurrentTaskToDelayedList+0xec>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d202      	bcs.n	80041c2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80041bc:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <prvAddCurrentTaskToDelayedList+0xec>)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	6013      	str	r3, [r2, #0]
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	2000021c 	.word	0x2000021c
 80041d0:	200000dc 	.word	0x200000dc
 80041d4:	20000220 	.word	0x20000220
 80041d8:	20000204 	.word	0x20000204
 80041dc:	200001d4 	.word	0x200001d4
 80041e0:	200001d0 	.word	0x200001d0
 80041e4:	20000238 	.word	0x20000238

080041e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3b04      	subs	r3, #4
 80041f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004200:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3b04      	subs	r3, #4
 8004206:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f023 0201 	bic.w	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3b04      	subs	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004218:	4a0c      	ldr	r2, [pc, #48]	; (800424c <pxPortInitialiseStack+0x64>)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3b14      	subs	r3, #20
 8004222:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3b04      	subs	r3, #4
 800422e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f06f 0202 	mvn.w	r2, #2
 8004236:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3b20      	subs	r3, #32
 800423c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800423e:	68fb      	ldr	r3, [r7, #12]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	08004251 	.word	0x08004251

08004250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <prvTaskExitError+0x54>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d00a      	beq.n	800427a <prvTaskExitError+0x2a>
        __asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	60fb      	str	r3, [r7, #12]
    }
 8004276:	bf00      	nop
 8004278:	e7fe      	b.n	8004278 <prvTaskExitError+0x28>
        __asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	60bb      	str	r3, [r7, #8]
    }
 800428c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800428e:	bf00      	nop
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0fc      	beq.n	8004290 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	20000020 	.word	0x20000020
	...

080042b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <pxCurrentTCBConst2>)
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	6808      	ldr	r0, [r1, #0]
 80042b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ba:	f380 8809 	msr	PSP, r0
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f380 8811 	msr	BASEPRI, r0
 80042ca:	4770      	bx	lr
 80042cc:	f3af 8000 	nop.w

080042d0 <pxCurrentTCBConst2>:
 80042d0:	200000dc 	.word	0x200000dc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop

080042d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80042d8:	4808      	ldr	r0, [pc, #32]	; (80042fc <prvPortStartFirstTask+0x24>)
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	6800      	ldr	r0, [r0, #0]
 80042de:	f380 8808 	msr	MSP, r0
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8814 	msr	CONTROL, r0
 80042ea:	b662      	cpsie	i
 80042ec:	b661      	cpsie	f
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	df00      	svc	0
 80042f8:	bf00      	nop
 80042fa:	0000      	.short	0x0000
 80042fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop

08004304 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800430a:	4b46      	ldr	r3, [pc, #280]	; (8004424 <xPortStartScheduler+0x120>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a46      	ldr	r2, [pc, #280]	; (8004428 <xPortStartScheduler+0x124>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d10a      	bne.n	800432a <xPortStartScheduler+0x26>
        __asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	613b      	str	r3, [r7, #16]
    }
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800432a:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <xPortStartScheduler+0x120>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a3f      	ldr	r2, [pc, #252]	; (800442c <xPortStartScheduler+0x128>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d10a      	bne.n	800434a <xPortStartScheduler+0x46>
        __asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	60fb      	str	r3, [r7, #12]
    }
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800434a:	4b39      	ldr	r3, [pc, #228]	; (8004430 <xPortStartScheduler+0x12c>)
 800434c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	22ff      	movs	r2, #255	; 0xff
 800435a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800436c:	b2da      	uxtb	r2, r3
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <xPortStartScheduler+0x130>)
 8004370:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004372:	4b31      	ldr	r3, [pc, #196]	; (8004438 <xPortStartScheduler+0x134>)
 8004374:	2207      	movs	r2, #7
 8004376:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004378:	e009      	b.n	800438e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800437a:	4b2f      	ldr	r3, [pc, #188]	; (8004438 <xPortStartScheduler+0x134>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3b01      	subs	r3, #1
 8004380:	4a2d      	ldr	r2, [pc, #180]	; (8004438 <xPortStartScheduler+0x134>)
 8004382:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004396:	2b80      	cmp	r3, #128	; 0x80
 8004398:	d0ef      	beq.n	800437a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800439a:	4b27      	ldr	r3, [pc, #156]	; (8004438 <xPortStartScheduler+0x134>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f1c3 0307 	rsb	r3, r3, #7
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d00a      	beq.n	80043bc <xPortStartScheduler+0xb8>
        __asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	60bb      	str	r3, [r7, #8]
    }
 80043b8:	bf00      	nop
 80043ba:	e7fe      	b.n	80043ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043bc:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <xPortStartScheduler+0x134>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	4a1d      	ldr	r2, [pc, #116]	; (8004438 <xPortStartScheduler+0x134>)
 80043c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043c6:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <xPortStartScheduler+0x134>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ce:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <xPortStartScheduler+0x134>)
 80043d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043da:	4b18      	ldr	r3, [pc, #96]	; (800443c <xPortStartScheduler+0x138>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a17      	ldr	r2, [pc, #92]	; (800443c <xPortStartScheduler+0x138>)
 80043e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <xPortStartScheduler+0x138>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a14      	ldr	r2, [pc, #80]	; (800443c <xPortStartScheduler+0x138>)
 80043ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043f2:	f000 f963 	bl	80046bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <xPortStartScheduler+0x13c>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043fc:	f000 f982 	bl	8004704 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004400:	4b10      	ldr	r3, [pc, #64]	; (8004444 <xPortStartScheduler+0x140>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0f      	ldr	r2, [pc, #60]	; (8004444 <xPortStartScheduler+0x140>)
 8004406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800440a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800440c:	f7ff ff64 	bl	80042d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004410:	f7ff fbc4 	bl	8003b9c <vTaskSwitchContext>
    prvTaskExitError();
 8004414:	f7ff ff1c 	bl	8004250 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	e000ed00 	.word	0xe000ed00
 8004428:	410fc271 	.word	0x410fc271
 800442c:	410fc270 	.word	0x410fc270
 8004430:	e000e400 	.word	0xe000e400
 8004434:	20000244 	.word	0x20000244
 8004438:	20000248 	.word	0x20000248
 800443c:	e000ed20 	.word	0xe000ed20
 8004440:	20000020 	.word	0x20000020
 8004444:	e000ef34 	.word	0xe000ef34

08004448 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800444e:	4b37      	ldr	r3, [pc, #220]	; (800452c <vInitPrioGroupValue+0xe4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a37      	ldr	r2, [pc, #220]	; (8004530 <vInitPrioGroupValue+0xe8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d10a      	bne.n	800446e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	613b      	str	r3, [r7, #16]
    }
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800446e:	4b2f      	ldr	r3, [pc, #188]	; (800452c <vInitPrioGroupValue+0xe4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a30      	ldr	r2, [pc, #192]	; (8004534 <vInitPrioGroupValue+0xec>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10a      	bne.n	800448e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	60fb      	str	r3, [r7, #12]
    }
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800448e:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <vInitPrioGroupValue+0xf0>)
 8004490:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4b22      	ldr	r3, [pc, #136]	; (800453c <vInitPrioGroupValue+0xf4>)
 80044b4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044b6:	4b22      	ldr	r3, [pc, #136]	; (8004540 <vInitPrioGroupValue+0xf8>)
 80044b8:	2207      	movs	r2, #7
 80044ba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044bc:	e009      	b.n	80044d2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80044be:	4b20      	ldr	r3, [pc, #128]	; (8004540 <vInitPrioGroupValue+0xf8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <vInitPrioGroupValue+0xf8>)
 80044c6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044da:	2b80      	cmp	r3, #128	; 0x80
 80044dc:	d0ef      	beq.n	80044be <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044de:	4b18      	ldr	r3, [pc, #96]	; (8004540 <vInitPrioGroupValue+0xf8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1c3 0307 	rsb	r3, r3, #7
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d00a      	beq.n	8004500 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	60bb      	str	r3, [r7, #8]
    }
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <vInitPrioGroupValue+0xf8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	4a0e      	ldr	r2, [pc, #56]	; (8004540 <vInitPrioGroupValue+0xf8>)
 8004508:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800450a:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <vInitPrioGroupValue+0xf8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004512:	4a0b      	ldr	r2, [pc, #44]	; (8004540 <vInitPrioGroupValue+0xf8>)
 8004514:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	e000ed00 	.word	0xe000ed00
 8004530:	410fc271 	.word	0x410fc271
 8004534:	410fc270 	.word	0x410fc270
 8004538:	e000e400 	.word	0xe000e400
 800453c:	20000244 	.word	0x20000244
 8004540:	20000248 	.word	0x20000248

08004544 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
        __asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	607b      	str	r3, [r7, #4]
    }
 800455c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <vPortEnterCritical+0x58>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	4a0d      	ldr	r2, [pc, #52]	; (800459c <vPortEnterCritical+0x58>)
 8004566:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <vPortEnterCritical+0x58>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10f      	bne.n	8004590 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <vPortEnterCritical+0x5c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <vPortEnterCritical+0x4c>
        __asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	603b      	str	r3, [r7, #0]
    }
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <vPortEnterCritical+0x4a>
    }
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	20000020 	.word	0x20000020
 80045a0:	e000ed04 	.word	0xe000ed04

080045a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <vPortExitCritical+0x50>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10a      	bne.n	80045c8 <vPortExitCritical+0x24>
        __asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	607b      	str	r3, [r7, #4]
    }
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <vPortExitCritical+0x50>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <vPortExitCritical+0x50>)
 80045d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80045d2:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <vPortExitCritical+0x50>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <vPortExitCritical+0x42>
 80045da:	2300      	movs	r3, #0
 80045dc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80045e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000020 	.word	0x20000020
	...

08004600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004600:	f3ef 8009 	mrs	r0, PSP
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	4b15      	ldr	r3, [pc, #84]	; (8004660 <pxCurrentTCBConst>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	f01e 0f10 	tst.w	lr, #16
 8004610:	bf08      	it	eq
 8004612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461a:	6010      	str	r0, [r2, #0]
 800461c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004624:	f380 8811 	msr	BASEPRI, r0
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f7ff fab4 	bl	8003b9c <vTaskSwitchContext>
 8004634:	f04f 0000 	mov.w	r0, #0
 8004638:	f380 8811 	msr	BASEPRI, r0
 800463c:	bc09      	pop	{r0, r3}
 800463e:	6819      	ldr	r1, [r3, #0]
 8004640:	6808      	ldr	r0, [r1, #0]
 8004642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004646:	f01e 0f10 	tst.w	lr, #16
 800464a:	bf08      	it	eq
 800464c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004650:	f380 8809 	msr	PSP, r0
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	f3af 8000 	nop.w

08004660 <pxCurrentTCBConst>:
 8004660:	200000dc 	.word	0x200000dc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop

08004668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
        __asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	607b      	str	r3, [r7, #4]
    }
 8004680:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004682:	f002 fb7d 	bl	8006d80 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004686:	f7ff f9cd 	bl	8003a24 <xTaskIncrementTick>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d006      	beq.n	800469e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004690:	f002 fbd4 	bl	8006e3c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <SysTick_Handler+0x50>)
 8004696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e001      	b.n	80046a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800469e:	f002 fbb1 	bl	8006e04 <SEGGER_SYSVIEW_RecordExitISR>
 80046a2:	2300      	movs	r3, #0
 80046a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	f383 8811 	msr	BASEPRI, r3
    }
 80046ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <vPortSetupTimerInterrupt+0x34>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <vPortSetupTimerInterrupt+0x38>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <vPortSetupTimerInterrupt+0x3c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <vPortSetupTimerInterrupt+0x40>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	4a09      	ldr	r2, [pc, #36]	; (8004700 <vPortSetupTimerInterrupt+0x44>)
 80046da:	3b01      	subs	r3, #1
 80046dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046de:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <vPortSetupTimerInterrupt+0x34>)
 80046e0:	2207      	movs	r2, #7
 80046e2:	601a      	str	r2, [r3, #0]
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	e000e010 	.word	0xe000e010
 80046f4:	e000e018 	.word	0xe000e018
 80046f8:	20000010 	.word	0x20000010
 80046fc:	10624dd3 	.word	0x10624dd3
 8004700:	e000e014 	.word	0xe000e014

08004704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004714 <vPortEnableVFP+0x10>
 8004708:	6801      	ldr	r1, [r0, #0]
 800470a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800470e:	6001      	str	r1, [r0, #0]
 8004710:	4770      	bx	lr
 8004712:	0000      	.short	0x0000
 8004714:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop

0800471c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004722:	f3ef 8305 	mrs	r3, IPSR
 8004726:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b0f      	cmp	r3, #15
 800472c:	d914      	bls.n	8004758 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800472e:	4a17      	ldr	r2, [pc, #92]	; (800478c <vPortValidateInterruptPriority+0x70>)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004738:	4b15      	ldr	r3, [pc, #84]	; (8004790 <vPortValidateInterruptPriority+0x74>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	7afa      	ldrb	r2, [r7, #11]
 800473e:	429a      	cmp	r2, r3
 8004740:	d20a      	bcs.n	8004758 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	607b      	str	r3, [r7, #4]
    }
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <vPortValidateInterruptPriority+0x78>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004760:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <vPortValidateInterruptPriority+0x7c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d90a      	bls.n	800477e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	603b      	str	r3, [r7, #0]
    }
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <vPortValidateInterruptPriority+0x60>
    }
 800477e:	bf00      	nop
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	e000e3f0 	.word	0xe000e3f0
 8004790:	20000244 	.word	0x20000244
 8004794:	e000ed0c 	.word	0xe000ed0c
 8004798:	20000248 	.word	0x20000248

0800479c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80047a8:	f7ff f86c 	bl	8003884 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80047ac:	4b65      	ldr	r3, [pc, #404]	; (8004944 <pvPortMalloc+0x1a8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80047b4:	f000 f934 	bl	8004a20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047b8:	4b63      	ldr	r3, [pc, #396]	; (8004948 <pvPortMalloc+0x1ac>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f040 80a7 	bne.w	8004914 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d02d      	beq.n	8004828 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80047cc:	2208      	movs	r2, #8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d227      	bcs.n	8004828 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80047d8:	2208      	movs	r2, #8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4413      	add	r3, r2
 80047de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d021      	beq.n	800482e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f023 0307 	bic.w	r3, r3, #7
 80047f0:	3308      	adds	r3, #8
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d214      	bcs.n	8004822 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f023 0307 	bic.w	r3, r3, #7
 80047fe:	3308      	adds	r3, #8
 8004800:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	2b00      	cmp	r3, #0
 800480a:	d010      	beq.n	800482e <pvPortMalloc+0x92>
        __asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	617b      	str	r3, [r7, #20]
    }
 800481e:	bf00      	nop
 8004820:	e7fe      	b.n	8004820 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004826:	e002      	b.n	800482e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	e000      	b.n	8004830 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800482e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d06e      	beq.n	8004914 <pvPortMalloc+0x178>
 8004836:	4b45      	ldr	r3, [pc, #276]	; (800494c <pvPortMalloc+0x1b0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	d869      	bhi.n	8004914 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004840:	4b43      	ldr	r3, [pc, #268]	; (8004950 <pvPortMalloc+0x1b4>)
 8004842:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004844:	4b42      	ldr	r3, [pc, #264]	; (8004950 <pvPortMalloc+0x1b4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800484a:	e004      	b.n	8004856 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d903      	bls.n	8004868 <pvPortMalloc+0xcc>
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f1      	bne.n	800484c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004868:	4b36      	ldr	r3, [pc, #216]	; (8004944 <pvPortMalloc+0x1a8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486e:	429a      	cmp	r2, r3
 8004870:	d050      	beq.n	8004914 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2208      	movs	r2, #8
 8004878:	4413      	add	r3, r2
 800487a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	1ad2      	subs	r2, r2, r3
 800488c:	2308      	movs	r3, #8
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	429a      	cmp	r2, r3
 8004892:	d91f      	bls.n	80048d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4413      	add	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <pvPortMalloc+0x120>
        __asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	613b      	str	r3, [r7, #16]
    }
 80048b8:	bf00      	nop
 80048ba:	e7fe      	b.n	80048ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048ce:	69b8      	ldr	r0, [r7, #24]
 80048d0:	f000 f908 	bl	8004ae4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048d4:	4b1d      	ldr	r3, [pc, #116]	; (800494c <pvPortMalloc+0x1b0>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	4a1b      	ldr	r2, [pc, #108]	; (800494c <pvPortMalloc+0x1b0>)
 80048e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048e2:	4b1a      	ldr	r3, [pc, #104]	; (800494c <pvPortMalloc+0x1b0>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <pvPortMalloc+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d203      	bcs.n	80048f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048ee:	4b17      	ldr	r3, [pc, #92]	; (800494c <pvPortMalloc+0x1b0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a18      	ldr	r2, [pc, #96]	; (8004954 <pvPortMalloc+0x1b8>)
 80048f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	4b13      	ldr	r3, [pc, #76]	; (8004948 <pvPortMalloc+0x1ac>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	431a      	orrs	r2, r3
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <pvPortMalloc+0x1bc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3301      	adds	r3, #1
 8004910:	4a11      	ldr	r2, [pc, #68]	; (8004958 <pvPortMalloc+0x1bc>)
 8004912:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004914:	f7fe ffc4 	bl	80038a0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <pvPortMalloc+0x19c>
        __asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	60fb      	str	r3, [r7, #12]
    }
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <pvPortMalloc+0x19a>
    return pvReturn;
 8004938:	69fb      	ldr	r3, [r7, #28]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3728      	adds	r7, #40	; 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20016a54 	.word	0x20016a54
 8004948:	20016a68 	.word	0x20016a68
 800494c:	20016a58 	.word	0x20016a58
 8004950:	20016a4c 	.word	0x20016a4c
 8004954:	20016a5c 	.word	0x20016a5c
 8004958:	20016a60 	.word	0x20016a60

0800495c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04d      	beq.n	8004a0a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800496e:	2308      	movs	r3, #8
 8004970:	425b      	negs	r3, r3
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4413      	add	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <vPortFree+0xb8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4013      	ands	r3, r2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <vPortFree+0x44>
        __asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60fb      	str	r3, [r7, #12]
    }
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <vPortFree+0x62>
        __asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	60bb      	str	r3, [r7, #8]
    }
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <vPortFree+0xb8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01e      	beq.n	8004a0a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d11a      	bne.n	8004a0a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <vPortFree+0xb8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	43db      	mvns	r3, r3
 80049de:	401a      	ands	r2, r3
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80049e4:	f7fe ff4e 	bl	8003884 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <vPortFree+0xbc>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <vPortFree+0xbc>)
 80049f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049f6:	6938      	ldr	r0, [r7, #16]
 80049f8:	f000 f874 	bl	8004ae4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80049fc:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <vPortFree+0xc0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	4a06      	ldr	r2, [pc, #24]	; (8004a1c <vPortFree+0xc0>)
 8004a04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004a06:	f7fe ff4b 	bl	80038a0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20016a68 	.word	0x20016a68
 8004a18:	20016a58 	.word	0x20016a58
 8004a1c:	20016a64 	.word	0x20016a64

08004a20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a26:	f44f 33b4 	mov.w	r3, #92160	; 0x16800
 8004a2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <prvHeapInit+0xac>)
 8004a2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3307      	adds	r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0307 	bic.w	r3, r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	4a1f      	ldr	r2, [pc, #124]	; (8004acc <prvHeapInit+0xac>)
 8004a50:	4413      	add	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a58:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <prvHeapInit+0xb0>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <prvHeapInit+0xb0>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	4413      	add	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <prvHeapInit+0xb4>)
 8004a80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a82:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <prvHeapInit+0xb4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004a8a:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <prvHeapInit+0xb4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	1ad2      	subs	r2, r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <prvHeapInit+0xb4>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <prvHeapInit+0xb8>)
 8004aae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a09      	ldr	r2, [pc, #36]	; (8004adc <prvHeapInit+0xbc>)
 8004ab6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <prvHeapInit+0xc0>)
 8004aba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004abe:	601a      	str	r2, [r3, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	2000024c 	.word	0x2000024c
 8004ad0:	20016a4c 	.word	0x20016a4c
 8004ad4:	20016a54 	.word	0x20016a54
 8004ad8:	20016a5c 	.word	0x20016a5c
 8004adc:	20016a58 	.word	0x20016a58
 8004ae0:	20016a68 	.word	0x20016a68

08004ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004aec:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <prvInsertBlockIntoFreeList+0xac>)
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e002      	b.n	8004af8 <prvInsertBlockIntoFreeList+0x14>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d8f7      	bhi.n	8004af2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d108      	bne.n	8004b26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	441a      	add	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	441a      	add	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d118      	bne.n	8004b6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <prvInsertBlockIntoFreeList+0xb0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d00d      	beq.n	8004b62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	441a      	add	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e008      	b.n	8004b74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b62:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <prvInsertBlockIntoFreeList+0xb0>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e003      	b.n	8004b74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d002      	beq.n	8004b82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20016a4c 	.word	0x20016a4c
 8004b94:	20016a54 	.word	0x20016a54

08004b98 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b9c:	4803      	ldr	r0, [pc, #12]	; (8004bac <_cbSendSystemDesc+0x14>)
 8004b9e:	f002 f899 	bl	8006cd4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004ba2:	4803      	ldr	r0, [pc, #12]	; (8004bb0 <_cbSendSystemDesc+0x18>)
 8004ba4:	f002 f896 	bl	8006cd4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ba8:	bf00      	nop
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	0800877c 	.word	0x0800877c
 8004bb0:	080087b0 	.word	0x080087b0

08004bb4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004bbe:	6819      	ldr	r1, [r3, #0]
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004bc2:	4a06      	ldr	r2, [pc, #24]	; (8004bdc <SEGGER_SYSVIEW_Conf+0x28>)
 8004bc4:	f001 fc02 	bl	80063cc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004bc8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004bcc:	f001 fc42 	bl	8006454 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004bd0:	bf00      	nop
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000010 	.word	0x20000010
 8004bd8:	08004b99 	.word	0x08004b99
 8004bdc:	08008850 	.word	0x08008850

08004be0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	e033      	b.n	8004c54 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004bec:	491e      	ldr	r1, [pc, #120]	; (8004c68 <_cbSendTaskList+0x88>)
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	491a      	ldr	r1, [pc, #104]	; (8004c68 <_cbSendTaskList+0x88>)
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	6819      	ldr	r1, [r3, #0]
 8004c0e:	4c16      	ldr	r4, [pc, #88]	; (8004c68 <_cbSendTaskList+0x88>)
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4423      	add	r3, r4
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	681c      	ldr	r4, [r3, #0]
 8004c20:	4d11      	ldr	r5, [pc, #68]	; (8004c68 <_cbSendTaskList+0x88>)
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	442b      	add	r3, r5
 8004c2e:	330c      	adds	r3, #12
 8004c30:	681d      	ldr	r5, [r3, #0]
 8004c32:	4e0d      	ldr	r6, [pc, #52]	; (8004c68 <_cbSendTaskList+0x88>)
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4433      	add	r3, r6
 8004c40:	3310      	adds	r3, #16
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	462b      	mov	r3, r5
 8004c48:	4622      	mov	r2, r4
 8004c4a:	f000 f8b5 	bl	8004db8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3301      	adds	r3, #1
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <_cbSendTaskList+0x8c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d3c6      	bcc.n	8004bec <_cbSendTaskList+0xc>
  }
}
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c68:	20016a6c 	.word	0x20016a6c
 8004c6c:	20016b0c 	.word	0x20016b0c

08004c70 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c70:	b5b0      	push	{r4, r5, r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c76:	f7fe fec3 	bl	8003a00 <xTaskGetTickCountFromISR>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	f04f 0400 	mov.w	r4, #0
 8004c92:	f04f 0500 	mov.w	r5, #0
 8004c96:	015d      	lsls	r5, r3, #5
 8004c98:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004c9c:	0154      	lsls	r4, r2, #5
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	1a12      	subs	r2, r2, r0
 8004ca4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ca8:	f04f 0400 	mov.w	r4, #0
 8004cac:	f04f 0500 	mov.w	r5, #0
 8004cb0:	009d      	lsls	r5, r3, #2
 8004cb2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004cb6:	0094      	lsls	r4, r2, #2
 8004cb8:	4622      	mov	r2, r4
 8004cba:	462b      	mov	r3, r5
 8004cbc:	1812      	adds	r2, r2, r0
 8004cbe:	eb41 0303 	adc.w	r3, r1, r3
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	00d9      	lsls	r1, r3, #3
 8004ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cd0:	00d0      	lsls	r0, r2, #3
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004cda:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004cde:	4610      	mov	r0, r2
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bdb0      	pop	{r4, r5, r7, pc}

08004ce8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004cf6:	2205      	movs	r2, #5
 8004cf8:	492b      	ldr	r1, [pc, #172]	; (8004da8 <SYSVIEW_AddTask+0xc0>)
 8004cfa:	68b8      	ldr	r0, [r7, #8]
 8004cfc:	f003 f8b6 	bl	8007e6c <memcmp>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d04b      	beq.n	8004d9e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004d06:	4b29      	ldr	r3, [pc, #164]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b07      	cmp	r3, #7
 8004d0c:	d903      	bls.n	8004d16 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004d0e:	4828      	ldr	r0, [pc, #160]	; (8004db0 <SYSVIEW_AddTask+0xc8>)
 8004d10:	f002 faf2 	bl	80072f8 <SEGGER_SYSVIEW_Warn>
    return;
 8004d14:	e044      	b.n	8004da0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d16:	4b25      	ldr	r3, [pc, #148]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4926      	ldr	r1, [pc, #152]	; (8004db4 <SYSVIEW_AddTask+0xcc>)
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d2a:	4b20      	ldr	r3, [pc, #128]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4921      	ldr	r1, [pc, #132]	; (8004db4 <SYSVIEW_AddTask+0xcc>)
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	491b      	ldr	r1, [pc, #108]	; (8004db4 <SYSVIEW_AddTask+0xcc>)
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	3308      	adds	r3, #8
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4916      	ldr	r1, [pc, #88]	; (8004db4 <SYSVIEW_AddTask+0xcc>)
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	330c      	adds	r3, #12
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4910      	ldr	r1, [pc, #64]	; (8004db4 <SYSVIEW_AddTask+0xcc>)
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	3310      	adds	r3, #16
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	4a08      	ldr	r2, [pc, #32]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d8a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f80e 	bl	8004db8 <SYSVIEW_SendTaskInfo>
 8004d9c:	e000      	b.n	8004da0 <SYSVIEW_AddTask+0xb8>
    return;
 8004d9e:	bf00      	nop

}
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	080087c0 	.word	0x080087c0
 8004dac:	20016b0c 	.word	0x20016b0c
 8004db0:	080087c8 	.word	0x080087c8
 8004db4:	20016a6c 	.word	0x20016a6c

08004db8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08a      	sub	sp, #40	; 0x28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004dc6:	f107 0314 	add.w	r3, r7, #20
 8004dca:	2214      	movs	r2, #20
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f003 f868 	bl	8007ea4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004de8:	f107 0314 	add.w	r3, r7, #20
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 fe79 	bl	8006ae4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004df2:	bf00      	nop
 8004df4:	3728      	adds	r7, #40	; 0x28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <__NVIC_EnableIRQ>:
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	db0b      	blt.n	8004e26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	f003 021f 	and.w	r2, r3, #31
 8004e14:	4907      	ldr	r1, [pc, #28]	; (8004e34 <__NVIC_EnableIRQ+0x38>)
 8004e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	e000e100 	.word	0xe000e100

08004e38 <__NVIC_SetPriority>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	db0a      	blt.n	8004e62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	490c      	ldr	r1, [pc, #48]	; (8004e84 <__NVIC_SetPriority+0x4c>)
 8004e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e56:	0112      	lsls	r2, r2, #4
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e60:	e00a      	b.n	8004e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	4908      	ldr	r1, [pc, #32]	; (8004e88 <__NVIC_SetPriority+0x50>)
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	3b04      	subs	r3, #4
 8004e70:	0112      	lsls	r2, r2, #4
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	440b      	add	r3, r1
 8004e76:	761a      	strb	r2, [r3, #24]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	e000e100 	.word	0xe000e100
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004e92:	f002 fa8d 	bl	80073b0 <SEGGER_SYSVIEW_IsStarted>
 8004e96:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004e9e:	f001 fca5 	bl	80067ec <SEGGER_SYSVIEW_Start>
  }
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <_cbOnUARTRx+0x3c>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d806      	bhi.n	8004ecc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <_cbOnUARTRx+0x3c>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	4b08      	ldr	r3, [pc, #32]	; (8004ee8 <_cbOnUARTRx+0x3c>)
 8004ec8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004eca:	e009      	b.n	8004ee0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004ecc:	f7ff ffde 	bl	8004e8c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <_cbOnUARTRx+0x3c>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	1dfb      	adds	r3, r7, #7
 8004ed8:	2201      	movs	r2, #1
 8004eda:	4619      	mov	r1, r3
 8004edc:	f000 fb9a 	bl	8005614 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004ee0:	bf00      	nop
}
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000024 	.word	0x20000024

08004eec <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004ef4:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <_cbOnUARTTx+0x5c>)
 8004ef6:	785b      	ldrb	r3, [r3, #1]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d80f      	bhi.n	8004f1c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004efc:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <_cbOnUARTTx+0x5c>)
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	461a      	mov	r2, r3
 8004f02:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <_cbOnUARTTx+0x60>)
 8004f04:	5c9a      	ldrb	r2, [r3, r2]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004f0a:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <_cbOnUARTTx+0x5c>)
 8004f0c:	785b      	ldrb	r3, [r3, #1]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <_cbOnUARTTx+0x5c>)
 8004f14:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004f16:	2301      	movs	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004f1a:	e00f      	b.n	8004f3c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <_cbOnUARTTx+0x5c>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fa19 	bl	800535c <SEGGER_RTT_ReadUpBufferNoLock>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	da02      	bge.n	8004f3a <_cbOnUARTTx+0x4e>
    r = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e000      	b.n	8004f3c <_cbOnUARTTx+0x50>
  }
Done:
 8004f3a:	bf00      	nop
  return r;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000024 	.word	0x20000024
 8004f4c:	08008858 	.word	0x08008858

08004f50 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004f58:	4a04      	ldr	r2, [pc, #16]	; (8004f6c <SEGGER_UART_init+0x1c>)
 8004f5a:	4905      	ldr	r1, [pc, #20]	; (8004f70 <SEGGER_UART_init+0x20>)
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f863 	bl	8005028 <HIF_UART_Init>
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	08004ead 	.word	0x08004ead
 8004f70:	08004eed 	.word	0x08004eed

08004f74 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004f7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <USART2_IRQHandler+0x80>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d011      	beq.n	8004fae <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004f8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <USART2_IRQHandler+0x84>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 030b 	and.w	r3, r3, #11
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d108      	bne.n	8004fae <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004f9c:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <USART2_IRQHandler+0x88>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d004      	beq.n	8004fae <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004fa4:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <USART2_IRQHandler+0x88>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	79fa      	ldrb	r2, [r7, #7]
 8004faa:	4610      	mov	r0, r2
 8004fac:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01a      	beq.n	8004fee <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <USART2_IRQHandler+0x8c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d015      	beq.n	8004fec <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <USART2_IRQHandler+0x8c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	1dfa      	adds	r2, r7, #7
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4798      	blx	r3
 8004fca:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <USART2_IRQHandler+0x90>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a0b      	ldr	r2, [pc, #44]	; (8005004 <USART2_IRQHandler+0x90>)
 8004fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	e006      	b.n	8004fee <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004fe0:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <USART2_IRQHandler+0x80>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004fe4:	79fa      	ldrb	r2, [r7, #7]
 8004fe6:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <USART2_IRQHandler+0x84>)
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e000      	b.n	8004fee <USART2_IRQHandler+0x7a>
      return;
 8004fec:	bf00      	nop
    }
  }
}
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40004400 	.word	0x40004400
 8004ff8:	40004404 	.word	0x40004404
 8004ffc:	20016b10 	.word	0x20016b10
 8005000:	20016b14 	.word	0x20016b14
 8005004:	4000440c 	.word	0x4000440c

08005008 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a04      	ldr	r2, [pc, #16]	; (8005024 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005016:	6013      	str	r3, [r2, #0]
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	4000440c 	.word	0x4000440c

08005028 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005034:	4b2e      	ldr	r3, [pc, #184]	; (80050f0 <HIF_UART_Init+0xc8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a2d      	ldr	r2, [pc, #180]	; (80050f0 <HIF_UART_Init+0xc8>)
 800503a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800503e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005040:	4b2c      	ldr	r3, [pc, #176]	; (80050f4 <HIF_UART_Init+0xcc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a2b      	ldr	r2, [pc, #172]	; (80050f4 <HIF_UART_Init+0xcc>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800504c:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <HIF_UART_Init+0xd0>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005058:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005060:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005062:	4a25      	ldr	r2, [pc, #148]	; (80050f8 <HIF_UART_Init+0xd0>)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005068:	4b24      	ldr	r3, [pc, #144]	; (80050fc <HIF_UART_Init+0xd4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005074:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800507c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <HIF_UART_Init+0xd4>)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005084:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <HIF_UART_Init+0xd8>)
 8005086:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800508a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800508c:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <HIF_UART_Init+0xdc>)
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005092:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <HIF_UART_Init+0xe0>)
 8005094:	2280      	movs	r2, #128	; 0x80
 8005096:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800509e:	4a1b      	ldr	r2, [pc, #108]	; (800510c <HIF_UART_Init+0xe4>)
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a6:	3301      	adds	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b6:	d302      	bcc.n	80050be <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80050b8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80050bc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	4a11      	ldr	r2, [pc, #68]	; (8005110 <HIF_UART_Init+0xe8>)
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80050ce:	4a11      	ldr	r2, [pc, #68]	; (8005114 <HIF_UART_Init+0xec>)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80050d4:	4a10      	ldr	r2, [pc, #64]	; (8005118 <HIF_UART_Init+0xf0>)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80050da:	2106      	movs	r1, #6
 80050dc:	2026      	movs	r0, #38	; 0x26
 80050de:	f7ff feab 	bl	8004e38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80050e2:	2026      	movs	r0, #38	; 0x26
 80050e4:	f7ff fe8a 	bl	8004dfc <__NVIC_EnableIRQ>
}
 80050e8:	bf00      	nop
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40023840 	.word	0x40023840
 80050f4:	40023830 	.word	0x40023830
 80050f8:	40020020 	.word	0x40020020
 80050fc:	40020000 	.word	0x40020000
 8005100:	4000440c 	.word	0x4000440c
 8005104:	40004410 	.word	0x40004410
 8005108:	40004414 	.word	0x40004414
 800510c:	05f5e100 	.word	0x05f5e100
 8005110:	40004408 	.word	0x40004408
 8005114:	20016b10 	.word	0x20016b10
 8005118:	20016b14 	.word	0x20016b14

0800511c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005122:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <_DoInit+0x98>)
 8005124:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2203      	movs	r2, #3
 800512a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2203      	movs	r2, #3
 8005130:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <_DoInit+0x9c>)
 8005136:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a20      	ldr	r2, [pc, #128]	; (80051bc <_DoInit+0xa0>)
 800513c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005144:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <_DoInit+0x9c>)
 800515c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <_DoInit+0xa4>)
 8005162:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2210      	movs	r2, #16
 8005168:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3307      	adds	r3, #7
 8005180:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <_DoInit+0xa8>)
 8005182:	6810      	ldr	r0, [r2, #0]
 8005184:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005186:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a0e      	ldr	r2, [pc, #56]	; (80051c8 <_DoInit+0xac>)
 800518e:	6810      	ldr	r0, [r2, #0]
 8005190:	6018      	str	r0, [r3, #0]
 8005192:	8891      	ldrh	r1, [r2, #4]
 8005194:	7992      	ldrb	r2, [r2, #6]
 8005196:	8099      	strh	r1, [r3, #4]
 8005198:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800519a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051a4:	f3bf 8f5f 	dmb	sy
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	2001751c 	.word	0x2001751c
 80051b8:	08008818 	.word	0x08008818
 80051bc:	20016b18 	.word	0x20016b18
 80051c0:	20016f18 	.word	0x20016f18
 80051c4:	08008824 	.word	0x08008824
 80051c8:	08008828 	.word	0x08008828

080051cc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	; 0x28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80051d8:	2300      	movs	r3, #0
 80051da:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d905      	bls.n	80051fc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	e007      	b.n	800520c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	69b9      	ldr	r1, [r7, #24]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	1acb      	subs	r3, r1, r3
 8005206:	4413      	add	r3, r2
 8005208:	3b01      	subs	r3, #1
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	4293      	cmp	r3, r2
 8005218:	bf28      	it	cs
 800521a:	4613      	movcs	r3, r2
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800521e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4293      	cmp	r3, r2
 8005224:	bf28      	it	cs
 8005226:	4613      	movcs	r3, r2
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	6978      	ldr	r0, [r7, #20]
 800523a:	f002 fe25 	bl	8007e88 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800523e:	6a3a      	ldr	r2, [r7, #32]
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	4413      	add	r3, r2
 8005244:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	4413      	add	r3, r2
 800524c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	4413      	add	r3, r2
 800525c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	429a      	cmp	r2, r3
 8005266:	d101      	bne.n	800526c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800526c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1b2      	bne.n	80051e2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800527c:	6a3b      	ldr	r3, [r7, #32]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3728      	adds	r7, #40	; 0x28
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005286:	b580      	push	{r7, lr}
 8005288:	b088      	sub	sp, #32
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d911      	bls.n	80052ce <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	6938      	ldr	r0, [r7, #16]
 80052ba:	f002 fde5 	bl	8007e88 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052be:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	441a      	add	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80052cc:	e01f      	b.n	800530e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	6938      	ldr	r0, [r7, #16]
 80052e2:	f002 fdd1 	bl	8007e88 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	4413      	add	r3, r2
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4619      	mov	r1, r3
 80052fe:	6938      	ldr	r0, [r7, #16]
 8005300:	f002 fdc2 	bl	8007e88 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005304:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	60da      	str	r2, [r3, #12]
}
 800530e:	bf00      	nop
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005316:	b480      	push	{r7}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	429a      	cmp	r2, r3
 8005330:	d808      	bhi.n	8005344 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1ad2      	subs	r2, r2, r3
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	4413      	add	r3, r2
 800533e:	3b01      	subs	r3, #1
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e004      	b.n	800534e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800534e:	697b      	ldr	r3, [r7, #20]
}
 8005350:	4618      	mov	r0, r3
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	; 0x30
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005368:	4b3e      	ldr	r3, [pc, #248]	; (8005464 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800536a:	623b      	str	r3, [r7, #32]
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005376:	f7ff fed1 	bl	800511c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	4613      	mov	r3, r2
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4a37      	ldr	r2, [pc, #220]	; (8005464 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005388:	4413      	add	r3, r2
 800538a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800539c:	2300      	movs	r3, #0
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80053a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d92b      	bls.n	8005400 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4293      	cmp	r3, r2
 80053b8:	bf28      	it	cs
 80053ba:	4613      	movcs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	4413      	add	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	6939      	ldr	r1, [r7, #16]
 80053cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ce:	f002 fd5b 	bl	8007e88 <memcpy>
    NumBytesRead += NumBytesRem;
 80053d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d101      	bne.n	8005400 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80053fc:	2300      	movs	r3, #0
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4293      	cmp	r3, r2
 800540e:	bf28      	it	cs
 8005410:	4613      	movcs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d019      	beq.n	800544e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	4413      	add	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	6939      	ldr	r1, [r7, #16]
 8005428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800542a:	f002 fd2d 	bl	8007e88 <memcpy>
    NumBytesRead += NumBytesRem;
 800542e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4413      	add	r3, r2
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	4413      	add	r3, r2
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005458:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800545c:	4618      	mov	r0, r3
 800545e:	3730      	adds	r7, #48	; 0x30
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	2001751c 	.word	0x2001751c

08005468 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b08c      	sub	sp, #48	; 0x30
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005474:	4b3e      	ldr	r3, [pc, #248]	; (8005570 <SEGGER_RTT_ReadNoLock+0x108>)
 8005476:	623b      	str	r3, [r7, #32]
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <SEGGER_RTT_ReadNoLock+0x1e>
 8005482:	f7ff fe4b 	bl	800511c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4613      	mov	r3, r2
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	4413      	add	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	3360      	adds	r3, #96	; 0x60
 8005492:	4a37      	ldr	r2, [pc, #220]	; (8005570 <SEGGER_RTT_ReadNoLock+0x108>)
 8005494:	4413      	add	r3, r2
 8005496:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80054a8:	2300      	movs	r3, #0
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80054ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d92b      	bls.n	800550c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4293      	cmp	r3, r2
 80054c4:	bf28      	it	cs
 80054c6:	4613      	movcs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	4413      	add	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	6939      	ldr	r1, [r7, #16]
 80054d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054da:	f002 fcd5 	bl	8007e88 <memcpy>
    NumBytesRead += NumBytesRem;
 80054de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4413      	add	r3, r2
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005504:	429a      	cmp	r2, r3
 8005506:	d101      	bne.n	800550c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005508:	2300      	movs	r3, #0
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4293      	cmp	r3, r2
 800551a:	bf28      	it	cs
 800551c:	4613      	movcs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d019      	beq.n	800555a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	4413      	add	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	6939      	ldr	r1, [r7, #16]
 8005534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005536:	f002 fca7 	bl	8007e88 <memcpy>
    NumBytesRead += NumBytesRem;
 800553a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	4413      	add	r3, r2
 8005540:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	4413      	add	r3, r2
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4413      	add	r3, r2
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005564:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005568:	4618      	mov	r0, r3
 800556a:	3730      	adds	r7, #48	; 0x30
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	2001751c 	.word	0x2001751c

08005574 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4613      	mov	r3, r2
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4413      	add	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	3360      	adds	r3, #96	; 0x60
 8005590:	4a1f      	ldr	r2, [pc, #124]	; (8005610 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005592:	4413      	add	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d029      	beq.n	80055f2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d82e      	bhi.n	8005600 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d013      	beq.n	80055d2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80055aa:	e029      	b.n	8005600 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055ac:	6978      	ldr	r0, [r7, #20]
 80055ae:	f7ff feb2 	bl	8005316 <_GetAvailWriteSpace>
 80055b2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d202      	bcs.n	80055c2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80055bc:	2300      	movs	r3, #0
 80055be:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80055c0:	e021      	b.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	69b9      	ldr	r1, [r7, #24]
 80055ca:	6978      	ldr	r0, [r7, #20]
 80055cc:	f7ff fe5b 	bl	8005286 <_WriteNoCheck>
    break;
 80055d0:	e019      	b.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055d2:	6978      	ldr	r0, [r7, #20]
 80055d4:	f7ff fe9f 	bl	8005316 <_GetAvailWriteSpace>
 80055d8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4293      	cmp	r3, r2
 80055e0:	bf28      	it	cs
 80055e2:	4613      	movcs	r3, r2
 80055e4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	69b9      	ldr	r1, [r7, #24]
 80055ea:	6978      	ldr	r0, [r7, #20]
 80055ec:	f7ff fe4b 	bl	8005286 <_WriteNoCheck>
    break;
 80055f0:	e009      	b.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	69b9      	ldr	r1, [r7, #24]
 80055f6:	6978      	ldr	r0, [r7, #20]
 80055f8:	f7ff fde8 	bl	80051cc <_WriteBlocking>
 80055fc:	61f8      	str	r0, [r7, #28]
    break;
 80055fe:	e002      	b.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005600:	2300      	movs	r3, #0
 8005602:	61fb      	str	r3, [r7, #28]
    break;
 8005604:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005606:	69fb      	ldr	r3, [r7, #28]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	2001751c 	.word	0x2001751c

08005614 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005620:	4b0e      	ldr	r3, [pc, #56]	; (800565c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800562e:	f7ff fd75 	bl	800511c <_DoInit>
  SEGGER_RTT_LOCK();
 8005632:	f3ef 8311 	mrs	r3, BASEPRI
 8005636:	f04f 0120 	mov.w	r1, #32
 800563a:	f381 8811 	msr	BASEPRI, r1
 800563e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff ff95 	bl	8005574 <SEGGER_RTT_WriteDownBufferNoLock>
 800564a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005652:	697b      	ldr	r3, [r7, #20]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3720      	adds	r7, #32
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	2001751c 	.word	0x2001751c

08005660 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800566e:	4b3d      	ldr	r3, [pc, #244]	; (8005764 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <SEGGER_RTT_AllocUpBuffer+0x20>
 800567c:	f7ff fd4e 	bl	800511c <_DoInit>
  SEGGER_RTT_LOCK();
 8005680:	f3ef 8311 	mrs	r3, BASEPRI
 8005684:	f04f 0120 	mov.w	r1, #32
 8005688:	f381 8811 	msr	BASEPRI, r1
 800568c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800568e:	4b35      	ldr	r3, [pc, #212]	; (8005764 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005690:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005696:	6939      	ldr	r1, [r7, #16]
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	4613      	mov	r3, r2
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	440b      	add	r3, r1
 80056a6:	3304      	adds	r3, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d008      	beq.n	80056c0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	3301      	adds	r3, #1
 80056b2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	dbeb      	blt.n	8005696 <SEGGER_RTT_AllocUpBuffer+0x36>
 80056be:	e000      	b.n	80056c2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80056c0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	da3f      	bge.n	800574c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80056cc:	6939      	ldr	r1, [r7, #16]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	4613      	mov	r3, r2
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	4413      	add	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	440b      	add	r3, r1
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80056e0:	6939      	ldr	r1, [r7, #16]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	4613      	mov	r3, r2
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	4413      	add	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	440b      	add	r3, r1
 80056f0:	3304      	adds	r3, #4
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80056f6:	6939      	ldr	r1, [r7, #16]
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	4613      	mov	r3, r2
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	4413      	add	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	440b      	add	r3, r1
 8005704:	3320      	adds	r3, #32
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800570a:	6939      	ldr	r1, [r7, #16]
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	4613      	mov	r3, r2
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	4413      	add	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	440b      	add	r3, r1
 8005718:	3328      	adds	r3, #40	; 0x28
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800571e:	6939      	ldr	r1, [r7, #16]
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	4613      	mov	r3, r2
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	4413      	add	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	440b      	add	r3, r1
 800572c:	3324      	adds	r3, #36	; 0x24
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005732:	6939      	ldr	r1, [r7, #16]
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	440b      	add	r3, r1
 8005740:	332c      	adds	r3, #44	; 0x2c
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005746:	f3bf 8f5f 	dmb	sy
 800574a:	e002      	b.n	8005752 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005758:	69fb      	ldr	r3, [r7, #28]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	2001751c 	.word	0x2001751c

08005768 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005776:	4b33      	ldr	r3, [pc, #204]	; (8005844 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005784:	f7ff fcca 	bl	800511c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005788:	4b2e      	ldr	r3, [pc, #184]	; (8005844 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800578a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	461a      	mov	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4293      	cmp	r3, r2
 8005796:	d24d      	bcs.n	8005834 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005798:	f3ef 8311 	mrs	r3, BASEPRI
 800579c:	f04f 0120 	mov.w	r1, #32
 80057a0:	f381 8811 	msr	BASEPRI, r1
 80057a4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d031      	beq.n	8005810 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80057ac:	6979      	ldr	r1, [r7, #20]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4613      	mov	r3, r2
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	4413      	add	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	440b      	add	r3, r1
 80057ba:	3360      	adds	r3, #96	; 0x60
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80057c0:	6979      	ldr	r1, [r7, #20]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4613      	mov	r3, r2
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	4413      	add	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	440b      	add	r3, r1
 80057ce:	3364      	adds	r3, #100	; 0x64
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80057d4:	6979      	ldr	r1, [r7, #20]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4613      	mov	r3, r2
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	4413      	add	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	440b      	add	r3, r1
 80057e2:	3368      	adds	r3, #104	; 0x68
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80057e8:	6979      	ldr	r1, [r7, #20]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4613      	mov	r3, r2
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	4413      	add	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	440b      	add	r3, r1
 80057f6:	3370      	adds	r3, #112	; 0x70
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80057fc:	6979      	ldr	r1, [r7, #20]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4613      	mov	r3, r2
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4413      	add	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	440b      	add	r3, r1
 800580a:	336c      	adds	r3, #108	; 0x6c
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005810:	6979      	ldr	r1, [r7, #20]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4613      	mov	r3, r2
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	4413      	add	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	440b      	add	r3, r1
 800581e:	3374      	adds	r3, #116	; 0x74
 8005820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005822:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005824:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	e002      	b.n	800583a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005834:	f04f 33ff 	mov.w	r3, #4294967295
 8005838:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800583a:	69fb      	ldr	r3, [r7, #28]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	2001751c 	.word	0x2001751c

08005848 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005858:	e002      	b.n	8005860 <_EncodeStr+0x18>
    Len++;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3301      	adds	r3, #1
 800585e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4413      	add	r3, r2
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f6      	bne.n	800585a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	d901      	bls.n	8005878 <_EncodeStr+0x30>
    Len = Limit;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2bfe      	cmp	r3, #254	; 0xfe
 800587c:	d806      	bhi.n	800588c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	60fa      	str	r2, [r7, #12]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	e011      	b.n	80058b0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	60fa      	str	r2, [r7, #12]
 8005892:	22ff      	movs	r2, #255	; 0xff
 8005894:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	60fa      	str	r2, [r7, #12]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	0a19      	lsrs	r1, r3, #8
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	60fa      	str	r2, [r7, #12]
 80058ac:	b2ca      	uxtb	r2, r1
 80058ae:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80058b4:	e00a      	b.n	80058cc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	1c53      	adds	r3, r2, #1
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1c59      	adds	r1, r3, #1
 80058c0:	60f9      	str	r1, [r7, #12]
 80058c2:	7812      	ldrb	r2, [r2, #0]
 80058c4:	701a      	strb	r2, [r3, #0]
    n++;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	3301      	adds	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d3f0      	bcc.n	80058b6 <_EncodeStr+0x6e>
  }
  return pPayload;
 80058d4:	68fb      	ldr	r3, [r7, #12]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3304      	adds	r3, #4
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005902:	4b36      	ldr	r3, [pc, #216]	; (80059dc <_HandleIncomingPacket+0xe0>)
 8005904:	7e1b      	ldrb	r3, [r3, #24]
 8005906:	4618      	mov	r0, r3
 8005908:	1cfb      	adds	r3, r7, #3
 800590a:	2201      	movs	r2, #1
 800590c:	4619      	mov	r1, r3
 800590e:	f7ff fdab 	bl	8005468 <SEGGER_RTT_ReadNoLock>
 8005912:	4603      	mov	r3, r0
 8005914:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	dd54      	ble.n	80059c6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d032      	beq.n	8005988 <_HandleIncomingPacket+0x8c>
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	dc42      	bgt.n	80059ac <_HandleIncomingPacket+0xb0>
 8005926:	2b07      	cmp	r3, #7
 8005928:	dc16      	bgt.n	8005958 <_HandleIncomingPacket+0x5c>
 800592a:	2b00      	cmp	r3, #0
 800592c:	dd3e      	ble.n	80059ac <_HandleIncomingPacket+0xb0>
 800592e:	3b01      	subs	r3, #1
 8005930:	2b06      	cmp	r3, #6
 8005932:	d83b      	bhi.n	80059ac <_HandleIncomingPacket+0xb0>
 8005934:	a201      	add	r2, pc, #4	; (adr r2, 800593c <_HandleIncomingPacket+0x40>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	0800595f 	.word	0x0800595f
 8005940:	08005965 	.word	0x08005965
 8005944:	0800596b 	.word	0x0800596b
 8005948:	08005971 	.word	0x08005971
 800594c:	08005977 	.word	0x08005977
 8005950:	0800597d 	.word	0x0800597d
 8005954:	08005983 	.word	0x08005983
 8005958:	2b7f      	cmp	r3, #127	; 0x7f
 800595a:	d036      	beq.n	80059ca <_HandleIncomingPacket+0xce>
 800595c:	e026      	b.n	80059ac <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800595e:	f000 ff45 	bl	80067ec <SEGGER_SYSVIEW_Start>
      break;
 8005962:	e037      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005964:	f000 fffe 	bl	8006964 <SEGGER_SYSVIEW_Stop>
      break;
 8005968:	e034      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800596a:	f001 f9d7 	bl	8006d1c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800596e:	e031      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005970:	f001 f99c 	bl	8006cac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005974:	e02e      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005976:	f001 f81b 	bl	80069b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800597a:	e02b      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800597c:	f001 fc6a 	bl	8007254 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005980:	e028      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005982:	f001 fc49 	bl	8007218 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005986:	e025      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005988:	4b14      	ldr	r3, [pc, #80]	; (80059dc <_HandleIncomingPacket+0xe0>)
 800598a:	7e1b      	ldrb	r3, [r3, #24]
 800598c:	4618      	mov	r0, r3
 800598e:	1cfb      	adds	r3, r7, #3
 8005990:	2201      	movs	r2, #1
 8005992:	4619      	mov	r1, r3
 8005994:	f7ff fd68 	bl	8005468 <SEGGER_RTT_ReadNoLock>
 8005998:	4603      	mov	r3, r0
 800599a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	dd15      	ble.n	80059ce <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 fbb7 	bl	8007118 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80059aa:	e010      	b.n	80059ce <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	b25b      	sxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	da0e      	bge.n	80059d2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80059b4:	4b09      	ldr	r3, [pc, #36]	; (80059dc <_HandleIncomingPacket+0xe0>)
 80059b6:	7e1b      	ldrb	r3, [r3, #24]
 80059b8:	4618      	mov	r0, r3
 80059ba:	1cfb      	adds	r3, r7, #3
 80059bc:	2201      	movs	r2, #1
 80059be:	4619      	mov	r1, r3
 80059c0:	f7ff fd52 	bl	8005468 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80059c4:	e005      	b.n	80059d2 <_HandleIncomingPacket+0xd6>
    }
  }
 80059c6:	bf00      	nop
 80059c8:	e004      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
      break;
 80059ca:	bf00      	nop
 80059cc:	e002      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
      break;
 80059ce:	bf00      	nop
 80059d0:	e000      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
      break;
 80059d2:	bf00      	nop
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20017330 	.word	0x20017330

080059e0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08c      	sub	sp, #48	; 0x30
 80059e4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80059e6:	2301      	movs	r3, #1
 80059e8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80059ea:	1d3b      	adds	r3, r7, #4
 80059ec:	3301      	adds	r3, #1
 80059ee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f4:	4b32      	ldr	r3, [pc, #200]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059fa:	e00b      	b.n	8005a14 <_TrySendOverflowPacket+0x34>
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a02:	1c59      	adds	r1, r3, #1
 8005a04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	09db      	lsrs	r3, r3, #7
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	2b7f      	cmp	r3, #127	; 0x7f
 8005a18:	d8f0      	bhi.n	80059fc <_TrySendOverflowPacket+0x1c>
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a2a:	4b26      	ldr	r3, [pc, #152]	; (8005ac4 <_TrySendOverflowPacket+0xe4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a30:	4b23      	ldr	r3, [pc, #140]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	623b      	str	r3, [r7, #32]
 8005a42:	e00b      	b.n	8005a5c <_TrySendOverflowPacket+0x7c>
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	1c59      	adds	r1, r3, #1
 8005a4c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	09db      	lsrs	r3, r3, #7
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a60:	d8f0      	bhi.n	8005a44 <_TrySendOverflowPacket+0x64>
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	627a      	str	r2, [r7, #36]	; 0x24
 8005a68:	6a3a      	ldr	r2, [r7, #32]
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005a72:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	4618      	mov	r0, r3
 8005a78:	1d3b      	adds	r3, r7, #4
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	1d3b      	adds	r3, r7, #4
 8005a82:	4619      	mov	r1, r3
 8005a84:	f7fa fbac 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005a8c:	f7ff fabc 	bl	8005008 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a96:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005a9c:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	e004      	b.n	8005ab4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	4a03      	ldr	r2, [pc, #12]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005ab2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005ab4:	693b      	ldr	r3, [r7, #16]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3730      	adds	r7, #48	; 0x30
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20017330 	.word	0x20017330
 8005ac4:	e0001004 	.word	0xe0001004

08005ac8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08a      	sub	sp, #40	; 0x28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005ad4:	4b6d      	ldr	r3, [pc, #436]	; (8005c8c <_SendPacket+0x1c4>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d010      	beq.n	8005afe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005adc:	4b6b      	ldr	r3, [pc, #428]	; (8005c8c <_SendPacket+0x1c4>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80a5 	beq.w	8005c30 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005ae6:	4b69      	ldr	r3, [pc, #420]	; (8005c8c <_SendPacket+0x1c4>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d109      	bne.n	8005b02 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005aee:	f7ff ff77 	bl	80059e0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005af2:	4b66      	ldr	r3, [pc, #408]	; (8005c8c <_SendPacket+0x1c4>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	f040 809c 	bne.w	8005c34 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005afc:	e001      	b.n	8005b02 <_SendPacket+0x3a>
    goto Send;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <_SendPacket+0x3c>
Send:
 8005b02:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b1f      	cmp	r3, #31
 8005b08:	d809      	bhi.n	8005b1e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005b0a:	4b60      	ldr	r3, [pc, #384]	; (8005c8c <_SendPacket+0x1c4>)
 8005b0c:	69da      	ldr	r2, [r3, #28]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f040 808d 	bne.w	8005c38 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b17      	cmp	r3, #23
 8005b22:	d807      	bhi.n	8005b34 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	e03d      	b.n	8005bb0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b40:	d912      	bls.n	8005b68 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	09da      	lsrs	r2, r3, #7
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	3a01      	subs	r2, #1
 8005b5a:	60fa      	str	r2, [r7, #12]
 8005b5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	e006      	b.n	8005b76 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b7f      	cmp	r3, #127	; 0x7f
 8005b7a:	d912      	bls.n	8005ba2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	09da      	lsrs	r2, r3, #7
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	3a01      	subs	r2, #1
 8005b94:	60fa      	str	r2, [r7, #12]
 8005b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	e006      	b.n	8005bb0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005bb0:	4b37      	ldr	r3, [pc, #220]	; (8005c90 <_SendPacket+0x1c8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005bb6:	4b35      	ldr	r3, [pc, #212]	; (8005c8c <_SendPacket+0x1c4>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	e00b      	b.n	8005be2 <_SendPacket+0x11a>
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	1c59      	adds	r1, r3, #1
 8005bd2:	6279      	str	r1, [r7, #36]	; 0x24
 8005bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	09db      	lsrs	r3, r3, #7
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	2b7f      	cmp	r3, #127	; 0x7f
 8005be6:	d8f0      	bhi.n	8005bca <_SendPacket+0x102>
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	627a      	str	r2, [r7, #36]	; 0x24
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005bf8:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <_SendPacket+0x1c4>)
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f7fa faea 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005c10:	f7ff f9fa 	bl	8005008 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005c1a:	4a1c      	ldr	r2, [pc, #112]	; (8005c8c <_SendPacket+0x1c4>)
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	60d3      	str	r3, [r2, #12]
 8005c20:	e00b      	b.n	8005c3a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005c22:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <_SendPacket+0x1c4>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	4b18      	ldr	r3, [pc, #96]	; (8005c8c <_SendPacket+0x1c4>)
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	e004      	b.n	8005c3a <_SendPacket+0x172>
    goto SendDone;
 8005c30:	bf00      	nop
 8005c32:	e002      	b.n	8005c3a <_SendPacket+0x172>
      goto SendDone;
 8005c34:	bf00      	nop
 8005c36:	e000      	b.n	8005c3a <_SendPacket+0x172>
      goto SendDone;
 8005c38:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005c3a:	4b14      	ldr	r3, [pc, #80]	; (8005c8c <_SendPacket+0x1c4>)
 8005c3c:	7e1b      	ldrb	r3, [r3, #24]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <_SendPacket+0x1cc>)
 8005c42:	460b      	mov	r3, r1
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	440b      	add	r3, r1
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	336c      	adds	r3, #108	; 0x6c
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <_SendPacket+0x1c4>)
 8005c52:	7e1b      	ldrb	r3, [r3, #24]
 8005c54:	4618      	mov	r0, r3
 8005c56:	490f      	ldr	r1, [pc, #60]	; (8005c94 <_SendPacket+0x1cc>)
 8005c58:	4603      	mov	r3, r0
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	4403      	add	r3, r0
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	440b      	add	r3, r1
 8005c62:	3370      	adds	r3, #112	; 0x70
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d00b      	beq.n	8005c82 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c6a:	4b08      	ldr	r3, [pc, #32]	; (8005c8c <_SendPacket+0x1c4>)
 8005c6c:	789b      	ldrb	r3, [r3, #2]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d107      	bne.n	8005c82 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005c72:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <_SendPacket+0x1c4>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005c78:	f7ff fe40 	bl	80058fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005c7c:	4b03      	ldr	r3, [pc, #12]	; (8005c8c <_SendPacket+0x1c4>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005c82:	bf00      	nop
 8005c84:	3728      	adds	r7, #40	; 0x28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20017330 	.word	0x20017330
 8005c90:	e0001004 	.word	0xe0001004
 8005c94:	2001751c 	.word	0x2001751c

08005c98 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	3301      	adds	r3, #1
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d80a      	bhi.n	8005cc8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	1c59      	adds	r1, r3, #1
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6051      	str	r1, [r2, #4]
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b80      	cmp	r3, #128	; 0x80
 8005cce:	d15a      	bne.n	8005d86 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	623b      	str	r3, [r7, #32]
 8005cf0:	e00b      	b.n	8005d0a <_StoreChar+0x72>
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	1c59      	adds	r1, r3, #1
 8005cfa:	6279      	str	r1, [r7, #36]	; 0x24
 8005cfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	09db      	lsrs	r3, r3, #7
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d0e:	d8f0      	bhi.n	8005cf2 <_StoreChar+0x5a>
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	627a      	str	r2, [r7, #36]	; 0x24
 8005d16:	6a3a      	ldr	r2, [r7, #32]
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	2300      	movs	r3, #0
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	e00b      	b.n	8005d42 <_StoreChar+0xaa>
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	1c59      	adds	r1, r3, #1
 8005d32:	61f9      	str	r1, [r7, #28]
 8005d34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	09db      	lsrs	r3, r3, #7
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b7f      	cmp	r3, #127	; 0x7f
 8005d46:	d8f0      	bhi.n	8005d2a <_StoreChar+0x92>
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	61fa      	str	r2, [r7, #28]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	221a      	movs	r2, #26
 8005d5e:	6939      	ldr	r1, [r7, #16]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff feb1 	bl	8005ac8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fdb9 	bl	80058e2 <_PreparePacket>
 8005d70:	4602      	mov	r2, r0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	611a      	str	r2, [r3, #16]
  }
}
 8005d86:	bf00      	nop
 8005d88:	3728      	adds	r7, #40	; 0x28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08a      	sub	sp, #40	; 0x28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005da2:	2301      	movs	r3, #1
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005da6:	2301      	movs	r3, #1
 8005da8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005daa:	e007      	b.n	8005dbc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005dac:	6a3a      	ldr	r2, [r7, #32]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db4:	623b      	str	r3, [r7, #32]
    Width++;
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	3301      	adds	r3, #1
 8005dba:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005dbc:	6a3a      	ldr	r2, [r7, #32]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d2f3      	bcs.n	8005dac <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d901      	bls.n	8005dd0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d11f      	bne.n	8005e1a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01c      	beq.n	8005e1a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <_PrintUnsigned+0x66>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <_PrintUnsigned+0x66>
        c = '0';
 8005df0:	2330      	movs	r3, #48	; 0x30
 8005df2:	76fb      	strb	r3, [r7, #27]
 8005df4:	e001      	b.n	8005dfa <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005df6:	2320      	movs	r3, #32
 8005df8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dfa:	e007      	b.n	8005e0c <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005e02:	7efb      	ldrb	r3, [r7, #27]
 8005e04:	4619      	mov	r1, r3
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7ff ff46 	bl	8005c98 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <_PrintUnsigned+0x8a>
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d3f0      	bcc.n	8005dfc <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d903      	bls.n	8005e28 <_PrintUnsigned+0x98>
      NumDigits--;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	e009      	b.n	8005e3c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e30:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d200      	bcs.n	8005e3c <_PrintUnsigned+0xac>
        break;
 8005e3a:	e005      	b.n	8005e48 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005e46:	e7e8      	b.n	8005e1a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e56:	fb02 f303 	mul.w	r3, r2, r3
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005e60:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <_PrintUnsigned+0x128>)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4413      	add	r3, r2
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f7ff ff14 	bl	8005c98 <_StoreChar>
    Digit /= Base;
 8005e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e3      	bne.n	8005e48 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d011      	beq.n	8005eae <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e90:	e006      	b.n	8005ea0 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	3b01      	subs	r3, #1
 8005e96:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005e98:	2120      	movs	r1, #32
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff fefc 	bl	8005c98 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <_PrintUnsigned+0x11e>
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d3f1      	bcc.n	8005e92 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005eae:	bf00      	nop
 8005eb0:	3728      	adds	r7, #40	; 0x28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	08008868 	.word	0x08008868

08005ebc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bfb8      	it	lt
 8005ed0:	425b      	neglt	r3, r3
 8005ed2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ed8:	e007      	b.n	8005eea <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ee2:	613b      	str	r3, [r7, #16]
    Width++;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	daf3      	bge.n	8005eda <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d901      	bls.n	8005efe <_PrintInt+0x42>
    Width = NumDigits;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <_PrintInt+0x5e>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	db04      	blt.n	8005f14 <_PrintInt+0x58>
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <_PrintInt+0x5e>
    FieldWidth--;
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <_PrintInt+0x6e>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d016      	beq.n	8005f58 <_PrintInt+0x9c>
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d111      	bne.n	8005f58 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00e      	beq.n	8005f58 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f3a:	e006      	b.n	8005f4a <_PrintInt+0x8e>
        FieldWidth--;
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005f42:	2120      	movs	r1, #32
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7ff fea7 	bl	8005c98 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <_PrintInt+0x9c>
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d3f1      	bcc.n	8005f3c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da07      	bge.n	8005f6e <_PrintInt+0xb2>
    v = -v;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	425b      	negs	r3, r3
 8005f62:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005f64:	212d      	movs	r1, #45	; 0x2d
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff fe96 	bl	8005c98 <_StoreChar>
 8005f6c:	e008      	b.n	8005f80 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005f78:	212b      	movs	r1, #43	; 0x2b
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff fe8c 	bl	8005c98 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d019      	beq.n	8005fbe <_PrintInt+0x102>
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d114      	bne.n	8005fbe <_PrintInt+0x102>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d111      	bne.n	8005fbe <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00e      	beq.n	8005fbe <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fa0:	e006      	b.n	8005fb0 <_PrintInt+0xf4>
        FieldWidth--;
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005fa8:	2130      	movs	r1, #48	; 0x30
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f7ff fe74 	bl	8005c98 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <_PrintInt+0x102>
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d3f1      	bcc.n	8005fa2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	9301      	str	r3, [sp, #4]
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff fedf 	bl	8005d90 <_PrintUnsigned>
}
 8005fd2:	bf00      	nop
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b098      	sub	sp, #96	; 0x60
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fe8:	f3ef 8311 	mrs	r3, BASEPRI
 8005fec:	f04f 0120 	mov.w	r1, #32
 8005ff0:	f381 8811 	msr	BASEPRI, r1
 8005ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ff6:	48b7      	ldr	r0, [pc, #732]	; (80062d4 <_VPrintTarget+0x2f8>)
 8005ff8:	f7ff fc73 	bl	80058e2 <_PreparePacket>
 8005ffc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005ffe:	4bb5      	ldr	r3, [pc, #724]	; (80062d4 <_VPrintTarget+0x2f8>)
 8006000:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006002:	2300      	movs	r3, #0
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	3301      	adds	r3, #1
 800600e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006022:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 8183 	beq.w	8006332 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800602c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006030:	2b25      	cmp	r3, #37	; 0x25
 8006032:	f040 8170 	bne.w	8006316 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006036:	2300      	movs	r3, #0
 8006038:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800603a:	2301      	movs	r3, #1
 800603c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006046:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800604a:	3b23      	subs	r3, #35	; 0x23
 800604c:	2b0d      	cmp	r3, #13
 800604e:	d83f      	bhi.n	80060d0 <_VPrintTarget+0xf4>
 8006050:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <_VPrintTarget+0x7c>)
 8006052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006056:	bf00      	nop
 8006058:	080060c1 	.word	0x080060c1
 800605c:	080060d1 	.word	0x080060d1
 8006060:	080060d1 	.word	0x080060d1
 8006064:	080060d1 	.word	0x080060d1
 8006068:	080060d1 	.word	0x080060d1
 800606c:	080060d1 	.word	0x080060d1
 8006070:	080060d1 	.word	0x080060d1
 8006074:	080060d1 	.word	0x080060d1
 8006078:	080060b1 	.word	0x080060b1
 800607c:	080060d1 	.word	0x080060d1
 8006080:	08006091 	.word	0x08006091
 8006084:	080060d1 	.word	0x080060d1
 8006088:	080060d1 	.word	0x080060d1
 800608c:	080060a1 	.word	0x080060a1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	64bb      	str	r3, [r7, #72]	; 0x48
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3301      	adds	r3, #1
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e01a      	b.n	80060d6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80060a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a2:	f043 0302 	orr.w	r3, r3, #2
 80060a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3301      	adds	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e012      	b.n	80060d6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80060b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b2:	f043 0304 	orr.w	r3, r3, #4
 80060b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	e00a      	b.n	80060d6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80060c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060c2:	f043 0308 	orr.w	r3, r3, #8
 80060c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	e002      	b.n	80060d6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80060d0:	2300      	movs	r3, #0
 80060d2:	653b      	str	r3, [r7, #80]	; 0x50
 80060d4:	bf00      	nop
        }
      } while (v);
 80060d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1b0      	bne.n	800603e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80060dc:	2300      	movs	r3, #0
 80060de:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80060e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060ec:	2b2f      	cmp	r3, #47	; 0x2f
 80060ee:	d912      	bls.n	8006116 <_VPrintTarget+0x13a>
 80060f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060f4:	2b39      	cmp	r3, #57	; 0x39
 80060f6:	d80e      	bhi.n	8006116 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80060fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	461a      	mov	r2, r3
 800610a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800610e:	4413      	add	r3, r2
 8006110:	3b30      	subs	r3, #48	; 0x30
 8006112:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006114:	e7e4      	b.n	80060e0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006116:	2300      	movs	r3, #0
 8006118:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006122:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006126:	2b2e      	cmp	r3, #46	; 0x2e
 8006128:	d11d      	bne.n	8006166 <_VPrintTarget+0x18a>
        sFormat++;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3301      	adds	r3, #1
 800612e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800613c:	2b2f      	cmp	r3, #47	; 0x2f
 800613e:	d912      	bls.n	8006166 <_VPrintTarget+0x18a>
 8006140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006144:	2b39      	cmp	r3, #57	; 0x39
 8006146:	d80e      	bhi.n	8006166 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800614e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	461a      	mov	r2, r3
 800615a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800615e:	4413      	add	r3, r2
 8006160:	3b30      	subs	r3, #48	; 0x30
 8006162:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006164:	e7e4      	b.n	8006130 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800616e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006172:	2b6c      	cmp	r3, #108	; 0x6c
 8006174:	d003      	beq.n	800617e <_VPrintTarget+0x1a2>
 8006176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800617a:	2b68      	cmp	r3, #104	; 0x68
 800617c:	d107      	bne.n	800618e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800618c:	e7ef      	b.n	800616e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800618e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006192:	2b25      	cmp	r3, #37	; 0x25
 8006194:	f000 80b3 	beq.w	80062fe <_VPrintTarget+0x322>
 8006198:	2b25      	cmp	r3, #37	; 0x25
 800619a:	f2c0 80b7 	blt.w	800630c <_VPrintTarget+0x330>
 800619e:	2b78      	cmp	r3, #120	; 0x78
 80061a0:	f300 80b4 	bgt.w	800630c <_VPrintTarget+0x330>
 80061a4:	2b58      	cmp	r3, #88	; 0x58
 80061a6:	f2c0 80b1 	blt.w	800630c <_VPrintTarget+0x330>
 80061aa:	3b58      	subs	r3, #88	; 0x58
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	f200 80ad 	bhi.w	800630c <_VPrintTarget+0x330>
 80061b2:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <_VPrintTarget+0x1dc>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	080062af 	.word	0x080062af
 80061bc:	0800630d 	.word	0x0800630d
 80061c0:	0800630d 	.word	0x0800630d
 80061c4:	0800630d 	.word	0x0800630d
 80061c8:	0800630d 	.word	0x0800630d
 80061cc:	0800630d 	.word	0x0800630d
 80061d0:	0800630d 	.word	0x0800630d
 80061d4:	0800630d 	.word	0x0800630d
 80061d8:	0800630d 	.word	0x0800630d
 80061dc:	0800630d 	.word	0x0800630d
 80061e0:	0800630d 	.word	0x0800630d
 80061e4:	0800623d 	.word	0x0800623d
 80061e8:	08006263 	.word	0x08006263
 80061ec:	0800630d 	.word	0x0800630d
 80061f0:	0800630d 	.word	0x0800630d
 80061f4:	0800630d 	.word	0x0800630d
 80061f8:	0800630d 	.word	0x0800630d
 80061fc:	0800630d 	.word	0x0800630d
 8006200:	0800630d 	.word	0x0800630d
 8006204:	0800630d 	.word	0x0800630d
 8006208:	0800630d 	.word	0x0800630d
 800620c:	0800630d 	.word	0x0800630d
 8006210:	0800630d 	.word	0x0800630d
 8006214:	0800630d 	.word	0x0800630d
 8006218:	080062d9 	.word	0x080062d9
 800621c:	0800630d 	.word	0x0800630d
 8006220:	0800630d 	.word	0x0800630d
 8006224:	0800630d 	.word	0x0800630d
 8006228:	0800630d 	.word	0x0800630d
 800622c:	08006289 	.word	0x08006289
 8006230:	0800630d 	.word	0x0800630d
 8006234:	0800630d 	.word	0x0800630d
 8006238:	080062af 	.word	0x080062af
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	1d19      	adds	r1, r3, #4
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6011      	str	r1, [r2, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800624a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006250:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006254:	f107 0314 	add.w	r3, r7, #20
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fd1c 	bl	8005c98 <_StoreChar>
        break;
 8006260:	e055      	b.n	800630e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	1d19      	adds	r1, r3, #4
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6011      	str	r1, [r2, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006270:	f107 0014 	add.w	r0, r7, #20
 8006274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006276:	9301      	str	r3, [sp, #4]
 8006278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627e:	220a      	movs	r2, #10
 8006280:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006282:	f7ff fe1b 	bl	8005ebc <_PrintInt>
        break;
 8006286:	e042      	b.n	800630e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	1d19      	adds	r1, r3, #4
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006296:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006298:	f107 0014 	add.w	r0, r7, #20
 800629c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a6:	220a      	movs	r2, #10
 80062a8:	f7ff fd72 	bl	8005d90 <_PrintUnsigned>
        break;
 80062ac:	e02f      	b.n	800630e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	1d19      	adds	r1, r3, #4
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6011      	str	r1, [r2, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80062bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062be:	f107 0014 	add.w	r0, r7, #20
 80062c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062cc:	2210      	movs	r2, #16
 80062ce:	f7ff fd5f 	bl	8005d90 <_PrintUnsigned>
        break;
 80062d2:	e01c      	b.n	800630e <_VPrintTarget+0x332>
 80062d4:	20017360 	.word	0x20017360
      case 'p':
        v = va_arg(*pParamList, int);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	1d19      	adds	r1, r3, #4
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6011      	str	r1, [r2, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80062e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062e8:	f107 0014 	add.w	r0, r7, #20
 80062ec:	2300      	movs	r3, #0
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	2308      	movs	r3, #8
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	2308      	movs	r3, #8
 80062f6:	2210      	movs	r2, #16
 80062f8:	f7ff fd4a 	bl	8005d90 <_PrintUnsigned>
        break;
 80062fc:	e007      	b.n	800630e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80062fe:	f107 0314 	add.w	r3, r7, #20
 8006302:	2125      	movs	r1, #37	; 0x25
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff fcc7 	bl	8005c98 <_StoreChar>
        break;
 800630a:	e000      	b.n	800630e <_VPrintTarget+0x332>
      default:
        break;
 800630c:	bf00      	nop
      }
      sFormat++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e007      	b.n	8006326 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006316:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800631a:	f107 0314 	add.w	r3, r7, #20
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fcb9 	bl	8005c98 <_StoreChar>
    }
  } while (*sFormat);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f47f ae72 	bne.w	8006014 <_VPrintTarget+0x38>
 8006330:	e000      	b.n	8006334 <_VPrintTarget+0x358>
      break;
 8006332:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	d041      	beq.n	80063be <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800633a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	643b      	str	r3, [r7, #64]	; 0x40
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634a:	e00b      	b.n	8006364 <_VPrintTarget+0x388>
 800634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634e:	b2da      	uxtb	r2, r3
 8006350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006352:	1c59      	adds	r1, r3, #1
 8006354:	6439      	str	r1, [r7, #64]	; 0x40
 8006356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006360:	09db      	lsrs	r3, r3, #7
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006366:	2b7f      	cmp	r3, #127	; 0x7f
 8006368:	d8f0      	bhi.n	800634c <_VPrintTarget+0x370>
 800636a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	643a      	str	r2, [r7, #64]	; 0x40
 8006370:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006378:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38
 800637e:	2300      	movs	r3, #0
 8006380:	637b      	str	r3, [r7, #52]	; 0x34
 8006382:	e00b      	b.n	800639c <_VPrintTarget+0x3c0>
 8006384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006386:	b2da      	uxtb	r2, r3
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	1c59      	adds	r1, r3, #1
 800638c:	63b9      	str	r1, [r7, #56]	; 0x38
 800638e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006398:	09db      	lsrs	r3, r3, #7
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
 800639c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639e:	2b7f      	cmp	r3, #127	; 0x7f
 80063a0:	d8f0      	bhi.n	8006384 <_VPrintTarget+0x3a8>
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80063a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	69b9      	ldr	r1, [r7, #24]
 80063b6:	221a      	movs	r2, #26
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff fb85 	bl	8005ac8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80063c4:	bf00      	nop
 80063c6:	3758      	adds	r7, #88	; 0x58
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80063da:	2300      	movs	r3, #0
 80063dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063e0:	4917      	ldr	r1, [pc, #92]	; (8006440 <SEGGER_SYSVIEW_Init+0x74>)
 80063e2:	4818      	ldr	r0, [pc, #96]	; (8006444 <SEGGER_SYSVIEW_Init+0x78>)
 80063e4:	f7ff f93c 	bl	8005660 <SEGGER_RTT_AllocUpBuffer>
 80063e8:	4603      	mov	r3, r0
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	4b16      	ldr	r3, [pc, #88]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 80063ee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80063f0:	4b15      	ldr	r3, [pc, #84]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 80063f2:	785a      	ldrb	r2, [r3, #1]
 80063f4:	4b14      	ldr	r3, [pc, #80]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 80063f6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80063f8:	4b13      	ldr	r3, [pc, #76]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 80063fa:	7e1b      	ldrb	r3, [r3, #24]
 80063fc:	4618      	mov	r0, r3
 80063fe:	2300      	movs	r3, #0
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	2308      	movs	r3, #8
 8006404:	4a11      	ldr	r2, [pc, #68]	; (800644c <SEGGER_SYSVIEW_Init+0x80>)
 8006406:	490f      	ldr	r1, [pc, #60]	; (8006444 <SEGGER_SYSVIEW_Init+0x78>)
 8006408:	f7ff f9ae 	bl	8005768 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800640c:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 800640e:	2200      	movs	r2, #0
 8006410:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006412:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <SEGGER_SYSVIEW_Init+0x84>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a0c      	ldr	r2, [pc, #48]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 8006418:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800641a:	4a0b      	ldr	r2, [pc, #44]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006420:	4a09      	ldr	r2, [pc, #36]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006426:	4a08      	ldr	r2, [pc, #32]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800642c:	4a06      	ldr	r2, [pc, #24]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006432:	4b05      	ldr	r3, [pc, #20]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	20016f28 	.word	0x20016f28
 8006444:	08008830 	.word	0x08008830
 8006448:	20017330 	.word	0x20017330
 800644c:	20017328 	.word	0x20017328
 8006450:	e0001004 	.word	0xe0001004

08006454 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800645c:	4a04      	ldr	r2, [pc, #16]	; (8006470 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6113      	str	r3, [r2, #16]
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	20017330 	.word	0x20017330

08006474 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800647c:	f3ef 8311 	mrs	r3, BASEPRI
 8006480:	f04f 0120 	mov.w	r1, #32
 8006484:	f381 8811 	msr	BASEPRI, r1
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	4808      	ldr	r0, [pc, #32]	; (80064ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800648c:	f7ff fa29 	bl	80058e2 <_PreparePacket>
 8006490:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	68b8      	ldr	r0, [r7, #8]
 8006498:	f7ff fb16 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f383 8811 	msr	BASEPRI, r3
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20017360 	.word	0x20017360

080064b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064ba:	f3ef 8311 	mrs	r3, BASEPRI
 80064be:	f04f 0120 	mov.w	r1, #32
 80064c2:	f381 8811 	msr	BASEPRI, r1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	4816      	ldr	r0, [pc, #88]	; (8006524 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80064ca:	f7ff fa0a 	bl	80058e2 <_PreparePacket>
 80064ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	e00b      	b.n	80064f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	1c59      	adds	r1, r3, #1
 80064e6:	61f9      	str	r1, [r7, #28]
 80064e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	09db      	lsrs	r3, r3, #7
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b7f      	cmp	r3, #127	; 0x7f
 80064fa:	d8f0      	bhi.n	80064de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	61fa      	str	r2, [r7, #28]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	6938      	ldr	r0, [r7, #16]
 8006512:	f7ff fad9 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f383 8811 	msr	BASEPRI, r3
}
 800651c:	bf00      	nop
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20017360 	.word	0x20017360

08006528 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b08c      	sub	sp, #48	; 0x30
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006534:	f3ef 8311 	mrs	r3, BASEPRI
 8006538:	f04f 0120 	mov.w	r1, #32
 800653c:	f381 8811 	msr	BASEPRI, r1
 8006540:	61fb      	str	r3, [r7, #28]
 8006542:	4825      	ldr	r0, [pc, #148]	; (80065d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006544:	f7ff f9cd 	bl	80058e2 <_PreparePacket>
 8006548:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
 8006556:	e00b      	b.n	8006570 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	b2da      	uxtb	r2, r3
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	1c59      	adds	r1, r3, #1
 8006560:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006562:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	09db      	lsrs	r3, r3, #7
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	2b7f      	cmp	r3, #127	; 0x7f
 8006574:	d8f0      	bhi.n	8006558 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800657c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	623b      	str	r3, [r7, #32]
 800658e:	e00b      	b.n	80065a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	6279      	str	r1, [r7, #36]	; 0x24
 800659a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	09db      	lsrs	r3, r3, #7
 80065a6:	623b      	str	r3, [r7, #32]
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	2b7f      	cmp	r3, #127	; 0x7f
 80065ac:	d8f0      	bhi.n	8006590 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	627a      	str	r2, [r7, #36]	; 0x24
 80065b4:	6a3a      	ldr	r2, [r7, #32]
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	6979      	ldr	r1, [r7, #20]
 80065c2:	69b8      	ldr	r0, [r7, #24]
 80065c4:	f7ff fa80 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f383 8811 	msr	BASEPRI, r3
}
 80065ce:	bf00      	nop
 80065d0:	3730      	adds	r7, #48	; 0x30
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20017360 	.word	0x20017360

080065dc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08e      	sub	sp, #56	; 0x38
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80065ea:	f3ef 8311 	mrs	r3, BASEPRI
 80065ee:	f04f 0120 	mov.w	r1, #32
 80065f2:	f381 8811 	msr	BASEPRI, r1
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	4832      	ldr	r0, [pc, #200]	; (80066c4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80065fa:	f7ff f972 	bl	80058e2 <_PreparePacket>
 80065fe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	633b      	str	r3, [r7, #48]	; 0x30
 800660c:	e00b      	b.n	8006626 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	b2da      	uxtb	r2, r3
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	1c59      	adds	r1, r3, #1
 8006616:	6379      	str	r1, [r7, #52]	; 0x34
 8006618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	09db      	lsrs	r3, r3, #7
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	2b7f      	cmp	r3, #127	; 0x7f
 800662a:	d8f0      	bhi.n	800660e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	637a      	str	r2, [r7, #52]	; 0x34
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
 8006644:	e00b      	b.n	800665e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	b2da      	uxtb	r2, r3
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	1c59      	adds	r1, r3, #1
 800664e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006650:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	09db      	lsrs	r3, r3, #7
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	2b7f      	cmp	r3, #127	; 0x7f
 8006662:	d8f0      	bhi.n	8006646 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	62fa      	str	r2, [r7, #44]	; 0x2c
 800666a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	623b      	str	r3, [r7, #32]
 800667c:	e00b      	b.n	8006696 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	1c59      	adds	r1, r3, #1
 8006686:	6279      	str	r1, [r7, #36]	; 0x24
 8006688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	09db      	lsrs	r3, r3, #7
 8006694:	623b      	str	r3, [r7, #32]
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	2b7f      	cmp	r3, #127	; 0x7f
 800669a:	d8f0      	bhi.n	800667e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	627a      	str	r2, [r7, #36]	; 0x24
 80066a2:	6a3a      	ldr	r2, [r7, #32]
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	6979      	ldr	r1, [r7, #20]
 80066b0:	69b8      	ldr	r0, [r7, #24]
 80066b2:	f7ff fa09 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f383 8811 	msr	BASEPRI, r3
}
 80066bc:	bf00      	nop
 80066be:	3738      	adds	r7, #56	; 0x38
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20017360 	.word	0x20017360

080066c8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b090      	sub	sp, #64	; 0x40
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066d6:	f3ef 8311 	mrs	r3, BASEPRI
 80066da:	f04f 0120 	mov.w	r1, #32
 80066de:	f381 8811 	msr	BASEPRI, r1
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	4840      	ldr	r0, [pc, #256]	; (80067e8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80066e6:	f7ff f8fc 	bl	80058e2 <_PreparePacket>
 80066ea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80066f8:	e00b      	b.n	8006712 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006700:	1c59      	adds	r1, r3, #1
 8006702:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006704:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	09db      	lsrs	r3, r3, #7
 8006710:	63bb      	str	r3, [r7, #56]	; 0x38
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	2b7f      	cmp	r3, #127	; 0x7f
 8006716:	d8f0      	bhi.n	80066fa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800671e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006726:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	633b      	str	r3, [r7, #48]	; 0x30
 8006730:	e00b      	b.n	800674a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	b2da      	uxtb	r2, r3
 8006736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006738:	1c59      	adds	r1, r3, #1
 800673a:	6379      	str	r1, [r7, #52]	; 0x34
 800673c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	09db      	lsrs	r3, r3, #7
 8006748:	633b      	str	r3, [r7, #48]	; 0x30
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	2b7f      	cmp	r3, #127	; 0x7f
 800674e:	d8f0      	bhi.n	8006732 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	637a      	str	r2, [r7, #52]	; 0x34
 8006756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]
 800675c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
 8006768:	e00b      	b.n	8006782 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	b2da      	uxtb	r2, r3
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	1c59      	adds	r1, r3, #1
 8006772:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006774:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	09db      	lsrs	r3, r3, #7
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	2b7f      	cmp	r3, #127	; 0x7f
 8006786:	d8f0      	bhi.n	800676a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800678e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
 800679c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800679e:	623b      	str	r3, [r7, #32]
 80067a0:	e00b      	b.n	80067ba <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	1c59      	adds	r1, r3, #1
 80067aa:	6279      	str	r1, [r7, #36]	; 0x24
 80067ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	09db      	lsrs	r3, r3, #7
 80067b8:	623b      	str	r3, [r7, #32]
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	2b7f      	cmp	r3, #127	; 0x7f
 80067be:	d8f0      	bhi.n	80067a2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	627a      	str	r2, [r7, #36]	; 0x24
 80067c6:	6a3a      	ldr	r2, [r7, #32]
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	6979      	ldr	r1, [r7, #20]
 80067d4:	69b8      	ldr	r0, [r7, #24]
 80067d6:	f7ff f977 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	f383 8811 	msr	BASEPRI, r3
}
 80067e0:	bf00      	nop
 80067e2:	3740      	adds	r7, #64	; 0x40
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20017360 	.word	0x20017360

080067ec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08c      	sub	sp, #48	; 0x30
 80067f0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80067f2:	4b59      	ldr	r3, [pc, #356]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80067f8:	f3ef 8311 	mrs	r3, BASEPRI
 80067fc:	f04f 0120 	mov.w	r1, #32
 8006800:	f381 8811 	msr	BASEPRI, r1
 8006804:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006806:	4b54      	ldr	r3, [pc, #336]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	220a      	movs	r2, #10
 800680c:	4953      	ldr	r1, [pc, #332]	; (800695c <SEGGER_SYSVIEW_Start+0x170>)
 800680e:	4618      	mov	r0, r3
 8006810:	f7f9 fce6 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800681a:	f7fe fbf5 	bl	8005008 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800681e:	200a      	movs	r0, #10
 8006820:	f7ff fe28 	bl	8006474 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006824:	f3ef 8311 	mrs	r3, BASEPRI
 8006828:	f04f 0120 	mov.w	r1, #32
 800682c:	f381 8811 	msr	BASEPRI, r1
 8006830:	60bb      	str	r3, [r7, #8]
 8006832:	484b      	ldr	r0, [pc, #300]	; (8006960 <SEGGER_SYSVIEW_Start+0x174>)
 8006834:	f7ff f855 	bl	80058e2 <_PreparePacket>
 8006838:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006842:	4b45      	ldr	r3, [pc, #276]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
 8006848:	e00b      	b.n	8006862 <SEGGER_SYSVIEW_Start+0x76>
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	b2da      	uxtb	r2, r3
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	1c59      	adds	r1, r3, #1
 8006852:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	09db      	lsrs	r3, r3, #7
 8006860:	62bb      	str	r3, [r7, #40]	; 0x28
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	2b7f      	cmp	r3, #127	; 0x7f
 8006866:	d8f0      	bhi.n	800684a <SEGGER_SYSVIEW_Start+0x5e>
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800686e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
 800687c:	4b36      	ldr	r3, [pc, #216]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	e00b      	b.n	800689c <SEGGER_SYSVIEW_Start+0xb0>
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	1c59      	adds	r1, r3, #1
 800688c:	6279      	str	r1, [r7, #36]	; 0x24
 800688e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	09db      	lsrs	r3, r3, #7
 800689a:	623b      	str	r3, [r7, #32]
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	2b7f      	cmp	r3, #127	; 0x7f
 80068a0:	d8f0      	bhi.n	8006884 <SEGGER_SYSVIEW_Start+0x98>
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	627a      	str	r2, [r7, #36]	; 0x24
 80068a8:	6a3a      	ldr	r2, [r7, #32]
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	4b28      	ldr	r3, [pc, #160]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	61bb      	str	r3, [r7, #24]
 80068bc:	e00b      	b.n	80068d6 <SEGGER_SYSVIEW_Start+0xea>
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	1c59      	adds	r1, r3, #1
 80068c6:	61f9      	str	r1, [r7, #28]
 80068c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	09db      	lsrs	r3, r3, #7
 80068d4:	61bb      	str	r3, [r7, #24]
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b7f      	cmp	r3, #127	; 0x7f
 80068da:	d8f0      	bhi.n	80068be <SEGGER_SYSVIEW_Start+0xd2>
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	61fa      	str	r2, [r7, #28]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	e00b      	b.n	800690e <SEGGER_SYSVIEW_Start+0x122>
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	1c59      	adds	r1, r3, #1
 80068fe:	6179      	str	r1, [r7, #20]
 8006900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	09db      	lsrs	r3, r3, #7
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b7f      	cmp	r3, #127	; 0x7f
 8006912:	d8f0      	bhi.n	80068f6 <SEGGER_SYSVIEW_Start+0x10a>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	617a      	str	r2, [r7, #20]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006924:	2218      	movs	r2, #24
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff f8cd 	bl	8005ac8 <_SendPacket>
      RECORD_END();
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006934:	4b08      	ldr	r3, [pc, #32]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800693c:	4b06      	ldr	r3, [pc, #24]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006942:	f000 f9eb 	bl	8006d1c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006946:	f000 f9b1 	bl	8006cac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800694a:	f000 fc83 	bl	8007254 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800694e:	bf00      	nop
 8006950:	3730      	adds	r7, #48	; 0x30
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20017330 	.word	0x20017330
 800695c:	0800885c 	.word	0x0800885c
 8006960:	20017360 	.word	0x20017360

08006964 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800696a:	f3ef 8311 	mrs	r3, BASEPRI
 800696e:	f04f 0120 	mov.w	r1, #32
 8006972:	f381 8811 	msr	BASEPRI, r1
 8006976:	607b      	str	r3, [r7, #4]
 8006978:	480b      	ldr	r0, [pc, #44]	; (80069a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800697a:	f7fe ffb2 	bl	80058e2 <_PreparePacket>
 800697e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <SEGGER_SYSVIEW_Stop+0x48>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006988:	220b      	movs	r2, #11
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6838      	ldr	r0, [r7, #0]
 800698e:	f7ff f89b 	bl	8005ac8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006992:	4b06      	ldr	r3, [pc, #24]	; (80069ac <SEGGER_SYSVIEW_Stop+0x48>)
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f383 8811 	msr	BASEPRI, r3
}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20017360 	.word	0x20017360
 80069ac:	20017330 	.word	0x20017330

080069b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08c      	sub	sp, #48	; 0x30
 80069b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069b6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ba:	f04f 0120 	mov.w	r1, #32
 80069be:	f381 8811 	msr	BASEPRI, r1
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	4845      	ldr	r0, [pc, #276]	; (8006adc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80069c6:	f7fe ff8c 	bl	80058e2 <_PreparePacket>
 80069ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069d4:	4b42      	ldr	r3, [pc, #264]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069da:	e00b      	b.n	80069f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	09db      	lsrs	r3, r3, #7
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	2b7f      	cmp	r3, #127	; 0x7f
 80069f8:	d8f0      	bhi.n	80069dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0e:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	e00b      	b.n	8006a2e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	1c59      	adds	r1, r3, #1
 8006a1e:	6279      	str	r1, [r7, #36]	; 0x24
 8006a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	09db      	lsrs	r3, r3, #7
 8006a2c:	623b      	str	r3, [r7, #32]
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	2b7f      	cmp	r3, #127	; 0x7f
 8006a32:	d8f0      	bhi.n	8006a16 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	627a      	str	r2, [r7, #36]	; 0x24
 8006a3a:	6a3a      	ldr	r2, [r7, #32]
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	e00b      	b.n	8006a68 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	61f9      	str	r1, [r7, #28]
 8006a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	09db      	lsrs	r3, r3, #7
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a6c:	d8f0      	bhi.n	8006a50 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	61fa      	str	r2, [r7, #28]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	2300      	movs	r3, #0
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	e00b      	b.n	8006aa0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	1c59      	adds	r1, r3, #1
 8006a90:	6179      	str	r1, [r7, #20]
 8006a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	09db      	lsrs	r3, r3, #7
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa4:	d8f0      	bhi.n	8006a88 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	617a      	str	r2, [r7, #20]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ab6:	2218      	movs	r2, #24
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	68b8      	ldr	r0, [r7, #8]
 8006abc:	f7ff f804 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006ac6:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006ace:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	4798      	blx	r3
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3730      	adds	r7, #48	; 0x30
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20017360 	.word	0x20017360
 8006ae0:	20017330 	.word	0x20017330

08006ae4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b092      	sub	sp, #72	; 0x48
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006aec:	f3ef 8311 	mrs	r3, BASEPRI
 8006af0:	f04f 0120 	mov.w	r1, #32
 8006af4:	f381 8811 	msr	BASEPRI, r1
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	486a      	ldr	r0, [pc, #424]	; (8006ca4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006afc:	f7fe fef1 	bl	80058e2 <_PreparePacket>
 8006b00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	647b      	str	r3, [r7, #68]	; 0x44
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4b66      	ldr	r3, [pc, #408]	; (8006ca8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	643b      	str	r3, [r7, #64]	; 0x40
 8006b16:	e00b      	b.n	8006b30 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b1e:	1c59      	adds	r1, r3, #1
 8006b20:	6479      	str	r1, [r7, #68]	; 0x44
 8006b22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2c:	09db      	lsrs	r3, r3, #7
 8006b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8006b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b32:	2b7f      	cmp	r3, #127	; 0x7f
 8006b34:	d8f0      	bhi.n	8006b18 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]
 8006b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b50:	e00b      	b.n	8006b6a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b58:	1c59      	adds	r1, r3, #1
 8006b5a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	09db      	lsrs	r3, r3, #7
 8006b68:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b6e:	d8f0      	bhi.n	8006b52 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	4619      	mov	r1, r3
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f7fe fe5d 	bl	8005848 <_EncodeStr>
 8006b8e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006b90:	2209      	movs	r2, #9
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	6938      	ldr	r0, [r7, #16]
 8006b96:	f7fe ff97 	bl	8005ac8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b40      	ldr	r3, [pc, #256]	; (8006ca8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	633b      	str	r3, [r7, #48]	; 0x30
 8006bae:	e00b      	b.n	8006bc8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	1c59      	adds	r1, r3, #1
 8006bb8:	6379      	str	r1, [r7, #52]	; 0x34
 8006bba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	09db      	lsrs	r3, r3, #7
 8006bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	2b7f      	cmp	r3, #127	; 0x7f
 8006bcc:	d8f0      	bhi.n	8006bb0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	637a      	str	r2, [r7, #52]	; 0x34
 8006bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be8:	e00b      	b.n	8006c02 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	1c59      	adds	r1, r3, #1
 8006bf2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	09db      	lsrs	r3, r3, #7
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	2b7f      	cmp	r3, #127	; 0x7f
 8006c06:	d8f0      	bhi.n	8006bea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	623b      	str	r3, [r7, #32]
 8006c22:	e00b      	b.n	8006c3c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	6279      	str	r1, [r7, #36]	; 0x24
 8006c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	09db      	lsrs	r3, r3, #7
 8006c3a:	623b      	str	r3, [r7, #32]
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c40:	d8f0      	bhi.n	8006c24 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	627a      	str	r2, [r7, #36]	; 0x24
 8006c48:	6a3a      	ldr	r2, [r7, #32]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	2300      	movs	r3, #0
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	e00b      	b.n	8006c74 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	1c59      	adds	r1, r3, #1
 8006c64:	61f9      	str	r1, [r7, #28]
 8006c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	09db      	lsrs	r3, r3, #7
 8006c72:	61bb      	str	r3, [r7, #24]
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2b7f      	cmp	r3, #127	; 0x7f
 8006c78:	d8f0      	bhi.n	8006c5c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	61fa      	str	r2, [r7, #28]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006c8a:	2215      	movs	r2, #21
 8006c8c:	68f9      	ldr	r1, [r7, #12]
 8006c8e:	6938      	ldr	r0, [r7, #16]
 8006c90:	f7fe ff1a 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f383 8811 	msr	BASEPRI, r3
}
 8006c9a:	bf00      	nop
 8006c9c:	3748      	adds	r7, #72	; 0x48
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20017360 	.word	0x20017360
 8006ca8:	20017330 	.word	0x20017330

08006cac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006cb0:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006cc2:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4798      	blx	r3
  }
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20017330 	.word	0x20017330

08006cd4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce0:	f04f 0120 	mov.w	r1, #32
 8006ce4:	f381 8811 	msr	BASEPRI, r1
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	480b      	ldr	r0, [pc, #44]	; (8006d18 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006cec:	f7fe fdf9 	bl	80058e2 <_PreparePacket>
 8006cf0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cf2:	2280      	movs	r2, #128	; 0x80
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	6938      	ldr	r0, [r7, #16]
 8006cf8:	f7fe fda6 	bl	8005848 <_EncodeStr>
 8006cfc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006cfe:	220e      	movs	r2, #14
 8006d00:	68f9      	ldr	r1, [r7, #12]
 8006d02:	6938      	ldr	r0, [r7, #16]
 8006d04:	f7fe fee0 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f383 8811 	msr	BASEPRI, r3
}
 8006d0e:	bf00      	nop
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20017360 	.word	0x20017360

08006d1c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006d22:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d01a      	beq.n	8006d60 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006d2a:	4b13      	ldr	r3, [pc, #76]	; (8006d78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d015      	beq.n	8006d60 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006d34:	4b10      	ldr	r3, [pc, #64]	; (8006d78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4798      	blx	r3
 8006d3c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d40:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006d42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	000a      	movs	r2, r1
 8006d50:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d52:	4613      	mov	r3, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4621      	mov	r1, r4
 8006d58:	200d      	movs	r0, #13
 8006d5a:	f7ff fbe5 	bl	8006528 <SEGGER_SYSVIEW_RecordU32x2>
 8006d5e:	e006      	b.n	8006d6e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4619      	mov	r1, r3
 8006d66:	200c      	movs	r0, #12
 8006d68:	f7ff fba2 	bl	80064b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd90      	pop	{r4, r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20017330 	.word	0x20017330
 8006d7c:	e0001004 	.word	0xe0001004

08006d80 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d86:	f3ef 8311 	mrs	r3, BASEPRI
 8006d8a:	f04f 0120 	mov.w	r1, #32
 8006d8e:	f381 8811 	msr	BASEPRI, r1
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	4819      	ldr	r0, [pc, #100]	; (8006dfc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006d96:	f7fe fda4 	bl	80058e2 <_PreparePacket>
 8006d9a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006da0:	4b17      	ldr	r3, [pc, #92]	; (8006e00 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	e00b      	b.n	8006dcc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	1c59      	adds	r1, r3, #1
 8006dbc:	6179      	str	r1, [r7, #20]
 8006dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	09db      	lsrs	r3, r3, #7
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd0:	d8f0      	bhi.n	8006db4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	617a      	str	r2, [r7, #20]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006de2:	2202      	movs	r2, #2
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	68b8      	ldr	r0, [r7, #8]
 8006de8:	f7fe fe6e 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f383 8811 	msr	BASEPRI, r3
}
 8006df2:	bf00      	nop
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20017360 	.word	0x20017360
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e0e:	f04f 0120 	mov.w	r1, #32
 8006e12:	f381 8811 	msr	BASEPRI, r1
 8006e16:	607b      	str	r3, [r7, #4]
 8006e18:	4807      	ldr	r0, [pc, #28]	; (8006e38 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006e1a:	f7fe fd62 	bl	80058e2 <_PreparePacket>
 8006e1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006e20:	2203      	movs	r2, #3
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6838      	ldr	r0, [r7, #0]
 8006e26:	f7fe fe4f 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f383 8811 	msr	BASEPRI, r3
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20017360 	.word	0x20017360

08006e3c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e42:	f3ef 8311 	mrs	r3, BASEPRI
 8006e46:	f04f 0120 	mov.w	r1, #32
 8006e4a:	f381 8811 	msr	BASEPRI, r1
 8006e4e:	607b      	str	r3, [r7, #4]
 8006e50:	4807      	ldr	r0, [pc, #28]	; (8006e70 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006e52:	f7fe fd46 	bl	80058e2 <_PreparePacket>
 8006e56:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006e58:	2212      	movs	r2, #18
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6838      	ldr	r0, [r7, #0]
 8006e5e:	f7fe fe33 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f383 8811 	msr	BASEPRI, r3
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20017360 	.word	0x20017360

08006e74 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e7e:	f04f 0120 	mov.w	r1, #32
 8006e82:	f381 8811 	msr	BASEPRI, r1
 8006e86:	607b      	str	r3, [r7, #4]
 8006e88:	4807      	ldr	r0, [pc, #28]	; (8006ea8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006e8a:	f7fe fd2a 	bl	80058e2 <_PreparePacket>
 8006e8e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006e90:	2211      	movs	r2, #17
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6838      	ldr	r0, [r7, #0]
 8006e96:	f7fe fe17 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f383 8811 	msr	BASEPRI, r3
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	20017360 	.word	0x20017360

08006eac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006eb4:	f3ef 8311 	mrs	r3, BASEPRI
 8006eb8:	f04f 0120 	mov.w	r1, #32
 8006ebc:	f381 8811 	msr	BASEPRI, r1
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	4819      	ldr	r0, [pc, #100]	; (8006f28 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ec4:	f7fe fd0d 	bl	80058e2 <_PreparePacket>
 8006ec8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ece:	4b17      	ldr	r3, [pc, #92]	; (8006f2c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	61bb      	str	r3, [r7, #24]
 8006ee0:	e00b      	b.n	8006efa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	1c59      	adds	r1, r3, #1
 8006eea:	61f9      	str	r1, [r7, #28]
 8006eec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	09db      	lsrs	r3, r3, #7
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b7f      	cmp	r3, #127	; 0x7f
 8006efe:	d8f0      	bhi.n	8006ee2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	61fa      	str	r2, [r7, #28]
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006f10:	2208      	movs	r2, #8
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	6938      	ldr	r0, [r7, #16]
 8006f16:	f7fe fdd7 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f383 8811 	msr	BASEPRI, r3
}
 8006f20:	bf00      	nop
 8006f22:	3720      	adds	r7, #32
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20017360 	.word	0x20017360
 8006f2c:	20017330 	.word	0x20017330

08006f30 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f38:	f3ef 8311 	mrs	r3, BASEPRI
 8006f3c:	f04f 0120 	mov.w	r1, #32
 8006f40:	f381 8811 	msr	BASEPRI, r1
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	4819      	ldr	r0, [pc, #100]	; (8006fac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f48:	f7fe fccb 	bl	80058e2 <_PreparePacket>
 8006f4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f52:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	61fb      	str	r3, [r7, #28]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	61bb      	str	r3, [r7, #24]
 8006f64:	e00b      	b.n	8006f7e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	1c59      	adds	r1, r3, #1
 8006f6e:	61f9      	str	r1, [r7, #28]
 8006f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	09db      	lsrs	r3, r3, #7
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b7f      	cmp	r3, #127	; 0x7f
 8006f82:	d8f0      	bhi.n	8006f66 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	61fa      	str	r2, [r7, #28]
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006f94:	2204      	movs	r2, #4
 8006f96:	68f9      	ldr	r1, [r7, #12]
 8006f98:	6938      	ldr	r0, [r7, #16]
 8006f9a:	f7fe fd95 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f383 8811 	msr	BASEPRI, r3
}
 8006fa4:	bf00      	nop
 8006fa6:	3720      	adds	r7, #32
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20017360 	.word	0x20017360
 8006fb0:	20017330 	.word	0x20017330

08006fb4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8006fc0:	f04f 0120 	mov.w	r1, #32
 8006fc4:	f381 8811 	msr	BASEPRI, r1
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	4819      	ldr	r0, [pc, #100]	; (8007030 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006fcc:	f7fe fc89 	bl	80058e2 <_PreparePacket>
 8006fd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006fd6:	4b17      	ldr	r3, [pc, #92]	; (8007034 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	61fb      	str	r3, [r7, #28]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	e00b      	b.n	8007002 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	1c59      	adds	r1, r3, #1
 8006ff2:	61f9      	str	r1, [r7, #28]
 8006ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	09db      	lsrs	r3, r3, #7
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b7f      	cmp	r3, #127	; 0x7f
 8007006:	d8f0      	bhi.n	8006fea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	61fa      	str	r2, [r7, #28]
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007018:	2206      	movs	r2, #6
 800701a:	68f9      	ldr	r1, [r7, #12]
 800701c:	6938      	ldr	r0, [r7, #16]
 800701e:	f7fe fd53 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f383 8811 	msr	BASEPRI, r3
}
 8007028:	bf00      	nop
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20017360 	.word	0x20017360
 8007034:	20017330 	.word	0x20017330

08007038 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007038:	b580      	push	{r7, lr}
 800703a:	b08a      	sub	sp, #40	; 0x28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007042:	f3ef 8311 	mrs	r3, BASEPRI
 8007046:	f04f 0120 	mov.w	r1, #32
 800704a:	f381 8811 	msr	BASEPRI, r1
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	4827      	ldr	r0, [pc, #156]	; (80070f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007052:	f7fe fc46 	bl	80058e2 <_PreparePacket>
 8007056:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800705c:	4b25      	ldr	r3, [pc, #148]	; (80070f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	623b      	str	r3, [r7, #32]
 800706e:	e00b      	b.n	8007088 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	b2da      	uxtb	r2, r3
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	1c59      	adds	r1, r3, #1
 8007078:	6279      	str	r1, [r7, #36]	; 0x24
 800707a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	09db      	lsrs	r3, r3, #7
 8007086:	623b      	str	r3, [r7, #32]
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	2b7f      	cmp	r3, #127	; 0x7f
 800708c:	d8f0      	bhi.n	8007070 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	627a      	str	r2, [r7, #36]	; 0x24
 8007094:	6a3a      	ldr	r2, [r7, #32]
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	61fb      	str	r3, [r7, #28]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	e00b      	b.n	80070c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	1c59      	adds	r1, r3, #1
 80070b0:	61f9      	str	r1, [r7, #28]
 80070b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	09db      	lsrs	r3, r3, #7
 80070be:	61bb      	str	r3, [r7, #24]
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	2b7f      	cmp	r3, #127	; 0x7f
 80070c4:	d8f0      	bhi.n	80070a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	61fa      	str	r2, [r7, #28]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80070d6:	2207      	movs	r2, #7
 80070d8:	68f9      	ldr	r1, [r7, #12]
 80070da:	6938      	ldr	r0, [r7, #16]
 80070dc:	f7fe fcf4 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f383 8811 	msr	BASEPRI, r3
}
 80070e6:	bf00      	nop
 80070e8:	3728      	adds	r7, #40	; 0x28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20017360 	.word	0x20017360
 80070f4:	20017330 	.word	0x20017330

080070f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007100:	4b04      	ldr	r3, [pc, #16]	; (8007114 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	1ad3      	subs	r3, r2, r3
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	20017330 	.word	0x20017330

08007118 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b08c      	sub	sp, #48	; 0x30
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007122:	4b3b      	ldr	r3, [pc, #236]	; (8007210 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d06d      	beq.n	8007206 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800712a:	4b39      	ldr	r3, [pc, #228]	; (8007210 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007130:	2300      	movs	r3, #0
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28
 8007134:	e008      	b.n	8007148 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d007      	beq.n	8007152 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	3301      	adds	r3, #1
 8007146:	62bb      	str	r3, [r7, #40]	; 0x28
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800714c:	429a      	cmp	r2, r3
 800714e:	d3f2      	bcc.n	8007136 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007150:	e000      	b.n	8007154 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007152:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d055      	beq.n	8007206 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800715a:	f3ef 8311 	mrs	r3, BASEPRI
 800715e:	f04f 0120 	mov.w	r1, #32
 8007162:	f381 8811 	msr	BASEPRI, r1
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	482a      	ldr	r0, [pc, #168]	; (8007214 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800716a:	f7fe fbba 	bl	80058e2 <_PreparePacket>
 800716e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
 8007178:	79fb      	ldrb	r3, [r7, #7]
 800717a:	623b      	str	r3, [r7, #32]
 800717c:	e00b      	b.n	8007196 <SEGGER_SYSVIEW_SendModule+0x7e>
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	1c59      	adds	r1, r3, #1
 8007186:	6279      	str	r1, [r7, #36]	; 0x24
 8007188:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	09db      	lsrs	r3, r3, #7
 8007194:	623b      	str	r3, [r7, #32]
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	2b7f      	cmp	r3, #127	; 0x7f
 800719a:	d8f0      	bhi.n	800717e <SEGGER_SYSVIEW_SendModule+0x66>
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	627a      	str	r2, [r7, #36]	; 0x24
 80071a2:	6a3a      	ldr	r2, [r7, #32]
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	61fb      	str	r3, [r7, #28]
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	e00b      	b.n	80071d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	1c59      	adds	r1, r3, #1
 80071c0:	61f9      	str	r1, [r7, #28]
 80071c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	09db      	lsrs	r3, r3, #7
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	2b7f      	cmp	r3, #127	; 0x7f
 80071d4:	d8f0      	bhi.n	80071b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	61fa      	str	r2, [r7, #28]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2280      	movs	r2, #128	; 0x80
 80071ec:	4619      	mov	r1, r3
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f7fe fb2a 	bl	8005848 <_EncodeStr>
 80071f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80071f6:	2216      	movs	r2, #22
 80071f8:	68f9      	ldr	r1, [r7, #12]
 80071fa:	6938      	ldr	r0, [r7, #16]
 80071fc:	f7fe fc64 	bl	8005ac8 <_SendPacket>
      RECORD_END();
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007206:	bf00      	nop
 8007208:	3730      	adds	r7, #48	; 0x30
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20017358 	.word	0x20017358
 8007214:	20017360 	.word	0x20017360

08007218 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800721e:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00f      	beq.n	8007246 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007226:	4b0a      	ldr	r3, [pc, #40]	; (8007250 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f2      	bne.n	800722c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20017358 	.word	0x20017358

08007254 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800725a:	f3ef 8311 	mrs	r3, BASEPRI
 800725e:	f04f 0120 	mov.w	r1, #32
 8007262:	f381 8811 	msr	BASEPRI, r1
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	4817      	ldr	r0, [pc, #92]	; (80072c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800726a:	f7fe fb3a 	bl	80058e2 <_PreparePacket>
 800726e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	4b14      	ldr	r3, [pc, #80]	; (80072cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	e00b      	b.n	8007298 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	1c59      	adds	r1, r3, #1
 8007288:	6179      	str	r1, [r7, #20]
 800728a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	09db      	lsrs	r3, r3, #7
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2b7f      	cmp	r3, #127	; 0x7f
 800729c:	d8f0      	bhi.n	8007280 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	617a      	str	r2, [r7, #20]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80072ae:	221b      	movs	r2, #27
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	68b8      	ldr	r0, [r7, #8]
 80072b4:	f7fe fc08 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f383 8811 	msr	BASEPRI, r3
}
 80072be:	bf00      	nop
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20017360 	.word	0x20017360
 80072cc:	2001735c 	.word	0x2001735c

080072d0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80072d0:	b40f      	push	{r0, r1, r2, r3}
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b082      	sub	sp, #8
 80072d6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80072d8:	f107 0314 	add.w	r3, r7, #20
 80072dc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80072de:	1d3b      	adds	r3, r7, #4
 80072e0:	461a      	mov	r2, r3
 80072e2:	2100      	movs	r1, #0
 80072e4:	6938      	ldr	r0, [r7, #16]
 80072e6:	f7fe fe79 	bl	8005fdc <_VPrintTarget>
  va_end(ParamList);
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072f4:	b004      	add	sp, #16
 80072f6:	4770      	bx	lr

080072f8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	; 0x28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007300:	f3ef 8311 	mrs	r3, BASEPRI
 8007304:	f04f 0120 	mov.w	r1, #32
 8007308:	f381 8811 	msr	BASEPRI, r1
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	4827      	ldr	r0, [pc, #156]	; (80073ac <SEGGER_SYSVIEW_Warn+0xb4>)
 8007310:	f7fe fae7 	bl	80058e2 <_PreparePacket>
 8007314:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007316:	2280      	movs	r2, #128	; 0x80
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	6938      	ldr	r0, [r7, #16]
 800731c:	f7fe fa94 	bl	8005848 <_EncodeStr>
 8007320:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
 8007326:	2301      	movs	r3, #1
 8007328:	623b      	str	r3, [r7, #32]
 800732a:	e00b      	b.n	8007344 <SEGGER_SYSVIEW_Warn+0x4c>
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	b2da      	uxtb	r2, r3
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	1c59      	adds	r1, r3, #1
 8007334:	6279      	str	r1, [r7, #36]	; 0x24
 8007336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	09db      	lsrs	r3, r3, #7
 8007342:	623b      	str	r3, [r7, #32]
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	2b7f      	cmp	r3, #127	; 0x7f
 8007348:	d8f0      	bhi.n	800732c <SEGGER_SYSVIEW_Warn+0x34>
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	627a      	str	r2, [r7, #36]	; 0x24
 8007350:	6a3a      	ldr	r2, [r7, #32]
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	2300      	movs	r3, #0
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	e00b      	b.n	800737c <SEGGER_SYSVIEW_Warn+0x84>
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	b2da      	uxtb	r2, r3
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	1c59      	adds	r1, r3, #1
 800736c:	61f9      	str	r1, [r7, #28]
 800736e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	09db      	lsrs	r3, r3, #7
 800737a:	61bb      	str	r3, [r7, #24]
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2b7f      	cmp	r3, #127	; 0x7f
 8007380:	d8f0      	bhi.n	8007364 <SEGGER_SYSVIEW_Warn+0x6c>
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	61fa      	str	r2, [r7, #28]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007392:	221a      	movs	r2, #26
 8007394:	68f9      	ldr	r1, [r7, #12]
 8007396:	6938      	ldr	r0, [r7, #16]
 8007398:	f7fe fb96 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f383 8811 	msr	BASEPRI, r3
}
 80073a2:	bf00      	nop
 80073a4:	3728      	adds	r7, #40	; 0x28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20017360 	.word	0x20017360

080073b0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80073b4:	4b13      	ldr	r3, [pc, #76]	; (8007404 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073b6:	7e1b      	ldrb	r3, [r3, #24]
 80073b8:	4619      	mov	r1, r3
 80073ba:	4a13      	ldr	r2, [pc, #76]	; (8007408 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80073bc:	460b      	mov	r3, r1
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	440b      	add	r3, r1
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	4413      	add	r3, r2
 80073c6:	336c      	adds	r3, #108	; 0x6c
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073cc:	7e1b      	ldrb	r3, [r3, #24]
 80073ce:	4618      	mov	r0, r3
 80073d0:	490d      	ldr	r1, [pc, #52]	; (8007408 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80073d2:	4603      	mov	r3, r0
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	4403      	add	r3, r0
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	440b      	add	r3, r1
 80073dc:	3370      	adds	r3, #112	; 0x70
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d00b      	beq.n	80073fc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80073e4:	4b07      	ldr	r3, [pc, #28]	; (8007404 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073e6:	789b      	ldrb	r3, [r3, #2]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d107      	bne.n	80073fc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80073ec:	4b05      	ldr	r3, [pc, #20]	; (8007404 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80073f2:	f7fe fa83 	bl	80058fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80073f6:	4b03      	ldr	r3, [pc, #12]	; (8007404 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80073fc:	4b01      	ldr	r3, [pc, #4]	; (8007404 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
}
 8007400:	4618      	mov	r0, r3
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20017330 	.word	0x20017330
 8007408:	2001751c 	.word	0x2001751c

0800740c <keypad_read>:

char keypad_map[] = { '1', '2', '3', 'A', '4', '5', '6', 'B', '7', '8', '9',
		'C', '*', '0', '#', 'D' };
uint16_t row_pin[] = { ROW_0_Pin, ROW_1_Pin, ROW_2_Pin, ROW_3_Pin };
uint16_t col_pin[] = { COL_0_Pin, COL_1_Pin, COL_2_Pin, COL_3_Pin };
char keypad_read(void) {
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
	HAL_Delay(150);
 8007412:	2096      	movs	r0, #150	; 0x96
 8007414:	f7f9 fd36 	bl	8000e84 <HAL_Delay>
	for (int i = 0; i < 4; ++i) {
 8007418:	2300      	movs	r3, #0
 800741a:	607b      	str	r3, [r7, #4]
 800741c:	e038      	b.n	8007490 <keypad_read+0x84>
		for (int j = 0; j < 4; ++j) {
 800741e:	2300      	movs	r3, #0
 8007420:	603b      	str	r3, [r7, #0]
 8007422:	e02f      	b.n	8007484 <keypad_read+0x78>
			HAL_GPIO_WritePin(GPIOD, row_pin[i], GPIO_PIN_SET);
 8007424:	4a1e      	ldr	r2, [pc, #120]	; (80074a0 <keypad_read+0x94>)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800742c:	2201      	movs	r2, #1
 800742e:	4619      	mov	r1, r3
 8007430:	481c      	ldr	r0, [pc, #112]	; (80074a4 <keypad_read+0x98>)
 8007432:	f7f9 ffc9 	bl	80013c8 <HAL_GPIO_WritePin>
			if (HAL_GPIO_ReadPin(GPIOD, col_pin[j]) == 1) {
 8007436:	4a1c      	ldr	r2, [pc, #112]	; (80074a8 <keypad_read+0x9c>)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800743e:	4619      	mov	r1, r3
 8007440:	4818      	ldr	r0, [pc, #96]	; (80074a4 <keypad_read+0x98>)
 8007442:	f7f9 ffa9 	bl	8001398 <HAL_GPIO_ReadPin>
 8007446:	4603      	mov	r3, r0
 8007448:	2b01      	cmp	r3, #1
 800744a:	d10f      	bne.n	800746c <keypad_read+0x60>
				HAL_GPIO_WritePin(GPIOD, row_pin[i], GPIO_PIN_RESET);
 800744c:	4a14      	ldr	r2, [pc, #80]	; (80074a0 <keypad_read+0x94>)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007454:	2200      	movs	r2, #0
 8007456:	4619      	mov	r1, r3
 8007458:	4812      	ldr	r0, [pc, #72]	; (80074a4 <keypad_read+0x98>)
 800745a:	f7f9 ffb5 	bl	80013c8 <HAL_GPIO_WritePin>
				return keypad_map[4 * i + j];
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	009a      	lsls	r2, r3, #2
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	4413      	add	r3, r2
 8007466:	4a11      	ldr	r2, [pc, #68]	; (80074ac <keypad_read+0xa0>)
 8007468:	5cd3      	ldrb	r3, [r2, r3]
 800746a:	e015      	b.n	8007498 <keypad_read+0x8c>
			}
			HAL_GPIO_WritePin(GPIOD, row_pin[i], GPIO_PIN_RESET);
 800746c:	4a0c      	ldr	r2, [pc, #48]	; (80074a0 <keypad_read+0x94>)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007474:	2200      	movs	r2, #0
 8007476:	4619      	mov	r1, r3
 8007478:	480a      	ldr	r0, [pc, #40]	; (80074a4 <keypad_read+0x98>)
 800747a:	f7f9 ffa5 	bl	80013c8 <HAL_GPIO_WritePin>
		for (int j = 0; j < 4; ++j) {
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b03      	cmp	r3, #3
 8007488:	ddcc      	ble.n	8007424 <keypad_read+0x18>
	for (int i = 0; i < 4; ++i) {
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3301      	adds	r3, #1
 800748e:	607b      	str	r3, [r7, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b03      	cmp	r3, #3
 8007494:	ddc3      	ble.n	800741e <keypad_read+0x12>
		}
	}
	return 'x';
 8007496:	2378      	movs	r3, #120	; 0x78
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	2000003c 	.word	0x2000003c
 80074a4:	40020c00 	.word	0x40020c00
 80074a8:	20000044 	.word	0x20000044
 80074ac:	2000002c 	.word	0x2000002c

080074b0 <keypad_enter>:


//blocking function
uint32_t keypad_enter(void) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
	uint32_t number = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
	uint32_t number_temp = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	607b      	str	r3, [r7, #4]

	volatile char key;
	tm1638_ctr_led(LED_ON, ADDR_15);
 80074be:	21cf      	movs	r1, #207	; 0xcf
 80074c0:	2001      	movs	r0, #1
 80074c2:	f000 fa41 	bl	8007948 <tm1638_ctr_led>
	for (int var = 0; var < 9; ++var) {
 80074c6:	2300      	movs	r3, #0
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	e050      	b.n	800756e <keypad_enter+0xbe>

		do {
			key = keypad_read();
 80074cc:	f7ff ff9e 	bl	800740c <keypad_read>
 80074d0:	4603      	mov	r3, r0
 80074d2:	70fb      	strb	r3, [r7, #3]

		} while (key == 'x' || key == 'A' || key == 'B' || key == 'C'
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	b2db      	uxtb	r3, r3
				|| key == 'D');
 80074d8:	2b78      	cmp	r3, #120	; 0x78
 80074da:	d0f7      	beq.n	80074cc <keypad_enter+0x1c>
		} while (key == 'x' || key == 'A' || key == 'B' || key == 'C'
 80074dc:	78fb      	ldrb	r3, [r7, #3]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b41      	cmp	r3, #65	; 0x41
 80074e2:	d0f3      	beq.n	80074cc <keypad_enter+0x1c>
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b42      	cmp	r3, #66	; 0x42
 80074ea:	d0ef      	beq.n	80074cc <keypad_enter+0x1c>
 80074ec:	78fb      	ldrb	r3, [r7, #3]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b43      	cmp	r3, #67	; 0x43
 80074f2:	d0eb      	beq.n	80074cc <keypad_enter+0x1c>
				|| key == 'D');
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b44      	cmp	r3, #68	; 0x44
 80074fa:	d0e7      	beq.n	80074cc <keypad_enter+0x1c>

		if (var == 8) {
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d109      	bne.n	8007516 <keypad_enter+0x66>
			if (key == '#') {
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b23      	cmp	r3, #35	; 0x23
 8007508:	d101      	bne.n	800750e <keypad_enter+0x5e>
				return number;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	e037      	b.n	800757e <keypad_enter+0xce>

			} else {
				var--;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	3b01      	subs	r3, #1
 8007512:	60bb      	str	r3, [r7, #8]
 8007514:	e028      	b.n	8007568 <keypad_enter+0xb8>
			}
		} else {
			if (key == '#') {
 8007516:	78fb      	ldrb	r3, [r7, #3]
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b23      	cmp	r3, #35	; 0x23
 800751c:	d101      	bne.n	8007522 <keypad_enter+0x72>
				return number;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	e02d      	b.n	800757e <keypad_enter+0xce>
			}

			if (key == '*') {
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b2a      	cmp	r3, #42	; 0x2a
 8007528:	d10b      	bne.n	8007542 <keypad_enter+0x92>
				var -= 2;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	3b02      	subs	r3, #2
 800752e:	60bb      	str	r3, [r7, #8]
				number /= 10;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4a15      	ldr	r2, [pc, #84]	; (8007588 <keypad_enter+0xd8>)
 8007534:	fba2 2303 	umull	r2, r3, r2, r3
 8007538:	08db      	lsrs	r3, r3, #3
 800753a:	60fb      	str	r3, [r7, #12]
				tm1638_clear_display();
 800753c:	f000 fc2e 	bl	8007d9c <tm1638_clear_display>
 8007540:	e00f      	b.n	8007562 <keypad_enter+0xb2>

			} else {
				number_temp = check_key(key);
 8007542:	78fb      	ldrb	r3, [r7, #3]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	4618      	mov	r0, r3
 8007548:	f000 f820 	bl	800758c <check_key>
 800754c:	4603      	mov	r3, r0
 800754e:	607b      	str	r3, [r7, #4]
				number = number * 10 + number_temp;
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4413      	add	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
			}

			tm1638_write_multi_number(number);
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 f96e 	bl	8007844 <tm1638_write_multi_number>
	for (int var = 0; var < 9; ++var) {
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	3301      	adds	r3, #1
 800756c:	60bb      	str	r3, [r7, #8]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b08      	cmp	r3, #8
 8007572:	ddab      	ble.n	80074cc <keypad_enter+0x1c>
		}
	}
	tm1638_ctr_led(LED_OFF, ADDR_15);
 8007574:	21cf      	movs	r1, #207	; 0xcf
 8007576:	2000      	movs	r0, #0
 8007578:	f000 f9e6 	bl	8007948 <tm1638_ctr_led>
	return number;
 800757c:	68fb      	ldr	r3, [r7, #12]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	cccccccd 	.word	0xcccccccd

0800758c <check_key>:

uint8_t check_key(char key) {
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	71fb      	strb	r3, [r7, #7]
	switch (key) {
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	3b30      	subs	r3, #48	; 0x30
 800759a:	2b09      	cmp	r3, #9
 800759c:	d82a      	bhi.n	80075f4 <check_key+0x68>
 800759e:	a201      	add	r2, pc, #4	; (adr r2, 80075a4 <check_key+0x18>)
 80075a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a4:	080075cd 	.word	0x080075cd
 80075a8:	080075d1 	.word	0x080075d1
 80075ac:	080075d5 	.word	0x080075d5
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	080075dd 	.word	0x080075dd
 80075b8:	080075e1 	.word	0x080075e1
 80075bc:	080075e5 	.word	0x080075e5
 80075c0:	080075e9 	.word	0x080075e9
 80075c4:	080075ed 	.word	0x080075ed
 80075c8:	080075f1 	.word	0x080075f1
	case '0':
		return 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	e012      	b.n	80075f6 <check_key+0x6a>
		break;
	case '1':
		return 1;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e010      	b.n	80075f6 <check_key+0x6a>
		break;
	case '2':
		return 2;
 80075d4:	2302      	movs	r3, #2
 80075d6:	e00e      	b.n	80075f6 <check_key+0x6a>
		break;
	case '3':
		return 3;
 80075d8:	2303      	movs	r3, #3
 80075da:	e00c      	b.n	80075f6 <check_key+0x6a>
		break;
	case '4':
		return 4;
 80075dc:	2304      	movs	r3, #4
 80075de:	e00a      	b.n	80075f6 <check_key+0x6a>
		break;
	case '5':
		return 5;
 80075e0:	2305      	movs	r3, #5
 80075e2:	e008      	b.n	80075f6 <check_key+0x6a>
		break;
	case '6':
		return 6;
 80075e4:	2306      	movs	r3, #6
 80075e6:	e006      	b.n	80075f6 <check_key+0x6a>
		break;
	case '7':
		return 7;
 80075e8:	2307      	movs	r3, #7
 80075ea:	e004      	b.n	80075f6 <check_key+0x6a>
		break;
	case '8':
		return 8;
 80075ec:	2308      	movs	r3, #8
 80075ee:	e002      	b.n	80075f6 <check_key+0x6a>
		break;
	case '9':
		return 9;
 80075f0:	2309      	movs	r3, #9
 80075f2:	e000      	b.n	80075f6 <check_key+0x6a>
		break;
	}
	return -1;
 80075f4:	23ff      	movs	r3, #255	; 0xff
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop

08007604 <check_number>:
	else if (status_btn & 0x10000000)
		return btn_8;
	else
		return 0;
}
uint8_t check_number(uint8_t data) {
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	71fb      	strb	r3, [r7, #7]
	switch (data) {
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	2b09      	cmp	r3, #9
 8007612:	d82b      	bhi.n	800766c <check_number+0x68>
 8007614:	a201      	add	r2, pc, #4	; (adr r2, 800761c <check_number+0x18>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	08007645 	.word	0x08007645
 8007620:	08007649 	.word	0x08007649
 8007624:	0800764d 	.word	0x0800764d
 8007628:	08007651 	.word	0x08007651
 800762c:	08007655 	.word	0x08007655
 8007630:	08007659 	.word	0x08007659
 8007634:	0800765d 	.word	0x0800765d
 8007638:	08007661 	.word	0x08007661
 800763c:	08007665 	.word	0x08007665
 8007640:	08007669 	.word	0x08007669
	case 0:
		return NUM_0;
 8007644:	233f      	movs	r3, #63	; 0x3f
 8007646:	e012      	b.n	800766e <check_number+0x6a>
		break;
	case 1:
		return NUM_1;
 8007648:	2306      	movs	r3, #6
 800764a:	e010      	b.n	800766e <check_number+0x6a>
		break;
	case 2:
		return NUM_2;
 800764c:	235b      	movs	r3, #91	; 0x5b
 800764e:	e00e      	b.n	800766e <check_number+0x6a>
		break;
	case 3:
		return NUM_3;
 8007650:	234f      	movs	r3, #79	; 0x4f
 8007652:	e00c      	b.n	800766e <check_number+0x6a>
		break;
	case 4:
		return NUM_4;
 8007654:	2366      	movs	r3, #102	; 0x66
 8007656:	e00a      	b.n	800766e <check_number+0x6a>
		break;
	case 5:
		return NUM_5;
 8007658:	236d      	movs	r3, #109	; 0x6d
 800765a:	e008      	b.n	800766e <check_number+0x6a>
		break;
	case 6:
		return NUM_6;
 800765c:	237d      	movs	r3, #125	; 0x7d
 800765e:	e006      	b.n	800766e <check_number+0x6a>
		break;
	case 7:
		return NUM_7;
 8007660:	2307      	movs	r3, #7
 8007662:	e004      	b.n	800766e <check_number+0x6a>
		break;
	case 8:
		return NUM_8;
 8007664:	237f      	movs	r3, #127	; 0x7f
 8007666:	e002      	b.n	800766e <check_number+0x6a>
		break;
	case 9:
		return NUM_9;
 8007668:	236f      	movs	r3, #111	; 0x6f
 800766a:	e000      	b.n	800766e <check_number+0x6a>
		break;
	}
	return -1;
 800766c:	23ff      	movs	r3, #255	; 0xff
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop

0800767c <count_length>:

// support function

uint8_t count_length(uint32_t n) {
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
	uint8_t length = 0;
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]
	uint32_t temp;
	temp = n;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	60bb      	str	r3, [r7, #8]
	while (n != 0) {
 800768c:	e008      	b.n	80076a0 <count_length+0x24>
		length++;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	3301      	adds	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
		n /= 10;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a0b      	ldr	r2, [pc, #44]	; (80076c4 <count_length+0x48>)
 8007698:	fba2 2303 	umull	r2, r3, r2, r3
 800769c:	08db      	lsrs	r3, r3, #3
 800769e:	607b      	str	r3, [r7, #4]
	while (n != 0) {
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f3      	bne.n	800768e <count_length+0x12>
	}
	if (temp == 0)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <count_length+0x34>
		return 1;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e002      	b.n	80076b6 <count_length+0x3a>
	return length++;
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	73fa      	strb	r2, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	cccccccd 	.word	0xcccccccd

080076c8 <position_address_number>:

uint8_t position_address_number(uint8_t n) {
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	71fb      	strb	r3, [r7, #7]
	switch (n) {
 80076d2:	79fb      	ldrb	r3, [r7, #7]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	2b07      	cmp	r3, #7
 80076d8:	d822      	bhi.n	8007720 <position_address_number+0x58>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <position_address_number+0x18>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	08007701 	.word	0x08007701
 80076e4:	08007705 	.word	0x08007705
 80076e8:	08007709 	.word	0x08007709
 80076ec:	0800770d 	.word	0x0800770d
 80076f0:	08007711 	.word	0x08007711
 80076f4:	08007715 	.word	0x08007715
 80076f8:	08007719 	.word	0x08007719
 80076fc:	0800771d 	.word	0x0800771d
	case 1:
		return ADDR_14;
 8007700:	23ce      	movs	r3, #206	; 0xce
 8007702:	e00e      	b.n	8007722 <position_address_number+0x5a>
		break;
	case 2:
		return ADDR_12;
 8007704:	23cc      	movs	r3, #204	; 0xcc
 8007706:	e00c      	b.n	8007722 <position_address_number+0x5a>
		break;
	case 3:
		return ADDR_10;
 8007708:	23ca      	movs	r3, #202	; 0xca
 800770a:	e00a      	b.n	8007722 <position_address_number+0x5a>
		break;
	case 4:
		return ADDR_8;
 800770c:	23c8      	movs	r3, #200	; 0xc8
 800770e:	e008      	b.n	8007722 <position_address_number+0x5a>
		break;
	case 5:
		return ADDR_6;
 8007710:	23c6      	movs	r3, #198	; 0xc6
 8007712:	e006      	b.n	8007722 <position_address_number+0x5a>
		break;
	case 6:
		return ADDR_4;
 8007714:	23c4      	movs	r3, #196	; 0xc4
 8007716:	e004      	b.n	8007722 <position_address_number+0x5a>
		break;
	case 7:
		return ADDR_2;
 8007718:	23c2      	movs	r3, #194	; 0xc2
 800771a:	e002      	b.n	8007722 <position_address_number+0x5a>
		break;
	case 8:
		return ADDR_0;
 800771c:	23c0      	movs	r3, #192	; 0xc0
 800771e:	e000      	b.n	8007722 <position_address_number+0x5a>
		break;
	}
	return ADDR_14;
 8007720:	23ce      	movs	r3, #206	; 0xce
}
 8007722:	4618      	mov	r0, r3
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop

08007730 <tm1638_send_cmd>:

void tm1638_send_cmd(uint8_t *pData) {
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8007738:	2200      	movs	r2, #0
 800773a:	2110      	movs	r1, #16
 800773c:	4809      	ldr	r0, [pc, #36]	; (8007764 <tm1638_send_cmd+0x34>)
 800773e:	f7f9 fe43 	bl	80013c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pData, 1, HAL_MAX_DELAY);
 8007742:	f04f 33ff 	mov.w	r3, #4294967295
 8007746:	2201      	movs	r2, #1
 8007748:	6879      	ldr	r1, [r7, #4]
 800774a:	4807      	ldr	r0, [pc, #28]	; (8007768 <tm1638_send_cmd+0x38>)
 800774c:	f7fa fb95 	bl	8001e7a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8007750:	2201      	movs	r2, #1
 8007752:	2110      	movs	r1, #16
 8007754:	4803      	ldr	r0, [pc, #12]	; (8007764 <tm1638_send_cmd+0x34>)
 8007756:	f7f9 fe37 	bl	80013c8 <HAL_GPIO_WritePin>
}
 800775a:	bf00      	nop
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	40020000 	.word	0x40020000
 8007768:	20017478 	.word	0x20017478

0800776c <tm1638_init>:

void tm1638_init(void) {
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
	uint8_t temp = AUTO_INC_ADDR_MODE;
 8007772:	2340      	movs	r3, #64	; 0x40
 8007774:	71fb      	strb	r3, [r7, #7]
	uint8_t *pData = &temp;
 8007776:	1dfb      	adds	r3, r7, #7
 8007778:	60bb      	str	r3, [r7, #8]

	/*
	 * Set command for writing data into display memory, in the mode of
	 * auto address increment by 1(40H)
	 */
	tm1638_send_cmd(pData);
 800777a:	68b8      	ldr	r0, [r7, #8]
 800777c:	f7ff ffd8 	bl	8007730 <tm1638_send_cmd>

	/* Set starting address (0C0H) */
	temp = ADDR_0;
 8007780:	23c0      	movs	r3, #192	; 0xc0
 8007782:	71fb      	strb	r3, [r7, #7]
	tm1638_send_cmd(pData);
 8007784:	68b8      	ldr	r0, [r7, #8]
 8007786:	f7ff ffd3 	bl	8007730 <tm1638_send_cmd>

	//Transmit data = 0 to clear all display
	temp = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800778e:	2200      	movs	r2, #0
 8007790:	2110      	movs	r1, #16
 8007792:	4810      	ldr	r0, [pc, #64]	; (80077d4 <tm1638_init+0x68>)
 8007794:	f7f9 fe18 	bl	80013c8 <HAL_GPIO_WritePin>
	for (int var = 0; var < 16; ++var) {
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	e009      	b.n	80077b2 <tm1638_init+0x46>
		HAL_SPI_Transmit(&hspi1, pData, 1, HAL_MAX_DELAY);
 800779e:	f04f 33ff 	mov.w	r3, #4294967295
 80077a2:	2201      	movs	r2, #1
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	480c      	ldr	r0, [pc, #48]	; (80077d8 <tm1638_init+0x6c>)
 80077a8:	f7fa fb67 	bl	8001e7a <HAL_SPI_Transmit>
	for (int var = 0; var < 16; ++var) {
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b0f      	cmp	r3, #15
 80077b6:	ddf2      	ble.n	800779e <tm1638_init+0x32>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80077b8:	2201      	movs	r2, #1
 80077ba:	2110      	movs	r1, #16
 80077bc:	4805      	ldr	r0, [pc, #20]	; (80077d4 <tm1638_init+0x68>)
 80077be:	f7f9 fe03 	bl	80013c8 <HAL_GPIO_WritePin>

	// set maximum brightness (8FH)
	temp = SET_BRIGHTNESS_MAX;
 80077c2:	238f      	movs	r3, #143	; 0x8f
 80077c4:	71fb      	strb	r3, [r7, #7]
	tm1638_send_cmd(pData);
 80077c6:	68b8      	ldr	r0, [r7, #8]
 80077c8:	f7ff ffb2 	bl	8007730 <tm1638_send_cmd>

}
 80077cc:	bf00      	nop
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	40020000 	.word	0x40020000
 80077d8:	20017478 	.word	0x20017478

080077dc <tm1638_reset>:

void tm1638_reset(void) {
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
	uint8_t temp = AUTO_INC_ADDR_MODE;
 80077e2:	2340      	movs	r3, #64	; 0x40
 80077e4:	71fb      	strb	r3, [r7, #7]
	uint8_t *pData = &temp;
 80077e6:	1dfb      	adds	r3, r7, #7
 80077e8:	60bb      	str	r3, [r7, #8]

	tm1638_send_cmd(pData);
 80077ea:	68b8      	ldr	r0, [r7, #8]
 80077ec:	f7ff ffa0 	bl	8007730 <tm1638_send_cmd>

	/* Set starting address (0C0H) */
	temp = ADDR_0;
 80077f0:	23c0      	movs	r3, #192	; 0xc0
 80077f2:	71fb      	strb	r3, [r7, #7]
	tm1638_send_cmd(pData);
 80077f4:	68b8      	ldr	r0, [r7, #8]
 80077f6:	f7ff ff9b 	bl	8007730 <tm1638_send_cmd>

	//Transmit data = 0 to clear all display
	temp = 00;
 80077fa:	2300      	movs	r3, #0
 80077fc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80077fe:	2200      	movs	r2, #0
 8007800:	2110      	movs	r1, #16
 8007802:	480e      	ldr	r0, [pc, #56]	; (800783c <tm1638_reset+0x60>)
 8007804:	f7f9 fde0 	bl	80013c8 <HAL_GPIO_WritePin>
	for (int var = 0; var < 16; ++var) {
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	e009      	b.n	8007822 <tm1638_reset+0x46>
		HAL_SPI_Transmit(&hspi1, pData, 1, HAL_MAX_DELAY);
 800780e:	f04f 33ff 	mov.w	r3, #4294967295
 8007812:	2201      	movs	r2, #1
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	480a      	ldr	r0, [pc, #40]	; (8007840 <tm1638_reset+0x64>)
 8007818:	f7fa fb2f 	bl	8001e7a <HAL_SPI_Transmit>
	for (int var = 0; var < 16; ++var) {
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3301      	adds	r3, #1
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b0f      	cmp	r3, #15
 8007826:	ddf2      	ble.n	800780e <tm1638_reset+0x32>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8007828:	2201      	movs	r2, #1
 800782a:	2110      	movs	r1, #16
 800782c:	4803      	ldr	r0, [pc, #12]	; (800783c <tm1638_reset+0x60>)
 800782e:	f7f9 fdcb 	bl	80013c8 <HAL_GPIO_WritePin>

}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	40020000 	.word	0x40020000
 8007840:	20017478 	.word	0x20017478

08007844 <tm1638_write_multi_number>:
	//Transmit data number
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
}

void tm1638_write_multi_number(uint32_t number) {
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	uint8_t *pTemp;
	uint8_t temp = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	747b      	strb	r3, [r7, #17]
	pTemp = &temp;
 8007850:	f107 0311 	add.w	r3, r7, #17
 8007854:	617b      	str	r3, [r7, #20]
	uint8_t data[8];

	uint8_t length_time = count_length(number);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff ff10 	bl	800767c <count_length>
 800785c:	4603      	mov	r3, r0
 800785e:	74fb      	strb	r3, [r7, #19]
	uint8_t address_time = position_address_number(length_time);
 8007860:	7cfb      	ldrb	r3, [r7, #19]
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff ff30 	bl	80076c8 <position_address_number>
 8007868:	4603      	mov	r3, r0
 800786a:	74bb      	strb	r3, [r7, #18]

	for (int var = 0; var < length_time; ++var) {
 800786c:	2300      	movs	r3, #0
 800786e:	61fb      	str	r3, [r7, #28]
 8007870:	e029      	b.n	80078c6 <tm1638_write_multi_number+0x82>
		data[var] = number % 10;
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	4b30      	ldr	r3, [pc, #192]	; (8007938 <tm1638_write_multi_number+0xf4>)
 8007876:	fba3 2301 	umull	r2, r3, r3, r1
 800787a:	08da      	lsrs	r2, r3, #3
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	1aca      	subs	r2, r1, r3
 8007886:	b2d1      	uxtb	r1, r2
 8007888:	f107 0208 	add.w	r2, r7, #8
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	4413      	add	r3, r2
 8007890:	460a      	mov	r2, r1
 8007892:	701a      	strb	r2, [r3, #0]
		data[var] = check_number(data[var]);
 8007894:	f107 0208 	add.w	r2, r7, #8
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	4413      	add	r3, r2
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff feb0 	bl	8007604 <check_number>
 80078a4:	4603      	mov	r3, r0
 80078a6:	4619      	mov	r1, r3
 80078a8:	f107 0208 	add.w	r2, r7, #8
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	4413      	add	r3, r2
 80078b0:	460a      	mov	r2, r1
 80078b2:	701a      	strb	r2, [r3, #0]
		number /= 10;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a20      	ldr	r2, [pc, #128]	; (8007938 <tm1638_write_multi_number+0xf4>)
 80078b8:	fba2 2303 	umull	r2, r3, r2, r3
 80078bc:	08db      	lsrs	r3, r3, #3
 80078be:	607b      	str	r3, [r7, #4]
	for (int var = 0; var < length_time; ++var) {
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	3301      	adds	r3, #1
 80078c4:	61fb      	str	r3, [r7, #28]
 80078c6:	7cfb      	ldrb	r3, [r7, #19]
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	dbd1      	blt.n	8007872 <tm1638_write_multi_number+0x2e>

	/*
	 * Set command for writing data into display memory, in the mode of
	 * auto address increment by 1(40H)
	 */
	temp = FIXED_ADDR_MODE;
 80078ce:	2344      	movs	r3, #68	; 0x44
 80078d0:	747b      	strb	r3, [r7, #17]
	tm1638_send_cmd(pTemp);
 80078d2:	6978      	ldr	r0, [r7, #20]
 80078d4:	f7ff ff2c 	bl	8007730 <tm1638_send_cmd>

	temp = address_time;
 80078d8:	7cbb      	ldrb	r3, [r7, #18]
 80078da:	747b      	strb	r3, [r7, #17]

	for (int var = length_time - 1; var >= 0; --var) {
 80078dc:	7cfb      	ldrb	r3, [r7, #19]
 80078de:	3b01      	subs	r3, #1
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	e021      	b.n	8007928 <tm1638_write_multi_number+0xe4>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80078e4:	2200      	movs	r2, #0
 80078e6:	2110      	movs	r1, #16
 80078e8:	4814      	ldr	r0, [pc, #80]	; (800793c <tm1638_write_multi_number+0xf8>)
 80078ea:	f7f9 fd6d 	bl	80013c8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &address_number[7 - var], 1, HAL_MAX_DELAY); //send address
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	f1c3 0307 	rsb	r3, r3, #7
 80078f4:	4a12      	ldr	r2, [pc, #72]	; (8007940 <tm1638_write_multi_number+0xfc>)
 80078f6:	1899      	adds	r1, r3, r2
 80078f8:	f04f 33ff 	mov.w	r3, #4294967295
 80078fc:	2201      	movs	r2, #1
 80078fe:	4811      	ldr	r0, [pc, #68]	; (8007944 <tm1638_write_multi_number+0x100>)
 8007900:	f7fa fabb 	bl	8001e7a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, &data[var], 1, HAL_MAX_DELAY);		//send data
 8007904:	f107 0208 	add.w	r2, r7, #8
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	18d1      	adds	r1, r2, r3
 800790c:	f04f 33ff 	mov.w	r3, #4294967295
 8007910:	2201      	movs	r2, #1
 8007912:	480c      	ldr	r0, [pc, #48]	; (8007944 <tm1638_write_multi_number+0x100>)
 8007914:	f7fa fab1 	bl	8001e7a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8007918:	2201      	movs	r2, #1
 800791a:	2110      	movs	r1, #16
 800791c:	4807      	ldr	r0, [pc, #28]	; (800793c <tm1638_write_multi_number+0xf8>)
 800791e:	f7f9 fd53 	bl	80013c8 <HAL_GPIO_WritePin>
	for (int var = length_time - 1; var >= 0; --var) {
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	3b01      	subs	r3, #1
 8007926:	61bb      	str	r3, [r7, #24]
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	2b00      	cmp	r3, #0
 800792c:	dada      	bge.n	80078e4 <tm1638_write_multi_number+0xa0>
	}

	/* Set address */
	//Transmit data number
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	3720      	adds	r7, #32
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	cccccccd 	.word	0xcccccccd
 800793c:	40020000 	.word	0x40020000
 8007940:	20000008 	.word	0x20000008
 8007944:	20017478 	.word	0x20017478

08007948 <tm1638_ctr_led>:

void tm1638_ctr_led(uint8_t pData, uint8_t address) {
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	460a      	mov	r2, r1
 8007952:	71fb      	strb	r3, [r7, #7]
 8007954:	4613      	mov	r3, r2
 8007956:	71bb      	strb	r3, [r7, #6]
	uint8_t *pTemp;
	uint8_t temp = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	72fb      	strb	r3, [r7, #11]
	/*
	 * Set command for writing data into display memory, in the mode of
	 * auto address increment by 1(40H)
	 */
	temp = FIXED_ADDR_MODE;
 800795c:	2344      	movs	r3, #68	; 0x44
 800795e:	72fb      	strb	r3, [r7, #11]
	pTemp = &temp;
 8007960:	f107 030b 	add.w	r3, r7, #11
 8007964:	60fb      	str	r3, [r7, #12]
	tm1638_send_cmd(pTemp);
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7ff fee2 	bl	8007730 <tm1638_send_cmd>

	/* Set address */
	temp = address;
 800796c:	79bb      	ldrb	r3, [r7, #6]
 800796e:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8007970:	2200      	movs	r2, #0
 8007972:	2110      	movs	r1, #16
 8007974:	480c      	ldr	r0, [pc, #48]	; (80079a8 <tm1638_ctr_led+0x60>)
 8007976:	f7f9 fd27 	bl	80013c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTemp, 1, HAL_MAX_DELAY);
 800797a:	f04f 33ff 	mov.w	r3, #4294967295
 800797e:	2201      	movs	r2, #1
 8007980:	68f9      	ldr	r1, [r7, #12]
 8007982:	480a      	ldr	r0, [pc, #40]	; (80079ac <tm1638_ctr_led+0x64>)
 8007984:	f7fa fa79 	bl	8001e7a <HAL_SPI_Transmit>
	//Transmit data number
	HAL_SPI_Transmit(&hspi1, &pData, 1, HAL_MAX_DELAY);
 8007988:	1df9      	adds	r1, r7, #7
 800798a:	f04f 33ff 	mov.w	r3, #4294967295
 800798e:	2201      	movs	r2, #1
 8007990:	4806      	ldr	r0, [pc, #24]	; (80079ac <tm1638_ctr_led+0x64>)
 8007992:	f7fa fa72 	bl	8001e7a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8007996:	2201      	movs	r2, #1
 8007998:	2110      	movs	r1, #16
 800799a:	4803      	ldr	r0, [pc, #12]	; (80079a8 <tm1638_ctr_led+0x60>)
 800799c:	f7f9 fd14 	bl	80013c8 <HAL_GPIO_WritePin>
}
 80079a0:	bf00      	nop
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	40020000 	.word	0x40020000
 80079ac:	20017478 	.word	0x20017478

080079b0 <tm1638_toggle_led>:
uint8_t state = 0;

void tm1638_toggle_led(uint8_t address) {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	71fb      	strb	r3, [r7, #7]
	if (state == 0) {
 80079ba:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <tm1638_toggle_led+0x3c>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d108      	bne.n	80079d4 <tm1638_toggle_led+0x24>
		tm1638_ctr_led(LED_ON, address);
 80079c2:	79fb      	ldrb	r3, [r7, #7]
 80079c4:	4619      	mov	r1, r3
 80079c6:	2001      	movs	r0, #1
 80079c8:	f7ff ffbe 	bl	8007948 <tm1638_ctr_led>
		state = 1;
 80079cc:	4b07      	ldr	r3, [pc, #28]	; (80079ec <tm1638_toggle_led+0x3c>)
 80079ce:	2201      	movs	r2, #1
 80079d0:	701a      	strb	r2, [r3, #0]
	} else {
		tm1638_ctr_led(LED_OFF, address);
		state = 0;
	}
}
 80079d2:	e007      	b.n	80079e4 <tm1638_toggle_led+0x34>
		tm1638_ctr_led(LED_OFF, address);
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	4619      	mov	r1, r3
 80079d8:	2000      	movs	r0, #0
 80079da:	f7ff ffb5 	bl	8007948 <tm1638_ctr_led>
		state = 0;
 80079de:	4b03      	ldr	r3, [pc, #12]	; (80079ec <tm1638_toggle_led+0x3c>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	701a      	strb	r2, [r3, #0]
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20017445 	.word	0x20017445

080079f0 <tm1638_cnt_down_non_bl>:
		address_first = 0;
	}
}

// non-blocking function to count down using freeRTOS
void tm1638_cnt_down_non_bl(uint32_t time) {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80079f8:	f7fb fff2 	bl	80039e0 <xTaskGetTickCount>
 80079fc:	4603      	mov	r3, r0
 80079fe:	60bb      	str	r3, [r7, #8]
	;
	const TickType_t xFrequency = 100;
 8007a00:	2364      	movs	r3, #100	; 0x64
 8007a02:	60fb      	str	r3, [r7, #12]

	if (time > 0) {
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <tm1638_cnt_down_non_bl+0x2e>
		tm1638_write_time_down(time);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f820 	bl	8007a50 <tm1638_write_time_down>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8007a10:	f107 0308 	add.w	r3, r7, #8
 8007a14:	68f9      	ldr	r1, [r7, #12]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fb fcd4 	bl	80033c4 <xTaskDelayUntil>
		tm1638_write_time_down(0);
		state0 = 0;
		length_time_first = 0;
		address_first = 0;
	}
}
 8007a1c:	e00e      	b.n	8007a3c <tm1638_cnt_down_non_bl+0x4c>
	else if (time == 0) {
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10b      	bne.n	8007a3c <tm1638_cnt_down_non_bl+0x4c>
		tm1638_write_time_down(0);
 8007a24:	2000      	movs	r0, #0
 8007a26:	f000 f813 	bl	8007a50 <tm1638_write_time_down>
		state0 = 0;
 8007a2a:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <tm1638_cnt_down_non_bl+0x54>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
		length_time_first = 0;
 8007a30:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <tm1638_cnt_down_non_bl+0x58>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	701a      	strb	r2, [r3, #0]
		address_first = 0;
 8007a36:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <tm1638_cnt_down_non_bl+0x5c>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	701a      	strb	r2, [r3, #0]
}
 8007a3c:	bf00      	nop
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	200000d4 	.word	0x200000d4
 8007a48:	20017443 	.word	0x20017443
 8007a4c:	20017444 	.word	0x20017444

08007a50 <tm1638_write_time_down>:

void tm1638_write_time_down(uint32_t time) {
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08a      	sub	sp, #40	; 0x28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
	uint8_t temp = 0;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	75fb      	strb	r3, [r7, #23]
	uint8_t *pTemp = &temp;
 8007a5c:	f107 0317 	add.w	r3, r7, #23
 8007a60:	61bb      	str	r3, [r7, #24]
	uint8_t temp1[8] = { 0 };
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	2300      	movs	r3, #0
 8007a68:	613b      	str	r3, [r7, #16]
	uint32_t temp2 = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	72fb      	strb	r3, [r7, #11]

// to clear number when count down pass different unit
	if (state0 == 0) {
 8007a72:	4b55      	ldr	r3, [pc, #340]	; (8007bc8 <tm1638_write_time_down+0x178>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d112      	bne.n	8007aa0 <tm1638_write_time_down+0x50>
		length_time_first = count_length(time);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff fdfe 	bl	800767c <count_length>
 8007a80:	4603      	mov	r3, r0
 8007a82:	461a      	mov	r2, r3
 8007a84:	4b51      	ldr	r3, [pc, #324]	; (8007bcc <tm1638_write_time_down+0x17c>)
 8007a86:	701a      	strb	r2, [r3, #0]
		address_first = position_address_number(length_time_first);
 8007a88:	4b50      	ldr	r3, [pc, #320]	; (8007bcc <tm1638_write_time_down+0x17c>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7ff fe1b 	bl	80076c8 <position_address_number>
 8007a92:	4603      	mov	r3, r0
 8007a94:	461a      	mov	r2, r3
 8007a96:	4b4e      	ldr	r3, [pc, #312]	; (8007bd0 <tm1638_write_time_down+0x180>)
 8007a98:	701a      	strb	r2, [r3, #0]
		state0 = 1;
 8007a9a:	4b4b      	ldr	r3, [pc, #300]	; (8007bc8 <tm1638_write_time_down+0x178>)
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	701a      	strb	r2, [r3, #0]
	}
	address = address_first;
 8007aa0:	4b4b      	ldr	r3, [pc, #300]	; (8007bd0 <tm1638_write_time_down+0x180>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	72fb      	strb	r3, [r7, #11]

	/*
	 * Set command for writing data into display memory, in the mode of
	 * auto address increment by 1(40H)
	 */
	temp = FIXED_ADDR_MODE;
 8007aa6:	2344      	movs	r3, #68	; 0x44
 8007aa8:	75fb      	strb	r3, [r7, #23]
	tm1638_send_cmd(pTemp);
 8007aaa:	69b8      	ldr	r0, [r7, #24]
 8007aac:	f7ff fe40 	bl	8007730 <tm1638_send_cmd>

//Transmit data

	if (time > 0) {
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d062      	beq.n	8007b7c <tm1638_write_time_down+0x12c>
		temp2 = time;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
		for (int var = length_time_first - 1; var >= 0; --var) {
 8007aba:	4b44      	ldr	r3, [pc, #272]	; (8007bcc <tm1638_write_time_down+0x17c>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	623b      	str	r3, [r7, #32]
 8007ac2:	e019      	b.n	8007af8 <tm1638_write_time_down+0xa8>
			temp1[var] = temp2 % 10;
 8007ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ac6:	4b43      	ldr	r3, [pc, #268]	; (8007bd4 <tm1638_write_time_down+0x184>)
 8007ac8:	fba3 2301 	umull	r2, r3, r3, r1
 8007acc:	08da      	lsrs	r2, r3, #3
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	1aca      	subs	r2, r1, r3
 8007ad8:	b2d1      	uxtb	r1, r2
 8007ada:	f107 020c 	add.w	r2, r7, #12
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	460a      	mov	r2, r1
 8007ae4:	701a      	strb	r2, [r3, #0]
			temp2 /= 10;
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	4a3a      	ldr	r2, [pc, #232]	; (8007bd4 <tm1638_write_time_down+0x184>)
 8007aea:	fba2 2303 	umull	r2, r3, r2, r3
 8007aee:	08db      	lsrs	r3, r3, #3
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
		for (int var = length_time_first - 1; var >= 0; --var) {
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	623b      	str	r3, [r7, #32]
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	dae2      	bge.n	8007ac4 <tm1638_write_time_down+0x74>
		}

		/* Set address */
		temp = address;
 8007afe:	7afb      	ldrb	r3, [r7, #11]
 8007b00:	75fb      	strb	r3, [r7, #23]
		for (int var = 0; var < length_time_first; ++var) {
 8007b02:	2300      	movs	r3, #0
 8007b04:	61fb      	str	r3, [r7, #28]
 8007b06:	e032      	b.n	8007b6e <tm1638_write_time_down+0x11e>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2110      	movs	r1, #16
 8007b0c:	4832      	ldr	r0, [pc, #200]	; (8007bd8 <tm1638_write_time_down+0x188>)
 8007b0e:	f7f9 fc5b 	bl	80013c8 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 8007b12:	f107 010b 	add.w	r1, r7, #11
 8007b16:	f04f 33ff 	mov.w	r3, #4294967295
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	482f      	ldr	r0, [pc, #188]	; (8007bdc <tm1638_write_time_down+0x18c>)
 8007b1e:	f7fa f9ac 	bl	8001e7a <HAL_SPI_Transmit>
			//Transmit data number
			temp1[var] = check_number(temp1[var]);
 8007b22:	f107 020c 	add.w	r2, r7, #12
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4413      	add	r3, r2
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff fd69 	bl	8007604 <check_number>
 8007b32:	4603      	mov	r3, r0
 8007b34:	4619      	mov	r1, r3
 8007b36:	f107 020c 	add.w	r2, r7, #12
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	460a      	mov	r2, r1
 8007b40:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, &temp1[var], 1, HAL_MAX_DELAY);
 8007b42:	f107 020c 	add.w	r2, r7, #12
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	18d1      	adds	r1, r2, r3
 8007b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4e:	2201      	movs	r2, #1
 8007b50:	4822      	ldr	r0, [pc, #136]	; (8007bdc <tm1638_write_time_down+0x18c>)
 8007b52:	f7fa f992 	bl	8001e7a <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8007b56:	2201      	movs	r2, #1
 8007b58:	2110      	movs	r1, #16
 8007b5a:	481f      	ldr	r0, [pc, #124]	; (8007bd8 <tm1638_write_time_down+0x188>)
 8007b5c:	f7f9 fc34 	bl	80013c8 <HAL_GPIO_WritePin>
			address += 2;
 8007b60:	7afb      	ldrb	r3, [r7, #11]
 8007b62:	3302      	adds	r3, #2
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	72fb      	strb	r3, [r7, #11]
		for (int var = 0; var < length_time_first; ++var) {
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	61fb      	str	r3, [r7, #28]
 8007b6e:	4b17      	ldr	r3, [pc, #92]	; (8007bcc <tm1638_write_time_down+0x17c>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	4293      	cmp	r3, r2
 8007b78:	dbc6      	blt.n	8007b08 <tm1638_write_time_down+0xb8>
		//Transmit data number
		temp1[0] = NUM_0;
		HAL_SPI_Transmit(&hspi1, &temp1[0], 1, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	}
}
 8007b7a:	e020      	b.n	8007bbe <tm1638_write_time_down+0x16e>
	} else if (time == 0) {
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d11d      	bne.n	8007bbe <tm1638_write_time_down+0x16e>
		address = ADDR_14;
 8007b82:	23ce      	movs	r3, #206	; 0xce
 8007b84:	72fb      	strb	r3, [r7, #11]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8007b86:	2200      	movs	r2, #0
 8007b88:	2110      	movs	r1, #16
 8007b8a:	4813      	ldr	r0, [pc, #76]	; (8007bd8 <tm1638_write_time_down+0x188>)
 8007b8c:	f7f9 fc1c 	bl	80013c8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 8007b90:	f107 010b 	add.w	r1, r7, #11
 8007b94:	f04f 33ff 	mov.w	r3, #4294967295
 8007b98:	2201      	movs	r2, #1
 8007b9a:	4810      	ldr	r0, [pc, #64]	; (8007bdc <tm1638_write_time_down+0x18c>)
 8007b9c:	f7fa f96d 	bl	8001e7a <HAL_SPI_Transmit>
		temp1[0] = NUM_0;
 8007ba0:	233f      	movs	r3, #63	; 0x3f
 8007ba2:	733b      	strb	r3, [r7, #12]
		HAL_SPI_Transmit(&hspi1, &temp1[0], 1, HAL_MAX_DELAY);
 8007ba4:	f107 010c 	add.w	r1, r7, #12
 8007ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bac:	2201      	movs	r2, #1
 8007bae:	480b      	ldr	r0, [pc, #44]	; (8007bdc <tm1638_write_time_down+0x18c>)
 8007bb0:	f7fa f963 	bl	8001e7a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	2110      	movs	r1, #16
 8007bb8:	4807      	ldr	r0, [pc, #28]	; (8007bd8 <tm1638_write_time_down+0x188>)
 8007bba:	f7f9 fc05 	bl	80013c8 <HAL_GPIO_WritePin>
}
 8007bbe:	bf00      	nop
 8007bc0:	3728      	adds	r7, #40	; 0x28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	200000d4 	.word	0x200000d4
 8007bcc:	20017443 	.word	0x20017443
 8007bd0:	20017444 	.word	0x20017444
 8007bd4:	cccccccd 	.word	0xcccccccd
 8007bd8:	40020000 	.word	0x40020000
 8007bdc:	20017478 	.word	0x20017478

08007be0 <tm1638_cnt_up_non_bl>:
	else if (time == 99999999) {
		tm1638_write_time_up(99999999);
	}
}

void tm1638_cnt_up_non_bl(uint32_t time) {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8007be8:	f7fb fefa 	bl	80039e0 <xTaskGetTickCount>
 8007bec:	4603      	mov	r3, r0
 8007bee:	60bb      	str	r3, [r7, #8]
	;
	const TickType_t xFrequency = 100;
 8007bf0:	2364      	movs	r3, #100	; 0x64
 8007bf2:	60fb      	str	r3, [r7, #12]
	if (time < 99999999) {
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a0c      	ldr	r2, [pc, #48]	; (8007c28 <tm1638_cnt_up_non_bl+0x48>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d809      	bhi.n	8007c10 <tm1638_cnt_up_non_bl+0x30>
		tm1638_write_time_up(time);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f817 	bl	8007c30 <tm1638_write_time_up>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8007c02:	f107 0308 	add.w	r3, r7, #8
 8007c06:	68f9      	ldr	r1, [r7, #12]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fb fbdb 	bl	80033c4 <xTaskDelayUntil>
	}

	else if (time == 99999999) {
		tm1638_write_time_up(99999999);
	}
}
 8007c0e:	e006      	b.n	8007c1e <tm1638_cnt_up_non_bl+0x3e>
	else if (time == 99999999) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a06      	ldr	r2, [pc, #24]	; (8007c2c <tm1638_cnt_up_non_bl+0x4c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d102      	bne.n	8007c1e <tm1638_cnt_up_non_bl+0x3e>
		tm1638_write_time_up(99999999);
 8007c18:	4804      	ldr	r0, [pc, #16]	; (8007c2c <tm1638_cnt_up_non_bl+0x4c>)
 8007c1a:	f000 f809 	bl	8007c30 <tm1638_write_time_up>
}
 8007c1e:	bf00      	nop
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	05f5e0fe 	.word	0x05f5e0fe
 8007c2c:	05f5e0ff 	.word	0x05f5e0ff

08007c30 <tm1638_write_time_up>:
void tm1638_write_time_up(uint32_t time) {
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08a      	sub	sp, #40	; 0x28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
	uint8_t temp = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	75bb      	strb	r3, [r7, #22]
	uint8_t *pTemp = &temp;
 8007c3c:	f107 0316 	add.w	r3, r7, #22
 8007c40:	61bb      	str	r3, [r7, #24]
	uint8_t temp1[8] = { 0 };
 8007c42:	2300      	movs	r3, #0
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	2300      	movs	r3, #0
 8007c48:	613b      	str	r3, [r7, #16]
	uint32_t temp2 = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	72fb      	strb	r3, [r7, #11]

	uint8_t length_time = count_length(time);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff fd12 	bl	800767c <count_length>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	75fb      	strb	r3, [r7, #23]
	address = position_address_number(length_time);
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff fd32 	bl	80076c8 <position_address_number>
 8007c64:	4603      	mov	r3, r0
 8007c66:	72fb      	strb	r3, [r7, #11]

	/*
	 * Set command for writing data into display memory, in the mode of
	 * auto address increment by 1(40H)
	 */
	temp = FIXED_ADDR_MODE;
 8007c68:	2344      	movs	r3, #68	; 0x44
 8007c6a:	75bb      	strb	r3, [r7, #22]
	tm1638_send_cmd(pTemp);
 8007c6c:	69b8      	ldr	r0, [r7, #24]
 8007c6e:	f7ff fd5f 	bl	8007730 <tm1638_send_cmd>

//Transmit data

	if (time < 99999999) {
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a44      	ldr	r2, [pc, #272]	; (8007d88 <tm1638_write_time_up+0x158>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d85f      	bhi.n	8007d3a <tm1638_write_time_up+0x10a>
		temp2 = time;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
		for (int var = length_time - 1; var >= 0; --var) {
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	623b      	str	r3, [r7, #32]
 8007c84:	e019      	b.n	8007cba <tm1638_write_time_up+0x8a>
			temp1[var] = temp2 % 10;
 8007c86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c88:	4b40      	ldr	r3, [pc, #256]	; (8007d8c <tm1638_write_time_up+0x15c>)
 8007c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c8e:	08da      	lsrs	r2, r3, #3
 8007c90:	4613      	mov	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	1aca      	subs	r2, r1, r3
 8007c9a:	b2d1      	uxtb	r1, r2
 8007c9c:	f107 020c 	add.w	r2, r7, #12
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	460a      	mov	r2, r1
 8007ca6:	701a      	strb	r2, [r3, #0]
			temp2 /= 10;
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	4a38      	ldr	r2, [pc, #224]	; (8007d8c <tm1638_write_time_up+0x15c>)
 8007cac:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb0:	08db      	lsrs	r3, r3, #3
 8007cb2:	627b      	str	r3, [r7, #36]	; 0x24
		for (int var = length_time - 1; var >= 0; --var) {
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	623b      	str	r3, [r7, #32]
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	dae2      	bge.n	8007c86 <tm1638_write_time_up+0x56>
		}

		/* Set address */
		temp = address;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	75bb      	strb	r3, [r7, #22]
		for (int var = 0; var < length_time; ++var) {
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61fb      	str	r3, [r7, #28]
 8007cc8:	e032      	b.n	8007d30 <tm1638_write_time_up+0x100>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2110      	movs	r1, #16
 8007cce:	4830      	ldr	r0, [pc, #192]	; (8007d90 <tm1638_write_time_up+0x160>)
 8007cd0:	f7f9 fb7a 	bl	80013c8 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 8007cd4:	f107 010b 	add.w	r1, r7, #11
 8007cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cdc:	2201      	movs	r2, #1
 8007cde:	482d      	ldr	r0, [pc, #180]	; (8007d94 <tm1638_write_time_up+0x164>)
 8007ce0:	f7fa f8cb 	bl	8001e7a <HAL_SPI_Transmit>
			//Transmit data number
			temp1[var] = check_number(temp1[var]);
 8007ce4:	f107 020c 	add.w	r2, r7, #12
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	4413      	add	r3, r2
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff fc88 	bl	8007604 <check_number>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	f107 020c 	add.w	r2, r7, #12
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	4413      	add	r3, r2
 8007d00:	460a      	mov	r2, r1
 8007d02:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, &temp1[var], 1, HAL_MAX_DELAY);
 8007d04:	f107 020c 	add.w	r2, r7, #12
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	18d1      	adds	r1, r2, r3
 8007d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d10:	2201      	movs	r2, #1
 8007d12:	4820      	ldr	r0, [pc, #128]	; (8007d94 <tm1638_write_time_up+0x164>)
 8007d14:	f7fa f8b1 	bl	8001e7a <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8007d18:	2201      	movs	r2, #1
 8007d1a:	2110      	movs	r1, #16
 8007d1c:	481c      	ldr	r0, [pc, #112]	; (8007d90 <tm1638_write_time_up+0x160>)
 8007d1e:	f7f9 fb53 	bl	80013c8 <HAL_GPIO_WritePin>
			address += 2;
 8007d22:	7afb      	ldrb	r3, [r7, #11]
 8007d24:	3302      	adds	r3, #2
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	72fb      	strb	r3, [r7, #11]
		for (int var = 0; var < length_time; ++var) {
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	61fb      	str	r3, [r7, #28]
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	dbc8      	blt.n	8007cca <tm1638_write_time_up+0x9a>
		//Transmit data number
		temp1[0] = NUM_9;
		HAL_SPI_Transmit(&hspi1, &temp1[0], 1, HAL_MAX_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	}
}
 8007d38:	e021      	b.n	8007d7e <tm1638_write_time_up+0x14e>
	} else if (time == 99999999) {
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a16      	ldr	r2, [pc, #88]	; (8007d98 <tm1638_write_time_up+0x168>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d11d      	bne.n	8007d7e <tm1638_write_time_up+0x14e>
		address = ADDR_14;
 8007d42:	23ce      	movs	r3, #206	; 0xce
 8007d44:	72fb      	strb	r3, [r7, #11]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8007d46:	2200      	movs	r2, #0
 8007d48:	2110      	movs	r1, #16
 8007d4a:	4811      	ldr	r0, [pc, #68]	; (8007d90 <tm1638_write_time_up+0x160>)
 8007d4c:	f7f9 fb3c 	bl	80013c8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 8007d50:	f107 010b 	add.w	r1, r7, #11
 8007d54:	f04f 33ff 	mov.w	r3, #4294967295
 8007d58:	2201      	movs	r2, #1
 8007d5a:	480e      	ldr	r0, [pc, #56]	; (8007d94 <tm1638_write_time_up+0x164>)
 8007d5c:	f7fa f88d 	bl	8001e7a <HAL_SPI_Transmit>
		temp1[0] = NUM_9;
 8007d60:	236f      	movs	r3, #111	; 0x6f
 8007d62:	733b      	strb	r3, [r7, #12]
		HAL_SPI_Transmit(&hspi1, &temp1[0], 1, HAL_MAX_DELAY);
 8007d64:	f107 010c 	add.w	r1, r7, #12
 8007d68:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	4809      	ldr	r0, [pc, #36]	; (8007d94 <tm1638_write_time_up+0x164>)
 8007d70:	f7fa f883 	bl	8001e7a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8007d74:	2201      	movs	r2, #1
 8007d76:	2110      	movs	r1, #16
 8007d78:	4805      	ldr	r0, [pc, #20]	; (8007d90 <tm1638_write_time_up+0x160>)
 8007d7a:	f7f9 fb25 	bl	80013c8 <HAL_GPIO_WritePin>
}
 8007d7e:	bf00      	nop
 8007d80:	3728      	adds	r7, #40	; 0x28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	05f5e0fe 	.word	0x05f5e0fe
 8007d8c:	cccccccd 	.word	0xcccccccd
 8007d90:	40020000 	.word	0x40020000
 8007d94:	20017478 	.word	0x20017478
 8007d98:	05f5e0ff 	.word	0x05f5e0ff

08007d9c <tm1638_clear_display>:
		qtime.addr1[var] = 0xc0 | i * 2;
		i++;
	}
}

void tm1638_clear_display() {
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
	uint8_t *pTemp;
	uint8_t temp = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	71fb      	strb	r3, [r7, #7]
	pTemp = &temp;
 8007da6:	1dfb      	adds	r3, r7, #7
 8007da8:	60bb      	str	r3, [r7, #8]
	uint8_t data = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	71bb      	strb	r3, [r7, #6]
	/*
	 * Set command for writing data into display memory, in the mode of
	 * auto address increment by 1(40H)
	 */
	temp = FIXED_ADDR_MODE;
 8007dae:	2344      	movs	r3, #68	; 0x44
 8007db0:	71fb      	strb	r3, [r7, #7]
	tm1638_send_cmd(pTemp);
 8007db2:	68b8      	ldr	r0, [r7, #8]
 8007db4:	f7ff fcbc 	bl	8007730 <tm1638_send_cmd>

	/* Set address */
	temp = ADDR_0;
 8007db8:	23c0      	movs	r3, #192	; 0xc0
 8007dba:	71fb      	strb	r3, [r7, #7]
	for (int var = 0; var < 8; ++var) {
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	e01e      	b.n	8007e00 <tm1638_clear_display+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2110      	movs	r1, #16
 8007dc6:	4812      	ldr	r0, [pc, #72]	; (8007e10 <tm1638_clear_display+0x74>)
 8007dc8:	f7f9 fafe 	bl	80013c8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, pTemp, 1, HAL_MAX_DELAY);
 8007dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	68b9      	ldr	r1, [r7, #8]
 8007dd4:	480f      	ldr	r0, [pc, #60]	; (8007e14 <tm1638_clear_display+0x78>)
 8007dd6:	f7fa f850 	bl	8001e7a <HAL_SPI_Transmit>
		//Transmit data number
		HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8007dda:	1db9      	adds	r1, r7, #6
 8007ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8007de0:	2201      	movs	r2, #1
 8007de2:	480c      	ldr	r0, [pc, #48]	; (8007e14 <tm1638_clear_display+0x78>)
 8007de4:	f7fa f849 	bl	8001e7a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8007de8:	2201      	movs	r2, #1
 8007dea:	2110      	movs	r1, #16
 8007dec:	4808      	ldr	r0, [pc, #32]	; (8007e10 <tm1638_clear_display+0x74>)
 8007dee:	f7f9 faeb 	bl	80013c8 <HAL_GPIO_WritePin>
		temp += 2;
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	3302      	adds	r3, #2
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	71fb      	strb	r3, [r7, #7]
	for (int var = 0; var < 8; ++var) {
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b07      	cmp	r3, #7
 8007e04:	dddd      	ble.n	8007dc2 <tm1638_clear_display+0x26>
	}

}
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	40020000 	.word	0x40020000
 8007e14:	20017478 	.word	0x20017478

08007e18 <__errno>:
 8007e18:	4b01      	ldr	r3, [pc, #4]	; (8007e20 <__errno+0x8>)
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	2000004c 	.word	0x2000004c

08007e24 <__libc_init_array>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	4d0d      	ldr	r5, [pc, #52]	; (8007e5c <__libc_init_array+0x38>)
 8007e28:	4c0d      	ldr	r4, [pc, #52]	; (8007e60 <__libc_init_array+0x3c>)
 8007e2a:	1b64      	subs	r4, r4, r5
 8007e2c:	10a4      	asrs	r4, r4, #2
 8007e2e:	2600      	movs	r6, #0
 8007e30:	42a6      	cmp	r6, r4
 8007e32:	d109      	bne.n	8007e48 <__libc_init_array+0x24>
 8007e34:	4d0b      	ldr	r5, [pc, #44]	; (8007e64 <__libc_init_array+0x40>)
 8007e36:	4c0c      	ldr	r4, [pc, #48]	; (8007e68 <__libc_init_array+0x44>)
 8007e38:	f000 fc70 	bl	800871c <_init>
 8007e3c:	1b64      	subs	r4, r4, r5
 8007e3e:	10a4      	asrs	r4, r4, #2
 8007e40:	2600      	movs	r6, #0
 8007e42:	42a6      	cmp	r6, r4
 8007e44:	d105      	bne.n	8007e52 <__libc_init_array+0x2e>
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4c:	4798      	blx	r3
 8007e4e:	3601      	adds	r6, #1
 8007e50:	e7ee      	b.n	8007e30 <__libc_init_array+0xc>
 8007e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e56:	4798      	blx	r3
 8007e58:	3601      	adds	r6, #1
 8007e5a:	e7f2      	b.n	8007e42 <__libc_init_array+0x1e>
 8007e5c:	080088b4 	.word	0x080088b4
 8007e60:	080088b4 	.word	0x080088b4
 8007e64:	080088b4 	.word	0x080088b4
 8007e68:	080088b8 	.word	0x080088b8

08007e6c <memcmp>:
 8007e6c:	b530      	push	{r4, r5, lr}
 8007e6e:	3901      	subs	r1, #1
 8007e70:	2400      	movs	r4, #0
 8007e72:	42a2      	cmp	r2, r4
 8007e74:	d101      	bne.n	8007e7a <memcmp+0xe>
 8007e76:	2000      	movs	r0, #0
 8007e78:	e005      	b.n	8007e86 <memcmp+0x1a>
 8007e7a:	5d03      	ldrb	r3, [r0, r4]
 8007e7c:	3401      	adds	r4, #1
 8007e7e:	5d0d      	ldrb	r5, [r1, r4]
 8007e80:	42ab      	cmp	r3, r5
 8007e82:	d0f6      	beq.n	8007e72 <memcmp+0x6>
 8007e84:	1b58      	subs	r0, r3, r5
 8007e86:	bd30      	pop	{r4, r5, pc}

08007e88 <memcpy>:
 8007e88:	440a      	add	r2, r1
 8007e8a:	4291      	cmp	r1, r2
 8007e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e90:	d100      	bne.n	8007e94 <memcpy+0xc>
 8007e92:	4770      	bx	lr
 8007e94:	b510      	push	{r4, lr}
 8007e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e9e:	4291      	cmp	r1, r2
 8007ea0:	d1f9      	bne.n	8007e96 <memcpy+0xe>
 8007ea2:	bd10      	pop	{r4, pc}

08007ea4 <memset>:
 8007ea4:	4402      	add	r2, r0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d100      	bne.n	8007eae <memset+0xa>
 8007eac:	4770      	bx	lr
 8007eae:	f803 1b01 	strb.w	r1, [r3], #1
 8007eb2:	e7f9      	b.n	8007ea8 <memset+0x4>

08007eb4 <sniprintf>:
 8007eb4:	b40c      	push	{r2, r3}
 8007eb6:	b530      	push	{r4, r5, lr}
 8007eb8:	4b17      	ldr	r3, [pc, #92]	; (8007f18 <sniprintf+0x64>)
 8007eba:	1e0c      	subs	r4, r1, #0
 8007ebc:	681d      	ldr	r5, [r3, #0]
 8007ebe:	b09d      	sub	sp, #116	; 0x74
 8007ec0:	da08      	bge.n	8007ed4 <sniprintf+0x20>
 8007ec2:	238b      	movs	r3, #139	; 0x8b
 8007ec4:	602b      	str	r3, [r5, #0]
 8007ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eca:	b01d      	add	sp, #116	; 0x74
 8007ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ed0:	b002      	add	sp, #8
 8007ed2:	4770      	bx	lr
 8007ed4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007ed8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007edc:	bf14      	ite	ne
 8007ede:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ee2:	4623      	moveq	r3, r4
 8007ee4:	9304      	str	r3, [sp, #16]
 8007ee6:	9307      	str	r3, [sp, #28]
 8007ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007eec:	9002      	str	r0, [sp, #8]
 8007eee:	9006      	str	r0, [sp, #24]
 8007ef0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ef4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ef6:	ab21      	add	r3, sp, #132	; 0x84
 8007ef8:	a902      	add	r1, sp, #8
 8007efa:	4628      	mov	r0, r5
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	f000 f869 	bl	8007fd4 <_svfiprintf_r>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	bfbc      	itt	lt
 8007f06:	238b      	movlt	r3, #139	; 0x8b
 8007f08:	602b      	strlt	r3, [r5, #0]
 8007f0a:	2c00      	cmp	r4, #0
 8007f0c:	d0dd      	beq.n	8007eca <sniprintf+0x16>
 8007f0e:	9b02      	ldr	r3, [sp, #8]
 8007f10:	2200      	movs	r2, #0
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	e7d9      	b.n	8007eca <sniprintf+0x16>
 8007f16:	bf00      	nop
 8007f18:	2000004c 	.word	0x2000004c

08007f1c <__ssputs_r>:
 8007f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f20:	688e      	ldr	r6, [r1, #8]
 8007f22:	429e      	cmp	r6, r3
 8007f24:	4682      	mov	sl, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	4690      	mov	r8, r2
 8007f2a:	461f      	mov	r7, r3
 8007f2c:	d838      	bhi.n	8007fa0 <__ssputs_r+0x84>
 8007f2e:	898a      	ldrh	r2, [r1, #12]
 8007f30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f34:	d032      	beq.n	8007f9c <__ssputs_r+0x80>
 8007f36:	6825      	ldr	r5, [r4, #0]
 8007f38:	6909      	ldr	r1, [r1, #16]
 8007f3a:	eba5 0901 	sub.w	r9, r5, r1
 8007f3e:	6965      	ldr	r5, [r4, #20]
 8007f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f48:	3301      	adds	r3, #1
 8007f4a:	444b      	add	r3, r9
 8007f4c:	106d      	asrs	r5, r5, #1
 8007f4e:	429d      	cmp	r5, r3
 8007f50:	bf38      	it	cc
 8007f52:	461d      	movcc	r5, r3
 8007f54:	0553      	lsls	r3, r2, #21
 8007f56:	d531      	bpl.n	8007fbc <__ssputs_r+0xa0>
 8007f58:	4629      	mov	r1, r5
 8007f5a:	f000 fb39 	bl	80085d0 <_malloc_r>
 8007f5e:	4606      	mov	r6, r0
 8007f60:	b950      	cbnz	r0, 8007f78 <__ssputs_r+0x5c>
 8007f62:	230c      	movs	r3, #12
 8007f64:	f8ca 3000 	str.w	r3, [sl]
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295
 8007f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f78:	6921      	ldr	r1, [r4, #16]
 8007f7a:	464a      	mov	r2, r9
 8007f7c:	f7ff ff84 	bl	8007e88 <memcpy>
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8a:	81a3      	strh	r3, [r4, #12]
 8007f8c:	6126      	str	r6, [r4, #16]
 8007f8e:	6165      	str	r5, [r4, #20]
 8007f90:	444e      	add	r6, r9
 8007f92:	eba5 0509 	sub.w	r5, r5, r9
 8007f96:	6026      	str	r6, [r4, #0]
 8007f98:	60a5      	str	r5, [r4, #8]
 8007f9a:	463e      	mov	r6, r7
 8007f9c:	42be      	cmp	r6, r7
 8007f9e:	d900      	bls.n	8007fa2 <__ssputs_r+0x86>
 8007fa0:	463e      	mov	r6, r7
 8007fa2:	4632      	mov	r2, r6
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	4641      	mov	r1, r8
 8007fa8:	f000 faa8 	bl	80084fc <memmove>
 8007fac:	68a3      	ldr	r3, [r4, #8]
 8007fae:	6822      	ldr	r2, [r4, #0]
 8007fb0:	1b9b      	subs	r3, r3, r6
 8007fb2:	4432      	add	r2, r6
 8007fb4:	60a3      	str	r3, [r4, #8]
 8007fb6:	6022      	str	r2, [r4, #0]
 8007fb8:	2000      	movs	r0, #0
 8007fba:	e7db      	b.n	8007f74 <__ssputs_r+0x58>
 8007fbc:	462a      	mov	r2, r5
 8007fbe:	f000 fb61 	bl	8008684 <_realloc_r>
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d1e1      	bne.n	8007f8c <__ssputs_r+0x70>
 8007fc8:	6921      	ldr	r1, [r4, #16]
 8007fca:	4650      	mov	r0, sl
 8007fcc:	f000 fab0 	bl	8008530 <_free_r>
 8007fd0:	e7c7      	b.n	8007f62 <__ssputs_r+0x46>
	...

08007fd4 <_svfiprintf_r>:
 8007fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	4698      	mov	r8, r3
 8007fda:	898b      	ldrh	r3, [r1, #12]
 8007fdc:	061b      	lsls	r3, r3, #24
 8007fde:	b09d      	sub	sp, #116	; 0x74
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	460d      	mov	r5, r1
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	d50e      	bpl.n	8008006 <_svfiprintf_r+0x32>
 8007fe8:	690b      	ldr	r3, [r1, #16]
 8007fea:	b963      	cbnz	r3, 8008006 <_svfiprintf_r+0x32>
 8007fec:	2140      	movs	r1, #64	; 0x40
 8007fee:	f000 faef 	bl	80085d0 <_malloc_r>
 8007ff2:	6028      	str	r0, [r5, #0]
 8007ff4:	6128      	str	r0, [r5, #16]
 8007ff6:	b920      	cbnz	r0, 8008002 <_svfiprintf_r+0x2e>
 8007ff8:	230c      	movs	r3, #12
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	e0d1      	b.n	80081a6 <_svfiprintf_r+0x1d2>
 8008002:	2340      	movs	r3, #64	; 0x40
 8008004:	616b      	str	r3, [r5, #20]
 8008006:	2300      	movs	r3, #0
 8008008:	9309      	str	r3, [sp, #36]	; 0x24
 800800a:	2320      	movs	r3, #32
 800800c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008010:	f8cd 800c 	str.w	r8, [sp, #12]
 8008014:	2330      	movs	r3, #48	; 0x30
 8008016:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80081c0 <_svfiprintf_r+0x1ec>
 800801a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800801e:	f04f 0901 	mov.w	r9, #1
 8008022:	4623      	mov	r3, r4
 8008024:	469a      	mov	sl, r3
 8008026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800802a:	b10a      	cbz	r2, 8008030 <_svfiprintf_r+0x5c>
 800802c:	2a25      	cmp	r2, #37	; 0x25
 800802e:	d1f9      	bne.n	8008024 <_svfiprintf_r+0x50>
 8008030:	ebba 0b04 	subs.w	fp, sl, r4
 8008034:	d00b      	beq.n	800804e <_svfiprintf_r+0x7a>
 8008036:	465b      	mov	r3, fp
 8008038:	4622      	mov	r2, r4
 800803a:	4629      	mov	r1, r5
 800803c:	4638      	mov	r0, r7
 800803e:	f7ff ff6d 	bl	8007f1c <__ssputs_r>
 8008042:	3001      	adds	r0, #1
 8008044:	f000 80aa 	beq.w	800819c <_svfiprintf_r+0x1c8>
 8008048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800804a:	445a      	add	r2, fp
 800804c:	9209      	str	r2, [sp, #36]	; 0x24
 800804e:	f89a 3000 	ldrb.w	r3, [sl]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 80a2 	beq.w	800819c <_svfiprintf_r+0x1c8>
 8008058:	2300      	movs	r3, #0
 800805a:	f04f 32ff 	mov.w	r2, #4294967295
 800805e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008062:	f10a 0a01 	add.w	sl, sl, #1
 8008066:	9304      	str	r3, [sp, #16]
 8008068:	9307      	str	r3, [sp, #28]
 800806a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800806e:	931a      	str	r3, [sp, #104]	; 0x68
 8008070:	4654      	mov	r4, sl
 8008072:	2205      	movs	r2, #5
 8008074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008078:	4851      	ldr	r0, [pc, #324]	; (80081c0 <_svfiprintf_r+0x1ec>)
 800807a:	f7f8 f901 	bl	8000280 <memchr>
 800807e:	9a04      	ldr	r2, [sp, #16]
 8008080:	b9d8      	cbnz	r0, 80080ba <_svfiprintf_r+0xe6>
 8008082:	06d0      	lsls	r0, r2, #27
 8008084:	bf44      	itt	mi
 8008086:	2320      	movmi	r3, #32
 8008088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800808c:	0711      	lsls	r1, r2, #28
 800808e:	bf44      	itt	mi
 8008090:	232b      	movmi	r3, #43	; 0x2b
 8008092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008096:	f89a 3000 	ldrb.w	r3, [sl]
 800809a:	2b2a      	cmp	r3, #42	; 0x2a
 800809c:	d015      	beq.n	80080ca <_svfiprintf_r+0xf6>
 800809e:	9a07      	ldr	r2, [sp, #28]
 80080a0:	4654      	mov	r4, sl
 80080a2:	2000      	movs	r0, #0
 80080a4:	f04f 0c0a 	mov.w	ip, #10
 80080a8:	4621      	mov	r1, r4
 80080aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ae:	3b30      	subs	r3, #48	; 0x30
 80080b0:	2b09      	cmp	r3, #9
 80080b2:	d94e      	bls.n	8008152 <_svfiprintf_r+0x17e>
 80080b4:	b1b0      	cbz	r0, 80080e4 <_svfiprintf_r+0x110>
 80080b6:	9207      	str	r2, [sp, #28]
 80080b8:	e014      	b.n	80080e4 <_svfiprintf_r+0x110>
 80080ba:	eba0 0308 	sub.w	r3, r0, r8
 80080be:	fa09 f303 	lsl.w	r3, r9, r3
 80080c2:	4313      	orrs	r3, r2
 80080c4:	9304      	str	r3, [sp, #16]
 80080c6:	46a2      	mov	sl, r4
 80080c8:	e7d2      	b.n	8008070 <_svfiprintf_r+0x9c>
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	1d19      	adds	r1, r3, #4
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	9103      	str	r1, [sp, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	bfbb      	ittet	lt
 80080d6:	425b      	neglt	r3, r3
 80080d8:	f042 0202 	orrlt.w	r2, r2, #2
 80080dc:	9307      	strge	r3, [sp, #28]
 80080de:	9307      	strlt	r3, [sp, #28]
 80080e0:	bfb8      	it	lt
 80080e2:	9204      	strlt	r2, [sp, #16]
 80080e4:	7823      	ldrb	r3, [r4, #0]
 80080e6:	2b2e      	cmp	r3, #46	; 0x2e
 80080e8:	d10c      	bne.n	8008104 <_svfiprintf_r+0x130>
 80080ea:	7863      	ldrb	r3, [r4, #1]
 80080ec:	2b2a      	cmp	r3, #42	; 0x2a
 80080ee:	d135      	bne.n	800815c <_svfiprintf_r+0x188>
 80080f0:	9b03      	ldr	r3, [sp, #12]
 80080f2:	1d1a      	adds	r2, r3, #4
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	9203      	str	r2, [sp, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	bfb8      	it	lt
 80080fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008100:	3402      	adds	r4, #2
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081d0 <_svfiprintf_r+0x1fc>
 8008108:	7821      	ldrb	r1, [r4, #0]
 800810a:	2203      	movs	r2, #3
 800810c:	4650      	mov	r0, sl
 800810e:	f7f8 f8b7 	bl	8000280 <memchr>
 8008112:	b140      	cbz	r0, 8008126 <_svfiprintf_r+0x152>
 8008114:	2340      	movs	r3, #64	; 0x40
 8008116:	eba0 000a 	sub.w	r0, r0, sl
 800811a:	fa03 f000 	lsl.w	r0, r3, r0
 800811e:	9b04      	ldr	r3, [sp, #16]
 8008120:	4303      	orrs	r3, r0
 8008122:	3401      	adds	r4, #1
 8008124:	9304      	str	r3, [sp, #16]
 8008126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812a:	4826      	ldr	r0, [pc, #152]	; (80081c4 <_svfiprintf_r+0x1f0>)
 800812c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008130:	2206      	movs	r2, #6
 8008132:	f7f8 f8a5 	bl	8000280 <memchr>
 8008136:	2800      	cmp	r0, #0
 8008138:	d038      	beq.n	80081ac <_svfiprintf_r+0x1d8>
 800813a:	4b23      	ldr	r3, [pc, #140]	; (80081c8 <_svfiprintf_r+0x1f4>)
 800813c:	bb1b      	cbnz	r3, 8008186 <_svfiprintf_r+0x1b2>
 800813e:	9b03      	ldr	r3, [sp, #12]
 8008140:	3307      	adds	r3, #7
 8008142:	f023 0307 	bic.w	r3, r3, #7
 8008146:	3308      	adds	r3, #8
 8008148:	9303      	str	r3, [sp, #12]
 800814a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814c:	4433      	add	r3, r6
 800814e:	9309      	str	r3, [sp, #36]	; 0x24
 8008150:	e767      	b.n	8008022 <_svfiprintf_r+0x4e>
 8008152:	fb0c 3202 	mla	r2, ip, r2, r3
 8008156:	460c      	mov	r4, r1
 8008158:	2001      	movs	r0, #1
 800815a:	e7a5      	b.n	80080a8 <_svfiprintf_r+0xd4>
 800815c:	2300      	movs	r3, #0
 800815e:	3401      	adds	r4, #1
 8008160:	9305      	str	r3, [sp, #20]
 8008162:	4619      	mov	r1, r3
 8008164:	f04f 0c0a 	mov.w	ip, #10
 8008168:	4620      	mov	r0, r4
 800816a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800816e:	3a30      	subs	r2, #48	; 0x30
 8008170:	2a09      	cmp	r2, #9
 8008172:	d903      	bls.n	800817c <_svfiprintf_r+0x1a8>
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0c5      	beq.n	8008104 <_svfiprintf_r+0x130>
 8008178:	9105      	str	r1, [sp, #20]
 800817a:	e7c3      	b.n	8008104 <_svfiprintf_r+0x130>
 800817c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008180:	4604      	mov	r4, r0
 8008182:	2301      	movs	r3, #1
 8008184:	e7f0      	b.n	8008168 <_svfiprintf_r+0x194>
 8008186:	ab03      	add	r3, sp, #12
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	462a      	mov	r2, r5
 800818c:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <_svfiprintf_r+0x1f8>)
 800818e:	a904      	add	r1, sp, #16
 8008190:	4638      	mov	r0, r7
 8008192:	f3af 8000 	nop.w
 8008196:	1c42      	adds	r2, r0, #1
 8008198:	4606      	mov	r6, r0
 800819a:	d1d6      	bne.n	800814a <_svfiprintf_r+0x176>
 800819c:	89ab      	ldrh	r3, [r5, #12]
 800819e:	065b      	lsls	r3, r3, #25
 80081a0:	f53f af2c 	bmi.w	8007ffc <_svfiprintf_r+0x28>
 80081a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081a6:	b01d      	add	sp, #116	; 0x74
 80081a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ac:	ab03      	add	r3, sp, #12
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	462a      	mov	r2, r5
 80081b2:	4b06      	ldr	r3, [pc, #24]	; (80081cc <_svfiprintf_r+0x1f8>)
 80081b4:	a904      	add	r1, sp, #16
 80081b6:	4638      	mov	r0, r7
 80081b8:	f000 f87a 	bl	80082b0 <_printf_i>
 80081bc:	e7eb      	b.n	8008196 <_svfiprintf_r+0x1c2>
 80081be:	bf00      	nop
 80081c0:	08008878 	.word	0x08008878
 80081c4:	08008882 	.word	0x08008882
 80081c8:	00000000 	.word	0x00000000
 80081cc:	08007f1d 	.word	0x08007f1d
 80081d0:	0800887e 	.word	0x0800887e

080081d4 <_printf_common>:
 80081d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	4616      	mov	r6, r2
 80081da:	4699      	mov	r9, r3
 80081dc:	688a      	ldr	r2, [r1, #8]
 80081de:	690b      	ldr	r3, [r1, #16]
 80081e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081e4:	4293      	cmp	r3, r2
 80081e6:	bfb8      	it	lt
 80081e8:	4613      	movlt	r3, r2
 80081ea:	6033      	str	r3, [r6, #0]
 80081ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081f0:	4607      	mov	r7, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	b10a      	cbz	r2, 80081fa <_printf_common+0x26>
 80081f6:	3301      	adds	r3, #1
 80081f8:	6033      	str	r3, [r6, #0]
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	0699      	lsls	r1, r3, #26
 80081fe:	bf42      	ittt	mi
 8008200:	6833      	ldrmi	r3, [r6, #0]
 8008202:	3302      	addmi	r3, #2
 8008204:	6033      	strmi	r3, [r6, #0]
 8008206:	6825      	ldr	r5, [r4, #0]
 8008208:	f015 0506 	ands.w	r5, r5, #6
 800820c:	d106      	bne.n	800821c <_printf_common+0x48>
 800820e:	f104 0a19 	add.w	sl, r4, #25
 8008212:	68e3      	ldr	r3, [r4, #12]
 8008214:	6832      	ldr	r2, [r6, #0]
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	42ab      	cmp	r3, r5
 800821a:	dc26      	bgt.n	800826a <_printf_common+0x96>
 800821c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008220:	1e13      	subs	r3, r2, #0
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	bf18      	it	ne
 8008226:	2301      	movne	r3, #1
 8008228:	0692      	lsls	r2, r2, #26
 800822a:	d42b      	bmi.n	8008284 <_printf_common+0xb0>
 800822c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008230:	4649      	mov	r1, r9
 8008232:	4638      	mov	r0, r7
 8008234:	47c0      	blx	r8
 8008236:	3001      	adds	r0, #1
 8008238:	d01e      	beq.n	8008278 <_printf_common+0xa4>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	68e5      	ldr	r5, [r4, #12]
 800823e:	6832      	ldr	r2, [r6, #0]
 8008240:	f003 0306 	and.w	r3, r3, #6
 8008244:	2b04      	cmp	r3, #4
 8008246:	bf08      	it	eq
 8008248:	1aad      	subeq	r5, r5, r2
 800824a:	68a3      	ldr	r3, [r4, #8]
 800824c:	6922      	ldr	r2, [r4, #16]
 800824e:	bf0c      	ite	eq
 8008250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008254:	2500      	movne	r5, #0
 8008256:	4293      	cmp	r3, r2
 8008258:	bfc4      	itt	gt
 800825a:	1a9b      	subgt	r3, r3, r2
 800825c:	18ed      	addgt	r5, r5, r3
 800825e:	2600      	movs	r6, #0
 8008260:	341a      	adds	r4, #26
 8008262:	42b5      	cmp	r5, r6
 8008264:	d11a      	bne.n	800829c <_printf_common+0xc8>
 8008266:	2000      	movs	r0, #0
 8008268:	e008      	b.n	800827c <_printf_common+0xa8>
 800826a:	2301      	movs	r3, #1
 800826c:	4652      	mov	r2, sl
 800826e:	4649      	mov	r1, r9
 8008270:	4638      	mov	r0, r7
 8008272:	47c0      	blx	r8
 8008274:	3001      	adds	r0, #1
 8008276:	d103      	bne.n	8008280 <_printf_common+0xac>
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008280:	3501      	adds	r5, #1
 8008282:	e7c6      	b.n	8008212 <_printf_common+0x3e>
 8008284:	18e1      	adds	r1, r4, r3
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	2030      	movs	r0, #48	; 0x30
 800828a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800828e:	4422      	add	r2, r4
 8008290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008298:	3302      	adds	r3, #2
 800829a:	e7c7      	b.n	800822c <_printf_common+0x58>
 800829c:	2301      	movs	r3, #1
 800829e:	4622      	mov	r2, r4
 80082a0:	4649      	mov	r1, r9
 80082a2:	4638      	mov	r0, r7
 80082a4:	47c0      	blx	r8
 80082a6:	3001      	adds	r0, #1
 80082a8:	d0e6      	beq.n	8008278 <_printf_common+0xa4>
 80082aa:	3601      	adds	r6, #1
 80082ac:	e7d9      	b.n	8008262 <_printf_common+0x8e>
	...

080082b0 <_printf_i>:
 80082b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	460c      	mov	r4, r1
 80082b6:	4691      	mov	r9, r2
 80082b8:	7e27      	ldrb	r7, [r4, #24]
 80082ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082bc:	2f78      	cmp	r7, #120	; 0x78
 80082be:	4680      	mov	r8, r0
 80082c0:	469a      	mov	sl, r3
 80082c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082c6:	d807      	bhi.n	80082d8 <_printf_i+0x28>
 80082c8:	2f62      	cmp	r7, #98	; 0x62
 80082ca:	d80a      	bhi.n	80082e2 <_printf_i+0x32>
 80082cc:	2f00      	cmp	r7, #0
 80082ce:	f000 80d8 	beq.w	8008482 <_printf_i+0x1d2>
 80082d2:	2f58      	cmp	r7, #88	; 0x58
 80082d4:	f000 80a3 	beq.w	800841e <_printf_i+0x16e>
 80082d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082e0:	e03a      	b.n	8008358 <_printf_i+0xa8>
 80082e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082e6:	2b15      	cmp	r3, #21
 80082e8:	d8f6      	bhi.n	80082d8 <_printf_i+0x28>
 80082ea:	a001      	add	r0, pc, #4	; (adr r0, 80082f0 <_printf_i+0x40>)
 80082ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80082f0:	08008349 	.word	0x08008349
 80082f4:	0800835d 	.word	0x0800835d
 80082f8:	080082d9 	.word	0x080082d9
 80082fc:	080082d9 	.word	0x080082d9
 8008300:	080082d9 	.word	0x080082d9
 8008304:	080082d9 	.word	0x080082d9
 8008308:	0800835d 	.word	0x0800835d
 800830c:	080082d9 	.word	0x080082d9
 8008310:	080082d9 	.word	0x080082d9
 8008314:	080082d9 	.word	0x080082d9
 8008318:	080082d9 	.word	0x080082d9
 800831c:	08008469 	.word	0x08008469
 8008320:	0800838d 	.word	0x0800838d
 8008324:	0800844b 	.word	0x0800844b
 8008328:	080082d9 	.word	0x080082d9
 800832c:	080082d9 	.word	0x080082d9
 8008330:	0800848b 	.word	0x0800848b
 8008334:	080082d9 	.word	0x080082d9
 8008338:	0800838d 	.word	0x0800838d
 800833c:	080082d9 	.word	0x080082d9
 8008340:	080082d9 	.word	0x080082d9
 8008344:	08008453 	.word	0x08008453
 8008348:	680b      	ldr	r3, [r1, #0]
 800834a:	1d1a      	adds	r2, r3, #4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	600a      	str	r2, [r1, #0]
 8008350:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008358:	2301      	movs	r3, #1
 800835a:	e0a3      	b.n	80084a4 <_printf_i+0x1f4>
 800835c:	6825      	ldr	r5, [r4, #0]
 800835e:	6808      	ldr	r0, [r1, #0]
 8008360:	062e      	lsls	r6, r5, #24
 8008362:	f100 0304 	add.w	r3, r0, #4
 8008366:	d50a      	bpl.n	800837e <_printf_i+0xce>
 8008368:	6805      	ldr	r5, [r0, #0]
 800836a:	600b      	str	r3, [r1, #0]
 800836c:	2d00      	cmp	r5, #0
 800836e:	da03      	bge.n	8008378 <_printf_i+0xc8>
 8008370:	232d      	movs	r3, #45	; 0x2d
 8008372:	426d      	negs	r5, r5
 8008374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008378:	485e      	ldr	r0, [pc, #376]	; (80084f4 <_printf_i+0x244>)
 800837a:	230a      	movs	r3, #10
 800837c:	e019      	b.n	80083b2 <_printf_i+0x102>
 800837e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008382:	6805      	ldr	r5, [r0, #0]
 8008384:	600b      	str	r3, [r1, #0]
 8008386:	bf18      	it	ne
 8008388:	b22d      	sxthne	r5, r5
 800838a:	e7ef      	b.n	800836c <_printf_i+0xbc>
 800838c:	680b      	ldr	r3, [r1, #0]
 800838e:	6825      	ldr	r5, [r4, #0]
 8008390:	1d18      	adds	r0, r3, #4
 8008392:	6008      	str	r0, [r1, #0]
 8008394:	0628      	lsls	r0, r5, #24
 8008396:	d501      	bpl.n	800839c <_printf_i+0xec>
 8008398:	681d      	ldr	r5, [r3, #0]
 800839a:	e002      	b.n	80083a2 <_printf_i+0xf2>
 800839c:	0669      	lsls	r1, r5, #25
 800839e:	d5fb      	bpl.n	8008398 <_printf_i+0xe8>
 80083a0:	881d      	ldrh	r5, [r3, #0]
 80083a2:	4854      	ldr	r0, [pc, #336]	; (80084f4 <_printf_i+0x244>)
 80083a4:	2f6f      	cmp	r7, #111	; 0x6f
 80083a6:	bf0c      	ite	eq
 80083a8:	2308      	moveq	r3, #8
 80083aa:	230a      	movne	r3, #10
 80083ac:	2100      	movs	r1, #0
 80083ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083b2:	6866      	ldr	r6, [r4, #4]
 80083b4:	60a6      	str	r6, [r4, #8]
 80083b6:	2e00      	cmp	r6, #0
 80083b8:	bfa2      	ittt	ge
 80083ba:	6821      	ldrge	r1, [r4, #0]
 80083bc:	f021 0104 	bicge.w	r1, r1, #4
 80083c0:	6021      	strge	r1, [r4, #0]
 80083c2:	b90d      	cbnz	r5, 80083c8 <_printf_i+0x118>
 80083c4:	2e00      	cmp	r6, #0
 80083c6:	d04d      	beq.n	8008464 <_printf_i+0x1b4>
 80083c8:	4616      	mov	r6, r2
 80083ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80083ce:	fb03 5711 	mls	r7, r3, r1, r5
 80083d2:	5dc7      	ldrb	r7, [r0, r7]
 80083d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083d8:	462f      	mov	r7, r5
 80083da:	42bb      	cmp	r3, r7
 80083dc:	460d      	mov	r5, r1
 80083de:	d9f4      	bls.n	80083ca <_printf_i+0x11a>
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d10b      	bne.n	80083fc <_printf_i+0x14c>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	07df      	lsls	r7, r3, #31
 80083e8:	d508      	bpl.n	80083fc <_printf_i+0x14c>
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	6861      	ldr	r1, [r4, #4]
 80083ee:	4299      	cmp	r1, r3
 80083f0:	bfde      	ittt	le
 80083f2:	2330      	movle	r3, #48	; 0x30
 80083f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083fc:	1b92      	subs	r2, r2, r6
 80083fe:	6122      	str	r2, [r4, #16]
 8008400:	f8cd a000 	str.w	sl, [sp]
 8008404:	464b      	mov	r3, r9
 8008406:	aa03      	add	r2, sp, #12
 8008408:	4621      	mov	r1, r4
 800840a:	4640      	mov	r0, r8
 800840c:	f7ff fee2 	bl	80081d4 <_printf_common>
 8008410:	3001      	adds	r0, #1
 8008412:	d14c      	bne.n	80084ae <_printf_i+0x1fe>
 8008414:	f04f 30ff 	mov.w	r0, #4294967295
 8008418:	b004      	add	sp, #16
 800841a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800841e:	4835      	ldr	r0, [pc, #212]	; (80084f4 <_printf_i+0x244>)
 8008420:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	680e      	ldr	r6, [r1, #0]
 8008428:	061f      	lsls	r7, r3, #24
 800842a:	f856 5b04 	ldr.w	r5, [r6], #4
 800842e:	600e      	str	r6, [r1, #0]
 8008430:	d514      	bpl.n	800845c <_printf_i+0x1ac>
 8008432:	07d9      	lsls	r1, r3, #31
 8008434:	bf44      	itt	mi
 8008436:	f043 0320 	orrmi.w	r3, r3, #32
 800843a:	6023      	strmi	r3, [r4, #0]
 800843c:	b91d      	cbnz	r5, 8008446 <_printf_i+0x196>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	f023 0320 	bic.w	r3, r3, #32
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	2310      	movs	r3, #16
 8008448:	e7b0      	b.n	80083ac <_printf_i+0xfc>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	f043 0320 	orr.w	r3, r3, #32
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	2378      	movs	r3, #120	; 0x78
 8008454:	4828      	ldr	r0, [pc, #160]	; (80084f8 <_printf_i+0x248>)
 8008456:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800845a:	e7e3      	b.n	8008424 <_printf_i+0x174>
 800845c:	065e      	lsls	r6, r3, #25
 800845e:	bf48      	it	mi
 8008460:	b2ad      	uxthmi	r5, r5
 8008462:	e7e6      	b.n	8008432 <_printf_i+0x182>
 8008464:	4616      	mov	r6, r2
 8008466:	e7bb      	b.n	80083e0 <_printf_i+0x130>
 8008468:	680b      	ldr	r3, [r1, #0]
 800846a:	6826      	ldr	r6, [r4, #0]
 800846c:	6960      	ldr	r0, [r4, #20]
 800846e:	1d1d      	adds	r5, r3, #4
 8008470:	600d      	str	r5, [r1, #0]
 8008472:	0635      	lsls	r5, r6, #24
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	d501      	bpl.n	800847c <_printf_i+0x1cc>
 8008478:	6018      	str	r0, [r3, #0]
 800847a:	e002      	b.n	8008482 <_printf_i+0x1d2>
 800847c:	0671      	lsls	r1, r6, #25
 800847e:	d5fb      	bpl.n	8008478 <_printf_i+0x1c8>
 8008480:	8018      	strh	r0, [r3, #0]
 8008482:	2300      	movs	r3, #0
 8008484:	6123      	str	r3, [r4, #16]
 8008486:	4616      	mov	r6, r2
 8008488:	e7ba      	b.n	8008400 <_printf_i+0x150>
 800848a:	680b      	ldr	r3, [r1, #0]
 800848c:	1d1a      	adds	r2, r3, #4
 800848e:	600a      	str	r2, [r1, #0]
 8008490:	681e      	ldr	r6, [r3, #0]
 8008492:	6862      	ldr	r2, [r4, #4]
 8008494:	2100      	movs	r1, #0
 8008496:	4630      	mov	r0, r6
 8008498:	f7f7 fef2 	bl	8000280 <memchr>
 800849c:	b108      	cbz	r0, 80084a2 <_printf_i+0x1f2>
 800849e:	1b80      	subs	r0, r0, r6
 80084a0:	6060      	str	r0, [r4, #4]
 80084a2:	6863      	ldr	r3, [r4, #4]
 80084a4:	6123      	str	r3, [r4, #16]
 80084a6:	2300      	movs	r3, #0
 80084a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ac:	e7a8      	b.n	8008400 <_printf_i+0x150>
 80084ae:	6923      	ldr	r3, [r4, #16]
 80084b0:	4632      	mov	r2, r6
 80084b2:	4649      	mov	r1, r9
 80084b4:	4640      	mov	r0, r8
 80084b6:	47d0      	blx	sl
 80084b8:	3001      	adds	r0, #1
 80084ba:	d0ab      	beq.n	8008414 <_printf_i+0x164>
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	079b      	lsls	r3, r3, #30
 80084c0:	d413      	bmi.n	80084ea <_printf_i+0x23a>
 80084c2:	68e0      	ldr	r0, [r4, #12]
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	4298      	cmp	r0, r3
 80084c8:	bfb8      	it	lt
 80084ca:	4618      	movlt	r0, r3
 80084cc:	e7a4      	b.n	8008418 <_printf_i+0x168>
 80084ce:	2301      	movs	r3, #1
 80084d0:	4632      	mov	r2, r6
 80084d2:	4649      	mov	r1, r9
 80084d4:	4640      	mov	r0, r8
 80084d6:	47d0      	blx	sl
 80084d8:	3001      	adds	r0, #1
 80084da:	d09b      	beq.n	8008414 <_printf_i+0x164>
 80084dc:	3501      	adds	r5, #1
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	9903      	ldr	r1, [sp, #12]
 80084e2:	1a5b      	subs	r3, r3, r1
 80084e4:	42ab      	cmp	r3, r5
 80084e6:	dcf2      	bgt.n	80084ce <_printf_i+0x21e>
 80084e8:	e7eb      	b.n	80084c2 <_printf_i+0x212>
 80084ea:	2500      	movs	r5, #0
 80084ec:	f104 0619 	add.w	r6, r4, #25
 80084f0:	e7f5      	b.n	80084de <_printf_i+0x22e>
 80084f2:	bf00      	nop
 80084f4:	08008889 	.word	0x08008889
 80084f8:	0800889a 	.word	0x0800889a

080084fc <memmove>:
 80084fc:	4288      	cmp	r0, r1
 80084fe:	b510      	push	{r4, lr}
 8008500:	eb01 0402 	add.w	r4, r1, r2
 8008504:	d902      	bls.n	800850c <memmove+0x10>
 8008506:	4284      	cmp	r4, r0
 8008508:	4623      	mov	r3, r4
 800850a:	d807      	bhi.n	800851c <memmove+0x20>
 800850c:	1e43      	subs	r3, r0, #1
 800850e:	42a1      	cmp	r1, r4
 8008510:	d008      	beq.n	8008524 <memmove+0x28>
 8008512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008516:	f803 2f01 	strb.w	r2, [r3, #1]!
 800851a:	e7f8      	b.n	800850e <memmove+0x12>
 800851c:	4402      	add	r2, r0
 800851e:	4601      	mov	r1, r0
 8008520:	428a      	cmp	r2, r1
 8008522:	d100      	bne.n	8008526 <memmove+0x2a>
 8008524:	bd10      	pop	{r4, pc}
 8008526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800852a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800852e:	e7f7      	b.n	8008520 <memmove+0x24>

08008530 <_free_r>:
 8008530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008532:	2900      	cmp	r1, #0
 8008534:	d048      	beq.n	80085c8 <_free_r+0x98>
 8008536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800853a:	9001      	str	r0, [sp, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f1a1 0404 	sub.w	r4, r1, #4
 8008542:	bfb8      	it	lt
 8008544:	18e4      	addlt	r4, r4, r3
 8008546:	f000 f8d3 	bl	80086f0 <__malloc_lock>
 800854a:	4a20      	ldr	r2, [pc, #128]	; (80085cc <_free_r+0x9c>)
 800854c:	9801      	ldr	r0, [sp, #4]
 800854e:	6813      	ldr	r3, [r2, #0]
 8008550:	4615      	mov	r5, r2
 8008552:	b933      	cbnz	r3, 8008562 <_free_r+0x32>
 8008554:	6063      	str	r3, [r4, #4]
 8008556:	6014      	str	r4, [r2, #0]
 8008558:	b003      	add	sp, #12
 800855a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800855e:	f000 b8cd 	b.w	80086fc <__malloc_unlock>
 8008562:	42a3      	cmp	r3, r4
 8008564:	d90b      	bls.n	800857e <_free_r+0x4e>
 8008566:	6821      	ldr	r1, [r4, #0]
 8008568:	1862      	adds	r2, r4, r1
 800856a:	4293      	cmp	r3, r2
 800856c:	bf04      	itt	eq
 800856e:	681a      	ldreq	r2, [r3, #0]
 8008570:	685b      	ldreq	r3, [r3, #4]
 8008572:	6063      	str	r3, [r4, #4]
 8008574:	bf04      	itt	eq
 8008576:	1852      	addeq	r2, r2, r1
 8008578:	6022      	streq	r2, [r4, #0]
 800857a:	602c      	str	r4, [r5, #0]
 800857c:	e7ec      	b.n	8008558 <_free_r+0x28>
 800857e:	461a      	mov	r2, r3
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	b10b      	cbz	r3, 8008588 <_free_r+0x58>
 8008584:	42a3      	cmp	r3, r4
 8008586:	d9fa      	bls.n	800857e <_free_r+0x4e>
 8008588:	6811      	ldr	r1, [r2, #0]
 800858a:	1855      	adds	r5, r2, r1
 800858c:	42a5      	cmp	r5, r4
 800858e:	d10b      	bne.n	80085a8 <_free_r+0x78>
 8008590:	6824      	ldr	r4, [r4, #0]
 8008592:	4421      	add	r1, r4
 8008594:	1854      	adds	r4, r2, r1
 8008596:	42a3      	cmp	r3, r4
 8008598:	6011      	str	r1, [r2, #0]
 800859a:	d1dd      	bne.n	8008558 <_free_r+0x28>
 800859c:	681c      	ldr	r4, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	6053      	str	r3, [r2, #4]
 80085a2:	4421      	add	r1, r4
 80085a4:	6011      	str	r1, [r2, #0]
 80085a6:	e7d7      	b.n	8008558 <_free_r+0x28>
 80085a8:	d902      	bls.n	80085b0 <_free_r+0x80>
 80085aa:	230c      	movs	r3, #12
 80085ac:	6003      	str	r3, [r0, #0]
 80085ae:	e7d3      	b.n	8008558 <_free_r+0x28>
 80085b0:	6825      	ldr	r5, [r4, #0]
 80085b2:	1961      	adds	r1, r4, r5
 80085b4:	428b      	cmp	r3, r1
 80085b6:	bf04      	itt	eq
 80085b8:	6819      	ldreq	r1, [r3, #0]
 80085ba:	685b      	ldreq	r3, [r3, #4]
 80085bc:	6063      	str	r3, [r4, #4]
 80085be:	bf04      	itt	eq
 80085c0:	1949      	addeq	r1, r1, r5
 80085c2:	6021      	streq	r1, [r4, #0]
 80085c4:	6054      	str	r4, [r2, #4]
 80085c6:	e7c7      	b.n	8008558 <_free_r+0x28>
 80085c8:	b003      	add	sp, #12
 80085ca:	bd30      	pop	{r4, r5, pc}
 80085cc:	20017448 	.word	0x20017448

080085d0 <_malloc_r>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	1ccd      	adds	r5, r1, #3
 80085d4:	f025 0503 	bic.w	r5, r5, #3
 80085d8:	3508      	adds	r5, #8
 80085da:	2d0c      	cmp	r5, #12
 80085dc:	bf38      	it	cc
 80085de:	250c      	movcc	r5, #12
 80085e0:	2d00      	cmp	r5, #0
 80085e2:	4606      	mov	r6, r0
 80085e4:	db01      	blt.n	80085ea <_malloc_r+0x1a>
 80085e6:	42a9      	cmp	r1, r5
 80085e8:	d903      	bls.n	80085f2 <_malloc_r+0x22>
 80085ea:	230c      	movs	r3, #12
 80085ec:	6033      	str	r3, [r6, #0]
 80085ee:	2000      	movs	r0, #0
 80085f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f2:	f000 f87d 	bl	80086f0 <__malloc_lock>
 80085f6:	4921      	ldr	r1, [pc, #132]	; (800867c <_malloc_r+0xac>)
 80085f8:	680a      	ldr	r2, [r1, #0]
 80085fa:	4614      	mov	r4, r2
 80085fc:	b99c      	cbnz	r4, 8008626 <_malloc_r+0x56>
 80085fe:	4f20      	ldr	r7, [pc, #128]	; (8008680 <_malloc_r+0xb0>)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	b923      	cbnz	r3, 800860e <_malloc_r+0x3e>
 8008604:	4621      	mov	r1, r4
 8008606:	4630      	mov	r0, r6
 8008608:	f000 f862 	bl	80086d0 <_sbrk_r>
 800860c:	6038      	str	r0, [r7, #0]
 800860e:	4629      	mov	r1, r5
 8008610:	4630      	mov	r0, r6
 8008612:	f000 f85d 	bl	80086d0 <_sbrk_r>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d123      	bne.n	8008662 <_malloc_r+0x92>
 800861a:	230c      	movs	r3, #12
 800861c:	6033      	str	r3, [r6, #0]
 800861e:	4630      	mov	r0, r6
 8008620:	f000 f86c 	bl	80086fc <__malloc_unlock>
 8008624:	e7e3      	b.n	80085ee <_malloc_r+0x1e>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	1b5b      	subs	r3, r3, r5
 800862a:	d417      	bmi.n	800865c <_malloc_r+0x8c>
 800862c:	2b0b      	cmp	r3, #11
 800862e:	d903      	bls.n	8008638 <_malloc_r+0x68>
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	441c      	add	r4, r3
 8008634:	6025      	str	r5, [r4, #0]
 8008636:	e004      	b.n	8008642 <_malloc_r+0x72>
 8008638:	6863      	ldr	r3, [r4, #4]
 800863a:	42a2      	cmp	r2, r4
 800863c:	bf0c      	ite	eq
 800863e:	600b      	streq	r3, [r1, #0]
 8008640:	6053      	strne	r3, [r2, #4]
 8008642:	4630      	mov	r0, r6
 8008644:	f000 f85a 	bl	80086fc <__malloc_unlock>
 8008648:	f104 000b 	add.w	r0, r4, #11
 800864c:	1d23      	adds	r3, r4, #4
 800864e:	f020 0007 	bic.w	r0, r0, #7
 8008652:	1ac2      	subs	r2, r0, r3
 8008654:	d0cc      	beq.n	80085f0 <_malloc_r+0x20>
 8008656:	1a1b      	subs	r3, r3, r0
 8008658:	50a3      	str	r3, [r4, r2]
 800865a:	e7c9      	b.n	80085f0 <_malloc_r+0x20>
 800865c:	4622      	mov	r2, r4
 800865e:	6864      	ldr	r4, [r4, #4]
 8008660:	e7cc      	b.n	80085fc <_malloc_r+0x2c>
 8008662:	1cc4      	adds	r4, r0, #3
 8008664:	f024 0403 	bic.w	r4, r4, #3
 8008668:	42a0      	cmp	r0, r4
 800866a:	d0e3      	beq.n	8008634 <_malloc_r+0x64>
 800866c:	1a21      	subs	r1, r4, r0
 800866e:	4630      	mov	r0, r6
 8008670:	f000 f82e 	bl	80086d0 <_sbrk_r>
 8008674:	3001      	adds	r0, #1
 8008676:	d1dd      	bne.n	8008634 <_malloc_r+0x64>
 8008678:	e7cf      	b.n	800861a <_malloc_r+0x4a>
 800867a:	bf00      	nop
 800867c:	20017448 	.word	0x20017448
 8008680:	2001744c 	.word	0x2001744c

08008684 <_realloc_r>:
 8008684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008686:	4607      	mov	r7, r0
 8008688:	4614      	mov	r4, r2
 800868a:	460e      	mov	r6, r1
 800868c:	b921      	cbnz	r1, 8008698 <_realloc_r+0x14>
 800868e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008692:	4611      	mov	r1, r2
 8008694:	f7ff bf9c 	b.w	80085d0 <_malloc_r>
 8008698:	b922      	cbnz	r2, 80086a4 <_realloc_r+0x20>
 800869a:	f7ff ff49 	bl	8008530 <_free_r>
 800869e:	4625      	mov	r5, r4
 80086a0:	4628      	mov	r0, r5
 80086a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a4:	f000 f830 	bl	8008708 <_malloc_usable_size_r>
 80086a8:	42a0      	cmp	r0, r4
 80086aa:	d20f      	bcs.n	80086cc <_realloc_r+0x48>
 80086ac:	4621      	mov	r1, r4
 80086ae:	4638      	mov	r0, r7
 80086b0:	f7ff ff8e 	bl	80085d0 <_malloc_r>
 80086b4:	4605      	mov	r5, r0
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d0f2      	beq.n	80086a0 <_realloc_r+0x1c>
 80086ba:	4631      	mov	r1, r6
 80086bc:	4622      	mov	r2, r4
 80086be:	f7ff fbe3 	bl	8007e88 <memcpy>
 80086c2:	4631      	mov	r1, r6
 80086c4:	4638      	mov	r0, r7
 80086c6:	f7ff ff33 	bl	8008530 <_free_r>
 80086ca:	e7e9      	b.n	80086a0 <_realloc_r+0x1c>
 80086cc:	4635      	mov	r5, r6
 80086ce:	e7e7      	b.n	80086a0 <_realloc_r+0x1c>

080086d0 <_sbrk_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d06      	ldr	r5, [pc, #24]	; (80086ec <_sbrk_r+0x1c>)
 80086d4:	2300      	movs	r3, #0
 80086d6:	4604      	mov	r4, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	f7f8 fb1e 	bl	8000d1c <_sbrk>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_sbrk_r+0x1a>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_sbrk_r+0x1a>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	200175c4 	.word	0x200175c4

080086f0 <__malloc_lock>:
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <__malloc_lock+0x8>)
 80086f2:	f000 b811 	b.w	8008718 <__retarget_lock_acquire_recursive>
 80086f6:	bf00      	nop
 80086f8:	200175cc 	.word	0x200175cc

080086fc <__malloc_unlock>:
 80086fc:	4801      	ldr	r0, [pc, #4]	; (8008704 <__malloc_unlock+0x8>)
 80086fe:	f000 b80c 	b.w	800871a <__retarget_lock_release_recursive>
 8008702:	bf00      	nop
 8008704:	200175cc 	.word	0x200175cc

08008708 <_malloc_usable_size_r>:
 8008708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800870c:	1f18      	subs	r0, r3, #4
 800870e:	2b00      	cmp	r3, #0
 8008710:	bfbc      	itt	lt
 8008712:	580b      	ldrlt	r3, [r1, r0]
 8008714:	18c0      	addlt	r0, r0, r3
 8008716:	4770      	bx	lr

08008718 <__retarget_lock_acquire_recursive>:
 8008718:	4770      	bx	lr

0800871a <__retarget_lock_release_recursive>:
 800871a:	4770      	bx	lr

0800871c <_init>:
 800871c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871e:	bf00      	nop
 8008720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008722:	bc08      	pop	{r3}
 8008724:	469e      	mov	lr, r3
 8008726:	4770      	bx	lr

08008728 <_fini>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	bf00      	nop
 800872c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872e:	bc08      	pop	{r3}
 8008730:	469e      	mov	lr, r3
 8008732:	4770      	bx	lr
