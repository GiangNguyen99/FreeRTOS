
01_tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe0  08003fe0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fe8  08003fe8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004030  20000074  08004064  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040a4  08004064  000240a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012552  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b60  00000000  00000000  000325f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00035158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00036058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018af8  00000000  00000000  00036e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb99  00000000  00000000  0004f918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095deb  00000000  00000000  0005f4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f529c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b8  00000000  00000000  000f52f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003eec 	.word	0x08003eec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003eec 	.word	0x08003eec

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000090 	.word	0x20000090
 8000508:	200000e4 	.word	0x200000e4

0800050c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800050c:	b5b0      	push	{r4, r5, r7, lr}
 800050e:	b08e      	sub	sp, #56	; 0x38
 8000510:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000512:	f000 fc19 	bl	8000d48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000516:	f000 f85d 	bl	80005d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800051a:	f000 f8c5 	bl	80006a8 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	status = xTaskCreate(task1_handle, "task1", 200, "this is task 1", 3,
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	2303      	movs	r3, #3
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <main+0xa8>)
 800052a:	22c8      	movs	r2, #200	; 0xc8
 800052c:	4922      	ldr	r1, [pc, #136]	; (80005b8 <main+0xac>)
 800052e:	4823      	ldr	r0, [pc, #140]	; (80005bc <main+0xb0>)
 8000530:	f001 ff6e 	bl	8002410 <xTaskCreate>
 8000534:	62f8      	str	r0, [r7, #44]	; 0x2c
			&task1_handler);
	configASSERT(status == pdPASS);
 8000536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000538:	2b01      	cmp	r3, #1
 800053a:	d00a      	beq.n	8000552 <main+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000540:	f383 8811 	msr	BASEPRI, r3
 8000544:	f3bf 8f6f 	isb	sy
 8000548:	f3bf 8f4f 	dsb	sy
 800054c:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800054e:	bf00      	nop
 8000550:	e7fe      	b.n	8000550 <main+0x44>

	status = xTaskCreate(task2_handle, "task2", 200, "this is task 2", 3,
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	2303      	movs	r3, #3
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <main+0xb4>)
 800055e:	22c8      	movs	r2, #200	; 0xc8
 8000560:	4918      	ldr	r1, [pc, #96]	; (80005c4 <main+0xb8>)
 8000562:	4819      	ldr	r0, [pc, #100]	; (80005c8 <main+0xbc>)
 8000564:	f001 ff54 	bl	8002410 <xTaskCreate>
 8000568:	62f8      	str	r0, [r7, #44]	; 0x2c
			&task2_handler);
	configASSERT(status == pdPASS);
 800056a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800056c:	2b01      	cmp	r3, #1
 800056e:	d00a      	beq.n	8000586 <main+0x7a>
	__asm volatile
 8000570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000574:	f383 8811 	msr	BASEPRI, r3
 8000578:	f3bf 8f6f 	isb	sy
 800057c:	f3bf 8f4f 	dsb	sy
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000582:	bf00      	nop
 8000584:	e7fe      	b.n	8000584 <main+0x78>

	vTaskStartScheduler();
 8000586:	f002 f89f 	bl	80026c8 <vTaskStartScheduler>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <main+0xc0>)
 800058c:	463c      	mov	r4, r7
 800058e:	461d      	mov	r5, r3
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800059c:	463b      	mov	r3, r7
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fdc4 	bl	800212e <osThreadCreate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <main+0xc4>)
 80005aa:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80005ac:	f001 fdb8 	bl	8002120 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005b0:	e7fe      	b.n	80005b0 <main+0xa4>
 80005b2:	bf00      	nop
 80005b4:	08003f10 	.word	0x08003f10
 80005b8:	08003f20 	.word	0x08003f20
 80005bc:	08000965 	.word	0x08000965
 80005c0:	08003f28 	.word	0x08003f28
 80005c4:	08003f38 	.word	0x08003f38
 80005c8:	08000989 	.word	0x08000989
 80005cc:	08003f40 	.word	0x08003f40
 80005d0:	20004044 	.word	0x20004044

080005d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 ffb4 	bl	8003550 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 200;
 8000648:	23c8      	movs	r3, #200	; 0xc8
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800064c:	2304      	movs	r3, #4
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8000650:	2308      	movs	r3, #8
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fe37 	bl	80012cc <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
		Error_Handler();
 8000664:	f000 f9bc 	bl	80009e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000670:	2390      	movs	r3, #144	; 0x90
 8000672:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000678:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f001 f898 	bl	80017bc <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc2>
		Error_Handler();
 8000692:	f000 f9a5 	bl	80009e0 <Error_Handler>
	}
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
 80006c2:	4ba2      	ldr	r3, [pc, #648]	; (800094c <MX_GPIO_Init+0x2a4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4aa1      	ldr	r2, [pc, #644]	; (800094c <MX_GPIO_Init+0x2a4>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b9f      	ldr	r3, [pc, #636]	; (800094c <MX_GPIO_Init+0x2a4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	4b9b      	ldr	r3, [pc, #620]	; (800094c <MX_GPIO_Init+0x2a4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a9a      	ldr	r2, [pc, #616]	; (800094c <MX_GPIO_Init+0x2a4>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b98      	ldr	r3, [pc, #608]	; (800094c <MX_GPIO_Init+0x2a4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b94      	ldr	r3, [pc, #592]	; (800094c <MX_GPIO_Init+0x2a4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a93      	ldr	r2, [pc, #588]	; (800094c <MX_GPIO_Init+0x2a4>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b91      	ldr	r3, [pc, #580]	; (800094c <MX_GPIO_Init+0x2a4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b8d      	ldr	r3, [pc, #564]	; (800094c <MX_GPIO_Init+0x2a4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a8c      	ldr	r2, [pc, #560]	; (800094c <MX_GPIO_Init+0x2a4>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b8a      	ldr	r3, [pc, #552]	; (800094c <MX_GPIO_Init+0x2a4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b86      	ldr	r3, [pc, #536]	; (800094c <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a85      	ldr	r2, [pc, #532]	; (800094c <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b83      	ldr	r3, [pc, #524]	; (800094c <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b7f      	ldr	r3, [pc, #508]	; (800094c <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a7e      	ldr	r2, [pc, #504]	; (800094c <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b7c      	ldr	r3, [pc, #496]	; (800094c <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2108      	movs	r1, #8
 800076a:	4879      	ldr	r0, [pc, #484]	; (8000950 <MX_GPIO_Init+0x2a8>)
 800076c:	f000 fd94 	bl	8001298 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000770:	2201      	movs	r2, #1
 8000772:	2101      	movs	r1, #1
 8000774:	4877      	ldr	r0, [pc, #476]	; (8000954 <MX_GPIO_Init+0x2ac>)
 8000776:	f000 fd8f 	bl	8001298 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800077a:	2200      	movs	r2, #0
 800077c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000780:	4875      	ldr	r0, [pc, #468]	; (8000958 <MX_GPIO_Init+0x2b0>)
 8000782:	f000 fd89 	bl	8001298 <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PE2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000786:	2304      	movs	r3, #4
 8000788:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	486d      	ldr	r0, [pc, #436]	; (8000950 <MX_GPIO_Init+0x2a8>)
 800079a:	f000 fbf9 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800079e:	2308      	movs	r3, #8
 80007a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4866      	ldr	r0, [pc, #408]	; (8000950 <MX_GPIO_Init+0x2a8>)
 80007b6:	f000 fbeb 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | MEMS_INT2_Pin;
 80007ba:	2332      	movs	r3, #50	; 0x32
 80007bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4860      	ldr	r0, [pc, #384]	; (8000950 <MX_GPIO_Init+0x2a8>)
 80007d0:	f000 fbde 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	485a      	ldr	r0, [pc, #360]	; (8000954 <MX_GPIO_Init+0x2ac>)
 80007ec:	f000 fbd0 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007f0:	2308      	movs	r3, #8
 80007f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000800:	2305      	movs	r3, #5
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4852      	ldr	r0, [pc, #328]	; (8000954 <MX_GPIO_Init+0x2ac>)
 800080c:	f000 fbc0 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000810:	2301      	movs	r3, #1
 8000812:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000814:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000818:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	484d      	ldr	r0, [pc, #308]	; (800095c <MX_GPIO_Init+0x2b4>)
 8000826:	f000 fbb3 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800082a:	2310      	movs	r3, #16
 800082c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800083a:	2306      	movs	r3, #6
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4845      	ldr	r0, [pc, #276]	; (800095c <MX_GPIO_Init+0x2b4>)
 8000846:	f000 fba3 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 800084a:	23e0      	movs	r3, #224	; 0xe0
 800084c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800085a:	2305      	movs	r3, #5
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	483d      	ldr	r0, [pc, #244]	; (800095c <MX_GPIO_Init+0x2b4>)
 8000866:	f000 fb93 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pins : CLK_IN_Pin PB12 */
	GPIO_InitStruct.Pin = CLK_IN_Pin | GPIO_PIN_12;
 800086a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800086e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087c:	2305      	movs	r3, #5
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4836      	ldr	r0, [pc, #216]	; (8000960 <MX_GPIO_Init+0x2b8>)
 8000888:	f000 fb82 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 800088c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000890:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	482c      	ldr	r0, [pc, #176]	; (8000958 <MX_GPIO_Init+0x2b0>)
 80008a6:	f000 fb73 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 80008aa:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008bc:	2306      	movs	r3, #6
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4823      	ldr	r0, [pc, #140]	; (8000954 <MX_GPIO_Init+0x2ac>)
 80008c8:	f000 fb62 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	481e      	ldr	r0, [pc, #120]	; (800095c <MX_GPIO_Init+0x2b4>)
 80008e2:	f000 fb55 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 80008e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008f8:	230a      	movs	r3, #10
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4816      	ldr	r0, [pc, #88]	; (800095c <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fb44 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000908:	2320      	movs	r3, #32
 800090a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	480f      	ldr	r0, [pc, #60]	; (8000958 <MX_GPIO_Init+0x2b0>)
 800091c:	f000 fb38 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 8000920:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000924:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000926:	2312      	movs	r3, #18
 8000928:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000932:	2304      	movs	r3, #4
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4808      	ldr	r0, [pc, #32]	; (8000960 <MX_GPIO_Init+0x2b8>)
 800093e:	f000 fb27 	bl	8000f90 <HAL_GPIO_Init>

}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40021000 	.word	0x40021000
 8000954:	40020800 	.word	0x40020800
 8000958:	40020c00 	.word	0x40020c00
 800095c:	40020000 	.word	0x40020000
 8000960:	40020400 	.word	0x40020400

08000964 <task1_handle>:

/* USER CODE BEGIN 4 */
static void task1_handle(void *parameters) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	while (1) {
		printf("%s\n", (char*) parameters);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f002 fe65 	bl	800363c <puts>
		taskYIELD();
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <task1_handle+0x20>)
 8000974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	f3bf 8f4f 	dsb	sy
 800097e:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*) parameters);
 8000982:	e7f3      	b.n	800096c <task1_handle+0x8>
 8000984:	e000ed04 	.word	0xe000ed04

08000988 <task2_handle>:
	}
}

static void task2_handle(void *parameters) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	while (1) {
		printf("%s\n", (char*) parameters);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f002 fe53 	bl	800363c <puts>
		taskYIELD();
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <task2_handle+0x20>)
 8000998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	f3bf 8f4f 	dsb	sy
 80009a2:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*) parameters);
 80009a6:	e7f3      	b.n	8000990 <task2_handle+0x8>
 80009a8:	e000ed04 	.word	0xe000ed04

080009ac <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f001 fc06 	bl	80021c6 <osDelay>
 80009ba:	e7fb      	b.n	80009b4 <StartDefaultTask+0x8>

080009bc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80009ce:	f000 f9dd 	bl	8000d8c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40000c00 	.word	0x40000c00

080009e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_MspInit+0x54>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <HAL_MspInit+0x54>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_MspInit+0x54>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_MspInit+0x54>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_MspInit+0x54>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_MspInit+0x54>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	210f      	movs	r1, #15
 8000a2e:	f06f 0001 	mvn.w	r0, #1
 8000a32:	f000 fa83 	bl	8000f3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2032      	movs	r0, #50	; 0x32
 8000a5a:	f000 fa6f 	bl	8000f3c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a5e:	2032      	movs	r0, #50	; 0x32
 8000a60:	f000 fa88 	bl	8000f74 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a80:	f107 0210 	add.w	r2, r7, #16
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 f87e 	bl	8001b8c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a90:	f001 f868 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 8000a94:	4603      	mov	r3, r0
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9c:	4a13      	ldr	r2, [pc, #76]	; (8000aec <HAL_InitTick+0xa8>)
 8000a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa2:	0c9b      	lsrs	r3, r3, #18
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_InitTick+0xac>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <HAL_InitTick+0xb0>)
 8000aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_InitTick+0xac>)
 8000ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_InitTick+0xac>)
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_InitTick+0xac>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_InitTick+0xac>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <HAL_InitTick+0xac>)
 8000aca:	f001 f891 	bl	8001bf0 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d104      	bne.n	8000ade <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <HAL_InitTick+0xac>)
 8000ad6:	f001 f8e5 	bl	8001ca4 <HAL_TIM_Base_Start_IT>
 8000ada:	4603      	mov	r3, r0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3730      	adds	r7, #48	; 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	431bde83 	.word	0x431bde83
 8000af0:	20004048 	.word	0x20004048
 8000af4:	40000c00 	.word	0x40000c00

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <TIM5_IRQHandler+0x10>)
 8000b2a:	f001 f91d 	bl	8001d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20004048 	.word	0x20004048

08000b38 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch);

void ITM_SendChar(uint8_t ch) {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= (1 << 24);
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <ITM_SendChar+0x48>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <ITM_SendChar+0x48>)
 8000b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b4c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= (1 << 0);
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <ITM_SendChar+0x4c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <ITM_SendChar+0x4c>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while (!(ITM_STIMULUS_PORT0 & 1))
 8000b5a:	bf00      	nop
 8000b5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f8      	beq.n	8000b5c <ITM_SendChar+0x24>
		;

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b6a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	6013      	str	r3, [r2, #0]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000edfc 	.word	0xe000edfc
 8000b84:	e0000e00 	.word	0xe0000e00

08000b88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e00a      	b.n	8000bb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b9a:	f3af 8000 	nop.w
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60ba      	str	r2, [r7, #8]
 8000ba6:	b2ca      	uxtb	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf0      	blt.n	8000b9a <_read+0x12>
	}

return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	e009      	b.n	8000be8 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	60ba      	str	r2, [r7, #8]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffab 	bl	8000b38 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf1      	blt.n	8000bd4 <_write+0x12>

	}
	return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_close>:

int _close(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	return -1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c22:	605a      	str	r2, [r3, #4]
	return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_isatty>:

int _isatty(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
	return 1;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f002 fc32 	bl	80034fc <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20020000 	.word	0x20020000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	200002e4 	.word	0x200002e4
 8000ccc:	200040a8 	.word	0x200040a8

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d10:	4c0b      	ldr	r4, [pc, #44]	; (8000d40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d1e:	f7ff ffd7 	bl	8000cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f002 fbf1 	bl	8003508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d26:	f7ff fbf1 	bl	800050c <main>
  bx  lr    
 8000d2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d38:	08003ff0 	.word	0x08003ff0
  ldr r2, =_sbss
 8000d3c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d40:	200040a4 	.word	0x200040a4

08000d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <HAL_Init+0x40>)
 8000d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_Init+0x40>)
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_Init+0x40>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f8d8 	bl	8000f26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	200f      	movs	r0, #15
 8000d78:	f7ff fe64 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fe36 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023c00 	.word	0x40023c00

08000d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x20>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x24>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_IncTick+0x24>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20004090 	.word	0x20004090

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20004090 	.word	0x20004090

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff4c 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4e:	f7ff ff61 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	6978      	ldr	r0, [r7, #20]
 8000f5a:	f7ff ffb1 	bl	8000ec0 <NVIC_EncodePriority>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff80 	bl	8000e6c <__NVIC_SetPriority>
}
 8000f6c:	bf00      	nop
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff54 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	e159      	b.n	8001260 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f040 8148 	bne.w	800125a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d005      	beq.n	8000fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d130      	bne.n	8001044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	f003 0201 	and.w	r2, r3, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b03      	cmp	r3, #3
 800104e:	d017      	beq.n	8001080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d123      	bne.n	80010d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	69b9      	ldr	r1, [r7, #24]
 80010d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0203 	and.w	r2, r3, #3
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80a2 	beq.w	800125a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <HAL_GPIO_Init+0x2e8>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a56      	ldr	r2, [pc, #344]	; (8001278 <HAL_GPIO_Init+0x2e8>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b54      	ldr	r3, [pc, #336]	; (8001278 <HAL_GPIO_Init+0x2e8>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001132:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_GPIO_Init+0x2ec>)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a49      	ldr	r2, [pc, #292]	; (8001280 <HAL_GPIO_Init+0x2f0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x202>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a48      	ldr	r2, [pc, #288]	; (8001284 <HAL_GPIO_Init+0x2f4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x1fe>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a47      	ldr	r2, [pc, #284]	; (8001288 <HAL_GPIO_Init+0x2f8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x1fa>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a46      	ldr	r2, [pc, #280]	; (800128c <HAL_GPIO_Init+0x2fc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x1f6>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a45      	ldr	r2, [pc, #276]	; (8001290 <HAL_GPIO_Init+0x300>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x1f2>
 800117e:	2304      	movs	r3, #4
 8001180:	e008      	b.n	8001194 <HAL_GPIO_Init+0x204>
 8001182:	2307      	movs	r3, #7
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x204>
 8001186:	2303      	movs	r3, #3
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x204>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x204>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x204>
 8001192:	2300      	movs	r3, #0
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	f002 0203 	and.w	r2, r2, #3
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a4:	4935      	ldr	r1, [pc, #212]	; (800127c <HAL_GPIO_Init+0x2ec>)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b2:	4b38      	ldr	r3, [pc, #224]	; (8001294 <HAL_GPIO_Init+0x304>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d6:	4a2f      	ldr	r2, [pc, #188]	; (8001294 <HAL_GPIO_Init+0x304>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_GPIO_Init+0x304>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001200:	4a24      	ldr	r2, [pc, #144]	; (8001294 <HAL_GPIO_Init+0x304>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <HAL_GPIO_Init+0x304>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122a:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_GPIO_Init+0x304>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_GPIO_Init+0x304>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001254:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <HAL_GPIO_Init+0x304>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	f67f aea2 	bls.w	8000fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40013800 	.word	0x40013800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	40020800 	.word	0x40020800
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40021000 	.word	0x40021000
 8001294:	40013c00 	.word	0x40013c00

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b4:	e003      	b.n	80012be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	041a      	lsls	r2, r3, #16
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e264      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d075      	beq.n	80013d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	4ba3      	ldr	r3, [pc, #652]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d00c      	beq.n	8001310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f6:	4ba0      	ldr	r3, [pc, #640]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d112      	bne.n	8001328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001302:	4b9d      	ldr	r3, [pc, #628]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800130e:	d10b      	bne.n	8001328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	4b99      	ldr	r3, [pc, #612]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d05b      	beq.n	80013d4 <HAL_RCC_OscConfig+0x108>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d157      	bne.n	80013d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e23f      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001330:	d106      	bne.n	8001340 <HAL_RCC_OscConfig+0x74>
 8001332:	4b91      	ldr	r3, [pc, #580]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a90      	ldr	r2, [pc, #576]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e01d      	b.n	800137c <HAL_RCC_OscConfig+0xb0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0x98>
 800134a:	4b8b      	ldr	r3, [pc, #556]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a8a      	ldr	r2, [pc, #552]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b88      	ldr	r3, [pc, #544]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a87      	ldr	r2, [pc, #540]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e00b      	b.n	800137c <HAL_RCC_OscConfig+0xb0>
 8001364:	4b84      	ldr	r3, [pc, #528]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a83      	ldr	r2, [pc, #524]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b81      	ldr	r3, [pc, #516]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a80      	ldr	r2, [pc, #512]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d013      	beq.n	80013ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fd16 	bl	8000db4 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fd12 	bl	8000db4 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e204      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0xc0>
 80013aa:	e014      	b.n	80013d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fd02 	bl	8000db4 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fcfe 	bl	8000db4 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e1f0      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	4b6c      	ldr	r3, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0xe8>
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d063      	beq.n	80014aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	4b65      	ldr	r3, [pc, #404]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00b      	beq.n	8001406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ee:	4b62      	ldr	r3, [pc, #392]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d11c      	bne.n	8001434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fa:	4b5f      	ldr	r3, [pc, #380]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d116      	bne.n	8001434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	4b5c      	ldr	r3, [pc, #368]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x152>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d001      	beq.n	800141e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e1c4      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4b56      	ldr	r3, [pc, #344]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4952      	ldr	r1, [pc, #328]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	e03a      	b.n	80014aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d020      	beq.n	800147e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <HAL_RCC_OscConfig+0x2b0>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fcb7 	bl	8000db4 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fcb3 	bl	8000db4 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e1a5      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	4b43      	ldr	r3, [pc, #268]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4940      	ldr	r1, [pc, #256]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	4313      	orrs	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
 800147c:	e015      	b.n	80014aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147e:	4b3f      	ldr	r3, [pc, #252]	; (800157c <HAL_RCC_OscConfig+0x2b0>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fc96 	bl	8000db4 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148c:	f7ff fc92 	bl	8000db4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e184      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d030      	beq.n	8001518 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d016      	beq.n	80014ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014be:	4b30      	ldr	r3, [pc, #192]	; (8001580 <HAL_RCC_OscConfig+0x2b4>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff fc76 	bl	8000db4 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff fc72 	bl	8000db4 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e164      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x200>
 80014ea:	e015      	b.n	8001518 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_OscConfig+0x2b4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fc5f 	bl	8000db4 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fa:	f7ff fc5b 	bl	8000db4 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e14d      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a0 	beq.w	8001666 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10f      	bne.n	8001556 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_OscConfig+0x2b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d121      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_RCC_OscConfig+0x2b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_RCC_OscConfig+0x2b8>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff fc21 	bl	8000db4 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	e011      	b.n	800159a <HAL_RCC_OscConfig+0x2ce>
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	42470000 	.word	0x42470000
 8001580:	42470e80 	.word	0x42470e80
 8001584:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001588:	f7ff fc14 	bl	8000db4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e106      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159a:	4b85      	ldr	r3, [pc, #532]	; (80017b0 <HAL_RCC_OscConfig+0x4e4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d106      	bne.n	80015bc <HAL_RCC_OscConfig+0x2f0>
 80015ae:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	4a80      	ldr	r2, [pc, #512]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ba:	e01c      	b.n	80015f6 <HAL_RCC_OscConfig+0x32a>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d10c      	bne.n	80015de <HAL_RCC_OscConfig+0x312>
 80015c4:	4b7b      	ldr	r3, [pc, #492]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a7a      	ldr	r2, [pc, #488]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a77      	ldr	r2, [pc, #476]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	e00b      	b.n	80015f6 <HAL_RCC_OscConfig+0x32a>
 80015de:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e2:	4a74      	ldr	r2, [pc, #464]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ea:	4b72      	ldr	r3, [pc, #456]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a71      	ldr	r2, [pc, #452]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d015      	beq.n	800162a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fe:	f7ff fbd9 	bl	8000db4 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fbd5 	bl	8000db4 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e0c5      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	4b65      	ldr	r3, [pc, #404]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0ee      	beq.n	8001606 <HAL_RCC_OscConfig+0x33a>
 8001628:	e014      	b.n	8001654 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff fbc3 	bl	8000db4 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff fbbf 	bl	8000db4 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e0af      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	4b5a      	ldr	r3, [pc, #360]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1ee      	bne.n	8001632 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d105      	bne.n	8001666 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165a:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a55      	ldr	r2, [pc, #340]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 8001660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 809b 	beq.w	80017a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001670:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b08      	cmp	r3, #8
 800167a:	d05c      	beq.n	8001736 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d141      	bne.n	8001708 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001684:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fb93 	bl	8000db4 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff fb8f 	bl	8000db4 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e081      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a4:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69da      	ldr	r2, [r3, #28]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	019b      	lsls	r3, r3, #6
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	3b01      	subs	r3, #1
 80016ca:	041b      	lsls	r3, r3, #16
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	4937      	ldr	r1, [pc, #220]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb68 	bl	8000db4 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fb64 	bl	8000db4 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e056      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x41c>
 8001706:	e04e      	b.n	80017a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fb51 	bl	8000db4 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff fb4d 	bl	8000db4 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e03f      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x44a>
 8001734:	e037      	b.n	80017a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e032      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d028      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d121      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d11a      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001772:	4013      	ands	r3, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001778:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800177a:	4293      	cmp	r3, r2
 800177c:	d111      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	085b      	lsrs	r3, r3, #1
 800178a:	3b01      	subs	r3, #1
 800178c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40007000 	.word	0x40007000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	42470060 	.word	0x42470060

080017bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0cc      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d90c      	bls.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b65      	ldr	r3, [pc, #404]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b63      	ldr	r3, [pc, #396]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0b8      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001810:	4b59      	ldr	r3, [pc, #356]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800181a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a52      	ldr	r2, [pc, #328]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001834:	4b50      	ldr	r3, [pc, #320]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	494d      	ldr	r1, [pc, #308]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d044      	beq.n	80018dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d119      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e07f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d003      	beq.n	800187a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001876:	2b03      	cmp	r3, #3
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e067      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 0203 	bic.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4934      	ldr	r1, [pc, #208]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ac:	f7ff fa82 	bl	8000db4 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff fa7e 	bl	8000db4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e04f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 020c 	and.w	r2, r3, #12
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1eb      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d20c      	bcs.n	8001904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e032      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4916      	ldr	r1, [pc, #88]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	490e      	ldr	r1, [pc, #56]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001942:	f000 f821 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8001946:	4602      	mov	r2, r0
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	490a      	ldr	r1, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	5ccb      	ldrb	r3, [r1, r3]
 8001956:	fa22 f303 	lsr.w	r3, r2, r3
 800195a:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f86e 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00
 8001978:	40023800 	.word	0x40023800
 800197c:	08003f64 	.word	0x08003f64
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	2300      	movs	r3, #0
 800199a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a0:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d00d      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x40>
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	f200 80bd 	bhi.w	8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x34>
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d003      	beq.n	80019c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ba:	e0b7      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019bc:	4b61      	ldr	r3, [pc, #388]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019be:	60bb      	str	r3, [r7, #8]
       break;
 80019c0:	e0b7      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c2:	4b61      	ldr	r3, [pc, #388]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019c4:	60bb      	str	r3, [r7, #8]
      break;
 80019c6:	e0b4      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c8:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d2:	4b5b      	ldr	r3, [pc, #364]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d04d      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019de:	4b58      	ldr	r3, [pc, #352]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	099b      	lsrs	r3, r3, #6
 80019e4:	461a      	mov	r2, r3
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019ee:	f04f 0100 	mov.w	r1, #0
 80019f2:	ea02 0800 	and.w	r8, r2, r0
 80019f6:	ea03 0901 	and.w	r9, r3, r1
 80019fa:	4640      	mov	r0, r8
 80019fc:	4649      	mov	r1, r9
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	014b      	lsls	r3, r1, #5
 8001a08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a0c:	0142      	lsls	r2, r0, #5
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	ebb0 0008 	subs.w	r0, r0, r8
 8001a16:	eb61 0109 	sbc.w	r1, r1, r9
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	018b      	lsls	r3, r1, #6
 8001a24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a28:	0182      	lsls	r2, r0, #6
 8001a2a:	1a12      	subs	r2, r2, r0
 8001a2c:	eb63 0301 	sbc.w	r3, r3, r1
 8001a30:	f04f 0000 	mov.w	r0, #0
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	00d9      	lsls	r1, r3, #3
 8001a3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a3e:	00d0      	lsls	r0, r2, #3
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	eb12 0208 	adds.w	r2, r2, r8
 8001a48:	eb43 0309 	adc.w	r3, r3, r9
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	0259      	lsls	r1, r3, #9
 8001a56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a5a:	0250      	lsls	r0, r2, #9
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	f7fe fbb8 	bl	80001e0 <__aeabi_uldivmod>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4613      	mov	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e04a      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7a:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	099b      	lsrs	r3, r3, #6
 8001a80:	461a      	mov	r2, r3
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a8a:	f04f 0100 	mov.w	r1, #0
 8001a8e:	ea02 0400 	and.w	r4, r2, r0
 8001a92:	ea03 0501 	and.w	r5, r3, r1
 8001a96:	4620      	mov	r0, r4
 8001a98:	4629      	mov	r1, r5
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	014b      	lsls	r3, r1, #5
 8001aa4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001aa8:	0142      	lsls	r2, r0, #5
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	1b00      	subs	r0, r0, r4
 8001ab0:	eb61 0105 	sbc.w	r1, r1, r5
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	018b      	lsls	r3, r1, #6
 8001abe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ac2:	0182      	lsls	r2, r0, #6
 8001ac4:	1a12      	subs	r2, r2, r0
 8001ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aca:	f04f 0000 	mov.w	r0, #0
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	00d9      	lsls	r1, r3, #3
 8001ad4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ad8:	00d0      	lsls	r0, r2, #3
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	1912      	adds	r2, r2, r4
 8001ae0:	eb45 0303 	adc.w	r3, r5, r3
 8001ae4:	f04f 0000 	mov.w	r0, #0
 8001ae8:	f04f 0100 	mov.w	r1, #0
 8001aec:	0299      	lsls	r1, r3, #10
 8001aee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001af2:	0290      	lsls	r0, r2, #10
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	461a      	mov	r2, r3
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	f7fe fb6c 	bl	80001e0 <__aeabi_uldivmod>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	60bb      	str	r3, [r7, #8]
      break;
 8001b2a:	e002      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b2e:	60bb      	str	r3, [r7, #8]
      break;
 8001b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b32:	68bb      	ldr	r3, [r7, #8]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	00f42400 	.word	0x00f42400
 8001b48:	007a1200 	.word	0x007a1200

08001b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000000 	.word	0x20000000

08001b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b68:	f7ff fff0 	bl	8001b4c <HAL_RCC_GetHCLKFreq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	0a9b      	lsrs	r3, r3, #10
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	4903      	ldr	r1, [pc, #12]	; (8001b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	08003f74 	.word	0x08003f74

08001b8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	220f      	movs	r2, #15
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0203 	and.w	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_RCC_GetClockConfig+0x5c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	08db      	lsrs	r3, r3, #3
 8001bc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <HAL_RCC_GetClockConfig+0x60>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0207 	and.w	r2, r3, #7
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	601a      	str	r2, [r3, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e041      	b.n	8001c86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f839 	bl	8001c8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4610      	mov	r0, r2
 8001c30:	f000 f9ca 	bl	8001fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d001      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e044      	b.n	8001d46 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <HAL_TIM_Base_Start_IT+0xb0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d018      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x6c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce6:	d013      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x6c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1a      	ldr	r2, [pc, #104]	; (8001d58 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00e      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x6c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <HAL_TIM_Base_Start_IT+0xb8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d009      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x6c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d004      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x6c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d111      	bne.n	8001d34 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d010      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d32:	e007      	b.n	8001d44 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	40000800 	.word	0x40000800
 8001d60:	40000c00 	.word	0x40000c00
 8001d64:	40014000 	.word	0x40014000

08001d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d122      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0202 	mvn.w	r2, #2
 8001d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8ee 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8e0 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f8f1 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d122      	bne.n	8001e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d11b      	bne.n	8001e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0204 	mvn.w	r2, #4
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8c4 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8b6 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8c7 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d122      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d11b      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0208 	mvn.w	r2, #8
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2204      	movs	r2, #4
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f89a 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f88c 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f89d 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d122      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d11b      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0210 	mvn.w	r2, #16
 8001e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2208      	movs	r2, #8
 8001e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f870 	bl	8001f8c <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f862 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f873 	bl	8001fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10e      	bne.n	8001eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0201 	mvn.w	r2, #1
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fd68 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b80      	cmp	r3, #128	; 0x80
 8001ef8:	d10e      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d107      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8e2 	bl	80020dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	2b40      	cmp	r3, #64	; 0x40
 8001f24:	d10e      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f30:	2b40      	cmp	r3, #64	; 0x40
 8001f32:	d107      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f838 	bl	8001fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d10e      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d107      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0220 	mvn.w	r2, #32
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8ac 	bl	80020c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a34      	ldr	r2, [pc, #208]	; (80020ac <TIM_Base_SetConfig+0xe4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00f      	beq.n	8002000 <TIM_Base_SetConfig+0x38>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d00b      	beq.n	8002000 <TIM_Base_SetConfig+0x38>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a31      	ldr	r2, [pc, #196]	; (80020b0 <TIM_Base_SetConfig+0xe8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d007      	beq.n	8002000 <TIM_Base_SetConfig+0x38>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a30      	ldr	r2, [pc, #192]	; (80020b4 <TIM_Base_SetConfig+0xec>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d003      	beq.n	8002000 <TIM_Base_SetConfig+0x38>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a2f      	ldr	r2, [pc, #188]	; (80020b8 <TIM_Base_SetConfig+0xf0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d108      	bne.n	8002012 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a25      	ldr	r2, [pc, #148]	; (80020ac <TIM_Base_SetConfig+0xe4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d01b      	beq.n	8002052 <TIM_Base_SetConfig+0x8a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002020:	d017      	beq.n	8002052 <TIM_Base_SetConfig+0x8a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <TIM_Base_SetConfig+0xe8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <TIM_Base_SetConfig+0x8a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <TIM_Base_SetConfig+0xec>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00f      	beq.n	8002052 <TIM_Base_SetConfig+0x8a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a20      	ldr	r2, [pc, #128]	; (80020b8 <TIM_Base_SetConfig+0xf0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00b      	beq.n	8002052 <TIM_Base_SetConfig+0x8a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <TIM_Base_SetConfig+0xf4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <TIM_Base_SetConfig+0x8a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <TIM_Base_SetConfig+0xf8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d003      	beq.n	8002052 <TIM_Base_SetConfig+0x8a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <TIM_Base_SetConfig+0xfc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d108      	bne.n	8002064 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a08      	ldr	r2, [pc, #32]	; (80020ac <TIM_Base_SetConfig+0xe4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d103      	bne.n	8002098 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	615a      	str	r2, [r3, #20]
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40000400 	.word	0x40000400
 80020b4:	40000800 	.word	0x40000800
 80020b8:	40000c00 	.word	0x40000c00
 80020bc:	40014000 	.word	0x40014000
 80020c0:	40014400 	.word	0x40014400
 80020c4:	40014800 	.word	0x40014800

080020c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80020fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002102:	2b84      	cmp	r3, #132	; 0x84
 8002104:	d005      	beq.n	8002112 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002106:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4413      	add	r3, r2
 800210e:	3303      	adds	r3, #3
 8002110:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002124:	f000 fad0 	bl	80026c8 <vTaskStartScheduler>
  
  return osOK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	bd80      	pop	{r7, pc}

0800212e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800212e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002130:	b089      	sub	sp, #36	; 0x24
 8002132:	af04      	add	r7, sp, #16
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d020      	beq.n	8002182 <osThreadCreate+0x54>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01c      	beq.n	8002182 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685c      	ldr	r4, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681d      	ldr	r5, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691e      	ldr	r6, [r3, #16]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ffc8 	bl	80020f0 <makeFreeRtosPriority>
 8002160:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800216a:	9202      	str	r2, [sp, #8]
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	9100      	str	r1, [sp, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4632      	mov	r2, r6
 8002174:	4629      	mov	r1, r5
 8002176:	4620      	mov	r0, r4
 8002178:	f000 f8ed 	bl	8002356 <xTaskCreateStatic>
 800217c:	4603      	mov	r3, r0
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e01c      	b.n	80021bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685c      	ldr	r4, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800218e:	b29e      	uxth	r6, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ffaa 	bl	80020f0 <makeFreeRtosPriority>
 800219c:	4602      	mov	r2, r0
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	9200      	str	r2, [sp, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	4632      	mov	r2, r6
 80021aa:	4629      	mov	r1, r5
 80021ac:	4620      	mov	r0, r4
 80021ae:	f000 f92f 	bl	8002410 <xTaskCreate>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d001      	beq.n	80021bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80021bc:	68fb      	ldr	r3, [r7, #12]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <osDelay+0x16>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	e000      	b.n	80021de <osDelay+0x18>
 80021dc:	2301      	movs	r3, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fa3e 	bl	8002660 <vTaskDelay>
  
  return osOK;
 80021e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f103 0208 	add.w	r2, r3, #8
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f04f 32ff 	mov.w	r2, #4294967295
 8002206:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f103 0208 	add.w	r2, r3, #8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f103 0208 	add.w	r2, r3, #8
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a6:	d103      	bne.n	80022b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e00c      	b.n	80022ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3308      	adds	r3, #8
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e002      	b.n	80022be <vListInsert+0x2e>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d2f6      	bcs.n	80022b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	601a      	str	r2, [r3, #0]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6892      	ldr	r2, [r2, #8]
 8002318:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6852      	ldr	r2, [r2, #4]
 8002322:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	429a      	cmp	r2, r3
 800232c:	d103      	bne.n	8002336 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	1e5a      	subs	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002356:	b580      	push	{r7, lr}
 8002358:	b08e      	sub	sp, #56	; 0x38
 800235a:	af04      	add	r7, sp, #16
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <xTaskCreateStatic+0x2a>
	__asm volatile
 800236a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236e:	f383 8811 	msr	BASEPRI, r3
 8002372:	f3bf 8f6f 	isb	sy
 8002376:	f3bf 8f4f 	dsb	sy
 800237a:	623b      	str	r3, [r7, #32]
}
 800237c:	bf00      	nop
 800237e:	e7fe      	b.n	800237e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10a      	bne.n	800239c <xTaskCreateStatic+0x46>
	__asm volatile
 8002386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	61fb      	str	r3, [r7, #28]
}
 8002398:	bf00      	nop
 800239a:	e7fe      	b.n	800239a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800239c:	2354      	movs	r3, #84	; 0x54
 800239e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	2b54      	cmp	r3, #84	; 0x54
 80023a4:	d00a      	beq.n	80023bc <xTaskCreateStatic+0x66>
	__asm volatile
 80023a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023aa:	f383 8811 	msr	BASEPRI, r3
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	61bb      	str	r3, [r7, #24]
}
 80023b8:	bf00      	nop
 80023ba:	e7fe      	b.n	80023ba <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80023bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80023be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01e      	beq.n	8002402 <xTaskCreateStatic+0xac>
 80023c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d01b      	beq.n	8002402 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80023dc:	2300      	movs	r3, #0
 80023de:	9303      	str	r3, [sp, #12]
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f850 	bl	800249a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023fc:	f000 f8d4 	bl	80025a8 <prvAddNewTaskToReadyList>
 8002400:	e001      	b.n	8002406 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002406:	697b      	ldr	r3, [r7, #20]
	}
 8002408:	4618      	mov	r0, r3
 800240a:	3728      	adds	r7, #40	; 0x28
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	; 0x30
 8002414:	af04      	add	r7, sp, #16
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fe7f 	bl	8003128 <pvPortMalloc>
 800242a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00e      	beq.n	8002450 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002432:	2054      	movs	r0, #84	; 0x54
 8002434:	f000 fe78 	bl	8003128 <pvPortMalloc>
 8002438:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
 8002446:	e005      	b.n	8002454 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002448:	6978      	ldr	r0, [r7, #20]
 800244a:	f000 ff39 	bl	80032c0 <vPortFree>
 800244e:	e001      	b.n	8002454 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d017      	beq.n	800248a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002462:	88fa      	ldrh	r2, [r7, #6]
 8002464:	2300      	movs	r3, #0
 8002466:	9303      	str	r3, [sp, #12]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	9302      	str	r3, [sp, #8]
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f80e 	bl	800249a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800247e:	69f8      	ldr	r0, [r7, #28]
 8002480:	f000 f892 	bl	80025a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002484:	2301      	movs	r3, #1
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	e002      	b.n	8002490 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
 800248e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002490:	69bb      	ldr	r3, [r7, #24]
	}
 8002492:	4618      	mov	r0, r3
 8002494:	3720      	adds	r7, #32
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b088      	sub	sp, #32
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024b2:	3b01      	subs	r3, #1
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f023 0307 	bic.w	r3, r3, #7
 80024c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <prvInitialiseNewTask+0x48>
	__asm volatile
 80024cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	617b      	str	r3, [r7, #20]
}
 80024de:	bf00      	nop
 80024e0:	e7fe      	b.n	80024e0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01f      	beq.n	8002528 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	e012      	b.n	8002514 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	4413      	add	r3, r2
 80024f4:	7819      	ldrb	r1, [r3, #0]
 80024f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	4413      	add	r3, r2
 80024fc:	3334      	adds	r3, #52	; 0x34
 80024fe:	460a      	mov	r2, r1
 8002500:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3301      	adds	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	d9e9      	bls.n	80024ee <prvInitialiseNewTask+0x54>
 800251a:	e000      	b.n	800251e <prvInitialiseNewTask+0x84>
			{
				break;
 800251c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002526:	e003      	b.n	8002530 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	2b06      	cmp	r3, #6
 8002534:	d901      	bls.n	800253a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002536:	2306      	movs	r3, #6
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002544:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	2200      	movs	r2, #0
 800254a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	3304      	adds	r3, #4
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fe6c 	bl	800222e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	3318      	adds	r3, #24
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fe67 	bl	800222e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002564:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	f1c3 0207 	rsb	r2, r3, #7
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002574:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	2200      	movs	r2, #0
 800257a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	69b8      	ldr	r0, [r7, #24]
 800258a:	f000 fbc1 	bl	8002d10 <pxPortInitialiseStack>
 800258e:	4602      	mov	r2, r0
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800259e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025a0:	bf00      	nop
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80025b0:	f000 fcd8 	bl	8002f64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <prvAddNewTaskToReadyList+0xa0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	4a23      	ldr	r2, [pc, #140]	; (8002648 <prvAddNewTaskToReadyList+0xa0>)
 80025bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <prvAddNewTaskToReadyList+0xa4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80025c6:	4a21      	ldr	r2, [pc, #132]	; (800264c <prvAddNewTaskToReadyList+0xa4>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <prvAddNewTaskToReadyList+0xa0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d110      	bne.n	80025f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80025d4:	f000 fa78 	bl	8002ac8 <prvInitialiseTaskLists>
 80025d8:	e00d      	b.n	80025f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <prvAddNewTaskToReadyList+0xa8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <prvAddNewTaskToReadyList+0xa4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d802      	bhi.n	80025f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80025f0:	4a16      	ldr	r2, [pc, #88]	; (800264c <prvAddNewTaskToReadyList+0xa4>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <prvAddNewTaskToReadyList+0xac>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <prvAddNewTaskToReadyList+0xac>)
 80025fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	2201      	movs	r2, #1
 8002606:	409a      	lsls	r2, r3
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <prvAddNewTaskToReadyList+0xb0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4313      	orrs	r3, r2
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <prvAddNewTaskToReadyList+0xb0>)
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4a0f      	ldr	r2, [pc, #60]	; (800265c <prvAddNewTaskToReadyList+0xb4>)
 8002620:	441a      	add	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	4619      	mov	r1, r3
 8002628:	4610      	mov	r0, r2
 800262a:	f7ff fe0d 	bl	8002248 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800262e:	f000 fcc9 	bl	8002fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <prvAddNewTaskToReadyList+0xa8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <prvAddNewTaskToReadyList+0xa4>)
 800263c:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	200003e8 	.word	0x200003e8
 800264c:	200002e8 	.word	0x200002e8
 8002650:	200003f4 	.word	0x200003f4
 8002654:	20000404 	.word	0x20000404
 8002658:	200003f0 	.word	0x200003f0
 800265c:	200002ec 	.word	0x200002ec

08002660 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d017      	beq.n	80026a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <vTaskDelay+0x60>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <vTaskDelay+0x30>
	__asm volatile
 800267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	60bb      	str	r3, [r7, #8]
}
 800268c:	bf00      	nop
 800268e:	e7fe      	b.n	800268e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002690:	f000 f87a 	bl	8002788 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002694:	2100      	movs	r1, #0
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fad4 	bl	8002c44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800269c:	f000 f882 	bl	80027a4 <xTaskResumeAll>
 80026a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d107      	bne.n	80026b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <vTaskDelay+0x64>)
 80026aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000410 	.word	0x20000410
 80026c4:	e000ed04 	.word	0xe000ed04

080026c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80026d6:	463a      	mov	r2, r7
 80026d8:	1d39      	adds	r1, r7, #4
 80026da:	f107 0308 	add.w	r3, r7, #8
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd fefa 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80026e4:	6839      	ldr	r1, [r7, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	9202      	str	r2, [sp, #8]
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	2300      	movs	r3, #0
 80026f4:	460a      	mov	r2, r1
 80026f6:	491e      	ldr	r1, [pc, #120]	; (8002770 <vTaskStartScheduler+0xa8>)
 80026f8:	481e      	ldr	r0, [pc, #120]	; (8002774 <vTaskStartScheduler+0xac>)
 80026fa:	f7ff fe2c 	bl	8002356 <xTaskCreateStatic>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <vTaskStartScheduler+0xb0>)
 8002702:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <vTaskStartScheduler+0xb0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800270c:	2301      	movs	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e001      	b.n	8002716 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d116      	bne.n	800274a <vTaskStartScheduler+0x82>
	__asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	613b      	str	r3, [r7, #16]
}
 800272e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <vTaskStartScheduler+0xb4>)
 8002732:	f04f 32ff 	mov.w	r2, #4294967295
 8002736:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <vTaskStartScheduler+0xb8>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <vTaskStartScheduler+0xbc>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002744:	f000 fb6c 	bl	8002e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002748:	e00e      	b.n	8002768 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d10a      	bne.n	8002768 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	60fb      	str	r3, [r7, #12]
}
 8002764:	bf00      	nop
 8002766:	e7fe      	b.n	8002766 <vTaskStartScheduler+0x9e>
}
 8002768:	bf00      	nop
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	08003f5c 	.word	0x08003f5c
 8002774:	08002aa5 	.word	0x08002aa5
 8002778:	2000040c 	.word	0x2000040c
 800277c:	20000408 	.word	0x20000408
 8002780:	200003f4 	.word	0x200003f4
 8002784:	200003ec 	.word	0x200003ec

08002788 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <vTaskSuspendAll+0x18>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	4a03      	ldr	r2, [pc, #12]	; (80027a0 <vTaskSuspendAll+0x18>)
 8002794:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	20000410 	.word	0x20000410

080027a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <xTaskResumeAll+0xfc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	603b      	str	r3, [r7, #0]
}
 80027cc:	bf00      	nop
 80027ce:	e7fe      	b.n	80027ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80027d0:	f000 fbc8 	bl	8002f64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80027d4:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <xTaskResumeAll+0xfc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3b01      	subs	r3, #1
 80027da:	4a31      	ldr	r2, [pc, #196]	; (80028a0 <xTaskResumeAll+0xfc>)
 80027dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027de:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <xTaskResumeAll+0xfc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d155      	bne.n	8002892 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027e6:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <xTaskResumeAll+0x100>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d051      	beq.n	8002892 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027ee:	e02e      	b.n	800284e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027f0:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <xTaskResumeAll+0x104>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3318      	adds	r3, #24
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fd80 	bl	8002302 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3304      	adds	r3, #4
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fd7b 	bl	8002302 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	2201      	movs	r2, #1
 8002812:	409a      	lsls	r2, r3
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <xTaskResumeAll+0x108>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4313      	orrs	r3, r2
 800281a:	4a24      	ldr	r2, [pc, #144]	; (80028ac <xTaskResumeAll+0x108>)
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <xTaskResumeAll+0x10c>)
 800282c:	441a      	add	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3304      	adds	r3, #4
 8002832:	4619      	mov	r1, r3
 8002834:	4610      	mov	r0, r2
 8002836:	f7ff fd07 	bl	8002248 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <xTaskResumeAll+0x110>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	429a      	cmp	r2, r3
 8002846:	d302      	bcc.n	800284e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <xTaskResumeAll+0x114>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <xTaskResumeAll+0x104>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1cc      	bne.n	80027f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800285c:	f000 f9d2 	bl	8002c04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002860:	4b16      	ldr	r3, [pc, #88]	; (80028bc <xTaskResumeAll+0x118>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d010      	beq.n	800288e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800286c:	f000 f828 	bl	80028c0 <xTaskIncrementTick>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <xTaskResumeAll+0x114>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	3b01      	subs	r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f1      	bne.n	800286c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <xTaskResumeAll+0x118>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <xTaskResumeAll+0x114>)
 8002890:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002892:	f000 fb97 	bl	8002fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8002896:	687b      	ldr	r3, [r7, #4]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000410 	.word	0x20000410
 80028a4:	200003e8 	.word	0x200003e8
 80028a8:	200003a8 	.word	0x200003a8
 80028ac:	200003f0 	.word	0x200003f0
 80028b0:	200002ec 	.word	0x200002ec
 80028b4:	200002e8 	.word	0x200002e8
 80028b8:	200003fc 	.word	0x200003fc
 80028bc:	200003f8 	.word	0x200003f8

080028c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028ca:	4b3f      	ldr	r3, [pc, #252]	; (80029c8 <xTaskIncrementTick+0x108>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d16f      	bne.n	80029b2 <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028d2:	4b3e      	ldr	r3, [pc, #248]	; (80029cc <xTaskIncrementTick+0x10c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3301      	adds	r3, #1
 80028d8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80028da:	4a3c      	ldr	r2, [pc, #240]	; (80029cc <xTaskIncrementTick+0x10c>)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d120      	bne.n	8002928 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80028e6:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <xTaskIncrementTick+0x110>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <xTaskIncrementTick+0x46>
	__asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	603b      	str	r3, [r7, #0]
}
 8002902:	bf00      	nop
 8002904:	e7fe      	b.n	8002904 <xTaskIncrementTick+0x44>
 8002906:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <xTaskIncrementTick+0x110>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <xTaskIncrementTick+0x114>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2f      	ldr	r2, [pc, #188]	; (80029d0 <xTaskIncrementTick+0x110>)
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <xTaskIncrementTick+0x114>)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <xTaskIncrementTick+0x118>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3301      	adds	r3, #1
 8002920:	4a2d      	ldr	r2, [pc, #180]	; (80029d8 <xTaskIncrementTick+0x118>)
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	f000 f96e 	bl	8002c04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002928:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <xTaskIncrementTick+0x11c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	429a      	cmp	r2, r3
 8002930:	d344      	bcc.n	80029bc <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002932:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <xTaskIncrementTick+0x110>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d104      	bne.n	8002946 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800293c:	4b27      	ldr	r3, [pc, #156]	; (80029dc <xTaskIncrementTick+0x11c>)
 800293e:	f04f 32ff 	mov.w	r2, #4294967295
 8002942:	601a      	str	r2, [r3, #0]
					break;
 8002944:	e03a      	b.n	80029bc <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002946:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <xTaskIncrementTick+0x110>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	429a      	cmp	r2, r3
 800295c:	d203      	bcs.n	8002966 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800295e:	4a1f      	ldr	r2, [pc, #124]	; (80029dc <xTaskIncrementTick+0x11c>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002964:	e02a      	b.n	80029bc <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3304      	adds	r3, #4
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fcc9 	bl	8002302 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	3318      	adds	r3, #24
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fcc0 	bl	8002302 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	2201      	movs	r2, #1
 8002988:	409a      	lsls	r2, r3
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <xTaskIncrementTick+0x120>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <xTaskIncrementTick+0x120>)
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <xTaskIncrementTick+0x124>)
 80029a2:	441a      	add	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	3304      	adds	r3, #4
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f7ff fc4c 	bl	8002248 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029b0:	e7bf      	b.n	8002932 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <xTaskIncrementTick+0x128>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <xTaskIncrementTick+0x128>)
 80029ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80029bc:	697b      	ldr	r3, [r7, #20]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000410 	.word	0x20000410
 80029cc:	200003ec 	.word	0x200003ec
 80029d0:	200003a0 	.word	0x200003a0
 80029d4:	200003a4 	.word	0x200003a4
 80029d8:	20000400 	.word	0x20000400
 80029dc:	20000408 	.word	0x20000408
 80029e0:	200003f0 	.word	0x200003f0
 80029e4:	200002ec 	.word	0x200002ec
 80029e8:	200003f8 	.word	0x200003f8

080029ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029f2:	4b27      	ldr	r3, [pc, #156]	; (8002a90 <vTaskSwitchContext+0xa4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80029fa:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <vTaskSwitchContext+0xa8>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002a00:	e03f      	b.n	8002a82 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <vTaskSwitchContext+0xa8>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a08:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <vTaskSwitchContext+0xac>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002a16:	7afb      	ldrb	r3, [r7, #11]
 8002a18:	f1c3 031f 	rsb	r3, r3, #31
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	491f      	ldr	r1, [pc, #124]	; (8002a9c <vTaskSwitchContext+0xb0>)
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	607b      	str	r3, [r7, #4]
}
 8002a44:	bf00      	nop
 8002a46:	e7fe      	b.n	8002a46 <vTaskSwitchContext+0x5a>
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <vTaskSwitchContext+0xb0>)
 8002a54:	4413      	add	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	3308      	adds	r3, #8
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d104      	bne.n	8002a78 <vTaskSwitchContext+0x8c>
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	4a08      	ldr	r2, [pc, #32]	; (8002aa0 <vTaskSwitchContext+0xb4>)
 8002a80:	6013      	str	r3, [r2, #0]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000410 	.word	0x20000410
 8002a94:	200003fc 	.word	0x200003fc
 8002a98:	200003f0 	.word	0x200003f0
 8002a9c:	200002ec 	.word	0x200002ec
 8002aa0:	200002e8 	.word	0x200002e8

08002aa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002aac:	f000 f84c 	bl	8002b48 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <prvIdleTask+0x20>)
 8002ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002ac0:	e7f4      	b.n	8002aac <prvIdleTask+0x8>
 8002ac2:	bf00      	nop
 8002ac4:	e000ed04 	.word	0xe000ed04

08002ac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	e00c      	b.n	8002aee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <prvInitialiseTaskLists+0x60>)
 8002ae0:	4413      	add	r3, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fb83 	bl	80021ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3301      	adds	r3, #1
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d9ef      	bls.n	8002ad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002af4:	480d      	ldr	r0, [pc, #52]	; (8002b2c <prvInitialiseTaskLists+0x64>)
 8002af6:	f7ff fb7a 	bl	80021ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002afa:	480d      	ldr	r0, [pc, #52]	; (8002b30 <prvInitialiseTaskLists+0x68>)
 8002afc:	f7ff fb77 	bl	80021ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b00:	480c      	ldr	r0, [pc, #48]	; (8002b34 <prvInitialiseTaskLists+0x6c>)
 8002b02:	f7ff fb74 	bl	80021ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b06:	480c      	ldr	r0, [pc, #48]	; (8002b38 <prvInitialiseTaskLists+0x70>)
 8002b08:	f7ff fb71 	bl	80021ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b0c:	480b      	ldr	r0, [pc, #44]	; (8002b3c <prvInitialiseTaskLists+0x74>)
 8002b0e:	f7ff fb6e 	bl	80021ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <prvInitialiseTaskLists+0x78>)
 8002b14:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <prvInitialiseTaskLists+0x64>)
 8002b16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <prvInitialiseTaskLists+0x7c>)
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <prvInitialiseTaskLists+0x68>)
 8002b1c:	601a      	str	r2, [r3, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200002ec 	.word	0x200002ec
 8002b2c:	20000378 	.word	0x20000378
 8002b30:	2000038c 	.word	0x2000038c
 8002b34:	200003a8 	.word	0x200003a8
 8002b38:	200003bc 	.word	0x200003bc
 8002b3c:	200003d4 	.word	0x200003d4
 8002b40:	200003a0 	.word	0x200003a0
 8002b44:	200003a4 	.word	0x200003a4

08002b48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b4e:	e019      	b.n	8002b84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002b50:	f000 fa08 	bl	8002f64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b54:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <prvCheckTasksWaitingTermination+0x50>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fbce 	bl	8002302 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <prvCheckTasksWaitingTermination+0x54>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <prvCheckTasksWaitingTermination+0x54>)
 8002b6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <prvCheckTasksWaitingTermination+0x58>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <prvCheckTasksWaitingTermination+0x58>)
 8002b78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b7a:	f000 fa23 	bl	8002fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f810 	bl	8002ba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <prvCheckTasksWaitingTermination+0x58>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e1      	bne.n	8002b50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200003bc 	.word	0x200003bc
 8002b9c:	200003e8 	.word	0x200003e8
 8002ba0:	200003d0 	.word	0x200003d0

08002ba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d108      	bne.n	8002bc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fb80 	bl	80032c0 <vPortFree>
				vPortFree( pxTCB );
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fb7d 	bl	80032c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002bc6:	e018      	b.n	8002bfa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d103      	bne.n	8002bda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fb74 	bl	80032c0 <vPortFree>
	}
 8002bd8:	e00f      	b.n	8002bfa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d00a      	beq.n	8002bfa <prvDeleteTCB+0x56>
	__asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	60fb      	str	r3, [r7, #12]
}
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <prvDeleteTCB+0x54>
	}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <prvResetNextTaskUnblockTime+0x38>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d104      	bne.n	8002c1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <prvResetNextTaskUnblockTime+0x3c>)
 8002c16:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c1c:	e008      	b.n	8002c30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <prvResetNextTaskUnblockTime+0x38>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <prvResetNextTaskUnblockTime+0x3c>)
 8002c2e:	6013      	str	r3, [r2, #0]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	200003a0 	.word	0x200003a0
 8002c40:	20000408 	.word	0x20000408

08002c44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002c4e:	4b29      	ldr	r3, [pc, #164]	; (8002cf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c54:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fb51 	bl	8002302 <uxListRemove>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10b      	bne.n	8002c7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002c66:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43da      	mvns	r2, r3
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d10a      	bne.n	8002c9c <prvAddCurrentTaskToDelayedList+0x58>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3304      	adds	r3, #4
 8002c92:	4619      	mov	r1, r3
 8002c94:	481a      	ldr	r0, [pc, #104]	; (8002d00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002c96:	f7ff fad7 	bl	8002248 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002c9a:	e026      	b.n	8002cea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d209      	bcs.n	8002cc8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f7ff fae5 	bl	8002290 <vListInsert>
}
 8002cc6:	e010      	b.n	8002cea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	f7ff fadb 	bl	8002290 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002cda:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d202      	bcs.n	8002cea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002ce4:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6013      	str	r3, [r2, #0]
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200003ec 	.word	0x200003ec
 8002cf8:	200002e8 	.word	0x200002e8
 8002cfc:	200003f0 	.word	0x200003f0
 8002d00:	200003d4 	.word	0x200003d4
 8002d04:	200003a4 	.word	0x200003a4
 8002d08:	200003a0 	.word	0x200003a0
 8002d0c:	20000408 	.word	0x20000408

08002d10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3b04      	subs	r3, #4
 8002d20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3b04      	subs	r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f023 0201 	bic.w	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3b04      	subs	r3, #4
 8002d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d40:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <pxPortInitialiseStack+0x64>)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3b14      	subs	r3, #20
 8002d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3b04      	subs	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f06f 0202 	mvn.w	r2, #2
 8002d5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3b20      	subs	r3, #32
 8002d64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	08002d79 	.word	0x08002d79

08002d78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <prvTaskExitError+0x54>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d00a      	beq.n	8002da2 <prvTaskExitError+0x2a>
	__asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	60fb      	str	r3, [r7, #12]
}
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <prvTaskExitError+0x28>
	__asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	60bb      	str	r3, [r7, #8]
}
 8002db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002db6:	bf00      	nop
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0fc      	beq.n	8002db8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	2000000c 	.word	0x2000000c

08002dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002dd0:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <pxCurrentTCBConst2>)
 8002dd2:	6819      	ldr	r1, [r3, #0]
 8002dd4:	6808      	ldr	r0, [r1, #0]
 8002dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dda:	f380 8809 	msr	PSP, r0
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f380 8811 	msr	BASEPRI, r0
 8002dea:	4770      	bx	lr
 8002dec:	f3af 8000 	nop.w

08002df0 <pxCurrentTCBConst2>:
 8002df0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop

08002df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002df8:	4808      	ldr	r0, [pc, #32]	; (8002e1c <prvPortStartFirstTask+0x24>)
 8002dfa:	6800      	ldr	r0, [r0, #0]
 8002dfc:	6800      	ldr	r0, [r0, #0]
 8002dfe:	f380 8808 	msr	MSP, r0
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	f380 8814 	msr	CONTROL, r0
 8002e0a:	b662      	cpsie	i
 8002e0c:	b661      	cpsie	f
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	df00      	svc	0
 8002e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002e1a:	bf00      	nop
 8002e1c:	e000ed08 	.word	0xe000ed08

08002e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e26:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <xPortStartScheduler+0x120>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <xPortStartScheduler+0x124>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d10a      	bne.n	8002e46 <xPortStartScheduler+0x26>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	613b      	str	r3, [r7, #16]
}
 8002e42:	bf00      	nop
 8002e44:	e7fe      	b.n	8002e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e46:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <xPortStartScheduler+0x120>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a3f      	ldr	r2, [pc, #252]	; (8002f48 <xPortStartScheduler+0x128>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d10a      	bne.n	8002e66 <xPortStartScheduler+0x46>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	60fb      	str	r3, [r7, #12]
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e66:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <xPortStartScheduler+0x12c>)
 8002e68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	22ff      	movs	r2, #255	; 0xff
 8002e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <xPortStartScheduler+0x130>)
 8002e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <xPortStartScheduler+0x134>)
 8002e90:	2207      	movs	r2, #7
 8002e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e94:	e009      	b.n	8002eaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002e96:	4b2f      	ldr	r3, [pc, #188]	; (8002f54 <xPortStartScheduler+0x134>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	4a2d      	ldr	r2, [pc, #180]	; (8002f54 <xPortStartScheduler+0x134>)
 8002e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d0ef      	beq.n	8002e96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002eb6:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <xPortStartScheduler+0x134>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f1c3 0307 	rsb	r3, r3, #7
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d00a      	beq.n	8002ed8 <xPortStartScheduler+0xb8>
	__asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	60bb      	str	r3, [r7, #8]
}
 8002ed4:	bf00      	nop
 8002ed6:	e7fe      	b.n	8002ed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <xPortStartScheduler+0x134>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <xPortStartScheduler+0x134>)
 8002ee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <xPortStartScheduler+0x134>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002eea:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <xPortStartScheduler+0x134>)
 8002eec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <xPortStartScheduler+0x138>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <xPortStartScheduler+0x138>)
 8002efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <xPortStartScheduler+0x138>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <xPortStartScheduler+0x138>)
 8002f08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002f0e:	f000 f8dd 	bl	80030cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <xPortStartScheduler+0x13c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002f18:	f000 f8fc 	bl	8003114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f1c:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <xPortStartScheduler+0x140>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0f      	ldr	r2, [pc, #60]	; (8002f60 <xPortStartScheduler+0x140>)
 8002f22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002f28:	f7ff ff66 	bl	8002df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002f2c:	f7ff fd5e 	bl	80029ec <vTaskSwitchContext>
	prvTaskExitError();
 8002f30:	f7ff ff22 	bl	8002d78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00
 8002f44:	410fc271 	.word	0x410fc271
 8002f48:	410fc270 	.word	0x410fc270
 8002f4c:	e000e400 	.word	0xe000e400
 8002f50:	20000414 	.word	0x20000414
 8002f54:	20000418 	.word	0x20000418
 8002f58:	e000ed20 	.word	0xe000ed20
 8002f5c:	2000000c 	.word	0x2000000c
 8002f60:	e000ef34 	.word	0xe000ef34

08002f64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
	__asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	607b      	str	r3, [r7, #4]
}
 8002f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <vPortEnterCritical+0x58>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3301      	adds	r3, #1
 8002f84:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <vPortEnterCritical+0x58>)
 8002f86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <vPortEnterCritical+0x58>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10f      	bne.n	8002fb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <vPortEnterCritical+0x5c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	603b      	str	r3, [r7, #0]
}
 8002fac:	bf00      	nop
 8002fae:	e7fe      	b.n	8002fae <vPortEnterCritical+0x4a>
	}
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	2000000c 	.word	0x2000000c
 8002fc0:	e000ed04 	.word	0xe000ed04

08002fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <vPortExitCritical+0x50>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <vPortExitCritical+0x24>
	__asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	607b      	str	r3, [r7, #4]
}
 8002fe4:	bf00      	nop
 8002fe6:	e7fe      	b.n	8002fe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <vPortExitCritical+0x50>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <vPortExitCritical+0x50>)
 8002ff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <vPortExitCritical+0x50>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d105      	bne.n	8003006 <vPortExitCritical+0x42>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	2000000c 	.word	0x2000000c
	...

08003020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003020:	f3ef 8009 	mrs	r0, PSP
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <pxCurrentTCBConst>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	f01e 0f10 	tst.w	lr, #16
 8003030:	bf08      	it	eq
 8003032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303a:	6010      	str	r0, [r2, #0]
 800303c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003044:	f380 8811 	msr	BASEPRI, r0
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f7ff fccc 	bl	80029ec <vTaskSwitchContext>
 8003054:	f04f 0000 	mov.w	r0, #0
 8003058:	f380 8811 	msr	BASEPRI, r0
 800305c:	bc09      	pop	{r0, r3}
 800305e:	6819      	ldr	r1, [r3, #0]
 8003060:	6808      	ldr	r0, [r1, #0]
 8003062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003066:	f01e 0f10 	tst.w	lr, #16
 800306a:	bf08      	it	eq
 800306c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003070:	f380 8809 	msr	PSP, r0
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	f3af 8000 	nop.w

08003080 <pxCurrentTCBConst>:
 8003080:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop

08003088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
	__asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	607b      	str	r3, [r7, #4]
}
 80030a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80030a2:	f7ff fc0d 	bl	80028c0 <xTaskIncrementTick>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <SysTick_Handler+0x40>)
 80030ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	2300      	movs	r3, #0
 80030b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f383 8811 	msr	BASEPRI, r3
}
 80030be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	e000ed04 	.word	0xe000ed04

080030cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <vPortSetupTimerInterrupt+0x34>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <vPortSetupTimerInterrupt+0x38>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <vPortSetupTimerInterrupt+0x3c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0a      	ldr	r2, [pc, #40]	; (800310c <vPortSetupTimerInterrupt+0x40>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	4a09      	ldr	r2, [pc, #36]	; (8003110 <vPortSetupTimerInterrupt+0x44>)
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030ee:	4b04      	ldr	r3, [pc, #16]	; (8003100 <vPortSetupTimerInterrupt+0x34>)
 80030f0:	2207      	movs	r2, #7
 80030f2:	601a      	str	r2, [r3, #0]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000e010 	.word	0xe000e010
 8003104:	e000e018 	.word	0xe000e018
 8003108:	20000000 	.word	0x20000000
 800310c:	10624dd3 	.word	0x10624dd3
 8003110:	e000e014 	.word	0xe000e014

08003114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003124 <vPortEnableVFP+0x10>
 8003118:	6801      	ldr	r1, [r0, #0]
 800311a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800311e:	6001      	str	r1, [r0, #0]
 8003120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003122:	bf00      	nop
 8003124:	e000ed88 	.word	0xe000ed88

08003128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003130:	2300      	movs	r3, #0
 8003132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003134:	f7ff fb28 	bl	8002788 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003138:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <pvPortMalloc+0x180>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003140:	f000 f920 	bl	8003384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003144:	4b59      	ldr	r3, [pc, #356]	; (80032ac <pvPortMalloc+0x184>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	f040 8093 	bne.w	8003278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01d      	beq.n	8003194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003158:	2208      	movs	r2, #8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	2b00      	cmp	r3, #0
 8003168:	d014      	beq.n	8003194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f023 0307 	bic.w	r3, r3, #7
 8003170:	3308      	adds	r3, #8
 8003172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <pvPortMalloc+0x6c>
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	617b      	str	r3, [r7, #20]
}
 8003190:	bf00      	nop
 8003192:	e7fe      	b.n	8003192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d06e      	beq.n	8003278 <pvPortMalloc+0x150>
 800319a:	4b45      	ldr	r3, [pc, #276]	; (80032b0 <pvPortMalloc+0x188>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d869      	bhi.n	8003278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80031a4:	4b43      	ldr	r3, [pc, #268]	; (80032b4 <pvPortMalloc+0x18c>)
 80031a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80031a8:	4b42      	ldr	r3, [pc, #264]	; (80032b4 <pvPortMalloc+0x18c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031ae:	e004      	b.n	80031ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d903      	bls.n	80031cc <pvPortMalloc+0xa4>
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f1      	bne.n	80031b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80031cc:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <pvPortMalloc+0x180>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d050      	beq.n	8003278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2208      	movs	r2, #8
 80031dc:	4413      	add	r3, r2
 80031de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	2308      	movs	r3, #8
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d91f      	bls.n	8003238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <pvPortMalloc+0xf8>
	__asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	613b      	str	r3, [r7, #16]
}
 800321c:	bf00      	nop
 800321e:	e7fe      	b.n	800321e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	1ad2      	subs	r2, r2, r3
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003232:	69b8      	ldr	r0, [r7, #24]
 8003234:	f000 f908 	bl	8003448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003238:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <pvPortMalloc+0x188>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <pvPortMalloc+0x188>)
 8003244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <pvPortMalloc+0x188>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <pvPortMalloc+0x190>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d203      	bcs.n	800325a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <pvPortMalloc+0x188>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <pvPortMalloc+0x190>)
 8003258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	4b13      	ldr	r3, [pc, #76]	; (80032ac <pvPortMalloc+0x184>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	431a      	orrs	r2, r3
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <pvPortMalloc+0x194>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	4a11      	ldr	r2, [pc, #68]	; (80032bc <pvPortMalloc+0x194>)
 8003276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003278:	f7ff fa94 	bl	80027a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <pvPortMalloc+0x174>
	__asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	60fb      	str	r3, [r7, #12]
}
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <pvPortMalloc+0x172>
	return pvReturn;
 800329c:	69fb      	ldr	r3, [r7, #28]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3728      	adds	r7, #40	; 0x28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20004024 	.word	0x20004024
 80032ac:	20004038 	.word	0x20004038
 80032b0:	20004028 	.word	0x20004028
 80032b4:	2000401c 	.word	0x2000401c
 80032b8:	2000402c 	.word	0x2000402c
 80032bc:	20004030 	.word	0x20004030

080032c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d04d      	beq.n	800336e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80032d2:	2308      	movs	r3, #8
 80032d4:	425b      	negs	r3, r3
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4413      	add	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	4b24      	ldr	r3, [pc, #144]	; (8003378 <vPortFree+0xb8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10a      	bne.n	8003304 <vPortFree+0x44>
	__asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	60fb      	str	r3, [r7, #12]
}
 8003300:	bf00      	nop
 8003302:	e7fe      	b.n	8003302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <vPortFree+0x62>
	__asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	60bb      	str	r3, [r7, #8]
}
 800331e:	bf00      	nop
 8003320:	e7fe      	b.n	8003320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <vPortFree+0xb8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01e      	beq.n	800336e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d11a      	bne.n	800336e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <vPortFree+0xb8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	43db      	mvns	r3, r3
 8003342:	401a      	ands	r2, r3
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003348:	f7ff fa1e 	bl	8002788 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	4b0a      	ldr	r3, [pc, #40]	; (800337c <vPortFree+0xbc>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4413      	add	r3, r2
 8003356:	4a09      	ldr	r2, [pc, #36]	; (800337c <vPortFree+0xbc>)
 8003358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800335a:	6938      	ldr	r0, [r7, #16]
 800335c:	f000 f874 	bl	8003448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <vPortFree+0xc0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	4a06      	ldr	r2, [pc, #24]	; (8003380 <vPortFree+0xc0>)
 8003368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800336a:	f7ff fa1b 	bl	80027a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800336e:	bf00      	nop
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20004038 	.word	0x20004038
 800337c:	20004028 	.word	0x20004028
 8003380:	20004034 	.word	0x20004034

08003384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800338a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800338e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003390:	4b27      	ldr	r3, [pc, #156]	; (8003430 <prvHeapInit+0xac>)
 8003392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00c      	beq.n	80033b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3307      	adds	r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0307 	bic.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	4a1f      	ldr	r2, [pc, #124]	; (8003430 <prvHeapInit+0xac>)
 80033b4:	4413      	add	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033bc:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <prvHeapInit+0xb0>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80033c2:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <prvHeapInit+0xb0>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	4413      	add	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80033d0:	2208      	movs	r2, #8
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0307 	bic.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4a15      	ldr	r2, [pc, #84]	; (8003438 <prvHeapInit+0xb4>)
 80033e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80033e6:	4b14      	ldr	r3, [pc, #80]	; (8003438 <prvHeapInit+0xb4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80033ee:	4b12      	ldr	r3, [pc, #72]	; (8003438 <prvHeapInit+0xb4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	1ad2      	subs	r2, r2, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <prvHeapInit+0xb4>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a0a      	ldr	r2, [pc, #40]	; (800343c <prvHeapInit+0xb8>)
 8003412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4a09      	ldr	r2, [pc, #36]	; (8003440 <prvHeapInit+0xbc>)
 800341a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <prvHeapInit+0xc0>)
 800341e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003422:	601a      	str	r2, [r3, #0]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	2000041c 	.word	0x2000041c
 8003434:	2000401c 	.word	0x2000401c
 8003438:	20004024 	.word	0x20004024
 800343c:	2000402c 	.word	0x2000402c
 8003440:	20004028 	.word	0x20004028
 8003444:	20004038 	.word	0x20004038

08003448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <prvInsertBlockIntoFreeList+0xac>)
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e002      	b.n	800345c <prvInsertBlockIntoFreeList+0x14>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d8f7      	bhi.n	8003456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4413      	add	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	d108      	bne.n	800348a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	441a      	add	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	441a      	add	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d118      	bne.n	80034d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <prvInsertBlockIntoFreeList+0xb0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d00d      	beq.n	80034c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	441a      	add	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e008      	b.n	80034d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <prvInsertBlockIntoFreeList+0xb0>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e003      	b.n	80034d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d002      	beq.n	80034e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	2000401c 	.word	0x2000401c
 80034f8:	20004024 	.word	0x20004024

080034fc <__errno>:
 80034fc:	4b01      	ldr	r3, [pc, #4]	; (8003504 <__errno+0x8>)
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000010 	.word	0x20000010

08003508 <__libc_init_array>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	4d0d      	ldr	r5, [pc, #52]	; (8003540 <__libc_init_array+0x38>)
 800350c:	4c0d      	ldr	r4, [pc, #52]	; (8003544 <__libc_init_array+0x3c>)
 800350e:	1b64      	subs	r4, r4, r5
 8003510:	10a4      	asrs	r4, r4, #2
 8003512:	2600      	movs	r6, #0
 8003514:	42a6      	cmp	r6, r4
 8003516:	d109      	bne.n	800352c <__libc_init_array+0x24>
 8003518:	4d0b      	ldr	r5, [pc, #44]	; (8003548 <__libc_init_array+0x40>)
 800351a:	4c0c      	ldr	r4, [pc, #48]	; (800354c <__libc_init_array+0x44>)
 800351c:	f000 fce6 	bl	8003eec <_init>
 8003520:	1b64      	subs	r4, r4, r5
 8003522:	10a4      	asrs	r4, r4, #2
 8003524:	2600      	movs	r6, #0
 8003526:	42a6      	cmp	r6, r4
 8003528:	d105      	bne.n	8003536 <__libc_init_array+0x2e>
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003530:	4798      	blx	r3
 8003532:	3601      	adds	r6, #1
 8003534:	e7ee      	b.n	8003514 <__libc_init_array+0xc>
 8003536:	f855 3b04 	ldr.w	r3, [r5], #4
 800353a:	4798      	blx	r3
 800353c:	3601      	adds	r6, #1
 800353e:	e7f2      	b.n	8003526 <__libc_init_array+0x1e>
 8003540:	08003fe8 	.word	0x08003fe8
 8003544:	08003fe8 	.word	0x08003fe8
 8003548:	08003fe8 	.word	0x08003fe8
 800354c:	08003fec 	.word	0x08003fec

08003550 <memset>:
 8003550:	4402      	add	r2, r0
 8003552:	4603      	mov	r3, r0
 8003554:	4293      	cmp	r3, r2
 8003556:	d100      	bne.n	800355a <memset+0xa>
 8003558:	4770      	bx	lr
 800355a:	f803 1b01 	strb.w	r1, [r3], #1
 800355e:	e7f9      	b.n	8003554 <memset+0x4>

08003560 <_puts_r>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	460e      	mov	r6, r1
 8003564:	4605      	mov	r5, r0
 8003566:	b118      	cbz	r0, 8003570 <_puts_r+0x10>
 8003568:	6983      	ldr	r3, [r0, #24]
 800356a:	b90b      	cbnz	r3, 8003570 <_puts_r+0x10>
 800356c:	f000 fa48 	bl	8003a00 <__sinit>
 8003570:	69ab      	ldr	r3, [r5, #24]
 8003572:	68ac      	ldr	r4, [r5, #8]
 8003574:	b913      	cbnz	r3, 800357c <_puts_r+0x1c>
 8003576:	4628      	mov	r0, r5
 8003578:	f000 fa42 	bl	8003a00 <__sinit>
 800357c:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <_puts_r+0xd0>)
 800357e:	429c      	cmp	r4, r3
 8003580:	d120      	bne.n	80035c4 <_puts_r+0x64>
 8003582:	686c      	ldr	r4, [r5, #4]
 8003584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003586:	07db      	lsls	r3, r3, #31
 8003588:	d405      	bmi.n	8003596 <_puts_r+0x36>
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	0598      	lsls	r0, r3, #22
 800358e:	d402      	bmi.n	8003596 <_puts_r+0x36>
 8003590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003592:	f000 fad3 	bl	8003b3c <__retarget_lock_acquire_recursive>
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	0719      	lsls	r1, r3, #28
 800359a:	d51d      	bpl.n	80035d8 <_puts_r+0x78>
 800359c:	6923      	ldr	r3, [r4, #16]
 800359e:	b1db      	cbz	r3, 80035d8 <_puts_r+0x78>
 80035a0:	3e01      	subs	r6, #1
 80035a2:	68a3      	ldr	r3, [r4, #8]
 80035a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035a8:	3b01      	subs	r3, #1
 80035aa:	60a3      	str	r3, [r4, #8]
 80035ac:	bb39      	cbnz	r1, 80035fe <_puts_r+0x9e>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	da38      	bge.n	8003624 <_puts_r+0xc4>
 80035b2:	4622      	mov	r2, r4
 80035b4:	210a      	movs	r1, #10
 80035b6:	4628      	mov	r0, r5
 80035b8:	f000 f848 	bl	800364c <__swbuf_r>
 80035bc:	3001      	adds	r0, #1
 80035be:	d011      	beq.n	80035e4 <_puts_r+0x84>
 80035c0:	250a      	movs	r5, #10
 80035c2:	e011      	b.n	80035e8 <_puts_r+0x88>
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <_puts_r+0xd4>)
 80035c6:	429c      	cmp	r4, r3
 80035c8:	d101      	bne.n	80035ce <_puts_r+0x6e>
 80035ca:	68ac      	ldr	r4, [r5, #8]
 80035cc:	e7da      	b.n	8003584 <_puts_r+0x24>
 80035ce:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <_puts_r+0xd8>)
 80035d0:	429c      	cmp	r4, r3
 80035d2:	bf08      	it	eq
 80035d4:	68ec      	ldreq	r4, [r5, #12]
 80035d6:	e7d5      	b.n	8003584 <_puts_r+0x24>
 80035d8:	4621      	mov	r1, r4
 80035da:	4628      	mov	r0, r5
 80035dc:	f000 f888 	bl	80036f0 <__swsetup_r>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d0dd      	beq.n	80035a0 <_puts_r+0x40>
 80035e4:	f04f 35ff 	mov.w	r5, #4294967295
 80035e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035ea:	07da      	lsls	r2, r3, #31
 80035ec:	d405      	bmi.n	80035fa <_puts_r+0x9a>
 80035ee:	89a3      	ldrh	r3, [r4, #12]
 80035f0:	059b      	lsls	r3, r3, #22
 80035f2:	d402      	bmi.n	80035fa <_puts_r+0x9a>
 80035f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035f6:	f000 faa2 	bl	8003b3e <__retarget_lock_release_recursive>
 80035fa:	4628      	mov	r0, r5
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da04      	bge.n	800360c <_puts_r+0xac>
 8003602:	69a2      	ldr	r2, [r4, #24]
 8003604:	429a      	cmp	r2, r3
 8003606:	dc06      	bgt.n	8003616 <_puts_r+0xb6>
 8003608:	290a      	cmp	r1, #10
 800360a:	d004      	beq.n	8003616 <_puts_r+0xb6>
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	6022      	str	r2, [r4, #0]
 8003612:	7019      	strb	r1, [r3, #0]
 8003614:	e7c5      	b.n	80035a2 <_puts_r+0x42>
 8003616:	4622      	mov	r2, r4
 8003618:	4628      	mov	r0, r5
 800361a:	f000 f817 	bl	800364c <__swbuf_r>
 800361e:	3001      	adds	r0, #1
 8003620:	d1bf      	bne.n	80035a2 <_puts_r+0x42>
 8003622:	e7df      	b.n	80035e4 <_puts_r+0x84>
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	250a      	movs	r5, #10
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	6022      	str	r2, [r4, #0]
 800362c:	701d      	strb	r5, [r3, #0]
 800362e:	e7db      	b.n	80035e8 <_puts_r+0x88>
 8003630:	08003fa0 	.word	0x08003fa0
 8003634:	08003fc0 	.word	0x08003fc0
 8003638:	08003f80 	.word	0x08003f80

0800363c <puts>:
 800363c:	4b02      	ldr	r3, [pc, #8]	; (8003648 <puts+0xc>)
 800363e:	4601      	mov	r1, r0
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	f7ff bf8d 	b.w	8003560 <_puts_r>
 8003646:	bf00      	nop
 8003648:	20000010 	.word	0x20000010

0800364c <__swbuf_r>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	460e      	mov	r6, r1
 8003650:	4614      	mov	r4, r2
 8003652:	4605      	mov	r5, r0
 8003654:	b118      	cbz	r0, 800365e <__swbuf_r+0x12>
 8003656:	6983      	ldr	r3, [r0, #24]
 8003658:	b90b      	cbnz	r3, 800365e <__swbuf_r+0x12>
 800365a:	f000 f9d1 	bl	8003a00 <__sinit>
 800365e:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <__swbuf_r+0x98>)
 8003660:	429c      	cmp	r4, r3
 8003662:	d12b      	bne.n	80036bc <__swbuf_r+0x70>
 8003664:	686c      	ldr	r4, [r5, #4]
 8003666:	69a3      	ldr	r3, [r4, #24]
 8003668:	60a3      	str	r3, [r4, #8]
 800366a:	89a3      	ldrh	r3, [r4, #12]
 800366c:	071a      	lsls	r2, r3, #28
 800366e:	d52f      	bpl.n	80036d0 <__swbuf_r+0x84>
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	b36b      	cbz	r3, 80036d0 <__swbuf_r+0x84>
 8003674:	6923      	ldr	r3, [r4, #16]
 8003676:	6820      	ldr	r0, [r4, #0]
 8003678:	1ac0      	subs	r0, r0, r3
 800367a:	6963      	ldr	r3, [r4, #20]
 800367c:	b2f6      	uxtb	r6, r6
 800367e:	4283      	cmp	r3, r0
 8003680:	4637      	mov	r7, r6
 8003682:	dc04      	bgt.n	800368e <__swbuf_r+0x42>
 8003684:	4621      	mov	r1, r4
 8003686:	4628      	mov	r0, r5
 8003688:	f000 f926 	bl	80038d8 <_fflush_r>
 800368c:	bb30      	cbnz	r0, 80036dc <__swbuf_r+0x90>
 800368e:	68a3      	ldr	r3, [r4, #8]
 8003690:	3b01      	subs	r3, #1
 8003692:	60a3      	str	r3, [r4, #8]
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	6022      	str	r2, [r4, #0]
 800369a:	701e      	strb	r6, [r3, #0]
 800369c:	6963      	ldr	r3, [r4, #20]
 800369e:	3001      	adds	r0, #1
 80036a0:	4283      	cmp	r3, r0
 80036a2:	d004      	beq.n	80036ae <__swbuf_r+0x62>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	07db      	lsls	r3, r3, #31
 80036a8:	d506      	bpl.n	80036b8 <__swbuf_r+0x6c>
 80036aa:	2e0a      	cmp	r6, #10
 80036ac:	d104      	bne.n	80036b8 <__swbuf_r+0x6c>
 80036ae:	4621      	mov	r1, r4
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 f911 	bl	80038d8 <_fflush_r>
 80036b6:	b988      	cbnz	r0, 80036dc <__swbuf_r+0x90>
 80036b8:	4638      	mov	r0, r7
 80036ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <__swbuf_r+0x9c>)
 80036be:	429c      	cmp	r4, r3
 80036c0:	d101      	bne.n	80036c6 <__swbuf_r+0x7a>
 80036c2:	68ac      	ldr	r4, [r5, #8]
 80036c4:	e7cf      	b.n	8003666 <__swbuf_r+0x1a>
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <__swbuf_r+0xa0>)
 80036c8:	429c      	cmp	r4, r3
 80036ca:	bf08      	it	eq
 80036cc:	68ec      	ldreq	r4, [r5, #12]
 80036ce:	e7ca      	b.n	8003666 <__swbuf_r+0x1a>
 80036d0:	4621      	mov	r1, r4
 80036d2:	4628      	mov	r0, r5
 80036d4:	f000 f80c 	bl	80036f0 <__swsetup_r>
 80036d8:	2800      	cmp	r0, #0
 80036da:	d0cb      	beq.n	8003674 <__swbuf_r+0x28>
 80036dc:	f04f 37ff 	mov.w	r7, #4294967295
 80036e0:	e7ea      	b.n	80036b8 <__swbuf_r+0x6c>
 80036e2:	bf00      	nop
 80036e4:	08003fa0 	.word	0x08003fa0
 80036e8:	08003fc0 	.word	0x08003fc0
 80036ec:	08003f80 	.word	0x08003f80

080036f0 <__swsetup_r>:
 80036f0:	4b32      	ldr	r3, [pc, #200]	; (80037bc <__swsetup_r+0xcc>)
 80036f2:	b570      	push	{r4, r5, r6, lr}
 80036f4:	681d      	ldr	r5, [r3, #0]
 80036f6:	4606      	mov	r6, r0
 80036f8:	460c      	mov	r4, r1
 80036fa:	b125      	cbz	r5, 8003706 <__swsetup_r+0x16>
 80036fc:	69ab      	ldr	r3, [r5, #24]
 80036fe:	b913      	cbnz	r3, 8003706 <__swsetup_r+0x16>
 8003700:	4628      	mov	r0, r5
 8003702:	f000 f97d 	bl	8003a00 <__sinit>
 8003706:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <__swsetup_r+0xd0>)
 8003708:	429c      	cmp	r4, r3
 800370a:	d10f      	bne.n	800372c <__swsetup_r+0x3c>
 800370c:	686c      	ldr	r4, [r5, #4]
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003714:	0719      	lsls	r1, r3, #28
 8003716:	d42c      	bmi.n	8003772 <__swsetup_r+0x82>
 8003718:	06dd      	lsls	r5, r3, #27
 800371a:	d411      	bmi.n	8003740 <__swsetup_r+0x50>
 800371c:	2309      	movs	r3, #9
 800371e:	6033      	str	r3, [r6, #0]
 8003720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003724:	81a3      	strh	r3, [r4, #12]
 8003726:	f04f 30ff 	mov.w	r0, #4294967295
 800372a:	e03e      	b.n	80037aa <__swsetup_r+0xba>
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <__swsetup_r+0xd4>)
 800372e:	429c      	cmp	r4, r3
 8003730:	d101      	bne.n	8003736 <__swsetup_r+0x46>
 8003732:	68ac      	ldr	r4, [r5, #8]
 8003734:	e7eb      	b.n	800370e <__swsetup_r+0x1e>
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <__swsetup_r+0xd8>)
 8003738:	429c      	cmp	r4, r3
 800373a:	bf08      	it	eq
 800373c:	68ec      	ldreq	r4, [r5, #12]
 800373e:	e7e6      	b.n	800370e <__swsetup_r+0x1e>
 8003740:	0758      	lsls	r0, r3, #29
 8003742:	d512      	bpl.n	800376a <__swsetup_r+0x7a>
 8003744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003746:	b141      	cbz	r1, 800375a <__swsetup_r+0x6a>
 8003748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800374c:	4299      	cmp	r1, r3
 800374e:	d002      	beq.n	8003756 <__swsetup_r+0x66>
 8003750:	4630      	mov	r0, r6
 8003752:	f000 fa59 	bl	8003c08 <_free_r>
 8003756:	2300      	movs	r3, #0
 8003758:	6363      	str	r3, [r4, #52]	; 0x34
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003760:	81a3      	strh	r3, [r4, #12]
 8003762:	2300      	movs	r3, #0
 8003764:	6063      	str	r3, [r4, #4]
 8003766:	6923      	ldr	r3, [r4, #16]
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	f043 0308 	orr.w	r3, r3, #8
 8003770:	81a3      	strh	r3, [r4, #12]
 8003772:	6923      	ldr	r3, [r4, #16]
 8003774:	b94b      	cbnz	r3, 800378a <__swsetup_r+0x9a>
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800377c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003780:	d003      	beq.n	800378a <__swsetup_r+0x9a>
 8003782:	4621      	mov	r1, r4
 8003784:	4630      	mov	r0, r6
 8003786:	f000 f9ff 	bl	8003b88 <__smakebuf_r>
 800378a:	89a0      	ldrh	r0, [r4, #12]
 800378c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003790:	f010 0301 	ands.w	r3, r0, #1
 8003794:	d00a      	beq.n	80037ac <__swsetup_r+0xbc>
 8003796:	2300      	movs	r3, #0
 8003798:	60a3      	str	r3, [r4, #8]
 800379a:	6963      	ldr	r3, [r4, #20]
 800379c:	425b      	negs	r3, r3
 800379e:	61a3      	str	r3, [r4, #24]
 80037a0:	6923      	ldr	r3, [r4, #16]
 80037a2:	b943      	cbnz	r3, 80037b6 <__swsetup_r+0xc6>
 80037a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037a8:	d1ba      	bne.n	8003720 <__swsetup_r+0x30>
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	0781      	lsls	r1, r0, #30
 80037ae:	bf58      	it	pl
 80037b0:	6963      	ldrpl	r3, [r4, #20]
 80037b2:	60a3      	str	r3, [r4, #8]
 80037b4:	e7f4      	b.n	80037a0 <__swsetup_r+0xb0>
 80037b6:	2000      	movs	r0, #0
 80037b8:	e7f7      	b.n	80037aa <__swsetup_r+0xba>
 80037ba:	bf00      	nop
 80037bc:	20000010 	.word	0x20000010
 80037c0:	08003fa0 	.word	0x08003fa0
 80037c4:	08003fc0 	.word	0x08003fc0
 80037c8:	08003f80 	.word	0x08003f80

080037cc <__sflush_r>:
 80037cc:	898a      	ldrh	r2, [r1, #12]
 80037ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037d2:	4605      	mov	r5, r0
 80037d4:	0710      	lsls	r0, r2, #28
 80037d6:	460c      	mov	r4, r1
 80037d8:	d458      	bmi.n	800388c <__sflush_r+0xc0>
 80037da:	684b      	ldr	r3, [r1, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	dc05      	bgt.n	80037ec <__sflush_r+0x20>
 80037e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	dc02      	bgt.n	80037ec <__sflush_r+0x20>
 80037e6:	2000      	movs	r0, #0
 80037e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037ee:	2e00      	cmp	r6, #0
 80037f0:	d0f9      	beq.n	80037e6 <__sflush_r+0x1a>
 80037f2:	2300      	movs	r3, #0
 80037f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037f8:	682f      	ldr	r7, [r5, #0]
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	d032      	beq.n	8003864 <__sflush_r+0x98>
 80037fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	075a      	lsls	r2, r3, #29
 8003804:	d505      	bpl.n	8003812 <__sflush_r+0x46>
 8003806:	6863      	ldr	r3, [r4, #4]
 8003808:	1ac0      	subs	r0, r0, r3
 800380a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800380c:	b10b      	cbz	r3, 8003812 <__sflush_r+0x46>
 800380e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003810:	1ac0      	subs	r0, r0, r3
 8003812:	2300      	movs	r3, #0
 8003814:	4602      	mov	r2, r0
 8003816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003818:	6a21      	ldr	r1, [r4, #32]
 800381a:	4628      	mov	r0, r5
 800381c:	47b0      	blx	r6
 800381e:	1c43      	adds	r3, r0, #1
 8003820:	89a3      	ldrh	r3, [r4, #12]
 8003822:	d106      	bne.n	8003832 <__sflush_r+0x66>
 8003824:	6829      	ldr	r1, [r5, #0]
 8003826:	291d      	cmp	r1, #29
 8003828:	d82c      	bhi.n	8003884 <__sflush_r+0xb8>
 800382a:	4a2a      	ldr	r2, [pc, #168]	; (80038d4 <__sflush_r+0x108>)
 800382c:	40ca      	lsrs	r2, r1
 800382e:	07d6      	lsls	r6, r2, #31
 8003830:	d528      	bpl.n	8003884 <__sflush_r+0xb8>
 8003832:	2200      	movs	r2, #0
 8003834:	6062      	str	r2, [r4, #4]
 8003836:	04d9      	lsls	r1, r3, #19
 8003838:	6922      	ldr	r2, [r4, #16]
 800383a:	6022      	str	r2, [r4, #0]
 800383c:	d504      	bpl.n	8003848 <__sflush_r+0x7c>
 800383e:	1c42      	adds	r2, r0, #1
 8003840:	d101      	bne.n	8003846 <__sflush_r+0x7a>
 8003842:	682b      	ldr	r3, [r5, #0]
 8003844:	b903      	cbnz	r3, 8003848 <__sflush_r+0x7c>
 8003846:	6560      	str	r0, [r4, #84]	; 0x54
 8003848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800384a:	602f      	str	r7, [r5, #0]
 800384c:	2900      	cmp	r1, #0
 800384e:	d0ca      	beq.n	80037e6 <__sflush_r+0x1a>
 8003850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003854:	4299      	cmp	r1, r3
 8003856:	d002      	beq.n	800385e <__sflush_r+0x92>
 8003858:	4628      	mov	r0, r5
 800385a:	f000 f9d5 	bl	8003c08 <_free_r>
 800385e:	2000      	movs	r0, #0
 8003860:	6360      	str	r0, [r4, #52]	; 0x34
 8003862:	e7c1      	b.n	80037e8 <__sflush_r+0x1c>
 8003864:	6a21      	ldr	r1, [r4, #32]
 8003866:	2301      	movs	r3, #1
 8003868:	4628      	mov	r0, r5
 800386a:	47b0      	blx	r6
 800386c:	1c41      	adds	r1, r0, #1
 800386e:	d1c7      	bne.n	8003800 <__sflush_r+0x34>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0c4      	beq.n	8003800 <__sflush_r+0x34>
 8003876:	2b1d      	cmp	r3, #29
 8003878:	d001      	beq.n	800387e <__sflush_r+0xb2>
 800387a:	2b16      	cmp	r3, #22
 800387c:	d101      	bne.n	8003882 <__sflush_r+0xb6>
 800387e:	602f      	str	r7, [r5, #0]
 8003880:	e7b1      	b.n	80037e6 <__sflush_r+0x1a>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	e7ad      	b.n	80037e8 <__sflush_r+0x1c>
 800388c:	690f      	ldr	r7, [r1, #16]
 800388e:	2f00      	cmp	r7, #0
 8003890:	d0a9      	beq.n	80037e6 <__sflush_r+0x1a>
 8003892:	0793      	lsls	r3, r2, #30
 8003894:	680e      	ldr	r6, [r1, #0]
 8003896:	bf08      	it	eq
 8003898:	694b      	ldreq	r3, [r1, #20]
 800389a:	600f      	str	r7, [r1, #0]
 800389c:	bf18      	it	ne
 800389e:	2300      	movne	r3, #0
 80038a0:	eba6 0807 	sub.w	r8, r6, r7
 80038a4:	608b      	str	r3, [r1, #8]
 80038a6:	f1b8 0f00 	cmp.w	r8, #0
 80038aa:	dd9c      	ble.n	80037e6 <__sflush_r+0x1a>
 80038ac:	6a21      	ldr	r1, [r4, #32]
 80038ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038b0:	4643      	mov	r3, r8
 80038b2:	463a      	mov	r2, r7
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b0      	blx	r6
 80038b8:	2800      	cmp	r0, #0
 80038ba:	dc06      	bgt.n	80038ca <__sflush_r+0xfe>
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c2:	81a3      	strh	r3, [r4, #12]
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	e78e      	b.n	80037e8 <__sflush_r+0x1c>
 80038ca:	4407      	add	r7, r0
 80038cc:	eba8 0800 	sub.w	r8, r8, r0
 80038d0:	e7e9      	b.n	80038a6 <__sflush_r+0xda>
 80038d2:	bf00      	nop
 80038d4:	20400001 	.word	0x20400001

080038d8 <_fflush_r>:
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	690b      	ldr	r3, [r1, #16]
 80038dc:	4605      	mov	r5, r0
 80038de:	460c      	mov	r4, r1
 80038e0:	b913      	cbnz	r3, 80038e8 <_fflush_r+0x10>
 80038e2:	2500      	movs	r5, #0
 80038e4:	4628      	mov	r0, r5
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	b118      	cbz	r0, 80038f2 <_fflush_r+0x1a>
 80038ea:	6983      	ldr	r3, [r0, #24]
 80038ec:	b90b      	cbnz	r3, 80038f2 <_fflush_r+0x1a>
 80038ee:	f000 f887 	bl	8003a00 <__sinit>
 80038f2:	4b14      	ldr	r3, [pc, #80]	; (8003944 <_fflush_r+0x6c>)
 80038f4:	429c      	cmp	r4, r3
 80038f6:	d11b      	bne.n	8003930 <_fflush_r+0x58>
 80038f8:	686c      	ldr	r4, [r5, #4]
 80038fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0ef      	beq.n	80038e2 <_fflush_r+0xa>
 8003902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003904:	07d0      	lsls	r0, r2, #31
 8003906:	d404      	bmi.n	8003912 <_fflush_r+0x3a>
 8003908:	0599      	lsls	r1, r3, #22
 800390a:	d402      	bmi.n	8003912 <_fflush_r+0x3a>
 800390c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800390e:	f000 f915 	bl	8003b3c <__retarget_lock_acquire_recursive>
 8003912:	4628      	mov	r0, r5
 8003914:	4621      	mov	r1, r4
 8003916:	f7ff ff59 	bl	80037cc <__sflush_r>
 800391a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800391c:	07da      	lsls	r2, r3, #31
 800391e:	4605      	mov	r5, r0
 8003920:	d4e0      	bmi.n	80038e4 <_fflush_r+0xc>
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	059b      	lsls	r3, r3, #22
 8003926:	d4dd      	bmi.n	80038e4 <_fflush_r+0xc>
 8003928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800392a:	f000 f908 	bl	8003b3e <__retarget_lock_release_recursive>
 800392e:	e7d9      	b.n	80038e4 <_fflush_r+0xc>
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <_fflush_r+0x70>)
 8003932:	429c      	cmp	r4, r3
 8003934:	d101      	bne.n	800393a <_fflush_r+0x62>
 8003936:	68ac      	ldr	r4, [r5, #8]
 8003938:	e7df      	b.n	80038fa <_fflush_r+0x22>
 800393a:	4b04      	ldr	r3, [pc, #16]	; (800394c <_fflush_r+0x74>)
 800393c:	429c      	cmp	r4, r3
 800393e:	bf08      	it	eq
 8003940:	68ec      	ldreq	r4, [r5, #12]
 8003942:	e7da      	b.n	80038fa <_fflush_r+0x22>
 8003944:	08003fa0 	.word	0x08003fa0
 8003948:	08003fc0 	.word	0x08003fc0
 800394c:	08003f80 	.word	0x08003f80

08003950 <std>:
 8003950:	2300      	movs	r3, #0
 8003952:	b510      	push	{r4, lr}
 8003954:	4604      	mov	r4, r0
 8003956:	e9c0 3300 	strd	r3, r3, [r0]
 800395a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800395e:	6083      	str	r3, [r0, #8]
 8003960:	8181      	strh	r1, [r0, #12]
 8003962:	6643      	str	r3, [r0, #100]	; 0x64
 8003964:	81c2      	strh	r2, [r0, #14]
 8003966:	6183      	str	r3, [r0, #24]
 8003968:	4619      	mov	r1, r3
 800396a:	2208      	movs	r2, #8
 800396c:	305c      	adds	r0, #92	; 0x5c
 800396e:	f7ff fdef 	bl	8003550 <memset>
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <std+0x38>)
 8003974:	6263      	str	r3, [r4, #36]	; 0x24
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <std+0x3c>)
 8003978:	62a3      	str	r3, [r4, #40]	; 0x28
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <std+0x40>)
 800397c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <std+0x44>)
 8003980:	6224      	str	r4, [r4, #32]
 8003982:	6323      	str	r3, [r4, #48]	; 0x30
 8003984:	bd10      	pop	{r4, pc}
 8003986:	bf00      	nop
 8003988:	08003d7d 	.word	0x08003d7d
 800398c:	08003d9f 	.word	0x08003d9f
 8003990:	08003dd7 	.word	0x08003dd7
 8003994:	08003dfb 	.word	0x08003dfb

08003998 <_cleanup_r>:
 8003998:	4901      	ldr	r1, [pc, #4]	; (80039a0 <_cleanup_r+0x8>)
 800399a:	f000 b8af 	b.w	8003afc <_fwalk_reent>
 800399e:	bf00      	nop
 80039a0:	080038d9 	.word	0x080038d9

080039a4 <__sfmoreglue>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	1e4a      	subs	r2, r1, #1
 80039a8:	2568      	movs	r5, #104	; 0x68
 80039aa:	4355      	muls	r5, r2
 80039ac:	460e      	mov	r6, r1
 80039ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039b2:	f000 f979 	bl	8003ca8 <_malloc_r>
 80039b6:	4604      	mov	r4, r0
 80039b8:	b140      	cbz	r0, 80039cc <__sfmoreglue+0x28>
 80039ba:	2100      	movs	r1, #0
 80039bc:	e9c0 1600 	strd	r1, r6, [r0]
 80039c0:	300c      	adds	r0, #12
 80039c2:	60a0      	str	r0, [r4, #8]
 80039c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039c8:	f7ff fdc2 	bl	8003550 <memset>
 80039cc:	4620      	mov	r0, r4
 80039ce:	bd70      	pop	{r4, r5, r6, pc}

080039d0 <__sfp_lock_acquire>:
 80039d0:	4801      	ldr	r0, [pc, #4]	; (80039d8 <__sfp_lock_acquire+0x8>)
 80039d2:	f000 b8b3 	b.w	8003b3c <__retarget_lock_acquire_recursive>
 80039d6:	bf00      	nop
 80039d8:	2000409c 	.word	0x2000409c

080039dc <__sfp_lock_release>:
 80039dc:	4801      	ldr	r0, [pc, #4]	; (80039e4 <__sfp_lock_release+0x8>)
 80039de:	f000 b8ae 	b.w	8003b3e <__retarget_lock_release_recursive>
 80039e2:	bf00      	nop
 80039e4:	2000409c 	.word	0x2000409c

080039e8 <__sinit_lock_acquire>:
 80039e8:	4801      	ldr	r0, [pc, #4]	; (80039f0 <__sinit_lock_acquire+0x8>)
 80039ea:	f000 b8a7 	b.w	8003b3c <__retarget_lock_acquire_recursive>
 80039ee:	bf00      	nop
 80039f0:	20004097 	.word	0x20004097

080039f4 <__sinit_lock_release>:
 80039f4:	4801      	ldr	r0, [pc, #4]	; (80039fc <__sinit_lock_release+0x8>)
 80039f6:	f000 b8a2 	b.w	8003b3e <__retarget_lock_release_recursive>
 80039fa:	bf00      	nop
 80039fc:	20004097 	.word	0x20004097

08003a00 <__sinit>:
 8003a00:	b510      	push	{r4, lr}
 8003a02:	4604      	mov	r4, r0
 8003a04:	f7ff fff0 	bl	80039e8 <__sinit_lock_acquire>
 8003a08:	69a3      	ldr	r3, [r4, #24]
 8003a0a:	b11b      	cbz	r3, 8003a14 <__sinit+0x14>
 8003a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a10:	f7ff bff0 	b.w	80039f4 <__sinit_lock_release>
 8003a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a18:	6523      	str	r3, [r4, #80]	; 0x50
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <__sinit+0x68>)
 8003a1c:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <__sinit+0x6c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a22:	42a3      	cmp	r3, r4
 8003a24:	bf04      	itt	eq
 8003a26:	2301      	moveq	r3, #1
 8003a28:	61a3      	streq	r3, [r4, #24]
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f000 f820 	bl	8003a70 <__sfp>
 8003a30:	6060      	str	r0, [r4, #4]
 8003a32:	4620      	mov	r0, r4
 8003a34:	f000 f81c 	bl	8003a70 <__sfp>
 8003a38:	60a0      	str	r0, [r4, #8]
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f000 f818 	bl	8003a70 <__sfp>
 8003a40:	2200      	movs	r2, #0
 8003a42:	60e0      	str	r0, [r4, #12]
 8003a44:	2104      	movs	r1, #4
 8003a46:	6860      	ldr	r0, [r4, #4]
 8003a48:	f7ff ff82 	bl	8003950 <std>
 8003a4c:	68a0      	ldr	r0, [r4, #8]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	2109      	movs	r1, #9
 8003a52:	f7ff ff7d 	bl	8003950 <std>
 8003a56:	68e0      	ldr	r0, [r4, #12]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	2112      	movs	r1, #18
 8003a5c:	f7ff ff78 	bl	8003950 <std>
 8003a60:	2301      	movs	r3, #1
 8003a62:	61a3      	str	r3, [r4, #24]
 8003a64:	e7d2      	b.n	8003a0c <__sinit+0xc>
 8003a66:	bf00      	nop
 8003a68:	08003f7c 	.word	0x08003f7c
 8003a6c:	08003999 	.word	0x08003999

08003a70 <__sfp>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	4607      	mov	r7, r0
 8003a74:	f7ff ffac 	bl	80039d0 <__sfp_lock_acquire>
 8003a78:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <__sfp+0x84>)
 8003a7a:	681e      	ldr	r6, [r3, #0]
 8003a7c:	69b3      	ldr	r3, [r6, #24]
 8003a7e:	b913      	cbnz	r3, 8003a86 <__sfp+0x16>
 8003a80:	4630      	mov	r0, r6
 8003a82:	f7ff ffbd 	bl	8003a00 <__sinit>
 8003a86:	3648      	adds	r6, #72	; 0x48
 8003a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	d503      	bpl.n	8003a98 <__sfp+0x28>
 8003a90:	6833      	ldr	r3, [r6, #0]
 8003a92:	b30b      	cbz	r3, 8003ad8 <__sfp+0x68>
 8003a94:	6836      	ldr	r6, [r6, #0]
 8003a96:	e7f7      	b.n	8003a88 <__sfp+0x18>
 8003a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a9c:	b9d5      	cbnz	r5, 8003ad4 <__sfp+0x64>
 8003a9e:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <__sfp+0x88>)
 8003aa0:	60e3      	str	r3, [r4, #12]
 8003aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8003aa8:	f000 f847 	bl	8003b3a <__retarget_lock_init_recursive>
 8003aac:	f7ff ff96 	bl	80039dc <__sfp_lock_release>
 8003ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ab8:	6025      	str	r5, [r4, #0]
 8003aba:	61a5      	str	r5, [r4, #24]
 8003abc:	2208      	movs	r2, #8
 8003abe:	4629      	mov	r1, r5
 8003ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ac4:	f7ff fd44 	bl	8003550 <memset>
 8003ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ad4:	3468      	adds	r4, #104	; 0x68
 8003ad6:	e7d9      	b.n	8003a8c <__sfp+0x1c>
 8003ad8:	2104      	movs	r1, #4
 8003ada:	4638      	mov	r0, r7
 8003adc:	f7ff ff62 	bl	80039a4 <__sfmoreglue>
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	6030      	str	r0, [r6, #0]
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d1d5      	bne.n	8003a94 <__sfp+0x24>
 8003ae8:	f7ff ff78 	bl	80039dc <__sfp_lock_release>
 8003aec:	230c      	movs	r3, #12
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	e7ee      	b.n	8003ad0 <__sfp+0x60>
 8003af2:	bf00      	nop
 8003af4:	08003f7c 	.word	0x08003f7c
 8003af8:	ffff0001 	.word	0xffff0001

08003afc <_fwalk_reent>:
 8003afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b00:	4606      	mov	r6, r0
 8003b02:	4688      	mov	r8, r1
 8003b04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b08:	2700      	movs	r7, #0
 8003b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8003b12:	d505      	bpl.n	8003b20 <_fwalk_reent+0x24>
 8003b14:	6824      	ldr	r4, [r4, #0]
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	d1f7      	bne.n	8003b0a <_fwalk_reent+0xe>
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b20:	89ab      	ldrh	r3, [r5, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d907      	bls.n	8003b36 <_fwalk_reent+0x3a>
 8003b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	d003      	beq.n	8003b36 <_fwalk_reent+0x3a>
 8003b2e:	4629      	mov	r1, r5
 8003b30:	4630      	mov	r0, r6
 8003b32:	47c0      	blx	r8
 8003b34:	4307      	orrs	r7, r0
 8003b36:	3568      	adds	r5, #104	; 0x68
 8003b38:	e7e9      	b.n	8003b0e <_fwalk_reent+0x12>

08003b3a <__retarget_lock_init_recursive>:
 8003b3a:	4770      	bx	lr

08003b3c <__retarget_lock_acquire_recursive>:
 8003b3c:	4770      	bx	lr

08003b3e <__retarget_lock_release_recursive>:
 8003b3e:	4770      	bx	lr

08003b40 <__swhatbuf_r>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	460e      	mov	r6, r1
 8003b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	b096      	sub	sp, #88	; 0x58
 8003b4c:	4614      	mov	r4, r2
 8003b4e:	461d      	mov	r5, r3
 8003b50:	da07      	bge.n	8003b62 <__swhatbuf_r+0x22>
 8003b52:	2300      	movs	r3, #0
 8003b54:	602b      	str	r3, [r5, #0]
 8003b56:	89b3      	ldrh	r3, [r6, #12]
 8003b58:	061a      	lsls	r2, r3, #24
 8003b5a:	d410      	bmi.n	8003b7e <__swhatbuf_r+0x3e>
 8003b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b60:	e00e      	b.n	8003b80 <__swhatbuf_r+0x40>
 8003b62:	466a      	mov	r2, sp
 8003b64:	f000 f970 	bl	8003e48 <_fstat_r>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	dbf2      	blt.n	8003b52 <__swhatbuf_r+0x12>
 8003b6c:	9a01      	ldr	r2, [sp, #4]
 8003b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b76:	425a      	negs	r2, r3
 8003b78:	415a      	adcs	r2, r3
 8003b7a:	602a      	str	r2, [r5, #0]
 8003b7c:	e7ee      	b.n	8003b5c <__swhatbuf_r+0x1c>
 8003b7e:	2340      	movs	r3, #64	; 0x40
 8003b80:	2000      	movs	r0, #0
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	b016      	add	sp, #88	; 0x58
 8003b86:	bd70      	pop	{r4, r5, r6, pc}

08003b88 <__smakebuf_r>:
 8003b88:	898b      	ldrh	r3, [r1, #12]
 8003b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b8c:	079d      	lsls	r5, r3, #30
 8003b8e:	4606      	mov	r6, r0
 8003b90:	460c      	mov	r4, r1
 8003b92:	d507      	bpl.n	8003ba4 <__smakebuf_r+0x1c>
 8003b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	6123      	str	r3, [r4, #16]
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	6163      	str	r3, [r4, #20]
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd70      	pop	{r4, r5, r6, pc}
 8003ba4:	ab01      	add	r3, sp, #4
 8003ba6:	466a      	mov	r2, sp
 8003ba8:	f7ff ffca 	bl	8003b40 <__swhatbuf_r>
 8003bac:	9900      	ldr	r1, [sp, #0]
 8003bae:	4605      	mov	r5, r0
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f000 f879 	bl	8003ca8 <_malloc_r>
 8003bb6:	b948      	cbnz	r0, 8003bcc <__smakebuf_r+0x44>
 8003bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bbc:	059a      	lsls	r2, r3, #22
 8003bbe:	d4ef      	bmi.n	8003ba0 <__smakebuf_r+0x18>
 8003bc0:	f023 0303 	bic.w	r3, r3, #3
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	81a3      	strh	r3, [r4, #12]
 8003bca:	e7e3      	b.n	8003b94 <__smakebuf_r+0xc>
 8003bcc:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <__smakebuf_r+0x7c>)
 8003bce:	62b3      	str	r3, [r6, #40]	; 0x28
 8003bd0:	89a3      	ldrh	r3, [r4, #12]
 8003bd2:	6020      	str	r0, [r4, #0]
 8003bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd8:	81a3      	strh	r3, [r4, #12]
 8003bda:	9b00      	ldr	r3, [sp, #0]
 8003bdc:	6163      	str	r3, [r4, #20]
 8003bde:	9b01      	ldr	r3, [sp, #4]
 8003be0:	6120      	str	r0, [r4, #16]
 8003be2:	b15b      	cbz	r3, 8003bfc <__smakebuf_r+0x74>
 8003be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003be8:	4630      	mov	r0, r6
 8003bea:	f000 f93f 	bl	8003e6c <_isatty_r>
 8003bee:	b128      	cbz	r0, 8003bfc <__smakebuf_r+0x74>
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	81a3      	strh	r3, [r4, #12]
 8003bfc:	89a0      	ldrh	r0, [r4, #12]
 8003bfe:	4305      	orrs	r5, r0
 8003c00:	81a5      	strh	r5, [r4, #12]
 8003c02:	e7cd      	b.n	8003ba0 <__smakebuf_r+0x18>
 8003c04:	08003999 	.word	0x08003999

08003c08 <_free_r>:
 8003c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c0a:	2900      	cmp	r1, #0
 8003c0c:	d048      	beq.n	8003ca0 <_free_r+0x98>
 8003c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c12:	9001      	str	r0, [sp, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f1a1 0404 	sub.w	r4, r1, #4
 8003c1a:	bfb8      	it	lt
 8003c1c:	18e4      	addlt	r4, r4, r3
 8003c1e:	f000 f947 	bl	8003eb0 <__malloc_lock>
 8003c22:	4a20      	ldr	r2, [pc, #128]	; (8003ca4 <_free_r+0x9c>)
 8003c24:	9801      	ldr	r0, [sp, #4]
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	4615      	mov	r5, r2
 8003c2a:	b933      	cbnz	r3, 8003c3a <_free_r+0x32>
 8003c2c:	6063      	str	r3, [r4, #4]
 8003c2e:	6014      	str	r4, [r2, #0]
 8003c30:	b003      	add	sp, #12
 8003c32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c36:	f000 b941 	b.w	8003ebc <__malloc_unlock>
 8003c3a:	42a3      	cmp	r3, r4
 8003c3c:	d90b      	bls.n	8003c56 <_free_r+0x4e>
 8003c3e:	6821      	ldr	r1, [r4, #0]
 8003c40:	1862      	adds	r2, r4, r1
 8003c42:	4293      	cmp	r3, r2
 8003c44:	bf04      	itt	eq
 8003c46:	681a      	ldreq	r2, [r3, #0]
 8003c48:	685b      	ldreq	r3, [r3, #4]
 8003c4a:	6063      	str	r3, [r4, #4]
 8003c4c:	bf04      	itt	eq
 8003c4e:	1852      	addeq	r2, r2, r1
 8003c50:	6022      	streq	r2, [r4, #0]
 8003c52:	602c      	str	r4, [r5, #0]
 8003c54:	e7ec      	b.n	8003c30 <_free_r+0x28>
 8003c56:	461a      	mov	r2, r3
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	b10b      	cbz	r3, 8003c60 <_free_r+0x58>
 8003c5c:	42a3      	cmp	r3, r4
 8003c5e:	d9fa      	bls.n	8003c56 <_free_r+0x4e>
 8003c60:	6811      	ldr	r1, [r2, #0]
 8003c62:	1855      	adds	r5, r2, r1
 8003c64:	42a5      	cmp	r5, r4
 8003c66:	d10b      	bne.n	8003c80 <_free_r+0x78>
 8003c68:	6824      	ldr	r4, [r4, #0]
 8003c6a:	4421      	add	r1, r4
 8003c6c:	1854      	adds	r4, r2, r1
 8003c6e:	42a3      	cmp	r3, r4
 8003c70:	6011      	str	r1, [r2, #0]
 8003c72:	d1dd      	bne.n	8003c30 <_free_r+0x28>
 8003c74:	681c      	ldr	r4, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	6053      	str	r3, [r2, #4]
 8003c7a:	4421      	add	r1, r4
 8003c7c:	6011      	str	r1, [r2, #0]
 8003c7e:	e7d7      	b.n	8003c30 <_free_r+0x28>
 8003c80:	d902      	bls.n	8003c88 <_free_r+0x80>
 8003c82:	230c      	movs	r3, #12
 8003c84:	6003      	str	r3, [r0, #0]
 8003c86:	e7d3      	b.n	8003c30 <_free_r+0x28>
 8003c88:	6825      	ldr	r5, [r4, #0]
 8003c8a:	1961      	adds	r1, r4, r5
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	bf04      	itt	eq
 8003c90:	6819      	ldreq	r1, [r3, #0]
 8003c92:	685b      	ldreq	r3, [r3, #4]
 8003c94:	6063      	str	r3, [r4, #4]
 8003c96:	bf04      	itt	eq
 8003c98:	1949      	addeq	r1, r1, r5
 8003c9a:	6021      	streq	r1, [r4, #0]
 8003c9c:	6054      	str	r4, [r2, #4]
 8003c9e:	e7c7      	b.n	8003c30 <_free_r+0x28>
 8003ca0:	b003      	add	sp, #12
 8003ca2:	bd30      	pop	{r4, r5, pc}
 8003ca4:	2000403c 	.word	0x2000403c

08003ca8 <_malloc_r>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	1ccd      	adds	r5, r1, #3
 8003cac:	f025 0503 	bic.w	r5, r5, #3
 8003cb0:	3508      	adds	r5, #8
 8003cb2:	2d0c      	cmp	r5, #12
 8003cb4:	bf38      	it	cc
 8003cb6:	250c      	movcc	r5, #12
 8003cb8:	2d00      	cmp	r5, #0
 8003cba:	4606      	mov	r6, r0
 8003cbc:	db01      	blt.n	8003cc2 <_malloc_r+0x1a>
 8003cbe:	42a9      	cmp	r1, r5
 8003cc0:	d903      	bls.n	8003cca <_malloc_r+0x22>
 8003cc2:	230c      	movs	r3, #12
 8003cc4:	6033      	str	r3, [r6, #0]
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cca:	f000 f8f1 	bl	8003eb0 <__malloc_lock>
 8003cce:	4921      	ldr	r1, [pc, #132]	; (8003d54 <_malloc_r+0xac>)
 8003cd0:	680a      	ldr	r2, [r1, #0]
 8003cd2:	4614      	mov	r4, r2
 8003cd4:	b99c      	cbnz	r4, 8003cfe <_malloc_r+0x56>
 8003cd6:	4f20      	ldr	r7, [pc, #128]	; (8003d58 <_malloc_r+0xb0>)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	b923      	cbnz	r3, 8003ce6 <_malloc_r+0x3e>
 8003cdc:	4621      	mov	r1, r4
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f000 f83c 	bl	8003d5c <_sbrk_r>
 8003ce4:	6038      	str	r0, [r7, #0]
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f000 f837 	bl	8003d5c <_sbrk_r>
 8003cee:	1c43      	adds	r3, r0, #1
 8003cf0:	d123      	bne.n	8003d3a <_malloc_r+0x92>
 8003cf2:	230c      	movs	r3, #12
 8003cf4:	6033      	str	r3, [r6, #0]
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f000 f8e0 	bl	8003ebc <__malloc_unlock>
 8003cfc:	e7e3      	b.n	8003cc6 <_malloc_r+0x1e>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	1b5b      	subs	r3, r3, r5
 8003d02:	d417      	bmi.n	8003d34 <_malloc_r+0x8c>
 8003d04:	2b0b      	cmp	r3, #11
 8003d06:	d903      	bls.n	8003d10 <_malloc_r+0x68>
 8003d08:	6023      	str	r3, [r4, #0]
 8003d0a:	441c      	add	r4, r3
 8003d0c:	6025      	str	r5, [r4, #0]
 8003d0e:	e004      	b.n	8003d1a <_malloc_r+0x72>
 8003d10:	6863      	ldr	r3, [r4, #4]
 8003d12:	42a2      	cmp	r2, r4
 8003d14:	bf0c      	ite	eq
 8003d16:	600b      	streq	r3, [r1, #0]
 8003d18:	6053      	strne	r3, [r2, #4]
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f000 f8ce 	bl	8003ebc <__malloc_unlock>
 8003d20:	f104 000b 	add.w	r0, r4, #11
 8003d24:	1d23      	adds	r3, r4, #4
 8003d26:	f020 0007 	bic.w	r0, r0, #7
 8003d2a:	1ac2      	subs	r2, r0, r3
 8003d2c:	d0cc      	beq.n	8003cc8 <_malloc_r+0x20>
 8003d2e:	1a1b      	subs	r3, r3, r0
 8003d30:	50a3      	str	r3, [r4, r2]
 8003d32:	e7c9      	b.n	8003cc8 <_malloc_r+0x20>
 8003d34:	4622      	mov	r2, r4
 8003d36:	6864      	ldr	r4, [r4, #4]
 8003d38:	e7cc      	b.n	8003cd4 <_malloc_r+0x2c>
 8003d3a:	1cc4      	adds	r4, r0, #3
 8003d3c:	f024 0403 	bic.w	r4, r4, #3
 8003d40:	42a0      	cmp	r0, r4
 8003d42:	d0e3      	beq.n	8003d0c <_malloc_r+0x64>
 8003d44:	1a21      	subs	r1, r4, r0
 8003d46:	4630      	mov	r0, r6
 8003d48:	f000 f808 	bl	8003d5c <_sbrk_r>
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d1dd      	bne.n	8003d0c <_malloc_r+0x64>
 8003d50:	e7cf      	b.n	8003cf2 <_malloc_r+0x4a>
 8003d52:	bf00      	nop
 8003d54:	2000403c 	.word	0x2000403c
 8003d58:	20004040 	.word	0x20004040

08003d5c <_sbrk_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4d06      	ldr	r5, [pc, #24]	; (8003d78 <_sbrk_r+0x1c>)
 8003d60:	2300      	movs	r3, #0
 8003d62:	4604      	mov	r4, r0
 8003d64:	4608      	mov	r0, r1
 8003d66:	602b      	str	r3, [r5, #0]
 8003d68:	f7fc ff7c 	bl	8000c64 <_sbrk>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	d102      	bne.n	8003d76 <_sbrk_r+0x1a>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	b103      	cbz	r3, 8003d76 <_sbrk_r+0x1a>
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
 8003d78:	200040a0 	.word	0x200040a0

08003d7c <__sread>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	460c      	mov	r4, r1
 8003d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d84:	f000 f8a0 	bl	8003ec8 <_read_r>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	bfab      	itete	ge
 8003d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003d90:	181b      	addge	r3, r3, r0
 8003d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d96:	bfac      	ite	ge
 8003d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d9a:	81a3      	strhlt	r3, [r4, #12]
 8003d9c:	bd10      	pop	{r4, pc}

08003d9e <__swrite>:
 8003d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da2:	461f      	mov	r7, r3
 8003da4:	898b      	ldrh	r3, [r1, #12]
 8003da6:	05db      	lsls	r3, r3, #23
 8003da8:	4605      	mov	r5, r0
 8003daa:	460c      	mov	r4, r1
 8003dac:	4616      	mov	r6, r2
 8003dae:	d505      	bpl.n	8003dbc <__swrite+0x1e>
 8003db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db4:	2302      	movs	r3, #2
 8003db6:	2200      	movs	r2, #0
 8003db8:	f000 f868 	bl	8003e8c <_lseek_r>
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	4632      	mov	r2, r6
 8003dca:	463b      	mov	r3, r7
 8003dcc:	4628      	mov	r0, r5
 8003dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd2:	f000 b817 	b.w	8003e04 <_write_r>

08003dd6 <__sseek>:
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	460c      	mov	r4, r1
 8003dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dde:	f000 f855 	bl	8003e8c <_lseek_r>
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	89a3      	ldrh	r3, [r4, #12]
 8003de6:	bf15      	itete	ne
 8003de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003df2:	81a3      	strheq	r3, [r4, #12]
 8003df4:	bf18      	it	ne
 8003df6:	81a3      	strhne	r3, [r4, #12]
 8003df8:	bd10      	pop	{r4, pc}

08003dfa <__sclose>:
 8003dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dfe:	f000 b813 	b.w	8003e28 <_close_r>
	...

08003e04 <_write_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d07      	ldr	r5, [pc, #28]	; (8003e24 <_write_r+0x20>)
 8003e08:	4604      	mov	r4, r0
 8003e0a:	4608      	mov	r0, r1
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	2200      	movs	r2, #0
 8003e10:	602a      	str	r2, [r5, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f7fc fed5 	bl	8000bc2 <_write>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_write_r+0x1e>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_write_r+0x1e>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	200040a0 	.word	0x200040a0

08003e28 <_close_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4d06      	ldr	r5, [pc, #24]	; (8003e44 <_close_r+0x1c>)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	4604      	mov	r4, r0
 8003e30:	4608      	mov	r0, r1
 8003e32:	602b      	str	r3, [r5, #0]
 8003e34:	f7fc fee1 	bl	8000bfa <_close>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_close_r+0x1a>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_close_r+0x1a>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	200040a0 	.word	0x200040a0

08003e48 <_fstat_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4d07      	ldr	r5, [pc, #28]	; (8003e68 <_fstat_r+0x20>)
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	4604      	mov	r4, r0
 8003e50:	4608      	mov	r0, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	602b      	str	r3, [r5, #0]
 8003e56:	f7fc fedc 	bl	8000c12 <_fstat>
 8003e5a:	1c43      	adds	r3, r0, #1
 8003e5c:	d102      	bne.n	8003e64 <_fstat_r+0x1c>
 8003e5e:	682b      	ldr	r3, [r5, #0]
 8003e60:	b103      	cbz	r3, 8003e64 <_fstat_r+0x1c>
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	bd38      	pop	{r3, r4, r5, pc}
 8003e66:	bf00      	nop
 8003e68:	200040a0 	.word	0x200040a0

08003e6c <_isatty_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4d06      	ldr	r5, [pc, #24]	; (8003e88 <_isatty_r+0x1c>)
 8003e70:	2300      	movs	r3, #0
 8003e72:	4604      	mov	r4, r0
 8003e74:	4608      	mov	r0, r1
 8003e76:	602b      	str	r3, [r5, #0]
 8003e78:	f7fc fedb 	bl	8000c32 <_isatty>
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d102      	bne.n	8003e86 <_isatty_r+0x1a>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	b103      	cbz	r3, 8003e86 <_isatty_r+0x1a>
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
 8003e88:	200040a0 	.word	0x200040a0

08003e8c <_lseek_r>:
 8003e8c:	b538      	push	{r3, r4, r5, lr}
 8003e8e:	4d07      	ldr	r5, [pc, #28]	; (8003eac <_lseek_r+0x20>)
 8003e90:	4604      	mov	r4, r0
 8003e92:	4608      	mov	r0, r1
 8003e94:	4611      	mov	r1, r2
 8003e96:	2200      	movs	r2, #0
 8003e98:	602a      	str	r2, [r5, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f7fc fed4 	bl	8000c48 <_lseek>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d102      	bne.n	8003eaa <_lseek_r+0x1e>
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	b103      	cbz	r3, 8003eaa <_lseek_r+0x1e>
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
 8003eac:	200040a0 	.word	0x200040a0

08003eb0 <__malloc_lock>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	; (8003eb8 <__malloc_lock+0x8>)
 8003eb2:	f7ff be43 	b.w	8003b3c <__retarget_lock_acquire_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	20004098 	.word	0x20004098

08003ebc <__malloc_unlock>:
 8003ebc:	4801      	ldr	r0, [pc, #4]	; (8003ec4 <__malloc_unlock+0x8>)
 8003ebe:	f7ff be3e 	b.w	8003b3e <__retarget_lock_release_recursive>
 8003ec2:	bf00      	nop
 8003ec4:	20004098 	.word	0x20004098

08003ec8 <_read_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4d07      	ldr	r5, [pc, #28]	; (8003ee8 <_read_r+0x20>)
 8003ecc:	4604      	mov	r4, r0
 8003ece:	4608      	mov	r0, r1
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	602a      	str	r2, [r5, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f7fc fe56 	bl	8000b88 <_read>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_read_r+0x1e>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_read_r+0x1e>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	200040a0 	.word	0x200040a0

08003eec <_init>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr

08003ef8 <_fini>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr
