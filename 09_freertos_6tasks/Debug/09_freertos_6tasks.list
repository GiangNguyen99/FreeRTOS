
09_freertos_6tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006efc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800709c  0800709c  0001709c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007338  08007338  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007338  08007338  00017338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007340  08007340  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007344  08007344  00017344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08007348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000138ac  200000a0  080073e8  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001394c  080073e8  0002394c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001793d  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003202  00000000  00000000  00037a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0003ac10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  0003bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019289  00000000  00000000  0003cde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001473b  00000000  00000000  00056071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a34f  00000000  00000000  0006a7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104afb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca8  00000000  00000000  00104b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007084 	.word	0x08007084

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	08007084 	.word	0x08007084

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20013894 	.word	0x20013894
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800061e:	f000 fc67 	bl	8000ef0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000622:	f000 f8bb 	bl	800079c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000626:	f000 f923 	bl	8000870 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	//Enable the CYCCNT counter.
	DWT_CTRL |= (1 << 0);
 800062a:	4b46      	ldr	r3, [pc, #280]	; (8000744 <main+0x12c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a45      	ldr	r2, [pc, #276]	; (8000744 <main+0x12c>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 8000636:	f003 fbed 	bl	8003e14 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800063a:	f005 fa3f 	bl	8005abc <SEGGER_SYSVIEW_Start>

	SEGGER_UART_init(500000);
 800063e:	4842      	ldr	r0, [pc, #264]	; (8000748 <main+0x130>)
 8000640:	f003 fdb6 	bl	80041b0 <SEGGER_UART_init>

	status = xTaskCreate(handle_led_green, "led_green", 200,
 8000644:	4b41      	ldr	r3, [pc, #260]	; (800074c <main+0x134>)
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	2303      	movs	r3, #3
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	4b40      	ldr	r3, [pc, #256]	; (8000750 <main+0x138>)
 800064e:	22c8      	movs	r2, #200	; 0xc8
 8000650:	4940      	ldr	r1, [pc, #256]	; (8000754 <main+0x13c>)
 8000652:	4841      	ldr	r0, [pc, #260]	; (8000758 <main+0x140>)
 8000654:	f001 ff4e 	bl	80024f4 <xTaskCreate>
 8000658:	6178      	str	r0, [r7, #20]
			"this is task led green", 3, &led_green);
	configASSERT(status == pdPASS);
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d00a      	beq.n	8000676 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000664:	f383 8811 	msr	BASEPRI, r3
 8000668:	f3bf 8f6f 	isb	sy
 800066c:	f3bf 8f4f 	dsb	sy
 8000670:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000672:	bf00      	nop
 8000674:	e7fe      	b.n	8000674 <main+0x5c>
	status = xTaskCreate(handle_led_orange, "led_orange", 200,
 8000676:	4b39      	ldr	r3, [pc, #228]	; (800075c <main+0x144>)
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2303      	movs	r3, #3
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4b38      	ldr	r3, [pc, #224]	; (8000760 <main+0x148>)
 8000680:	22c8      	movs	r2, #200	; 0xc8
 8000682:	4938      	ldr	r1, [pc, #224]	; (8000764 <main+0x14c>)
 8000684:	4838      	ldr	r0, [pc, #224]	; (8000768 <main+0x150>)
 8000686:	f001 ff35 	bl	80024f4 <xTaskCreate>
 800068a:	6178      	str	r0, [r7, #20]
			"this is task led orange", 3, &led_orange);
	configASSERT(status == pdPASS);
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d00a      	beq.n	80006a8 <main+0x90>
        __asm volatile
 8000692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000696:	f383 8811 	msr	BASEPRI, r3
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	f3bf 8f4f 	dsb	sy
 80006a2:	60fb      	str	r3, [r7, #12]
    }
 80006a4:	bf00      	nop
 80006a6:	e7fe      	b.n	80006a6 <main+0x8e>
	status = xTaskCreate(handle_led_red, "led_red", 200, "this is task led red",
 80006a8:	4b30      	ldr	r3, [pc, #192]	; (800076c <main+0x154>)
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	2303      	movs	r3, #3
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <main+0x158>)
 80006b2:	22c8      	movs	r2, #200	; 0xc8
 80006b4:	492f      	ldr	r1, [pc, #188]	; (8000774 <main+0x15c>)
 80006b6:	4830      	ldr	r0, [pc, #192]	; (8000778 <main+0x160>)
 80006b8:	f001 ff1c 	bl	80024f4 <xTaskCreate>
 80006bc:	6178      	str	r0, [r7, #20]
			3, &led_red);
	configASSERT(status == pdPASS);
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d00a      	beq.n	80006da <main+0xc2>
        __asm volatile
 80006c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c8:	f383 8811 	msr	BASEPRI, r3
 80006cc:	f3bf 8f6f 	isb	sy
 80006d0:	f3bf 8f4f 	dsb	sy
 80006d4:	60bb      	str	r3, [r7, #8]
    }
 80006d6:	bf00      	nop
 80006d8:	e7fe      	b.n	80006d8 <main+0xc0>
	status = xTaskCreate(handle_led_blue, "led_blue", 200,
 80006da:	4b28      	ldr	r3, [pc, #160]	; (800077c <main+0x164>)
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2303      	movs	r3, #3
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <main+0x168>)
 80006e4:	22c8      	movs	r2, #200	; 0xc8
 80006e6:	4927      	ldr	r1, [pc, #156]	; (8000784 <main+0x16c>)
 80006e8:	4827      	ldr	r0, [pc, #156]	; (8000788 <main+0x170>)
 80006ea:	f001 ff03 	bl	80024f4 <xTaskCreate>
 80006ee:	6178      	str	r0, [r7, #20]
			"this is task led blue", 3, &led_blue);
	configASSERT(status == pdPASS);
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d00a      	beq.n	800070c <main+0xf4>
        __asm volatile
 80006f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006fa:	f383 8811 	msr	BASEPRI, r3
 80006fe:	f3bf 8f6f 	isb	sy
 8000702:	f3bf 8f4f 	dsb	sy
 8000706:	607b      	str	r3, [r7, #4]
    }
 8000708:	bf00      	nop
 800070a:	e7fe      	b.n	800070a <main+0xf2>

	status = xTaskCreate(handle_keypad, "keypad_task", 200,
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <main+0x174>)
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	2302      	movs	r3, #2
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <main+0x178>)
 8000716:	22c8      	movs	r2, #200	; 0xc8
 8000718:	491e      	ldr	r1, [pc, #120]	; (8000794 <main+0x17c>)
 800071a:	481f      	ldr	r0, [pc, #124]	; (8000798 <main+0x180>)
 800071c:	f001 feea 	bl	80024f4 <xTaskCreate>
 8000720:	6178      	str	r0, [r7, #20]
			"this is task keypad", 2, &keypad);
	configASSERT(status == pdPASS);
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d00a      	beq.n	800073e <main+0x126>
        __asm volatile
 8000728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800072c:	f383 8811 	msr	BASEPRI, r3
 8000730:	f3bf 8f6f 	isb	sy
 8000734:	f3bf 8f4f 	dsb	sy
 8000738:	603b      	str	r3, [r7, #0]
    }
 800073a:	bf00      	nop
 800073c:	e7fe      	b.n	800073c <main+0x124>


	vTaskStartScheduler();
 800073e:	f002 f875 	bl	800282c <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000742:	e7fe      	b.n	8000742 <main+0x12a>
 8000744:	e0001000 	.word	0xe0001000
 8000748:	0007a120 	.word	0x0007a120
 800074c:	2001383c 	.word	0x2001383c
 8000750:	0800709c 	.word	0x0800709c
 8000754:	080070b4 	.word	0x080070b4
 8000758:	08000979 	.word	0x08000979
 800075c:	20013830 	.word	0x20013830
 8000760:	080070c0 	.word	0x080070c0
 8000764:	080070d8 	.word	0x080070d8
 8000768:	080009d5 	.word	0x080009d5
 800076c:	20013838 	.word	0x20013838
 8000770:	080070e4 	.word	0x080070e4
 8000774:	080070fc 	.word	0x080070fc
 8000778:	08000a31 	.word	0x08000a31
 800077c:	20013844 	.word	0x20013844
 8000780:	08007104 	.word	0x08007104
 8000784:	0800711c 	.word	0x0800711c
 8000788:	08000a8d 	.word	0x08000a8d
 800078c:	20013840 	.word	0x20013840
 8000790:	08007128 	.word	0x08007128
 8000794:	0800713c 	.word	0x0800713c
 8000798:	08000b41 	.word	0x08000b41

0800079c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	; 0x50
 80007a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f006 f82e 	bl	800680c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	4b28      	ldr	r3, [pc, #160]	; (8000868 <SystemClock_Config+0xcc>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	4a27      	ldr	r2, [pc, #156]	; (8000868 <SystemClock_Config+0xcc>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	; 0x40
 80007d0:	4b25      	ldr	r3, [pc, #148]	; (8000868 <SystemClock_Config+0xcc>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <SystemClock_Config+0xd0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a21      	ldr	r2, [pc, #132]	; (800086c <SystemClock_Config+0xd0>)
 80007e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <SystemClock_Config+0xd0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800080c:	2308      	movs	r3, #8
 800080e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 200;
 8000810:	23c8      	movs	r3, #200	; 0xc8
 8000812:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000814:	2304      	movs	r3, #4
 8000816:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8000818:	2308      	movs	r3, #8
 800081a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fea1 	bl	8001568 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x94>
		Error_Handler();
 800082c:	f000 fa3c 	bl	8000ca8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2302      	movs	r3, #2
 8000836:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2103      	movs	r1, #3
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f902 	bl	8001a58 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xc2>
		Error_Handler();
 800085a:	f000 fa25 	bl	8000ca8 <Error_Handler>
	}
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	; 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_GPIO_Init+0xfc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a37      	ldr	r2, [pc, #220]	; (800096c <MX_GPIO_Init+0xfc>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b35      	ldr	r3, [pc, #212]	; (800096c <MX_GPIO_Init+0xfc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_GPIO_Init+0xfc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a30      	ldr	r2, [pc, #192]	; (800096c <MX_GPIO_Init+0xfc>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <MX_GPIO_Init+0xfc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b2a      	ldr	r3, [pc, #168]	; (800096c <MX_GPIO_Init+0xfc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a29      	ldr	r2, [pc, #164]	; (800096c <MX_GPIO_Init+0xfc>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <MX_GPIO_Init+0xfc>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80008da:	2200      	movs	r2, #0
 80008dc:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 80008e0:	4823      	ldr	r0, [pc, #140]	; (8000970 <MX_GPIO_Init+0x100>)
 80008e2:	f000 fde9 	bl	80014b8 <HAL_GPIO_WritePin>
			LD3_Pin | LD4_Pin | LD5_Pin | LD6_Pin | ROW_0_Pin | ROW_1_Pin
					| ROW_2_Pin | ROW_3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : BTN_Pin */
	GPIO_InitStruct.Pin = BTN_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008f0:	2302      	movs	r3, #2
 80008f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	481e      	ldr	r0, [pc, #120]	; (8000974 <MX_GPIO_Init+0x104>)
 80008fc:	f000 fc40 	bl	8001180 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin | LD5_Pin | LD6_Pin;
 8000900:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000904:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090e:	2302      	movs	r3, #2
 8000910:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	4815      	ldr	r0, [pc, #84]	; (8000970 <MX_GPIO_Init+0x100>)
 800091a:	f000 fc31 	bl	8001180 <HAL_GPIO_Init>

	/*Configure GPIO pins : COL_0_Pin COL_1_Pin COL_2_Pin COL_3_Pin */
	GPIO_InitStruct.Pin = COL_0_Pin | COL_1_Pin | COL_2_Pin | COL_3_Pin;
 800091e:	230f      	movs	r3, #15
 8000920:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000926:	2302      	movs	r3, #2
 8000928:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	480f      	ldr	r0, [pc, #60]	; (8000970 <MX_GPIO_Init+0x100>)
 8000932:	f000 fc25 	bl	8001180 <HAL_GPIO_Init>

	/*Configure GPIO pins : ROW_0_Pin ROW_1_Pin ROW_2_Pin ROW_3_Pin */
	GPIO_InitStruct.Pin = ROW_0_Pin | ROW_1_Pin | ROW_2_Pin | ROW_3_Pin;
 8000936:	23f0      	movs	r3, #240	; 0xf0
 8000938:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800093e:	2302      	movs	r3, #2
 8000940:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <MX_GPIO_Init+0x100>)
 800094e:	f000 fc17 	bl	8001180 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2107      	movs	r1, #7
 8000956:	2006      	movs	r0, #6
 8000958:	f000 fbe8 	bl	800112c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800095c:	2006      	movs	r0, #6
 800095e:	f000 fc01 	bl	8001164 <HAL_NVIC_EnableIRQ>

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40020c00 	.word	0x40020c00
 8000974:	40020000 	.word	0x40020000

08000978 <handle_led_green>:

/* USER CODE BEGIN 4 */
void handle_led_green(void *parameters) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b09e      	sub	sp, #120	; 0x78
 800097c:	af02      	add	r7, sp, #8
 800097e:	6078      	str	r0, [r7, #4]
	char msg[100];
	BaseType_t notify_status = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	66fb      	str	r3, [r7, #108]	; 0x6c

	while (1) {
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000984:	f107 0008 	add.w	r0, r7, #8
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <handle_led_green+0x50>)
 800098c:	2164      	movs	r1, #100	; 0x64
 800098e:	f005 ff45 	bl	800681c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4618      	mov	r0, r3
 8000998:	f005 fe02 	bl	80065a0 <SEGGER_SYSVIEW_PrintfTarget>

		notify_status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2000      	movs	r0, #0
 80009aa:	f002 fa33 	bl	8002e14 <xTaskGenericNotifyWait>
 80009ae:	66f8      	str	r0, [r7, #108]	; 0x6c
		if (notify_status == pdTRUE) {
 80009b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d1e6      	bne.n	8000984 <handle_led_green+0xc>
//			next_task_handle = led_orange;
			SEGGER_SYSVIEW_PrintfTarget("execute toggle led_green");
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <handle_led_green+0x54>)
 80009b8:	f005 fdf2 	bl	80065a0 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80009bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <handle_led_green+0x58>)
 80009c2:	f000 fd92 	bl	80014ea <HAL_GPIO_TogglePin>
		snprintf(msg, 100, "%s\n", (char*) parameters);
 80009c6:	e7dd      	b.n	8000984 <handle_led_green+0xc>
 80009c8:	08007148 	.word	0x08007148
 80009cc:	0800714c 	.word	0x0800714c
 80009d0:	40020c00 	.word	0x40020c00

080009d4 <handle_led_orange>:
		}
	}
}

void handle_led_orange(void *parameters) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09e      	sub	sp, #120	; 0x78
 80009d8:	af02      	add	r7, sp, #8
 80009da:	6078      	str	r0, [r7, #4]
	char msg[100];
	BaseType_t notify_status = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	66fb      	str	r3, [r7, #108]	; 0x6c

	while (1) {
		snprintf(msg, 100, "%s\n", (char*) parameters);
 80009e0:	f107 0008 	add.w	r0, r7, #8
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <handle_led_orange+0x50>)
 80009e8:	2164      	movs	r1, #100	; 0x64
 80009ea:	f005 ff17 	bl	800681c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	4618      	mov	r0, r3
 80009f4:	f005 fdd4 	bl	80065a0 <SEGGER_SYSVIEW_PrintfTarget>

		notify_status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2300      	movs	r3, #0
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	2000      	movs	r0, #0
 8000a06:	f002 fa05 	bl	8002e14 <xTaskGenericNotifyWait>
 8000a0a:	66f8      	str	r0, [r7, #108]	; 0x6c
		if (notify_status == pdTRUE) {
 8000a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d1e6      	bne.n	80009e0 <handle_led_orange+0xc>
//			next_task_handle = led_red;
			SEGGER_SYSVIEW_PrintfTarget("execute toggle led_orange");
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <handle_led_orange+0x54>)
 8000a14:	f005 fdc4 	bl	80065a0 <SEGGER_SYSVIEW_PrintfTarget>

			HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000a18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <handle_led_orange+0x58>)
 8000a1e:	f000 fd64 	bl	80014ea <HAL_GPIO_TogglePin>
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000a22:	e7dd      	b.n	80009e0 <handle_led_orange+0xc>
 8000a24:	08007148 	.word	0x08007148
 8000a28:	08007168 	.word	0x08007168
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <handle_led_red>:
		}
	}
}

void handle_led_red(void *parameters) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b09e      	sub	sp, #120	; 0x78
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	6078      	str	r0, [r7, #4]
	char msg[100];
	BaseType_t notify_status = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	66fb      	str	r3, [r7, #108]	; 0x6c

	while (1) {
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000a3c:	f107 0008 	add.w	r0, r7, #8
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <handle_led_red+0x50>)
 8000a44:	2164      	movs	r1, #100	; 0x64
 8000a46:	f005 fee9 	bl	800681c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f005 fda6 	bl	80065a0 <SEGGER_SYSVIEW_PrintfTarget>
		notify_status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2000      	movs	r0, #0
 8000a62:	f002 f9d7 	bl	8002e14 <xTaskGenericNotifyWait>
 8000a66:	66f8      	str	r0, [r7, #108]	; 0x6c
		if (notify_status == pdTRUE) {
 8000a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d1e6      	bne.n	8000a3c <handle_led_red+0xc>
//			next_task_handle = led_blue;
			SEGGER_SYSVIEW_PrintfTarget("execute toggle led_red");
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <handle_led_red+0x54>)
 8000a70:	f005 fd96 	bl	80065a0 <SEGGER_SYSVIEW_PrintfTarget>

			HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <handle_led_red+0x58>)
 8000a7a:	f000 fd36 	bl	80014ea <HAL_GPIO_TogglePin>
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000a7e:	e7dd      	b.n	8000a3c <handle_led_red+0xc>
 8000a80:	08007148 	.word	0x08007148
 8000a84:	08007184 	.word	0x08007184
 8000a88:	40020c00 	.word	0x40020c00

08000a8c <handle_led_blue>:
		}
	}
}
void handle_led_blue(void *parameters) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09e      	sub	sp, #120	; 0x78
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	6078      	str	r0, [r7, #4]
	char msg[100];
	BaseType_t notify_status = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	66fb      	str	r3, [r7, #108]	; 0x6c

	while (1) {
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000a98:	f107 0008 	add.w	r0, r7, #8
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <handle_led_blue+0x50>)
 8000aa0:	2164      	movs	r1, #100	; 0x64
 8000aa2:	f005 febb 	bl	800681c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f005 fd78 	bl	80065a0 <SEGGER_SYSVIEW_PrintfTarget>

		notify_status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f002 f9a9 	bl	8002e14 <xTaskGenericNotifyWait>
 8000ac2:	66f8      	str	r0, [r7, #108]	; 0x6c
		if (notify_status == pdTRUE) {
 8000ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d1e6      	bne.n	8000a98 <handle_led_blue+0xc>
//			next_task_handle = led_green;
			SEGGER_SYSVIEW_PrintfTarget("execute toggle led_blue");
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <handle_led_blue+0x54>)
 8000acc:	f005 fd68 	bl	80065a0 <SEGGER_SYSVIEW_PrintfTarget>

			HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8000ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <handle_led_blue+0x58>)
 8000ad6:	f000 fd08 	bl	80014ea <HAL_GPIO_TogglePin>
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000ada:	e7dd      	b.n	8000a98 <handle_led_blue+0xc>
 8000adc:	08007148 	.word	0x08007148
 8000ae0:	0800719c 	.word	0x0800719c
 8000ae4:	40020c00 	.word	0x40020c00

08000ae8 <btn_user>:
		}
	}
}

void btn_user(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 8000af2:	f005 faad 	bl	8006050 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle, 0, eNoAction,
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <btn_user+0x50>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	2300      	movs	r3, #0
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2300      	movs	r3, #0
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	f002 fb0a 	bl	8003120 <xTaskGenericNotifyFromISR>
			&pxHigherPriorityTaskWoken);

	/* once the ISR exits, the below macro makes higher priority task which got unblocked to resume on the CPU */
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00a      	beq.n	8000b28 <btn_user+0x40>
 8000b12:	f005 fafb 	bl	800610c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <btn_user+0x54>)
 8000b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	f3bf 8f4f 	dsb	sy
 8000b22:	f3bf 8f6f 	isb	sy
 8000b26:	e001      	b.n	8000b2c <btn_user+0x44>
 8000b28:	f005 fad4 	bl	80060d4 <SEGGER_SYSVIEW_RecordExitISR>

	traceISR_EXIT();
 8000b2c:	f005 fad2 	bl	80060d4 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20013834 	.word	0x20013834
 8000b3c:	e000ed04 	.word	0xe000ed04

08000b40 <handle_keypad>:

void handle_keypad(void *parameters) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	6078      	str	r0, [r7, #4]
	char key;

	while (1) {
		key = keypad_read();
 8000b48:	f005 fdc8 	bl	80066dc <keypad_read>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	73fb      	strb	r3, [r7, #15]
		switch (key) {
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	3b30      	subs	r3, #48	; 0x30
 8000b54:	2b09      	cmp	r3, #9
 8000b56:	d87b      	bhi.n	8000c50 <handle_keypad+0x110>
 8000b58:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <handle_keypad+0x20>)
 8000b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5e:	bf00      	nop
 8000b60:	08000c51 	.word	0x08000c51
 8000b64:	08000b89 	.word	0x08000b89
 8000b68:	08000bbb 	.word	0x08000bbb
 8000b6c:	08000bed 	.word	0x08000bed
 8000b70:	08000c1f 	.word	0x08000c1f
 8000b74:	08000c51 	.word	0x08000c51
 8000b78:	08000c51 	.word	0x08000c51
 8000b7c:	08000c51 	.word	0x08000c51
 8000b80:	08000c51 	.word	0x08000c51
 8000b84:	08000c51 	.word	0x08000c51
		case '0':

			break;
		case '1':
			SEGGER_SYSVIEW_PrintfTarget("toggle led green ");
 8000b88:	4834      	ldr	r0, [pc, #208]	; (8000c5c <handle_keypad+0x11c>)
 8000b8a:	f005 fd09 	bl	80065a0 <SEGGER_SYSVIEW_PrintfTarget>
			next_task_handle = led_green;
 8000b8e:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <handle_keypad+0x120>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a34      	ldr	r2, [pc, #208]	; (8000c64 <handle_keypad+0x124>)
 8000b94:	6013      	str	r3, [r2, #0]
			xTaskNotify(next_task_handle, 0, eNoAction);
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <handle_keypad+0x124>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f002 f9c4 	bl	8002f30 <xTaskGenericNotify>
			taskYIELD()
 8000ba8:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <handle_keypad+0x128>)
 8000baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	f3bf 8f4f 	dsb	sy
 8000bb4:	f3bf 8f6f 	isb	sy
			;

			break;
 8000bb8:	e04b      	b.n	8000c52 <handle_keypad+0x112>
		case '2':
			SEGGER_SYSVIEW_PrintfTarget("toggle led_orange ");
 8000bba:	482c      	ldr	r0, [pc, #176]	; (8000c6c <handle_keypad+0x12c>)
 8000bbc:	f005 fcf0 	bl	80065a0 <SEGGER_SYSVIEW_PrintfTarget>

			next_task_handle = led_orange;
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <handle_keypad+0x130>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <handle_keypad+0x124>)
 8000bc6:	6013      	str	r3, [r2, #0]
			xTaskNotify(next_task_handle, 0, eNoAction);
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <handle_keypad+0x124>)
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f002 f9ab 	bl	8002f30 <xTaskGenericNotify>
			taskYIELD()
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <handle_keypad+0x128>)
 8000bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	f3bf 8f4f 	dsb	sy
 8000be6:	f3bf 8f6f 	isb	sy
			;


			break;
 8000bea:	e032      	b.n	8000c52 <handle_keypad+0x112>
		case '3':
			SEGGER_SYSVIEW_PrintfTarget("toggle led_red ");
 8000bec:	4821      	ldr	r0, [pc, #132]	; (8000c74 <handle_keypad+0x134>)
 8000bee:	f005 fcd7 	bl	80065a0 <SEGGER_SYSVIEW_PrintfTarget>
			next_task_handle = led_red;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <handle_keypad+0x138>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <handle_keypad+0x124>)
 8000bf8:	6013      	str	r3, [r2, #0]
			xTaskNotify(next_task_handle, 0, eNoAction);
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <handle_keypad+0x124>)
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2300      	movs	r3, #0
 8000c04:	2200      	movs	r2, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	f002 f992 	bl	8002f30 <xTaskGenericNotify>
			taskYIELD()
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <handle_keypad+0x128>)
 8000c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	f3bf 8f4f 	dsb	sy
 8000c18:	f3bf 8f6f 	isb	sy
			;
			break;
 8000c1c:	e019      	b.n	8000c52 <handle_keypad+0x112>
		case '4':
			SEGGER_SYSVIEW_PrintfTarget("toggle led_blue ");
 8000c1e:	4817      	ldr	r0, [pc, #92]	; (8000c7c <handle_keypad+0x13c>)
 8000c20:	f005 fcbe 	bl	80065a0 <SEGGER_SYSVIEW_PrintfTarget>
			next_task_handle = led_blue;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <handle_keypad+0x140>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <handle_keypad+0x124>)
 8000c2a:	6013      	str	r3, [r2, #0]
			xTaskNotify(next_task_handle, 0, eNoAction);
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <handle_keypad+0x124>)
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	2300      	movs	r3, #0
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2300      	movs	r3, #0
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f002 f979 	bl	8002f30 <xTaskGenericNotify>
			taskYIELD()
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <handle_keypad+0x128>)
 8000c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	f3bf 8f4f 	dsb	sy
 8000c4a:	f3bf 8f6f 	isb	sy
			;
			break;
 8000c4e:	e000      	b.n	8000c52 <handle_keypad+0x112>
		case '8':
			break;
		case '9':
			break;
		default:
			break;
 8000c50:	bf00      	nop
		}
		vTaskDelay(pdMS_TO_TICKS(10));
 8000c52:	200a      	movs	r0, #10
 8000c54:	f001 fdb2 	bl	80027bc <vTaskDelay>
		key = keypad_read();
 8000c58:	e776      	b.n	8000b48 <handle_keypad+0x8>
 8000c5a:	bf00      	nop
 8000c5c:	080071b4 	.word	0x080071b4
 8000c60:	2001383c 	.word	0x2001383c
 8000c64:	20013834 	.word	0x20013834
 8000c68:	e000ed04 	.word	0xe000ed04
 8000c6c:	080071c8 	.word	0x080071c8
 8000c70:	20013830 	.word	0x20013830
 8000c74:	080071dc 	.word	0x080071dc
 8000c78:	20013838 	.word	0x20013838
 8000c7c:	080071ec 	.word	0x080071ec
 8000c80:	20013844 	.word	0x20013844

08000c84 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d101      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c96:	f000 f94d 	bl	8000f34 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40000c00 	.word	0x40000c00

08000ca8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000cf2:	f002 fcd9 	bl	80036a8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	2032      	movs	r0, #50	; 0x32
 8000d1a:	f000 fa07 	bl	800112c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d1e:	2032      	movs	r0, #50	; 0x32
 8000d20:	f000 fa20 	bl	8001164 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <HAL_InitTick+0xa4>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <HAL_InitTick+0xa4>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6413      	str	r3, [r2, #64]	; 0x40
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_InitTick+0xa4>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d40:	f107 0210 	add.w	r2, r7, #16
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 f86c 	bl	8001e28 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d50:	f001 f856 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 8000d54:	4603      	mov	r3, r0
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5c:	4a13      	ldr	r2, [pc, #76]	; (8000dac <HAL_InitTick+0xa8>)
 8000d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d62:	0c9b      	lsrs	r3, r3, #18
 8000d64:	3b01      	subs	r3, #1
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_InitTick+0xac>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <HAL_InitTick+0xb0>)
 8000d6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_InitTick+0xac>)
 8000d70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d74:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_InitTick+0xac>)
 8000d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_InitTick+0xac>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <HAL_InitTick+0xac>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <HAL_InitTick+0xac>)
 8000d8a:	f001 f87f 	bl	8001e8c <HAL_TIM_Base_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d104      	bne.n	8000d9e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000d94:	4806      	ldr	r0, [pc, #24]	; (8000db0 <HAL_InitTick+0xac>)
 8000d96:	f001 f8d3 	bl	8001f40 <HAL_TIM_Base_Start_IT>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3730      	adds	r7, #48	; 0x30
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40023800 	.word	0x40023800
 8000dac:	431bde83 	.word	0x431bde83
 8000db0:	20013848 	.word	0x20013848
 8000db4:	40000c00 	.word	0x40000c00

08000db8 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000dc8:	e7fe      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dca <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000dce:	e7fe      	b.n	8000dce <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000dd4:	e7fe      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd6 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */
	btn_user();
 8000de8:	f7ff fe7e 	bl	8000ae8 <btn_user>

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f000 fb97 	bl	8001520 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */
	/* USER CODE END EXTI0_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <TIM5_IRQHandler>:

/**
 * @brief This function handles TIM5 global interrupt.
 */
void TIM5_IRQHandler(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM5_IRQn 0 */

	/* USER CODE END TIM5_IRQn 0 */
	HAL_TIM_IRQHandler(&htim5);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <TIM5_IRQHandler+0x10>)
 8000dfe:	f001 f901 	bl	8002004 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM5_IRQn 1 */

	/* USER CODE END TIM5_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20013848 	.word	0x20013848

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f005 fca0 	bl	8006780 <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20020000 	.word	0x20020000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	200000bc 	.word	0x200000bc
 8000e74:	20013950 	.word	0x20013950

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <SystemInit+0x20>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <SystemInit+0x20>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea2:	490e      	ldr	r1, [pc, #56]	; (8000edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ec6:	f7ff ffd7 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f005 fc5f 	bl	800678c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fba3 	bl	8000618 <main>
  bx  lr    
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000ee0:	08007348 	.word	0x08007348
  ldr r2, =_sbss
 8000ee4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000ee8:	2001394c 	.word	0x2001394c

08000eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_Init+0x40>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_Init+0x40>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x40>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f8fc 	bl	8001116 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f7ff fef0 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fec6 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20013890 	.word	0x20013890

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20013890 	.word	0x20013890

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff4c 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113e:	f7ff ff61 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001142:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	68b9      	ldr	r1, [r7, #8]
 8001148:	6978      	ldr	r0, [r7, #20]
 800114a:	f7ff ffb1 	bl	80010b0 <NVIC_EncodePriority>
 800114e:	4602      	mov	r2, r0
 8001150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff80 	bl	800105c <__NVIC_SetPriority>
}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff54 	bl	8001020 <__NVIC_EnableIRQ>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e159      	b.n	8001450 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8148 	bne.w	800144a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d005      	beq.n	80011d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d130      	bne.n	8001234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 0201 	and.w	r2, r3, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b03      	cmp	r3, #3
 800123e:	d017      	beq.n	8001270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d123      	bne.n	80012c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0203 	and.w	r2, r3, #3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80a2 	beq.w	800144a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b57      	ldr	r3, [pc, #348]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a56      	ldr	r2, [pc, #344]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b54      	ldr	r3, [pc, #336]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001322:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_GPIO_Init+0x2ec>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a49      	ldr	r2, [pc, #292]	; (8001470 <HAL_GPIO_Init+0x2f0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x202>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a48      	ldr	r2, [pc, #288]	; (8001474 <HAL_GPIO_Init+0x2f4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x1fe>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a47      	ldr	r2, [pc, #284]	; (8001478 <HAL_GPIO_Init+0x2f8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x1fa>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a46      	ldr	r2, [pc, #280]	; (800147c <HAL_GPIO_Init+0x2fc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x1f6>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a45      	ldr	r2, [pc, #276]	; (8001480 <HAL_GPIO_Init+0x300>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x1f2>
 800136e:	2304      	movs	r3, #4
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001372:	2307      	movs	r3, #7
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x204>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x204>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001382:	2300      	movs	r3, #0
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4935      	ldr	r1, [pc, #212]	; (800146c <HAL_GPIO_Init+0x2ec>)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c6:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f0:	4a24      	ldr	r2, [pc, #144]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141a:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <HAL_GPIO_Init+0x304>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001444:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	f67f aea2 	bls.w	800119c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e001      	b.n	80014aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d4:	e003      	b.n	80014de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	619a      	str	r2, [r3, #24]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b085      	sub	sp, #20
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014fc:	887a      	ldrh	r2, [r7, #2]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	041a      	lsls	r2, r3, #16
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	43d9      	mvns	r1, r3
 8001508:	887b      	ldrh	r3, [r7, #2]
 800150a:	400b      	ands	r3, r1
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	619a      	str	r2, [r3, #24]
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f806 	bl	8001550 <HAL_GPIO_EXTI_Callback>
  }
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e264      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d075      	beq.n	8001672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001586:	4ba3      	ldr	r3, [pc, #652]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b04      	cmp	r3, #4
 8001590:	d00c      	beq.n	80015ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001592:	4ba0      	ldr	r3, [pc, #640]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800159a:	2b08      	cmp	r3, #8
 800159c:	d112      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159e:	4b9d      	ldr	r3, [pc, #628]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015aa:	d10b      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	4b99      	ldr	r3, [pc, #612]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d05b      	beq.n	8001670 <HAL_RCC_OscConfig+0x108>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d157      	bne.n	8001670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e23f      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d106      	bne.n	80015dc <HAL_RCC_OscConfig+0x74>
 80015ce:	4b91      	ldr	r3, [pc, #580]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a90      	ldr	r2, [pc, #576]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e01d      	b.n	8001618 <HAL_RCC_OscConfig+0xb0>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x98>
 80015e6:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a8a      	ldr	r2, [pc, #552]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b88      	ldr	r3, [pc, #544]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a87      	ldr	r2, [pc, #540]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0xb0>
 8001600:	4b84      	ldr	r3, [pc, #528]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a83      	ldr	r2, [pc, #524]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b81      	ldr	r3, [pc, #516]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a80      	ldr	r2, [pc, #512]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fc9c 	bl	8000f5c <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fc98 	bl	8000f5c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e204      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b76      	ldr	r3, [pc, #472]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0xc0>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fc88 	bl	8000f5c <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fc84 	bl	8000f5c <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e1f0      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	4b6c      	ldr	r3, [pc, #432]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0xe8>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d063      	beq.n	8001746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800167e:	4b65      	ldr	r3, [pc, #404]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00b      	beq.n	80016a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168a:	4b62      	ldr	r3, [pc, #392]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001692:	2b08      	cmp	r3, #8
 8001694:	d11c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001696:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d116      	bne.n	80016d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_RCC_OscConfig+0x152>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d001      	beq.n	80016ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e1c4      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	4b56      	ldr	r3, [pc, #344]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4952      	ldr	r1, [pc, #328]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	e03a      	b.n	8001746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d020      	beq.n	800171a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d8:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fc3d 	bl	8000f5c <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fc39 	bl	8000f5c <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e1a5      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	4b46      	ldr	r3, [pc, #280]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b43      	ldr	r3, [pc, #268]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4940      	ldr	r1, [pc, #256]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
 8001718:	e015      	b.n	8001746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171a:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fc1c 	bl	8000f5c <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff fc18 	bl	8000f5c <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e184      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	4b36      	ldr	r3, [pc, #216]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d030      	beq.n	80017b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d016      	beq.n	8001788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fbfc 	bl	8000f5c <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff fbf8 	bl	8000f5c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e164      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x200>
 8001786:	e015      	b.n	80017b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff fbe5 	bl	8000f5c <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001796:	f7ff fbe1 	bl	8000f5c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e14d      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80a0 	beq.w	8001902 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10f      	bne.n	80017f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d121      	bne.n	8001842 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180a:	f7ff fba7 	bl	8000f5c <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	e011      	b.n	8001836 <HAL_RCC_OscConfig+0x2ce>
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	42470000 	.word	0x42470000
 800181c:	42470e80 	.word	0x42470e80
 8001820:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001824:	f7ff fb9a 	bl	8000f5c <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e106      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001836:	4b85      	ldr	r3, [pc, #532]	; (8001a4c <HAL_RCC_OscConfig+0x4e4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d106      	bne.n	8001858 <HAL_RCC_OscConfig+0x2f0>
 800184a:	4b81      	ldr	r3, [pc, #516]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a80      	ldr	r2, [pc, #512]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	e01c      	b.n	8001892 <HAL_RCC_OscConfig+0x32a>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d10c      	bne.n	800187a <HAL_RCC_OscConfig+0x312>
 8001860:	4b7b      	ldr	r3, [pc, #492]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a7a      	ldr	r2, [pc, #488]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	4b78      	ldr	r3, [pc, #480]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	4a77      	ldr	r2, [pc, #476]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	e00b      	b.n	8001892 <HAL_RCC_OscConfig+0x32a>
 800187a:	4b75      	ldr	r3, [pc, #468]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a74      	ldr	r2, [pc, #464]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
 8001886:	4b72      	ldr	r3, [pc, #456]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	4a71      	ldr	r2, [pc, #452]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d015      	beq.n	80018c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189a:	f7ff fb5f 	bl	8000f5c <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff fb5b 	bl	8000f5c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e0c5      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0ee      	beq.n	80018a2 <HAL_RCC_OscConfig+0x33a>
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fb49 	bl	8000f5c <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff fb45 	bl	8000f5c <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0af      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	4b5a      	ldr	r3, [pc, #360]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ee      	bne.n	80018ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d105      	bne.n	8001902 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f6:	4b56      	ldr	r3, [pc, #344]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a55      	ldr	r2, [pc, #340]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 80018fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 809b 	beq.w	8001a42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800190c:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d05c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d141      	bne.n	80019a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <HAL_RCC_OscConfig+0x4ec>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fb19 	bl	8000f5c <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff fb15 	bl	8000f5c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e081      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001940:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69da      	ldr	r2, [r3, #28]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	019b      	lsls	r3, r3, #6
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	3b01      	subs	r3, #1
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	061b      	lsls	r3, r3, #24
 8001970:	4937      	ldr	r1, [pc, #220]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_RCC_OscConfig+0x4ec>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff faee 	bl	8000f5c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff faea 	bl	8000f5c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e056      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x41c>
 80019a2:	e04e      	b.n	8001a42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x4ec>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fad7 	bl	8000f5c <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff fad3 	bl	8000f5c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e03f      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x44a>
 80019d0:	e037      	b.n	8001a42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e032      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019de:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <HAL_RCC_OscConfig+0x4e8>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d028      	beq.n	8001a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d121      	bne.n	8001a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d11a      	bne.n	8001a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a0e:	4013      	ands	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d111      	bne.n	8001a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	3b01      	subs	r3, #1
 8001a28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	40023800 	.word	0x40023800
 8001a54:	42470060 	.word	0x42470060

08001a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0cc      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d90c      	bls.n	8001a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b65      	ldr	r3, [pc, #404]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0b8      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aac:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	494d      	ldr	r1, [pc, #308]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d044      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d119      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e07f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b16:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e06f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b26:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e067      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4934      	ldr	r1, [pc, #208]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b48:	f7ff fa08 	bl	8000f5c <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff fa04 	bl	8000f5c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e04f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d20c      	bcs.n	8001ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e032      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4916      	ldr	r1, [pc, #88]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bde:	f000 f821 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001be2:	4602      	mov	r2, r0
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	490a      	ldr	r1, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	5ccb      	ldrb	r3, [r1, r3]
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f880 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023c00 	.word	0x40023c00
 8001c14:	40023800 	.word	0x40023800
 8001c18:	080072c4 	.word	0x080072c4
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	2300      	movs	r3, #0
 8001c36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c3c:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d00d      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x40>
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	f200 80bd 	bhi.w	8001dc8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x34>
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d003      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c56:	e0b7      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b61      	ldr	r3, [pc, #388]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c5a:	60bb      	str	r3, [r7, #8]
       break;
 8001c5c:	e0b7      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c5e:	4b61      	ldr	r3, [pc, #388]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c60:	60bb      	str	r3, [r7, #8]
      break;
 8001c62:	e0b4      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c64:	4b5d      	ldr	r3, [pc, #372]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6e:	4b5b      	ldr	r3, [pc, #364]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d04d      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7a:	4b58      	ldr	r3, [pc, #352]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	461a      	mov	r2, r3
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	ea02 0800 	and.w	r8, r2, r0
 8001c92:	ea03 0901 	and.w	r9, r3, r1
 8001c96:	4640      	mov	r0, r8
 8001c98:	4649      	mov	r1, r9
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	014b      	lsls	r3, r1, #5
 8001ca4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ca8:	0142      	lsls	r2, r0, #5
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	ebb0 0008 	subs.w	r0, r0, r8
 8001cb2:	eb61 0109 	sbc.w	r1, r1, r9
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	018b      	lsls	r3, r1, #6
 8001cc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cc4:	0182      	lsls	r2, r0, #6
 8001cc6:	1a12      	subs	r2, r2, r0
 8001cc8:	eb63 0301 	sbc.w	r3, r3, r1
 8001ccc:	f04f 0000 	mov.w	r0, #0
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	00d9      	lsls	r1, r3, #3
 8001cd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cda:	00d0      	lsls	r0, r2, #3
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	eb12 0208 	adds.w	r2, r2, r8
 8001ce4:	eb43 0309 	adc.w	r3, r3, r9
 8001ce8:	f04f 0000 	mov.w	r0, #0
 8001cec:	f04f 0100 	mov.w	r1, #0
 8001cf0:	0259      	lsls	r1, r3, #9
 8001cf2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001cf6:	0250      	lsls	r0, r2, #9
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	461a      	mov	r2, r3
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	f7fe fb0a 	bl	8000320 <__aeabi_uldivmod>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4613      	mov	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e04a      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	099b      	lsrs	r3, r3, #6
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d26:	f04f 0100 	mov.w	r1, #0
 8001d2a:	ea02 0400 	and.w	r4, r2, r0
 8001d2e:	ea03 0501 	and.w	r5, r3, r1
 8001d32:	4620      	mov	r0, r4
 8001d34:	4629      	mov	r1, r5
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	014b      	lsls	r3, r1, #5
 8001d40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d44:	0142      	lsls	r2, r0, #5
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	1b00      	subs	r0, r0, r4
 8001d4c:	eb61 0105 	sbc.w	r1, r1, r5
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	018b      	lsls	r3, r1, #6
 8001d5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d5e:	0182      	lsls	r2, r0, #6
 8001d60:	1a12      	subs	r2, r2, r0
 8001d62:	eb63 0301 	sbc.w	r3, r3, r1
 8001d66:	f04f 0000 	mov.w	r0, #0
 8001d6a:	f04f 0100 	mov.w	r1, #0
 8001d6e:	00d9      	lsls	r1, r3, #3
 8001d70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d74:	00d0      	lsls	r0, r2, #3
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	1912      	adds	r2, r2, r4
 8001d7c:	eb45 0303 	adc.w	r3, r5, r3
 8001d80:	f04f 0000 	mov.w	r0, #0
 8001d84:	f04f 0100 	mov.w	r1, #0
 8001d88:	0299      	lsls	r1, r3, #10
 8001d8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d8e:	0290      	lsls	r0, r2, #10
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	f7fe fabe 	bl	8000320 <__aeabi_uldivmod>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4613      	mov	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	3301      	adds	r3, #1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	60bb      	str	r3, [r7, #8]
      break;
 8001dc6:	e002      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dca:	60bb      	str	r3, [r7, #8]
      break;
 8001dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dce:	68bb      	ldr	r3, [r7, #8]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	00f42400 	.word	0x00f42400
 8001de4:	007a1200 	.word	0x007a1200

08001de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000000 	.word	0x20000000

08001e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e04:	f7ff fff0 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0a9b      	lsrs	r3, r3, #10
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	4903      	ldr	r1, [pc, #12]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	080072d4 	.word	0x080072d4

08001e28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	220f      	movs	r2, #15
 8001e36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	08db      	lsrs	r3, r3, #3
 8001e62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <HAL_RCC_GetClockConfig+0x60>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0207 	and.w	r2, r3, #7
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	601a      	str	r2, [r3, #0]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40023c00 	.word	0x40023c00

08001e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e041      	b.n	8001f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f839 	bl	8001f2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f000 f9ca 	bl	8002264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d001      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e044      	b.n	8001fe2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1e      	ldr	r2, [pc, #120]	; (8001ff0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d018      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x6c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f82:	d013      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x6c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1a      	ldr	r2, [pc, #104]	; (8001ff4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00e      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x6c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d009      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x6c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_TIM_Base_Start_IT+0xbc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d004      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x6c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a16      	ldr	r2, [pc, #88]	; (8002000 <HAL_TIM_Base_Start_IT+0xc0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d111      	bne.n	8001fd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d010      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0201 	orr.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fce:	e007      	b.n	8001fe0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40000400 	.word	0x40000400
 8001ff8:	40000800 	.word	0x40000800
 8001ffc:	40000c00 	.word	0x40000c00
 8002000:	40014000 	.word	0x40014000

08002004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b02      	cmp	r3, #2
 8002018:	d122      	bne.n	8002060 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b02      	cmp	r3, #2
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0202 	mvn.w	r2, #2
 8002030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f8ee 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8e0 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f8f1 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b04      	cmp	r3, #4
 800206c:	d122      	bne.n	80020b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b04      	cmp	r3, #4
 800207a:	d11b      	bne.n	80020b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0204 	mvn.w	r2, #4
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8c4 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8b6 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f8c7 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d122      	bne.n	8002108 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d11b      	bne.n	8002108 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0208 	mvn.w	r2, #8
 80020d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2204      	movs	r2, #4
 80020de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f89a 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 80020f4:	e005      	b.n	8002102 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f88c 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f89d 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b10      	cmp	r3, #16
 8002114:	d122      	bne.n	800215c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b10      	cmp	r3, #16
 8002122:	d11b      	bne.n	800215c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0210 	mvn.w	r2, #16
 800212c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2208      	movs	r2, #8
 8002132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f870 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f862 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f873 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10e      	bne.n	8002188 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d107      	bne.n	8002188 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0201 	mvn.w	r2, #1
 8002180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe fd7e 	bl	8000c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	2b80      	cmp	r3, #128	; 0x80
 8002194:	d10e      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a0:	2b80      	cmp	r3, #128	; 0x80
 80021a2:	d107      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8e2 	bl	8002378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021be:	2b40      	cmp	r3, #64	; 0x40
 80021c0:	d10e      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d107      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f838 	bl	8002250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d107      	bne.n	800220c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0220 	mvn.w	r2, #32
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8ac 	bl	8002364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a34      	ldr	r2, [pc, #208]	; (8002348 <TIM_Base_SetConfig+0xe4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00f      	beq.n	800229c <TIM_Base_SetConfig+0x38>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002282:	d00b      	beq.n	800229c <TIM_Base_SetConfig+0x38>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a31      	ldr	r2, [pc, #196]	; (800234c <TIM_Base_SetConfig+0xe8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d007      	beq.n	800229c <TIM_Base_SetConfig+0x38>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a30      	ldr	r2, [pc, #192]	; (8002350 <TIM_Base_SetConfig+0xec>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <TIM_Base_SetConfig+0x38>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a2f      	ldr	r2, [pc, #188]	; (8002354 <TIM_Base_SetConfig+0xf0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d108      	bne.n	80022ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a25      	ldr	r2, [pc, #148]	; (8002348 <TIM_Base_SetConfig+0xe4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01b      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022bc:	d017      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a22      	ldr	r2, [pc, #136]	; (800234c <TIM_Base_SetConfig+0xe8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a21      	ldr	r2, [pc, #132]	; (8002350 <TIM_Base_SetConfig+0xec>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00f      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a20      	ldr	r2, [pc, #128]	; (8002354 <TIM_Base_SetConfig+0xf0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00b      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1f      	ldr	r2, [pc, #124]	; (8002358 <TIM_Base_SetConfig+0xf4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1e      	ldr	r2, [pc, #120]	; (800235c <TIM_Base_SetConfig+0xf8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d003      	beq.n	80022ee <TIM_Base_SetConfig+0x8a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <TIM_Base_SetConfig+0xfc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d108      	bne.n	8002300 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a08      	ldr	r2, [pc, #32]	; (8002348 <TIM_Base_SetConfig+0xe4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d103      	bne.n	8002334 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	615a      	str	r2, [r3, #20]
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40010000 	.word	0x40010000
 800234c:	40000400 	.word	0x40000400
 8002350:	40000800 	.word	0x40000800
 8002354:	40000c00 	.word	0x40000c00
 8002358:	40014000 	.word	0x40014000
 800235c:	40014400 	.word	0x40014400
 8002360:	40014800 	.word	0x40014800

08002364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f103 0208 	add.w	r2, r3, #8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f103 0208 	add.w	r2, r3, #8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f103 0208 	add.w	r2, r3, #8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d103      	bne.n	800244e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	e00c      	b.n	8002468 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3308      	adds	r3, #8
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e002      	b.n	800245c <vListInsert+0x2e>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	429a      	cmp	r2, r3
 8002466:	d2f6      	bcs.n	8002456 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	601a      	str	r2, [r3, #0]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6892      	ldr	r2, [r2, #8]
 80024b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6852      	ldr	r2, [r2, #4]
 80024c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d103      	bne.n	80024d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	1e5a      	subs	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08c      	sub	sp, #48	; 0x30
 80024f8:	af04      	add	r7, sp, #16
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4618      	mov	r0, r3
 800250a:	f001 fa77 	bl	80039fc <pvPortMalloc>
 800250e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00e      	beq.n	8002534 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002516:	205c      	movs	r0, #92	; 0x5c
 8002518:	f001 fa70 	bl	80039fc <pvPortMalloc>
 800251c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
 800252a:	e005      	b.n	8002538 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f001 fb45 	bl	8003bbc <vPortFree>
 8002532:	e001      	b.n	8002538 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d013      	beq.n	8002566 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800253e:	88fa      	ldrh	r2, [r7, #6]
 8002540:	2300      	movs	r3, #0
 8002542:	9303      	str	r3, [sp, #12]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	9302      	str	r3, [sp, #8]
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f80e 	bl	8002576 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800255a:	69f8      	ldr	r0, [r7, #28]
 800255c:	f000 f8a2 	bl	80026a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002560:	2301      	movs	r3, #1
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	e002      	b.n	800256c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800256c:	69bb      	ldr	r3, [r7, #24]
    }
 800256e:	4618      	mov	r0, r3
 8002570:	3720      	adds	r7, #32
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b088      	sub	sp, #32
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	461a      	mov	r2, r3
 800258e:	21a5      	movs	r1, #165	; 0xa5
 8002590:	f004 f93c 	bl	800680c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800259e:	3b01      	subs	r3, #1
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f023 0307 	bic.w	r3, r3, #7
 80025ac:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <prvInitialiseNewTask+0x58>
        __asm volatile
 80025b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	617b      	str	r3, [r7, #20]
    }
 80025ca:	bf00      	nop
 80025cc:	e7fe      	b.n	80025cc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01f      	beq.n	8002614 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	e012      	b.n	8002600 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	4413      	add	r3, r2
 80025e0:	7819      	ldrb	r1, [r3, #0]
 80025e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	3334      	adds	r3, #52	; 0x34
 80025ea:	460a      	mov	r2, r1
 80025ec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3301      	adds	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b0e      	cmp	r3, #14
 8002604:	d9e9      	bls.n	80025da <prvInitialiseNewTask+0x64>
 8002606:	e000      	b.n	800260a <prvInitialiseNewTask+0x94>
            {
                break;
 8002608:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002612:	e003      	b.n	800261c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261e:	2b09      	cmp	r3, #9
 8002620:	d901      	bls.n	8002626 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002622:	2309      	movs	r3, #9
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002630:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	2200      	movs	r2, #0
 8002636:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	3304      	adds	r3, #4
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fec5 	bl	80023cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	3318      	adds	r3, #24
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fec0 	bl	80023cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002650:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	f1c3 020a 	rsb	r2, r3, #10
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002660:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	3354      	adds	r3, #84	; 0x54
 8002666:	2204      	movs	r2, #4
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f004 f8ce 	bl	800680c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	3358      	adds	r3, #88	; 0x58
 8002674:	2201      	movs	r2, #1
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f004 f8c7 	bl	800680c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	68f9      	ldr	r1, [r7, #12]
 8002682:	69b8      	ldr	r0, [r7, #24]
 8002684:	f000 fee0 	bl	8003448 <pxPortInitialiseStack>
 8002688:	4602      	mov	r2, r0
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002698:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800269a:	bf00      	nop
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80026ac:	f001 f87a 	bl	80037a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80026b0:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <prvAddNewTaskToReadyList+0xfc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4a3a      	ldr	r2, [pc, #232]	; (80027a0 <prvAddNewTaskToReadyList+0xfc>)
 80026b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80026ba:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <prvAddNewTaskToReadyList+0x100>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80026c2:	4a38      	ldr	r2, [pc, #224]	; (80027a4 <prvAddNewTaskToReadyList+0x100>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <prvAddNewTaskToReadyList+0xfc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d110      	bne.n	80026f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80026d0:	f000 fb06 	bl	8002ce0 <prvInitialiseTaskLists>
 80026d4:	e00d      	b.n	80026f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80026d6:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <prvAddNewTaskToReadyList+0x104>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <prvAddNewTaskToReadyList+0x100>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d802      	bhi.n	80026f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80026ec:	4a2d      	ldr	r2, [pc, #180]	; (80027a4 <prvAddNewTaskToReadyList+0x100>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80026f2:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <prvAddNewTaskToReadyList+0x108>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <prvAddNewTaskToReadyList+0x108>)
 80026fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80026fc:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <prvAddNewTaskToReadyList+0x108>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d016      	beq.n	8002738 <prvAddNewTaskToReadyList+0x94>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	f003 fd35 	bl	800617c <SEGGER_SYSVIEW_OnTaskCreate>
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	461d      	mov	r5, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461c      	mov	r4, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	1ae3      	subs	r3, r4, r3
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	462b      	mov	r3, r5
 8002734:	f001 fc08 	bl	8003f48 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fda2 	bl	8006284 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	2201      	movs	r2, #1
 8002746:	409a      	lsls	r2, r3
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <prvAddNewTaskToReadyList+0x10c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4313      	orrs	r3, r2
 800274e:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <prvAddNewTaskToReadyList+0x10c>)
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <prvAddNewTaskToReadyList+0x110>)
 8002760:	441a      	add	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f7ff fe3c 	bl	80023e6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800276e:	f001 f849 	bl	8003804 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <prvAddNewTaskToReadyList+0x104>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00e      	beq.n	8002798 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <prvAddNewTaskToReadyList+0x100>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	429a      	cmp	r2, r3
 8002786:	d207      	bcs.n	8002798 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <prvAddNewTaskToReadyList+0x114>)
 800278a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bdb0      	pop	{r4, r5, r7, pc}
 80027a0:	200001fc 	.word	0x200001fc
 80027a4:	200000c0 	.word	0x200000c0
 80027a8:	20000208 	.word	0x20000208
 80027ac:	20000218 	.word	0x20000218
 80027b0:	20000204 	.word	0x20000204
 80027b4:	200000c4 	.word	0x200000c4
 80027b8:	e000ed04 	.word	0xe000ed04

080027bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d01b      	beq.n	8002806 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <vTaskDelay+0x68>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <vTaskDelay+0x30>
        __asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	60bb      	str	r3, [r7, #8]
    }
 80027e8:	bf00      	nop
 80027ea:	e7fe      	b.n	80027ea <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80027ec:	f000 f87a 	bl	80028e4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	2023      	movs	r0, #35	; 0x23
 80027f4:	f002 ff8c 	bl	8005710 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80027f8:	2100      	movs	r1, #0
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fdac 	bl	8003358 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002800:	f000 f87e 	bl	8002900 <xTaskResumeAll>
 8002804:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <vTaskDelay+0x6c>)
 800280e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000224 	.word	0x20000224
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <vTaskStartScheduler+0x98>)
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	2300      	movs	r3, #0
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2300      	movs	r3, #0
 800283c:	2282      	movs	r2, #130	; 0x82
 800283e:	4922      	ldr	r1, [pc, #136]	; (80028c8 <vTaskStartScheduler+0x9c>)
 8002840:	4822      	ldr	r0, [pc, #136]	; (80028cc <vTaskStartScheduler+0xa0>)
 8002842:	f7ff fe57 	bl	80024f4 <xTaskCreate>
 8002846:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d124      	bne.n	8002898 <vTaskStartScheduler+0x6c>
        __asm volatile
 800284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002852:	f383 8811 	msr	BASEPRI, r3
 8002856:	f3bf 8f6f 	isb	sy
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	60bb      	str	r3, [r7, #8]
    }
 8002860:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <vTaskStartScheduler+0xa4>)
 8002864:	f04f 32ff 	mov.w	r2, #4294967295
 8002868:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <vTaskStartScheduler+0xa8>)
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <vTaskStartScheduler+0xac>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <vTaskStartScheduler+0xb0>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <vTaskStartScheduler+0x98>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d102      	bne.n	8002888 <vTaskStartScheduler+0x5c>
 8002882:	f003 fc5f 	bl	8006144 <SEGGER_SYSVIEW_OnIdle>
 8002886:	e004      	b.n	8002892 <vTaskStartScheduler+0x66>
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <vTaskStartScheduler+0xb0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f003 fcb7 	bl	8006200 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002892:	f000 fe67 	bl	8003564 <xPortStartScheduler>
 8002896:	e00e      	b.n	80028b6 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289e:	d10a      	bne.n	80028b6 <vTaskStartScheduler+0x8a>
        __asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	607b      	str	r3, [r7, #4]
    }
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <vTaskStartScheduler+0xb4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000220 	.word	0x20000220
 80028c8:	08007200 	.word	0x08007200
 80028cc:	08002cb1 	.word	0x08002cb1
 80028d0:	2000021c 	.word	0x2000021c
 80028d4:	20000208 	.word	0x20000208
 80028d8:	20000200 	.word	0x20000200
 80028dc:	200000c0 	.word	0x200000c0
 80028e0:	2000000c 	.word	0x2000000c

080028e4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <vTaskSuspendAll+0x18>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	4a03      	ldr	r2, [pc, #12]	; (80028fc <vTaskSuspendAll+0x18>)
 80028f0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	20000224 	.word	0x20000224

08002900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800290e:	4b43      	ldr	r3, [pc, #268]	; (8002a1c <xTaskResumeAll+0x11c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <xTaskResumeAll+0x2c>
        __asm volatile
 8002916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	603b      	str	r3, [r7, #0]
    }
 8002928:	bf00      	nop
 800292a:	e7fe      	b.n	800292a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800292c:	f000 ff3a 	bl	80037a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002930:	4b3a      	ldr	r3, [pc, #232]	; (8002a1c <xTaskResumeAll+0x11c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3b01      	subs	r3, #1
 8002936:	4a39      	ldr	r2, [pc, #228]	; (8002a1c <xTaskResumeAll+0x11c>)
 8002938:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800293a:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <xTaskResumeAll+0x11c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d165      	bne.n	8002a0e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002942:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <xTaskResumeAll+0x120>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d061      	beq.n	8002a0e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800294a:	e032      	b.n	80029b2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800294c:	4b35      	ldr	r3, [pc, #212]	; (8002a24 <xTaskResumeAll+0x124>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3318      	adds	r3, #24
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fda1 	bl	80024a0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3304      	adds	r3, #4
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fd9c 	bl	80024a0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4618      	mov	r0, r3
 800296c:	f003 fc8a 	bl	8006284 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	2201      	movs	r2, #1
 8002976:	409a      	lsls	r2, r3
 8002978:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <xTaskResumeAll+0x128>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4313      	orrs	r3, r2
 800297e:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <xTaskResumeAll+0x128>)
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <xTaskResumeAll+0x12c>)
 8002990:	441a      	add	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3304      	adds	r3, #4
 8002996:	4619      	mov	r1, r3
 8002998:	4610      	mov	r0, r2
 800299a:	f7ff fd24 	bl	80023e6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a2:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <xTaskResumeAll+0x130>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d302      	bcc.n	80029b2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80029ac:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <xTaskResumeAll+0x134>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029b2:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <xTaskResumeAll+0x124>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1c8      	bne.n	800294c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80029c0:	f000 fa0c 	bl	8002ddc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <xTaskResumeAll+0x138>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80029d0:	f000 f848 	bl	8002a64 <xTaskIncrementTick>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <xTaskResumeAll+0x134>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f1      	bne.n	80029d0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <xTaskResumeAll+0x138>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <xTaskResumeAll+0x134>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80029fa:	2301      	movs	r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <xTaskResumeAll+0x13c>)
 8002a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002a0e:	f000 fef9 	bl	8003804 <vPortExitCritical>

    return xAlreadyYielded;
 8002a12:	68bb      	ldr	r3, [r7, #8]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000224 	.word	0x20000224
 8002a20:	200001fc 	.word	0x200001fc
 8002a24:	200001bc 	.word	0x200001bc
 8002a28:	20000204 	.word	0x20000204
 8002a2c:	200000c4 	.word	0x200000c4
 8002a30:	200000c0 	.word	0x200000c0
 8002a34:	20000210 	.word	0x20000210
 8002a38:	2000020c 	.word	0x2000020c
 8002a3c:	e000ed04 	.word	0xe000ed04

08002a40 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a46:	f000 ff99 	bl	800397c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002a4e:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <xTaskGetTickCountFromISR+0x20>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a54:	683b      	ldr	r3, [r7, #0]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000200 	.word	0x20000200

08002a64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a6e:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <xTaskIncrementTick+0x14c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 8092 	bne.w	8002b9c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a78:	4b4e      	ldr	r3, [pc, #312]	; (8002bb4 <xTaskIncrementTick+0x150>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a80:	4a4c      	ldr	r2, [pc, #304]	; (8002bb4 <xTaskIncrementTick+0x150>)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d120      	bne.n	8002ace <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <xTaskIncrementTick+0x154>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <xTaskIncrementTick+0x48>
        __asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	603b      	str	r3, [r7, #0]
    }
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <xTaskIncrementTick+0x46>
 8002aac:	4b42      	ldr	r3, [pc, #264]	; (8002bb8 <xTaskIncrementTick+0x154>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <xTaskIncrementTick+0x158>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a40      	ldr	r2, [pc, #256]	; (8002bb8 <xTaskIncrementTick+0x154>)
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4a40      	ldr	r2, [pc, #256]	; (8002bbc <xTaskIncrementTick+0x158>)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <xTaskIncrementTick+0x15c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	4a3e      	ldr	r2, [pc, #248]	; (8002bc0 <xTaskIncrementTick+0x15c>)
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	f000 f987 	bl	8002ddc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ace:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <xTaskIncrementTick+0x160>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d34c      	bcc.n	8002b72 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ad8:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <xTaskIncrementTick+0x154>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d104      	bne.n	8002aec <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ae2:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <xTaskIncrementTick+0x160>)
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae8:	601a      	str	r2, [r3, #0]
                    break;
 8002aea:	e042      	b.n	8002b72 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aec:	4b32      	ldr	r3, [pc, #200]	; (8002bb8 <xTaskIncrementTick+0x154>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d203      	bcs.n	8002b0c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b04:	4a2f      	ldr	r2, [pc, #188]	; (8002bc4 <xTaskIncrementTick+0x160>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b0a:	e032      	b.n	8002b72 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fcc5 	bl	80024a0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d004      	beq.n	8002b28 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3318      	adds	r3, #24
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fcbc 	bl	80024a0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 fbaa 	bl	8006284 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	2201      	movs	r2, #1
 8002b36:	409a      	lsls	r2, r3
 8002b38:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <xTaskIncrementTick+0x164>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <xTaskIncrementTick+0x164>)
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <xTaskIncrementTick+0x168>)
 8002b50:	441a      	add	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3304      	adds	r3, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f7ff fc44 	bl	80023e6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b62:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <xTaskIncrementTick+0x16c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d3b5      	bcc.n	8002ad8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b70:	e7b2      	b.n	8002ad8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <xTaskIncrementTick+0x16c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b78:	4914      	ldr	r1, [pc, #80]	; (8002bcc <xTaskIncrementTick+0x168>)
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d901      	bls.n	8002b8e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <xTaskIncrementTick+0x170>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002b96:	2301      	movs	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	e004      	b.n	8002ba6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <xTaskIncrementTick+0x174>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <xTaskIncrementTick+0x174>)
 8002ba4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002ba6:	697b      	ldr	r3, [r7, #20]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000224 	.word	0x20000224
 8002bb4:	20000200 	.word	0x20000200
 8002bb8:	200001b4 	.word	0x200001b4
 8002bbc:	200001b8 	.word	0x200001b8
 8002bc0:	20000214 	.word	0x20000214
 8002bc4:	2000021c 	.word	0x2000021c
 8002bc8:	20000204 	.word	0x20000204
 8002bcc:	200000c4 	.word	0x200000c4
 8002bd0:	200000c0 	.word	0x200000c0
 8002bd4:	20000210 	.word	0x20000210
 8002bd8:	2000020c 	.word	0x2000020c

08002bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002be2:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <vTaskSwitchContext+0xbc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002bea:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <vTaskSwitchContext+0xc0>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002bf0:	e04d      	b.n	8002c8e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <vTaskSwitchContext+0xc0>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bf8:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <vTaskSwitchContext+0xc4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002c06:	7afb      	ldrb	r3, [r7, #11]
 8002c08:	f1c3 031f 	rsb	r3, r3, #31
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	4925      	ldr	r1, [pc, #148]	; (8002ca4 <vTaskSwitchContext+0xc8>)
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10a      	bne.n	8002c38 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	607b      	str	r3, [r7, #4]
    }
 8002c34:	bf00      	nop
 8002c36:	e7fe      	b.n	8002c36 <vTaskSwitchContext+0x5a>
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <vTaskSwitchContext+0xc8>)
 8002c44:	4413      	add	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	3308      	adds	r3, #8
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d104      	bne.n	8002c68 <vTaskSwitchContext+0x8c>
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <vTaskSwitchContext+0xcc>)
 8002c70:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <vTaskSwitchContext+0xcc>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <vTaskSwitchContext+0xd0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d102      	bne.n	8002c84 <vTaskSwitchContext+0xa8>
 8002c7e:	f003 fa61 	bl	8006144 <SEGGER_SYSVIEW_OnIdle>
}
 8002c82:	e004      	b.n	8002c8e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <vTaskSwitchContext+0xcc>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 fab9 	bl	8006200 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000224 	.word	0x20000224
 8002c9c:	20000210 	.word	0x20000210
 8002ca0:	20000204 	.word	0x20000204
 8002ca4:	200000c4 	.word	0x200000c4
 8002ca8:	200000c0 	.word	0x200000c0
 8002cac:	20000220 	.word	0x20000220

08002cb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002cb8:	f000 f852 	bl	8002d60 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <prvIdleTask+0x28>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d9f9      	bls.n	8002cb8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <prvIdleTask+0x2c>)
 8002cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002cd4:	e7f0      	b.n	8002cb8 <prvIdleTask+0x8>
 8002cd6:	bf00      	nop
 8002cd8:	200000c4 	.word	0x200000c4
 8002cdc:	e000ed04 	.word	0xe000ed04

08002ce0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	e00c      	b.n	8002d06 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4a12      	ldr	r2, [pc, #72]	; (8002d40 <prvInitialiseTaskLists+0x60>)
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fb46 	bl	800238c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3301      	adds	r3, #1
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b09      	cmp	r3, #9
 8002d0a:	d9ef      	bls.n	8002cec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d0c:	480d      	ldr	r0, [pc, #52]	; (8002d44 <prvInitialiseTaskLists+0x64>)
 8002d0e:	f7ff fb3d 	bl	800238c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d12:	480d      	ldr	r0, [pc, #52]	; (8002d48 <prvInitialiseTaskLists+0x68>)
 8002d14:	f7ff fb3a 	bl	800238c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d18:	480c      	ldr	r0, [pc, #48]	; (8002d4c <prvInitialiseTaskLists+0x6c>)
 8002d1a:	f7ff fb37 	bl	800238c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002d1e:	480c      	ldr	r0, [pc, #48]	; (8002d50 <prvInitialiseTaskLists+0x70>)
 8002d20:	f7ff fb34 	bl	800238c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002d24:	480b      	ldr	r0, [pc, #44]	; (8002d54 <prvInitialiseTaskLists+0x74>)
 8002d26:	f7ff fb31 	bl	800238c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <prvInitialiseTaskLists+0x78>)
 8002d2c:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <prvInitialiseTaskLists+0x64>)
 8002d2e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <prvInitialiseTaskLists+0x7c>)
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <prvInitialiseTaskLists+0x68>)
 8002d34:	601a      	str	r2, [r3, #0]
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200000c4 	.word	0x200000c4
 8002d44:	2000018c 	.word	0x2000018c
 8002d48:	200001a0 	.word	0x200001a0
 8002d4c:	200001bc 	.word	0x200001bc
 8002d50:	200001d0 	.word	0x200001d0
 8002d54:	200001e8 	.word	0x200001e8
 8002d58:	200001b4 	.word	0x200001b4
 8002d5c:	200001b8 	.word	0x200001b8

08002d60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d66:	e019      	b.n	8002d9c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002d68:	f000 fd1c 	bl	80037a4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d6c:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <prvCheckTasksWaitingTermination+0x50>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fb91 	bl	80024a0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <prvCheckTasksWaitingTermination+0x54>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <prvCheckTasksWaitingTermination+0x54>)
 8002d86:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <prvCheckTasksWaitingTermination+0x58>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <prvCheckTasksWaitingTermination+0x58>)
 8002d90:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002d92:	f000 fd37 	bl	8003804 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f810 	bl	8002dbc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <prvCheckTasksWaitingTermination+0x58>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e1      	bne.n	8002d68 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200001d0 	.word	0x200001d0
 8002db4:	200001fc 	.word	0x200001fc
 8002db8:	200001e4 	.word	0x200001e4

08002dbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fef7 	bl	8003bbc <vPortFree>
                vPortFree( pxTCB );
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fef4 	bl	8003bbc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <prvResetNextTaskUnblockTime+0x30>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <prvResetNextTaskUnblockTime+0x34>)
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002df2:	e005      	b.n	8002e00 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <prvResetNextTaskUnblockTime+0x30>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <prvResetNextTaskUnblockTime+0x34>)
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	200001b4 	.word	0x200001b4
 8002e10:	2000021c 	.word	0x2000021c

08002e14 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	613b      	str	r3, [r7, #16]
    }
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002e3e:	f000 fcb1 	bl	80037a4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002e42:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <xTaskGenericNotifyWait+0x114>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	3358      	adds	r3, #88	; 0x58
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d024      	beq.n	8002e9e <xTaskGenericNotifyWait+0x8a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002e54:	4b34      	ldr	r3, [pc, #208]	; (8002f28 <xTaskGenericNotifyWait+0x114>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3314      	adds	r3, #20
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	6859      	ldr	r1, [r3, #4]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	4019      	ands	r1, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3314      	adds	r3, #20
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002e72:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <xTaskGenericNotifyWait+0x114>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4413      	add	r3, r2
 8002e7a:	3358      	adds	r3, #88	; 0x58
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <xTaskGenericNotifyWait+0x8a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e86:	2101      	movs	r1, #1
 8002e88:	6a38      	ldr	r0, [r7, #32]
 8002e8a:	f000 fa65 	bl	8003358 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <xTaskGenericNotifyWait+0x118>)
 8002e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e9e:	f000 fcb1 	bl	8003804 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002ea2:	f000 fc7f 	bl	80037a4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	2040      	movs	r0, #64	; 0x40
 8002eb4:	f002 fcc2 	bl	800583c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <xTaskGenericNotifyWait+0xbc>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <xTaskGenericNotifyWait+0x114>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002ed0:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <xTaskGenericNotifyWait+0x114>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3358      	adds	r3, #88	; 0x58
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d002      	beq.n	8002ee8 <xTaskGenericNotifyWait+0xd4>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	e010      	b.n	8002f0a <xTaskGenericNotifyWait+0xf6>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <xTaskGenericNotifyWait+0x114>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3314      	adds	r3, #20
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	4019      	ands	r1, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3314      	adds	r3, #20
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8002f06:	2301      	movs	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <xTaskGenericNotifyWait+0x114>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4413      	add	r3, r2
 8002f12:	3358      	adds	r3, #88	; 0x58
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002f18:	f000 fc74 	bl	8003804 <vPortExitCritical>

        return xReturn;
 8002f1c:	697b      	ldr	r3, [r7, #20]
    }
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200000c0 	.word	0x200000c0
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08e      	sub	sp, #56	; 0x38
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <xTaskGenericNotify+0x2e>
        __asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	623b      	str	r3, [r7, #32]
    }
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <xTaskGenericNotify+0x4a>
        __asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	61fb      	str	r3, [r7, #28]
    }
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8002f7e:	f000 fc11 	bl	80037a4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f96:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3358      	adds	r3, #88	; 0x58
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4413      	add	r3, r2
 8002fac:	3358      	adds	r3, #88	; 0x58
 8002fae:	2202      	movs	r2, #2
 8002fb0:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d841      	bhi.n	800303c <xTaskGenericNotify+0x10c>
 8002fb8:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <xTaskGenericNotify+0x90>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	0800305b 	.word	0x0800305b
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002ff3 	.word	0x08002ff3
 8002fcc:	0800300f 	.word	0x0800300f
 8002fd0:	0800301f 	.word	0x0800301f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	3314      	adds	r3, #20
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	605a      	str	r2, [r3, #4]
                    break;
 8002ff0:	e036      	b.n	8003060 <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	3314      	adds	r3, #20
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	3314      	adds	r3, #20
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	605a      	str	r2, [r3, #4]
                    break;
 800300c:	e028      	b.n	8003060 <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800300e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	3314      	adds	r3, #20
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	605a      	str	r2, [r3, #4]
                    break;
 800301c:	e020      	b.n	8003060 <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800301e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003022:	2b02      	cmp	r3, #2
 8003024:	d007      	beq.n	8003036 <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	3314      	adds	r3, #20
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003034:	e014      	b.n	8003060 <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 8003036:	2300      	movs	r3, #0
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800303a:	e011      	b.n	8003060 <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800303c:	4b33      	ldr	r3, [pc, #204]	; (800310c <xTaskGenericNotify+0x1dc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00c      	beq.n	800305e <xTaskGenericNotify+0x12e>
        __asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	61bb      	str	r3, [r7, #24]
    }
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <xTaskGenericNotify+0x128>
                    break;
 800305a:	bf00      	nop
 800305c:	e000      	b.n	8003060 <xTaskGenericNotify+0x130>

                    break;
 800305e:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	4618      	mov	r0, r3
 8003064:	f003 f9b0 	bl	80063c8 <SEGGER_SYSVIEW_ShrinkId>
 8003068:	4601      	mov	r1, r0
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	203e      	movs	r0, #62	; 0x3e
 8003076:	f002 fbe1 	bl	800583c <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800307a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800307e:	2b01      	cmp	r3, #1
 8003080:	d13d      	bne.n	80030fe <xTaskGenericNotify+0x1ce>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	3304      	adds	r3, #4
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fa0a 	bl	80024a0 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	4618      	mov	r0, r3
 8003090:	f003 f8f8 	bl	8006284 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	2201      	movs	r2, #1
 800309a:	409a      	lsls	r2, r3
 800309c:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <xTaskGenericNotify+0x1e0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <xTaskGenericNotify+0x1e0>)
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4a18      	ldr	r2, [pc, #96]	; (8003114 <xTaskGenericNotify+0x1e4>)
 80030b4:	441a      	add	r2, r3
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	3304      	adds	r3, #4
 80030ba:	4619      	mov	r1, r3
 80030bc:	4610      	mov	r0, r2
 80030be:	f7ff f992 	bl	80023e6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <xTaskGenericNotify+0x1b0>
        __asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	617b      	str	r3, [r7, #20]
    }
 80030dc:	bf00      	nop
 80030de:	e7fe      	b.n	80030de <xTaskGenericNotify+0x1ae>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <xTaskGenericNotify+0x1e8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d907      	bls.n	80030fe <xTaskGenericNotify+0x1ce>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <xTaskGenericNotify+0x1ec>)
 80030f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80030fe:	f000 fb81 	bl	8003804 <vPortExitCritical>

        return xReturn;
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003104:	4618      	mov	r0, r3
 8003106:	3730      	adds	r7, #48	; 0x30
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000200 	.word	0x20000200
 8003110:	20000204 	.word	0x20000204
 8003114:	200000c4 	.word	0x200000c4
 8003118:	200000c0 	.word	0x200000c0
 800311c:	e000ed04 	.word	0xe000ed04

08003120 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003120:	b580      	push	{r7, lr}
 8003122:	b092      	sub	sp, #72	; 0x48
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800312e:	2301      	movs	r3, #1
 8003130:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800314a:	bf00      	nop
 800314c:	e7fe      	b.n	800314c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003166:	bf00      	nop
 8003168:	e7fe      	b.n	8003168 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800316a:	f000 fc07 	bl	800397c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	63bb      	str	r3, [r7, #56]	; 0x38

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003172:	f3ef 8211 	mrs	r2, BASEPRI
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	627a      	str	r2, [r7, #36]	; 0x24
 8003188:	623b      	str	r3, [r7, #32]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800318e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	3314      	adds	r3, #20
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a2:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80031a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4413      	add	r3, r2
 80031aa:	3358      	adds	r3, #88	; 0x58
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80031b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4413      	add	r3, r2
 80031b8:	3358      	adds	r3, #88	; 0x58
 80031ba:	2202      	movs	r2, #2
 80031bc:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d841      	bhi.n	8003248 <xTaskGenericNotifyFromISR+0x128>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <xTaskGenericNotifyFromISR+0xac>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	08003267 	.word	0x08003267
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031ff 	.word	0x080031ff
 80031d8:	0800321b 	.word	0x0800321b
 80031dc:	0800322b 	.word	0x0800322b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80031e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	3314      	adds	r3, #20
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3314      	adds	r3, #20
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	605a      	str	r2, [r3, #4]
                    break;
 80031fc:	e036      	b.n	800326c <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80031fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	3314      	adds	r3, #20
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3314      	adds	r3, #20
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	605a      	str	r2, [r3, #4]
                    break;
 8003218:	e028      	b.n	800326c <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800321a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	3314      	adds	r3, #20
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	605a      	str	r2, [r3, #4]
                    break;
 8003228:	e020      	b.n	800326c <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800322a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800322e:	2b02      	cmp	r3, #2
 8003230:	d007      	beq.n	8003242 <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3314      	adds	r3, #20
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003240:	e014      	b.n	800326c <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 8003242:	2300      	movs	r3, #0
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8003246:	e011      	b.n	800326c <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003248:	4b3c      	ldr	r3, [pc, #240]	; (800333c <xTaskGenericNotifyFromISR+0x21c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00c      	beq.n	800326a <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	61fb      	str	r3, [r7, #28]
    }
 8003262:	bf00      	nop
 8003264:	e7fe      	b.n	8003264 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8003266:	bf00      	nop
 8003268:	e000      	b.n	800326c <xTaskGenericNotifyFromISR+0x14c>
                    break;
 800326a:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	4618      	mov	r0, r3
 8003270:	f003 f8aa 	bl	80063c8 <SEGGER_SYSVIEW_ShrinkId>
 8003274:	78f9      	ldrb	r1, [r7, #3]
 8003276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003278:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800327a:	9201      	str	r2, [sp, #4]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	460b      	mov	r3, r1
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4601      	mov	r1, r0
 8003284:	203f      	movs	r0, #63	; 0x3f
 8003286:	f002 fb6b 	bl	8005960 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800328a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800328e:	2b01      	cmp	r3, #1
 8003290:	d149      	bne.n	8003326 <xTaskGenericNotifyFromISR+0x206>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <xTaskGenericNotifyFromISR+0x190>
        __asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	61bb      	str	r3, [r7, #24]
    }
 80032ac:	bf00      	nop
 80032ae:	e7fe      	b.n	80032ae <xTaskGenericNotifyFromISR+0x18e>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032b0:	4b23      	ldr	r3, [pc, #140]	; (8003340 <xTaskGenericNotifyFromISR+0x220>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d120      	bne.n	80032fa <xTaskGenericNotifyFromISR+0x1da>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ba:	3304      	adds	r3, #4
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff f8ef 	bl	80024a0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80032c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c4:	4618      	mov	r0, r3
 80032c6:	f002 ffdd 	bl	8006284 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	2201      	movs	r2, #1
 80032d0:	409a      	lsls	r2, r3
 80032d2:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <xTaskGenericNotifyFromISR+0x224>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <xTaskGenericNotifyFromISR+0x224>)
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4a17      	ldr	r2, [pc, #92]	; (8003348 <xTaskGenericNotifyFromISR+0x228>)
 80032ea:	441a      	add	r2, r3
 80032ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ee:	3304      	adds	r3, #4
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f7ff f877 	bl	80023e6 <vListInsertEnd>
 80032f8:	e005      	b.n	8003306 <xTaskGenericNotifyFromISR+0x1e6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	3318      	adds	r3, #24
 80032fe:	4619      	mov	r1, r3
 8003300:	4812      	ldr	r0, [pc, #72]	; (800334c <xTaskGenericNotifyFromISR+0x22c>)
 8003302:	f7ff f870 	bl	80023e6 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <xTaskGenericNotifyFromISR+0x230>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	429a      	cmp	r2, r3
 8003312:	d908      	bls.n	8003326 <xTaskGenericNotifyFromISR+0x206>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <xTaskGenericNotifyFromISR+0x200>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800331a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331c:	2201      	movs	r2, #1
 800331e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <xTaskGenericNotifyFromISR+0x234>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003328:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003330:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8003334:	4618      	mov	r0, r3
 8003336:	3740      	adds	r7, #64	; 0x40
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000200 	.word	0x20000200
 8003340:	20000224 	.word	0x20000224
 8003344:	20000204 	.word	0x20000204
 8003348:	200000c4 	.word	0x200000c4
 800334c:	200001bc 	.word	0x200001bc
 8003350:	200000c0 	.word	0x200000c0
 8003354:	20000210 	.word	0x20000210

08003358 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003362:	4b32      	ldr	r3, [pc, #200]	; (800342c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003368:	4b31      	ldr	r3, [pc, #196]	; (8003430 <prvAddCurrentTaskToDelayedList+0xd8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3304      	adds	r3, #4
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff f896 	bl	80024a0 <uxListRemove>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10b      	bne.n	8003392 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800337a:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <prvAddCurrentTaskToDelayedList+0xd8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	2201      	movs	r2, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43da      	mvns	r2, r3
 8003388:	4b2a      	ldr	r3, [pc, #168]	; (8003434 <prvAddCurrentTaskToDelayedList+0xdc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4013      	ands	r3, r2
 800338e:	4a29      	ldr	r2, [pc, #164]	; (8003434 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003390:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d110      	bne.n	80033bc <prvAddCurrentTaskToDelayedList+0x64>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80033a0:	4b23      	ldr	r3, [pc, #140]	; (8003430 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	211b      	movs	r1, #27
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 ffae 	bl	8006308 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ac:	4b20      	ldr	r3, [pc, #128]	; (8003430 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3304      	adds	r3, #4
 80033b2:	4619      	mov	r1, r3
 80033b4:	4820      	ldr	r0, [pc, #128]	; (8003438 <prvAddCurrentTaskToDelayedList+0xe0>)
 80033b6:	f7ff f816 	bl	80023e6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80033ba:	e032      	b.n	8003422 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d20f      	bcs.n	80033f4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80033d4:	4b16      	ldr	r3, [pc, #88]	; (8003430 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2104      	movs	r1, #4
 80033da:	4618      	mov	r0, r3
 80033dc:	f002 ff94 	bl	8006308 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <prvAddCurrentTaskToDelayedList+0xe4>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b12      	ldr	r3, [pc, #72]	; (8003430 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3304      	adds	r3, #4
 80033ea:	4619      	mov	r1, r3
 80033ec:	4610      	mov	r0, r2
 80033ee:	f7ff f81e 	bl	800242e <vListInsert>
}
 80033f2:	e016      	b.n	8003422 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80033f4:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2104      	movs	r1, #4
 80033fa:	4618      	mov	r0, r3
 80033fc:	f002 ff84 	bl	8006308 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3304      	adds	r3, #4
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7ff f80e 	bl	800242e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003412:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <prvAddCurrentTaskToDelayedList+0xec>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	429a      	cmp	r2, r3
 800341a:	d202      	bcs.n	8003422 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800341c:	4a09      	ldr	r2, [pc, #36]	; (8003444 <prvAddCurrentTaskToDelayedList+0xec>)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	6013      	str	r3, [r2, #0]
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000200 	.word	0x20000200
 8003430:	200000c0 	.word	0x200000c0
 8003434:	20000204 	.word	0x20000204
 8003438:	200001e8 	.word	0x200001e8
 800343c:	200001b8 	.word	0x200001b8
 8003440:	200001b4 	.word	0x200001b4
 8003444:	2000021c 	.word	0x2000021c

08003448 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3b04      	subs	r3, #4
 8003458:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003460:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3b04      	subs	r3, #4
 8003466:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f023 0201 	bic.w	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3b04      	subs	r3, #4
 8003476:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003478:	4a0c      	ldr	r2, [pc, #48]	; (80034ac <pxPortInitialiseStack+0x64>)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3b14      	subs	r3, #20
 8003482:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3b04      	subs	r3, #4
 800348e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f06f 0202 	mvn.w	r2, #2
 8003496:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3b20      	subs	r3, #32
 800349c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800349e:	68fb      	ldr	r3, [r7, #12]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	080034b1 	.word	0x080034b1

080034b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <prvTaskExitError+0x54>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d00a      	beq.n	80034da <prvTaskExitError+0x2a>
        __asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	60fb      	str	r3, [r7, #12]
    }
 80034d6:	bf00      	nop
 80034d8:	e7fe      	b.n	80034d8 <prvTaskExitError+0x28>
        __asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	60bb      	str	r3, [r7, #8]
    }
 80034ec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80034ee:	bf00      	nop
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0fc      	beq.n	80034f0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80034f6:	bf00      	nop
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	20000010 	.word	0x20000010
	...

08003510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <pxCurrentTCBConst2>)
 8003512:	6819      	ldr	r1, [r3, #0]
 8003514:	6808      	ldr	r0, [r1, #0]
 8003516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800351a:	f380 8809 	msr	PSP, r0
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f04f 0000 	mov.w	r0, #0
 8003526:	f380 8811 	msr	BASEPRI, r0
 800352a:	4770      	bx	lr
 800352c:	f3af 8000 	nop.w

08003530 <pxCurrentTCBConst2>:
 8003530:	200000c0 	.word	0x200000c0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop

08003538 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003538:	4808      	ldr	r0, [pc, #32]	; (800355c <prvPortStartFirstTask+0x24>)
 800353a:	6800      	ldr	r0, [r0, #0]
 800353c:	6800      	ldr	r0, [r0, #0]
 800353e:	f380 8808 	msr	MSP, r0
 8003542:	f04f 0000 	mov.w	r0, #0
 8003546:	f380 8814 	msr	CONTROL, r0
 800354a:	b662      	cpsie	i
 800354c:	b661      	cpsie	f
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	df00      	svc	0
 8003558:	bf00      	nop
 800355a:	0000      	.short	0x0000
 800355c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop

08003564 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800356a:	4b46      	ldr	r3, [pc, #280]	; (8003684 <xPortStartScheduler+0x120>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a46      	ldr	r2, [pc, #280]	; (8003688 <xPortStartScheduler+0x124>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d10a      	bne.n	800358a <xPortStartScheduler+0x26>
        __asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	613b      	str	r3, [r7, #16]
    }
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <xPortStartScheduler+0x120>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a3f      	ldr	r2, [pc, #252]	; (800368c <xPortStartScheduler+0x128>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d10a      	bne.n	80035aa <xPortStartScheduler+0x46>
        __asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	60fb      	str	r3, [r7, #12]
    }
 80035a6:	bf00      	nop
 80035a8:	e7fe      	b.n	80035a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035aa:	4b39      	ldr	r3, [pc, #228]	; (8003690 <xPortStartScheduler+0x12c>)
 80035ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	22ff      	movs	r2, #255	; 0xff
 80035ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4b31      	ldr	r3, [pc, #196]	; (8003694 <xPortStartScheduler+0x130>)
 80035d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035d2:	4b31      	ldr	r3, [pc, #196]	; (8003698 <xPortStartScheduler+0x134>)
 80035d4:	2207      	movs	r2, #7
 80035d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035d8:	e009      	b.n	80035ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80035da:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <xPortStartScheduler+0x134>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3b01      	subs	r3, #1
 80035e0:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <xPortStartScheduler+0x134>)
 80035e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f6:	2b80      	cmp	r3, #128	; 0x80
 80035f8:	d0ef      	beq.n	80035da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035fa:	4b27      	ldr	r3, [pc, #156]	; (8003698 <xPortStartScheduler+0x134>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f1c3 0307 	rsb	r3, r3, #7
 8003602:	2b04      	cmp	r3, #4
 8003604:	d00a      	beq.n	800361c <xPortStartScheduler+0xb8>
        __asm volatile
 8003606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	60bb      	str	r3, [r7, #8]
    }
 8003618:	bf00      	nop
 800361a:	e7fe      	b.n	800361a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <xPortStartScheduler+0x134>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	4a1d      	ldr	r2, [pc, #116]	; (8003698 <xPortStartScheduler+0x134>)
 8003624:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003626:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <xPortStartScheduler+0x134>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800362e:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <xPortStartScheduler+0x134>)
 8003630:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <xPortStartScheduler+0x138>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a17      	ldr	r2, [pc, #92]	; (800369c <xPortStartScheduler+0x138>)
 8003640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003644:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <xPortStartScheduler+0x138>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a14      	ldr	r2, [pc, #80]	; (800369c <xPortStartScheduler+0x138>)
 800364c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003650:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003652:	f000 f963 	bl	800391c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <xPortStartScheduler+0x13c>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800365c:	f000 f982 	bl	8003964 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <xPortStartScheduler+0x140>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0f      	ldr	r2, [pc, #60]	; (80036a4 <xPortStartScheduler+0x140>)
 8003666:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800366a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800366c:	f7ff ff64 	bl	8003538 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003670:	f7ff fab4 	bl	8002bdc <vTaskSwitchContext>
    prvTaskExitError();
 8003674:	f7ff ff1c 	bl	80034b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000ed00 	.word	0xe000ed00
 8003688:	410fc271 	.word	0x410fc271
 800368c:	410fc270 	.word	0x410fc270
 8003690:	e000e400 	.word	0xe000e400
 8003694:	20000228 	.word	0x20000228
 8003698:	2000022c 	.word	0x2000022c
 800369c:	e000ed20 	.word	0xe000ed20
 80036a0:	20000010 	.word	0x20000010
 80036a4:	e000ef34 	.word	0xe000ef34

080036a8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036ae:	4b37      	ldr	r3, [pc, #220]	; (800378c <vInitPrioGroupValue+0xe4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a37      	ldr	r2, [pc, #220]	; (8003790 <vInitPrioGroupValue+0xe8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d10a      	bne.n	80036ce <vInitPrioGroupValue+0x26>
        __asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	613b      	str	r3, [r7, #16]
    }
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80036ce:	4b2f      	ldr	r3, [pc, #188]	; (800378c <vInitPrioGroupValue+0xe4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a30      	ldr	r2, [pc, #192]	; (8003794 <vInitPrioGroupValue+0xec>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d10a      	bne.n	80036ee <vInitPrioGroupValue+0x46>
        __asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	60fb      	str	r3, [r7, #12]
    }
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036ee:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <vInitPrioGroupValue+0xf0>)
 80036f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	22ff      	movs	r2, #255	; 0xff
 80036fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4b22      	ldr	r3, [pc, #136]	; (800379c <vInitPrioGroupValue+0xf4>)
 8003714:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003716:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <vInitPrioGroupValue+0xf8>)
 8003718:	2207      	movs	r2, #7
 800371a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800371c:	e009      	b.n	8003732 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <vInitPrioGroupValue+0xf8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <vInitPrioGroupValue+0xf8>)
 8003726:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b80      	cmp	r3, #128	; 0x80
 800373c:	d0ef      	beq.n	800371e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <vInitPrioGroupValue+0xf8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f1c3 0307 	rsb	r3, r3, #7
 8003746:	2b04      	cmp	r3, #4
 8003748:	d00a      	beq.n	8003760 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	60bb      	str	r3, [r7, #8]
    }
 800375c:	bf00      	nop
 800375e:	e7fe      	b.n	800375e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <vInitPrioGroupValue+0xf8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	4a0e      	ldr	r2, [pc, #56]	; (80037a0 <vInitPrioGroupValue+0xf8>)
 8003768:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <vInitPrioGroupValue+0xf8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003772:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <vInitPrioGroupValue+0xf8>)
 8003774:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000ed00 	.word	0xe000ed00
 8003790:	410fc271 	.word	0x410fc271
 8003794:	410fc270 	.word	0x410fc270
 8003798:	e000e400 	.word	0xe000e400
 800379c:	20000228 	.word	0x20000228
 80037a0:	2000022c 	.word	0x2000022c

080037a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
        __asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	607b      	str	r3, [r7, #4]
    }
 80037bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <vPortEnterCritical+0x58>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3301      	adds	r3, #1
 80037c4:	4a0d      	ldr	r2, [pc, #52]	; (80037fc <vPortEnterCritical+0x58>)
 80037c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <vPortEnterCritical+0x58>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d10f      	bne.n	80037f0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <vPortEnterCritical+0x5c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <vPortEnterCritical+0x4c>
        __asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	603b      	str	r3, [r7, #0]
    }
 80037ec:	bf00      	nop
 80037ee:	e7fe      	b.n	80037ee <vPortEnterCritical+0x4a>
    }
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	20000010 	.word	0x20000010
 8003800:	e000ed04 	.word	0xe000ed04

08003804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <vPortExitCritical+0x50>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10a      	bne.n	8003828 <vPortExitCritical+0x24>
        __asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	607b      	str	r3, [r7, #4]
    }
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <vPortExitCritical+0x50>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3b01      	subs	r3, #1
 800382e:	4a09      	ldr	r2, [pc, #36]	; (8003854 <vPortExitCritical+0x50>)
 8003830:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003832:	4b08      	ldr	r3, [pc, #32]	; (8003854 <vPortExitCritical+0x50>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <vPortExitCritical+0x42>
 800383a:	2300      	movs	r3, #0
 800383c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f383 8811 	msr	BASEPRI, r3
    }
 8003844:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000010 	.word	0x20000010
	...

08003860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003860:	f3ef 8009 	mrs	r0, PSP
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <pxCurrentTCBConst>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	f01e 0f10 	tst.w	lr, #16
 8003870:	bf08      	it	eq
 8003872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800387a:	6010      	str	r0, [r2, #0]
 800387c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003884:	f380 8811 	msr	BASEPRI, r0
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f7ff f9a4 	bl	8002bdc <vTaskSwitchContext>
 8003894:	f04f 0000 	mov.w	r0, #0
 8003898:	f380 8811 	msr	BASEPRI, r0
 800389c:	bc09      	pop	{r0, r3}
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	6808      	ldr	r0, [r1, #0]
 80038a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a6:	f01e 0f10 	tst.w	lr, #16
 80038aa:	bf08      	it	eq
 80038ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038b0:	f380 8809 	msr	PSP, r0
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	f3af 8000 	nop.w

080038c0 <pxCurrentTCBConst>:
 80038c0:	200000c0 	.word	0x200000c0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop

080038c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
        __asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	607b      	str	r3, [r7, #4]
    }
 80038e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80038e2:	f002 fbb5 	bl	8006050 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80038e6:	f7ff f8bd 	bl	8002a64 <xTaskIncrementTick>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80038f0:	f002 fc0c 	bl	800610c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <SysTick_Handler+0x50>)
 80038f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e001      	b.n	8003902 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80038fe:	f002 fbe9 	bl	80060d4 <SEGGER_SYSVIEW_RecordExitISR>
 8003902:	2300      	movs	r3, #0
 8003904:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f383 8811 	msr	BASEPRI, r3
    }
 800390c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <vPortSetupTimerInterrupt+0x34>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <vPortSetupTimerInterrupt+0x38>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <vPortSetupTimerInterrupt+0x3c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <vPortSetupTimerInterrupt+0x40>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	4a09      	ldr	r2, [pc, #36]	; (8003960 <vPortSetupTimerInterrupt+0x44>)
 800393a:	3b01      	subs	r3, #1
 800393c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <vPortSetupTimerInterrupt+0x34>)
 8003940:	2207      	movs	r2, #7
 8003942:	601a      	str	r2, [r3, #0]
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000e010 	.word	0xe000e010
 8003954:	e000e018 	.word	0xe000e018
 8003958:	20000000 	.word	0x20000000
 800395c:	10624dd3 	.word	0x10624dd3
 8003960:	e000e014 	.word	0xe000e014

08003964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003974 <vPortEnableVFP+0x10>
 8003968:	6801      	ldr	r1, [r0, #0]
 800396a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800396e:	6001      	str	r1, [r0, #0]
 8003970:	4770      	bx	lr
 8003972:	0000      	.short	0x0000
 8003974:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop

0800397c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003982:	f3ef 8305 	mrs	r3, IPSR
 8003986:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d914      	bls.n	80039b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800398e:	4a17      	ldr	r2, [pc, #92]	; (80039ec <vPortValidateInterruptPriority+0x70>)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003998:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <vPortValidateInterruptPriority+0x74>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	7afa      	ldrb	r2, [r7, #11]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d20a      	bcs.n	80039b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	607b      	str	r3, [r7, #4]
    }
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <vPortValidateInterruptPriority+0x78>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039c0:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <vPortValidateInterruptPriority+0x7c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d90a      	bls.n	80039de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	603b      	str	r3, [r7, #0]
    }
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <vPortValidateInterruptPriority+0x60>
    }
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000e3f0 	.word	0xe000e3f0
 80039f0:	20000228 	.word	0x20000228
 80039f4:	e000ed0c 	.word	0xe000ed0c
 80039f8:	2000022c 	.word	0x2000022c

080039fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003a08:	f7fe ff6c 	bl	80028e4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003a0c:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <pvPortMalloc+0x1a8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003a14:	f000 f934 	bl	8003c80 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a18:	4b63      	ldr	r3, [pc, #396]	; (8003ba8 <pvPortMalloc+0x1ac>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f040 80a7 	bne.w	8003b74 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02d      	beq.n	8003a88 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d227      	bcs.n	8003a88 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003a38:	2208      	movs	r2, #8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d021      	beq.n	8003a8e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f023 0307 	bic.w	r3, r3, #7
 8003a50:	3308      	adds	r3, #8
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d214      	bcs.n	8003a82 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f023 0307 	bic.w	r3, r3, #7
 8003a5e:	3308      	adds	r3, #8
 8003a60:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <pvPortMalloc+0x92>
        __asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	617b      	str	r3, [r7, #20]
    }
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a86:	e002      	b.n	8003a8e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	e000      	b.n	8003a90 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a8e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d06e      	beq.n	8003b74 <pvPortMalloc+0x178>
 8003a96:	4b45      	ldr	r3, [pc, #276]	; (8003bac <pvPortMalloc+0x1b0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d869      	bhi.n	8003b74 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003aa0:	4b43      	ldr	r3, [pc, #268]	; (8003bb0 <pvPortMalloc+0x1b4>)
 8003aa2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003aa4:	4b42      	ldr	r3, [pc, #264]	; (8003bb0 <pvPortMalloc+0x1b4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003aaa:	e004      	b.n	8003ab6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d903      	bls.n	8003ac8 <pvPortMalloc+0xcc>
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f1      	bne.n	8003aac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003ac8:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <pvPortMalloc+0x1a8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d050      	beq.n	8003b74 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2208      	movs	r2, #8
 8003ad8:	4413      	add	r3, r2
 8003ada:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	1ad2      	subs	r2, r2, r3
 8003aec:	2308      	movs	r3, #8
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d91f      	bls.n	8003b34 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <pvPortMalloc+0x120>
        __asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	613b      	str	r3, [r7, #16]
    }
 8003b18:	bf00      	nop
 8003b1a:	e7fe      	b.n	8003b1a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	1ad2      	subs	r2, r2, r3
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b2e:	69b8      	ldr	r0, [r7, #24]
 8003b30:	f000 f908 	bl	8003d44 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b34:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <pvPortMalloc+0x1b0>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	4a1b      	ldr	r2, [pc, #108]	; (8003bac <pvPortMalloc+0x1b0>)
 8003b40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b42:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <pvPortMalloc+0x1b0>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <pvPortMalloc+0x1b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d203      	bcs.n	8003b56 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <pvPortMalloc+0x1b0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <pvPortMalloc+0x1b8>)
 8003b54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <pvPortMalloc+0x1ac>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <pvPortMalloc+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	4a11      	ldr	r2, [pc, #68]	; (8003bb8 <pvPortMalloc+0x1bc>)
 8003b72:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003b74:	f7fe fec4 	bl	8002900 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <pvPortMalloc+0x19c>
        __asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	60fb      	str	r3, [r7, #12]
    }
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <pvPortMalloc+0x19a>
    return pvReturn;
 8003b98:	69fb      	ldr	r3, [r7, #28]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3728      	adds	r7, #40	; 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20012e38 	.word	0x20012e38
 8003ba8:	20012e4c 	.word	0x20012e4c
 8003bac:	20012e3c 	.word	0x20012e3c
 8003bb0:	20012e30 	.word	0x20012e30
 8003bb4:	20012e40 	.word	0x20012e40
 8003bb8:	20012e44 	.word	0x20012e44

08003bbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d04d      	beq.n	8003c6a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003bce:	2308      	movs	r3, #8
 8003bd0:	425b      	negs	r3, r3
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <vPortFree+0xb8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <vPortFree+0x44>
        __asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	60fb      	str	r3, [r7, #12]
    }
 8003bfc:	bf00      	nop
 8003bfe:	e7fe      	b.n	8003bfe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <vPortFree+0x62>
        __asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	60bb      	str	r3, [r7, #8]
    }
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <vPortFree+0xb8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01e      	beq.n	8003c6a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d11a      	bne.n	8003c6a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <vPortFree+0xb8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	401a      	ands	r2, r3
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c44:	f7fe fe4e 	bl	80028e4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <vPortFree+0xbc>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4413      	add	r3, r2
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <vPortFree+0xbc>)
 8003c54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c56:	6938      	ldr	r0, [r7, #16]
 8003c58:	f000 f874 	bl	8003d44 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c5c:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <vPortFree+0xc0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	4a06      	ldr	r2, [pc, #24]	; (8003c7c <vPortFree+0xc0>)
 8003c64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003c66:	f7fe fe4b 	bl	8002900 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003c6a:	bf00      	nop
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20012e4c 	.word	0x20012e4c
 8003c78:	20012e3c 	.word	0x20012e3c
 8003c7c:	20012e48 	.word	0x20012e48

08003c80 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c86:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003c8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003c8c:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <prvHeapInit+0xac>)
 8003c8e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00c      	beq.n	8003cb4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3307      	adds	r3, #7
 8003c9e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0307 	bic.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <prvHeapInit+0xac>)
 8003cb0:	4413      	add	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <prvHeapInit+0xb0>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <prvHeapInit+0xb0>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	4413      	add	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003ccc:	2208      	movs	r2, #8
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0307 	bic.w	r3, r3, #7
 8003cda:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <prvHeapInit+0xb4>)
 8003ce0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <prvHeapInit+0xb4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <prvHeapInit+0xb4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	1ad2      	subs	r2, r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <prvHeapInit+0xb4>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <prvHeapInit+0xb8>)
 8003d0e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <prvHeapInit+0xbc>)
 8003d16:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <prvHeapInit+0xc0>)
 8003d1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d1e:	601a      	str	r2, [r3, #0]
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20000230 	.word	0x20000230
 8003d30:	20012e30 	.word	0x20012e30
 8003d34:	20012e38 	.word	0x20012e38
 8003d38:	20012e40 	.word	0x20012e40
 8003d3c:	20012e3c 	.word	0x20012e3c
 8003d40:	20012e4c 	.word	0x20012e4c

08003d44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d4c:	4b28      	ldr	r3, [pc, #160]	; (8003df0 <prvInsertBlockIntoFreeList+0xac>)
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e002      	b.n	8003d58 <prvInsertBlockIntoFreeList+0x14>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d8f7      	bhi.n	8003d52 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d108      	bne.n	8003d86 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	441a      	add	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	441a      	add	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d118      	bne.n	8003dcc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <prvInsertBlockIntoFreeList+0xb0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d00d      	beq.n	8003dc2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	441a      	add	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e008      	b.n	8003dd4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <prvInsertBlockIntoFreeList+0xb0>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e003      	b.n	8003dd4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d002      	beq.n	8003de2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20012e30 	.word	0x20012e30
 8003df4:	20012e38 	.word	0x20012e38

08003df8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003dfc:	4803      	ldr	r0, [pc, #12]	; (8003e0c <_cbSendSystemDesc+0x14>)
 8003dfe:	f002 f8d1 	bl	8005fa4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003e02:	4803      	ldr	r0, [pc, #12]	; (8003e10 <_cbSendSystemDesc+0x18>)
 8003e04:	f002 f8ce 	bl	8005fa4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003e08:	bf00      	nop
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	08007208 	.word	0x08007208
 8003e10:	0800723c 	.word	0x0800723c

08003e14 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <SEGGER_SYSVIEW_Conf+0x20>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <SEGGER_SYSVIEW_Conf+0x20>)
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <SEGGER_SYSVIEW_Conf+0x24>)
 8003e22:	4a06      	ldr	r2, [pc, #24]	; (8003e3c <SEGGER_SYSVIEW_Conf+0x28>)
 8003e24:	f001 fc02 	bl	800562c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003e28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003e2c:	f001 fc42 	bl	80056b4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003e30:	bf00      	nop
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20000000 	.word	0x20000000
 8003e38:	08003df9 	.word	0x08003df9
 8003e3c:	080072dc 	.word	0x080072dc

08003e40 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	e033      	b.n	8003eb4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003e4c:	491e      	ldr	r1, [pc, #120]	; (8003ec8 <_cbSendTaskList+0x88>)
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	491a      	ldr	r1, [pc, #104]	; (8003ec8 <_cbSendTaskList+0x88>)
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	6819      	ldr	r1, [r3, #0]
 8003e6e:	4c16      	ldr	r4, [pc, #88]	; (8003ec8 <_cbSendTaskList+0x88>)
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4423      	add	r3, r4
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	681c      	ldr	r4, [r3, #0]
 8003e80:	4d11      	ldr	r5, [pc, #68]	; (8003ec8 <_cbSendTaskList+0x88>)
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	442b      	add	r3, r5
 8003e8e:	330c      	adds	r3, #12
 8003e90:	681d      	ldr	r5, [r3, #0]
 8003e92:	4e0d      	ldr	r6, [pc, #52]	; (8003ec8 <_cbSendTaskList+0x88>)
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4433      	add	r3, r6
 8003ea0:	3310      	adds	r3, #16
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	462b      	mov	r3, r5
 8003ea8:	4622      	mov	r2, r4
 8003eaa:	f000 f8b5 	bl	8004018 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	607b      	str	r3, [r7, #4]
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <_cbSendTaskList+0x8c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d3c6      	bcc.n	8003e4c <_cbSendTaskList+0xc>
  }
}
 8003ebe:	bf00      	nop
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ec8:	20012e50 	.word	0x20012e50
 8003ecc:	20012ef0 	.word	0x20012ef0

08003ed0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003ed0:	b5b0      	push	{r4, r5, r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003ed6:	f7fe fdb3 	bl	8002a40 <xTaskGetTickCountFromISR>
 8003eda:	4603      	mov	r3, r0
 8003edc:	461a      	mov	r2, r3
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003ee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	f04f 0400 	mov.w	r4, #0
 8003ef2:	f04f 0500 	mov.w	r5, #0
 8003ef6:	015d      	lsls	r5, r3, #5
 8003ef8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003efc:	0154      	lsls	r4, r2, #5
 8003efe:	4622      	mov	r2, r4
 8003f00:	462b      	mov	r3, r5
 8003f02:	1a12      	subs	r2, r2, r0
 8003f04:	eb63 0301 	sbc.w	r3, r3, r1
 8003f08:	f04f 0400 	mov.w	r4, #0
 8003f0c:	f04f 0500 	mov.w	r5, #0
 8003f10:	009d      	lsls	r5, r3, #2
 8003f12:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003f16:	0094      	lsls	r4, r2, #2
 8003f18:	4622      	mov	r2, r4
 8003f1a:	462b      	mov	r3, r5
 8003f1c:	1812      	adds	r2, r2, r0
 8003f1e:	eb41 0303 	adc.w	r3, r1, r3
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f04f 0100 	mov.w	r1, #0
 8003f2a:	00d9      	lsls	r1, r3, #3
 8003f2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f30:	00d0      	lsls	r0, r2, #3
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8003f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003f3e:	4610      	mov	r0, r2
 8003f40:	4619      	mov	r1, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bdb0      	pop	{r4, r5, r7, pc}

08003f48 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003f56:	2205      	movs	r2, #5
 8003f58:	492b      	ldr	r1, [pc, #172]	; (8004008 <SYSVIEW_AddTask+0xc0>)
 8003f5a:	68b8      	ldr	r0, [r7, #8]
 8003f5c:	f002 fc3a 	bl	80067d4 <memcmp>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d04b      	beq.n	8003ffe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003f66:	4b29      	ldr	r3, [pc, #164]	; (800400c <SYSVIEW_AddTask+0xc4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b07      	cmp	r3, #7
 8003f6c:	d903      	bls.n	8003f76 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003f6e:	4828      	ldr	r0, [pc, #160]	; (8004010 <SYSVIEW_AddTask+0xc8>)
 8003f70:	f002 fb2a 	bl	80065c8 <SEGGER_SYSVIEW_Warn>
    return;
 8003f74:	e044      	b.n	8004000 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003f76:	4b25      	ldr	r3, [pc, #148]	; (800400c <SYSVIEW_AddTask+0xc4>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4926      	ldr	r1, [pc, #152]	; (8004014 <SYSVIEW_AddTask+0xcc>)
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003f8a:	4b20      	ldr	r3, [pc, #128]	; (800400c <SYSVIEW_AddTask+0xc4>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4921      	ldr	r1, [pc, #132]	; (8004014 <SYSVIEW_AddTask+0xcc>)
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	; (800400c <SYSVIEW_AddTask+0xc4>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	491b      	ldr	r1, [pc, #108]	; (8004014 <SYSVIEW_AddTask+0xcc>)
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <SYSVIEW_AddTask+0xc4>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4916      	ldr	r1, [pc, #88]	; (8004014 <SYSVIEW_AddTask+0xcc>)
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <SYSVIEW_AddTask+0xc4>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4910      	ldr	r1, [pc, #64]	; (8004014 <SYSVIEW_AddTask+0xcc>)
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	3310      	adds	r3, #16
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <SYSVIEW_AddTask+0xc4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	4a08      	ldr	r2, [pc, #32]	; (800400c <SYSVIEW_AddTask+0xc4>)
 8003fea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f80e 	bl	8004018 <SYSVIEW_SendTaskInfo>
 8003ffc:	e000      	b.n	8004000 <SYSVIEW_AddTask+0xb8>
    return;
 8003ffe:	bf00      	nop

}
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	0800724c 	.word	0x0800724c
 800400c:	20012ef0 	.word	0x20012ef0
 8004010:	08007254 	.word	0x08007254
 8004014:	20012e50 	.word	0x20012e50

08004018 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004026:	f107 0314 	add.w	r3, r7, #20
 800402a:	2214      	movs	r2, #20
 800402c:	2100      	movs	r1, #0
 800402e:	4618      	mov	r0, r3
 8004030:	f002 fbec 	bl	800680c <memset>
  TaskInfo.TaskID     = TaskID;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004048:	f107 0314 	add.w	r3, r7, #20
 800404c:	4618      	mov	r0, r3
 800404e:	f001 feb1 	bl	8005db4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004052:	bf00      	nop
 8004054:	3728      	adds	r7, #40	; 0x28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <__NVIC_EnableIRQ>:
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	2b00      	cmp	r3, #0
 800406c:	db0b      	blt.n	8004086 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	f003 021f 	and.w	r2, r3, #31
 8004074:	4907      	ldr	r1, [pc, #28]	; (8004094 <__NVIC_EnableIRQ+0x38>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2001      	movs	r0, #1
 800407e:	fa00 f202 	lsl.w	r2, r0, r2
 8004082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	e000e100 	.word	0xe000e100

08004098 <__NVIC_SetPriority>:
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	6039      	str	r1, [r7, #0]
 80040a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	db0a      	blt.n	80040c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	490c      	ldr	r1, [pc, #48]	; (80040e4 <__NVIC_SetPriority+0x4c>)
 80040b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b6:	0112      	lsls	r2, r2, #4
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	440b      	add	r3, r1
 80040bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040c0:	e00a      	b.n	80040d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	4908      	ldr	r1, [pc, #32]	; (80040e8 <__NVIC_SetPriority+0x50>)
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	3b04      	subs	r3, #4
 80040d0:	0112      	lsls	r2, r2, #4
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	440b      	add	r3, r1
 80040d6:	761a      	strb	r2, [r3, #24]
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	e000e100 	.word	0xe000e100
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80040f2:	f002 fac5 	bl	8006680 <SEGGER_SYSVIEW_IsStarted>
 80040f6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80040fe:	f001 fcdd 	bl	8005abc <SEGGER_SYSVIEW_Start>
  }
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <_cbOnUARTRx+0x3c>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b03      	cmp	r3, #3
 800411c:	d806      	bhi.n	800412c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <_cbOnUARTRx+0x3c>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	3301      	adds	r3, #1
 8004124:	b2da      	uxtb	r2, r3
 8004126:	4b08      	ldr	r3, [pc, #32]	; (8004148 <_cbOnUARTRx+0x3c>)
 8004128:	701a      	strb	r2, [r3, #0]
    goto Done;
 800412a:	e009      	b.n	8004140 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800412c:	f7ff ffde 	bl	80040ec <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <_cbOnUARTRx+0x3c>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4618      	mov	r0, r3
 8004136:	1dfb      	adds	r3, r7, #7
 8004138:	2201      	movs	r2, #1
 800413a:	4619      	mov	r1, r3
 800413c:	f000 fb9a 	bl	8004874 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004140:	bf00      	nop
}
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000014 	.word	0x20000014

0800414c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <_cbOnUARTTx+0x5c>)
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d80f      	bhi.n	800417c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800415c:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <_cbOnUARTTx+0x5c>)
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	461a      	mov	r2, r3
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <_cbOnUARTTx+0x60>)
 8004164:	5c9a      	ldrb	r2, [r3, r2]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800416a:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <_cbOnUARTTx+0x5c>)
 800416c:	785b      	ldrb	r3, [r3, #1]
 800416e:	3301      	adds	r3, #1
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <_cbOnUARTTx+0x5c>)
 8004174:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	60fb      	str	r3, [r7, #12]
    goto Done;
 800417a:	e00f      	b.n	800419c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <_cbOnUARTTx+0x5c>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fa19 	bl	80045bc <SEGGER_RTT_ReadUpBufferNoLock>
 800418a:	4603      	mov	r3, r0
 800418c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	da02      	bge.n	800419a <_cbOnUARTTx+0x4e>
    r = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e000      	b.n	800419c <_cbOnUARTTx+0x50>
  }
Done:
 800419a:	bf00      	nop
  return r;
 800419c:	68fb      	ldr	r3, [r7, #12]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000014 	.word	0x20000014
 80041ac:	080072e4 	.word	0x080072e4

080041b0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80041b8:	4a04      	ldr	r2, [pc, #16]	; (80041cc <SEGGER_UART_init+0x1c>)
 80041ba:	4905      	ldr	r1, [pc, #20]	; (80041d0 <SEGGER_UART_init+0x20>)
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f863 	bl	8004288 <HIF_UART_Init>
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	0800410d 	.word	0x0800410d
 80041d0:	0800414d 	.word	0x0800414d

080041d4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80041da:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <USART2_IRQHandler+0x80>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d011      	beq.n	800420e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <USART2_IRQHandler+0x84>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f003 030b 	and.w	r3, r3, #11
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d108      	bne.n	800420e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80041fc:	4b17      	ldr	r3, [pc, #92]	; (800425c <USART2_IRQHandler+0x88>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004204:	4b15      	ldr	r3, [pc, #84]	; (800425c <USART2_IRQHandler+0x88>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	79fa      	ldrb	r2, [r7, #7]
 800420a:	4610      	mov	r0, r2
 800420c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01a      	beq.n	800424e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <USART2_IRQHandler+0x8c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d015      	beq.n	800424c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <USART2_IRQHandler+0x8c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	1dfa      	adds	r2, r7, #7
 8004226:	4610      	mov	r0, r2
 8004228:	4798      	blx	r3
 800422a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <USART2_IRQHandler+0x90>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a0b      	ldr	r2, [pc, #44]	; (8004264 <USART2_IRQHandler+0x90>)
 8004238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e006      	b.n	800424e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <USART2_IRQHandler+0x80>)
 8004242:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004244:	79fa      	ldrb	r2, [r7, #7]
 8004246:	4b04      	ldr	r3, [pc, #16]	; (8004258 <USART2_IRQHandler+0x84>)
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e000      	b.n	800424e <USART2_IRQHandler+0x7a>
      return;
 800424c:	bf00      	nop
    }
  }
}
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40004400 	.word	0x40004400
 8004258:	40004404 	.word	0x40004404
 800425c:	20012ef4 	.word	0x20012ef4
 8004260:	20012ef8 	.word	0x20012ef8
 8004264:	4000440c 	.word	0x4000440c

08004268 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a04      	ldr	r2, [pc, #16]	; (8004284 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004276:	6013      	str	r3, [r2, #0]
}
 8004278:	bf00      	nop
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	4000440c 	.word	0x4000440c

08004288 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004294:	4b2e      	ldr	r3, [pc, #184]	; (8004350 <HIF_UART_Init+0xc8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a2d      	ldr	r2, [pc, #180]	; (8004350 <HIF_UART_Init+0xc8>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80042a0:	4b2c      	ldr	r3, [pc, #176]	; (8004354 <HIF_UART_Init+0xcc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2b      	ldr	r2, [pc, #172]	; (8004354 <HIF_UART_Init+0xcc>)
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80042ac:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <HIF_UART_Init+0xd0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80042c0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80042c2:	4a25      	ldr	r2, [pc, #148]	; (8004358 <HIF_UART_Init+0xd0>)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80042c8:	4b24      	ldr	r3, [pc, #144]	; (800435c <HIF_UART_Init+0xd4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80042dc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80042de:	4a1f      	ldr	r2, [pc, #124]	; (800435c <HIF_UART_Init+0xd4>)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80042e4:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <HIF_UART_Init+0xd8>)
 80042e6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80042ea:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80042ec:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <HIF_UART_Init+0xdc>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80042f2:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <HIF_UART_Init+0xe0>)
 80042f4:	2280      	movs	r2, #128	; 0x80
 80042f6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80042fe:	4a1b      	ldr	r2, [pc, #108]	; (800436c <HIF_UART_Init+0xe4>)
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	3301      	adds	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	d302      	bcc.n	800431e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004318:	f640 73ff 	movw	r3, #4095	; 0xfff
 800431c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	4a11      	ldr	r2, [pc, #68]	; (8004370 <HIF_UART_Init+0xe8>)
 800432a:	b29b      	uxth	r3, r3
 800432c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800432e:	4a11      	ldr	r2, [pc, #68]	; (8004374 <HIF_UART_Init+0xec>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004334:	4a10      	ldr	r2, [pc, #64]	; (8004378 <HIF_UART_Init+0xf0>)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800433a:	2106      	movs	r1, #6
 800433c:	2026      	movs	r0, #38	; 0x26
 800433e:	f7ff feab 	bl	8004098 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004342:	2026      	movs	r0, #38	; 0x26
 8004344:	f7ff fe8a 	bl	800405c <__NVIC_EnableIRQ>
}
 8004348:	bf00      	nop
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40023840 	.word	0x40023840
 8004354:	40023830 	.word	0x40023830
 8004358:	40020020 	.word	0x40020020
 800435c:	40020000 	.word	0x40020000
 8004360:	4000440c 	.word	0x4000440c
 8004364:	40004410 	.word	0x40004410
 8004368:	40004414 	.word	0x40004414
 800436c:	05f5e100 	.word	0x05f5e100
 8004370:	40004408 	.word	0x40004408
 8004374:	20012ef4 	.word	0x20012ef4
 8004378:	20012ef8 	.word	0x20012ef8

0800437c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <_DoInit+0x98>)
 8004384:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2203      	movs	r2, #3
 800438a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2203      	movs	r2, #3
 8004390:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a20      	ldr	r2, [pc, #128]	; (8004418 <_DoInit+0x9c>)
 8004396:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a20      	ldr	r2, [pc, #128]	; (800441c <_DoInit+0xa0>)
 800439c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043a4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a17      	ldr	r2, [pc, #92]	; (8004418 <_DoInit+0x9c>)
 80043bc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a17      	ldr	r2, [pc, #92]	; (8004420 <_DoInit+0xa4>)
 80043c2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2210      	movs	r2, #16
 80043c8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3307      	adds	r3, #7
 80043e0:	4a10      	ldr	r2, [pc, #64]	; (8004424 <_DoInit+0xa8>)
 80043e2:	6810      	ldr	r0, [r2, #0]
 80043e4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80043e6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a0e      	ldr	r2, [pc, #56]	; (8004428 <_DoInit+0xac>)
 80043ee:	6810      	ldr	r0, [r2, #0]
 80043f0:	6018      	str	r0, [r3, #0]
 80043f2:	8891      	ldrh	r1, [r2, #4]
 80043f4:	7992      	ldrb	r2, [r2, #6]
 80043f6:	8099      	strh	r1, [r3, #4]
 80043f8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80043fa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004404:	f3bf 8f5f 	dmb	sy
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	20013894 	.word	0x20013894
 8004418:	080072a4 	.word	0x080072a4
 800441c:	20012efc 	.word	0x20012efc
 8004420:	200132fc 	.word	0x200132fc
 8004424:	080072b0 	.word	0x080072b0
 8004428:	080072b4 	.word	0x080072b4

0800442c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004438:	2300      	movs	r3, #0
 800443a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	429a      	cmp	r2, r3
 800444e:	d905      	bls.n	800445c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
 800445a:	e007      	b.n	800446c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	69b9      	ldr	r1, [r7, #24]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	1acb      	subs	r3, r1, r3
 8004466:	4413      	add	r3, r2
 8004468:	3b01      	subs	r3, #1
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004476:	4293      	cmp	r3, r2
 8004478:	bf28      	it	cs
 800447a:	4613      	movcs	r3, r2
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800447e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4293      	cmp	r3, r2
 8004484:	bf28      	it	cs
 8004486:	4613      	movcs	r3, r2
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	6978      	ldr	r0, [r7, #20]
 800449a:	f002 f9a9 	bl	80067f0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800449e:	6a3a      	ldr	r2, [r7, #32]
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	4413      	add	r3, r2
 80044a4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	4413      	add	r3, r2
 80044ac:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	4413      	add	r3, r2
 80044bc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d101      	bne.n	80044cc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80044cc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1b2      	bne.n	8004442 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80044dc:	6a3b      	ldr	r3, [r7, #32]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3728      	adds	r7, #40	; 0x28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b088      	sub	sp, #32
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	429a      	cmp	r2, r3
 8004508:	d911      	bls.n	800452e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	6938      	ldr	r0, [r7, #16]
 800451a:	f002 f969 	bl	80067f0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800451e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	441a      	add	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800452c:	e01f      	b.n	800456e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	6938      	ldr	r0, [r7, #16]
 8004542:	f002 f955 	bl	80067f0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	4413      	add	r3, r2
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4619      	mov	r1, r3
 800455e:	6938      	ldr	r0, [r7, #16]
 8004560:	f002 f946 	bl	80067f0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004564:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	60da      	str	r2, [r3, #12]
}
 800456e:	bf00      	nop
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004576:	b480      	push	{r7}
 8004578:	b087      	sub	sp, #28
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	429a      	cmp	r2, r3
 8004590:	d808      	bhi.n	80045a4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1ad2      	subs	r2, r2, r3
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4413      	add	r3, r2
 800459e:	3b01      	subs	r3, #1
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	e004      	b.n	80045ae <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
  }
  return r;
 80045ae:	697b      	ldr	r3, [r7, #20]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08c      	sub	sp, #48	; 0x30
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80045c8:	4b3e      	ldr	r3, [pc, #248]	; (80046c4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80045d6:	f7ff fed1 	bl	800437c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4a37      	ldr	r2, [pc, #220]	; (80046c4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80045e8:	4413      	add	r3, r2
 80045ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80045fc:	2300      	movs	r3, #0
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	429a      	cmp	r2, r3
 8004606:	d92b      	bls.n	8004660 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4293      	cmp	r3, r2
 8004618:	bf28      	it	cs
 800461a:	4613      	movcs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	4413      	add	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	6939      	ldr	r1, [r7, #16]
 800462c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800462e:	f002 f8df 	bl	80067f0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	4413      	add	r3, r2
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	4413      	add	r3, r2
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800464a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	4413      	add	r3, r2
 8004650:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004658:	429a      	cmp	r2, r3
 800465a:	d101      	bne.n	8004660 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800465c:	2300      	movs	r3, #0
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4293      	cmp	r3, r2
 800466e:	bf28      	it	cs
 8004670:	4613      	movcs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d019      	beq.n	80046ae <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	4413      	add	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	6939      	ldr	r1, [r7, #16]
 8004688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800468a:	f002 f8b1 	bl	80067f0 <memcpy>
    NumBytesRead += NumBytesRem;
 800468e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4413      	add	r3, r2
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	4413      	add	r3, r2
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80046a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	4413      	add	r3, r2
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3730      	adds	r7, #48	; 0x30
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20013894 	.word	0x20013894

080046c8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08c      	sub	sp, #48	; 0x30
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80046d4:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80046d6:	623b      	str	r3, [r7, #32]
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <SEGGER_RTT_ReadNoLock+0x1e>
 80046e2:	f7ff fe4b 	bl	800437c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4613      	mov	r3, r2
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	4413      	add	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	3360      	adds	r3, #96	; 0x60
 80046f2:	4a37      	ldr	r2, [pc, #220]	; (80047d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80046f4:	4413      	add	r3, r2
 80046f6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004708:	2300      	movs	r3, #0
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800470c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	429a      	cmp	r2, r3
 8004712:	d92b      	bls.n	800476c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4293      	cmp	r3, r2
 8004724:	bf28      	it	cs
 8004726:	4613      	movcs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	4413      	add	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	6939      	ldr	r1, [r7, #16]
 8004738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800473a:	f002 f859 	bl	80067f0 <memcpy>
    NumBytesRead += NumBytesRem;
 800473e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	4413      	add	r3, r2
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4413      	add	r3, r2
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4413      	add	r3, r2
 800475c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004764:	429a      	cmp	r2, r3
 8004766:	d101      	bne.n	800476c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004768:	2300      	movs	r3, #0
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4293      	cmp	r3, r2
 800477a:	bf28      	it	cs
 800477c:	4613      	movcs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d019      	beq.n	80047ba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	4413      	add	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	6939      	ldr	r1, [r7, #16]
 8004794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004796:	f002 f82b 	bl	80067f0 <memcpy>
    NumBytesRead += NumBytesRem;
 800479a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	4413      	add	r3, r2
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80047a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4413      	add	r3, r2
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80047b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	4413      	add	r3, r2
 80047b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3730      	adds	r7, #48	; 0x30
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20013894 	.word	0x20013894

080047d4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4613      	mov	r3, r2
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	4413      	add	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	3360      	adds	r3, #96	; 0x60
 80047f0:	4a1f      	ldr	r2, [pc, #124]	; (8004870 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80047f2:	4413      	add	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d029      	beq.n	8004852 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d82e      	bhi.n	8004860 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004806:	2b01      	cmp	r3, #1
 8004808:	d013      	beq.n	8004832 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800480a:	e029      	b.n	8004860 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800480c:	6978      	ldr	r0, [r7, #20]
 800480e:	f7ff feb2 	bl	8004576 <_GetAvailWriteSpace>
 8004812:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	429a      	cmp	r2, r3
 800481a:	d202      	bcs.n	8004822 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004820:	e021      	b.n	8004866 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	69b9      	ldr	r1, [r7, #24]
 800482a:	6978      	ldr	r0, [r7, #20]
 800482c:	f7ff fe5b 	bl	80044e6 <_WriteNoCheck>
    break;
 8004830:	e019      	b.n	8004866 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004832:	6978      	ldr	r0, [r7, #20]
 8004834:	f7ff fe9f 	bl	8004576 <_GetAvailWriteSpace>
 8004838:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4293      	cmp	r3, r2
 8004840:	bf28      	it	cs
 8004842:	4613      	movcs	r3, r2
 8004844:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	69b9      	ldr	r1, [r7, #24]
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	f7ff fe4b 	bl	80044e6 <_WriteNoCheck>
    break;
 8004850:	e009      	b.n	8004866 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	69b9      	ldr	r1, [r7, #24]
 8004856:	6978      	ldr	r0, [r7, #20]
 8004858:	f7ff fde8 	bl	800442c <_WriteBlocking>
 800485c:	61f8      	str	r0, [r7, #28]
    break;
 800485e:	e002      	b.n	8004866 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]
    break;
 8004864:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004866:	69fb      	ldr	r3, [r7, #28]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20013894 	.word	0x20013894

08004874 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004880:	4b0e      	ldr	r3, [pc, #56]	; (80048bc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800488e:	f7ff fd75 	bl	800437c <_DoInit>
  SEGGER_RTT_LOCK();
 8004892:	f3ef 8311 	mrs	r3, BASEPRI
 8004896:	f04f 0120 	mov.w	r1, #32
 800489a:	f381 8811 	msr	BASEPRI, r1
 800489e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff ff95 	bl	80047d4 <SEGGER_RTT_WriteDownBufferNoLock>
 80048aa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80048b2:	697b      	ldr	r3, [r7, #20]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3720      	adds	r7, #32
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20013894 	.word	0x20013894

080048c0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80048ce:	4b3d      	ldr	r3, [pc, #244]	; (80049c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80048dc:	f7ff fd4e 	bl	800437c <_DoInit>
  SEGGER_RTT_LOCK();
 80048e0:	f3ef 8311 	mrs	r3, BASEPRI
 80048e4:	f04f 0120 	mov.w	r1, #32
 80048e8:	f381 8811 	msr	BASEPRI, r1
 80048ec:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80048ee:	4b35      	ldr	r3, [pc, #212]	; (80049c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80048f0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80048f6:	6939      	ldr	r1, [r7, #16]
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	4613      	mov	r3, r2
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4413      	add	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	440b      	add	r3, r1
 8004906:	3304      	adds	r3, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3301      	adds	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	429a      	cmp	r2, r3
 800491c:	dbeb      	blt.n	80048f6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800491e:	e000      	b.n	8004922 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004920:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	429a      	cmp	r2, r3
 800492a:	da3f      	bge.n	80049ac <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800492c:	6939      	ldr	r1, [r7, #16]
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	4613      	mov	r3, r2
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	4413      	add	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	440b      	add	r3, r1
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004940:	6939      	ldr	r1, [r7, #16]
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	440b      	add	r3, r1
 8004950:	3304      	adds	r3, #4
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004956:	6939      	ldr	r1, [r7, #16]
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	4613      	mov	r3, r2
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	4413      	add	r3, r2
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	440b      	add	r3, r1
 8004964:	3320      	adds	r3, #32
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800496a:	6939      	ldr	r1, [r7, #16]
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	4613      	mov	r3, r2
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	4413      	add	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	440b      	add	r3, r1
 8004978:	3328      	adds	r3, #40	; 0x28
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800497e:	6939      	ldr	r1, [r7, #16]
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	4613      	mov	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	440b      	add	r3, r1
 800498c:	3324      	adds	r3, #36	; 0x24
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004992:	6939      	ldr	r1, [r7, #16]
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	4613      	mov	r3, r2
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	4413      	add	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	440b      	add	r3, r1
 80049a0:	332c      	adds	r3, #44	; 0x2c
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80049a6:	f3bf 8f5f 	dmb	sy
 80049aa:	e002      	b.n	80049b2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80049ac:	f04f 33ff 	mov.w	r3, #4294967295
 80049b0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80049b8:	69fb      	ldr	r3, [r7, #28]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20013894 	.word	0x20013894

080049c8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80049d6:	4b33      	ldr	r3, [pc, #204]	; (8004aa4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80049e4:	f7ff fcca 	bl	800437c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80049e8:	4b2e      	ldr	r3, [pc, #184]	; (8004aa4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80049ea:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	461a      	mov	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d24d      	bcs.n	8004a94 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80049f8:	f3ef 8311 	mrs	r3, BASEPRI
 80049fc:	f04f 0120 	mov.w	r1, #32
 8004a00:	f381 8811 	msr	BASEPRI, r1
 8004a04:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d031      	beq.n	8004a70 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004a0c:	6979      	ldr	r1, [r7, #20]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4613      	mov	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	440b      	add	r3, r1
 8004a1a:	3360      	adds	r3, #96	; 0x60
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004a20:	6979      	ldr	r1, [r7, #20]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4613      	mov	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4413      	add	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3364      	adds	r3, #100	; 0x64
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004a34:	6979      	ldr	r1, [r7, #20]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	4413      	add	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	440b      	add	r3, r1
 8004a42:	3368      	adds	r3, #104	; 0x68
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004a48:	6979      	ldr	r1, [r7, #20]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	4413      	add	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	440b      	add	r3, r1
 8004a56:	3370      	adds	r3, #112	; 0x70
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004a5c:	6979      	ldr	r1, [r7, #20]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4613      	mov	r3, r2
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	4413      	add	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	440b      	add	r3, r1
 8004a6a:	336c      	adds	r3, #108	; 0x6c
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004a70:	6979      	ldr	r1, [r7, #20]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4613      	mov	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	4413      	add	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	440b      	add	r3, r1
 8004a7e:	3374      	adds	r3, #116	; 0x74
 8004a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a82:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004a84:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	e002      	b.n	8004a9a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004a94:	f04f 33ff 	mov.w	r3, #4294967295
 8004a98:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004a9a:	69fb      	ldr	r3, [r7, #28]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20013894 	.word	0x20013894

08004aa8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004ab8:	e002      	b.n	8004ac0 <_EncodeStr+0x18>
    Len++;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	3301      	adds	r3, #1
 8004abe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f6      	bne.n	8004aba <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d901      	bls.n	8004ad8 <_EncodeStr+0x30>
    Len = Limit;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2bfe      	cmp	r3, #254	; 0xfe
 8004adc:	d806      	bhi.n	8004aec <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	60fa      	str	r2, [r7, #12]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	e011      	b.n	8004b10 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	60fa      	str	r2, [r7, #12]
 8004af2:	22ff      	movs	r2, #255	; 0xff
 8004af4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	60fa      	str	r2, [r7, #12]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	0a19      	lsrs	r1, r3, #8
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	60fa      	str	r2, [r7, #12]
 8004b0c:	b2ca      	uxtb	r2, r1
 8004b0e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004b14:	e00a      	b.n	8004b2c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	1c53      	adds	r3, r2, #1
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1c59      	adds	r1, r3, #1
 8004b20:	60f9      	str	r1, [r7, #12]
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	701a      	strb	r2, [r3, #0]
    n++;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d3f0      	bcc.n	8004b16 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004b34:	68fb      	ldr	r3, [r7, #12]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b62:	4b36      	ldr	r3, [pc, #216]	; (8004c3c <_HandleIncomingPacket+0xe0>)
 8004b64:	7e1b      	ldrb	r3, [r3, #24]
 8004b66:	4618      	mov	r0, r3
 8004b68:	1cfb      	adds	r3, r7, #3
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f7ff fdab 	bl	80046c8 <SEGGER_RTT_ReadNoLock>
 8004b72:	4603      	mov	r3, r0
 8004b74:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	dd54      	ble.n	8004c26 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d032      	beq.n	8004be8 <_HandleIncomingPacket+0x8c>
 8004b82:	2b80      	cmp	r3, #128	; 0x80
 8004b84:	dc42      	bgt.n	8004c0c <_HandleIncomingPacket+0xb0>
 8004b86:	2b07      	cmp	r3, #7
 8004b88:	dc16      	bgt.n	8004bb8 <_HandleIncomingPacket+0x5c>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	dd3e      	ble.n	8004c0c <_HandleIncomingPacket+0xb0>
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	2b06      	cmp	r3, #6
 8004b92:	d83b      	bhi.n	8004c0c <_HandleIncomingPacket+0xb0>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <_HandleIncomingPacket+0x40>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bbf 	.word	0x08004bbf
 8004ba0:	08004bc5 	.word	0x08004bc5
 8004ba4:	08004bcb 	.word	0x08004bcb
 8004ba8:	08004bd1 	.word	0x08004bd1
 8004bac:	08004bd7 	.word	0x08004bd7
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	08004be3 	.word	0x08004be3
 8004bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004bba:	d036      	beq.n	8004c2a <_HandleIncomingPacket+0xce>
 8004bbc:	e026      	b.n	8004c0c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004bbe:	f000 ff7d 	bl	8005abc <SEGGER_SYSVIEW_Start>
      break;
 8004bc2:	e037      	b.n	8004c34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004bc4:	f001 f836 	bl	8005c34 <SEGGER_SYSVIEW_Stop>
      break;
 8004bc8:	e034      	b.n	8004c34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004bca:	f001 fa0f 	bl	8005fec <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004bce:	e031      	b.n	8004c34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004bd0:	f001 f9d4 	bl	8005f7c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004bd4:	e02e      	b.n	8004c34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004bd6:	f001 f853 	bl	8005c80 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004bda:	e02b      	b.n	8004c34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004bdc:	f001 fca2 	bl	8006524 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004be0:	e028      	b.n	8004c34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004be2:	f001 fc81 	bl	80064e8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004be6:	e025      	b.n	8004c34 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004be8:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <_HandleIncomingPacket+0xe0>)
 8004bea:	7e1b      	ldrb	r3, [r3, #24]
 8004bec:	4618      	mov	r0, r3
 8004bee:	1cfb      	adds	r3, r7, #3
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f7ff fd68 	bl	80046c8 <SEGGER_RTT_ReadNoLock>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	dd15      	ble.n	8004c2e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f001 fbef 	bl	80063e8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004c0a:	e010      	b.n	8004c2e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	b25b      	sxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	da0e      	bge.n	8004c32 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <_HandleIncomingPacket+0xe0>)
 8004c16:	7e1b      	ldrb	r3, [r3, #24]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	1cfb      	adds	r3, r7, #3
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f7ff fd52 	bl	80046c8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004c24:	e005      	b.n	8004c32 <_HandleIncomingPacket+0xd6>
    }
  }
 8004c26:	bf00      	nop
 8004c28:	e004      	b.n	8004c34 <_HandleIncomingPacket+0xd8>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e002      	b.n	8004c34 <_HandleIncomingPacket+0xd8>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e000      	b.n	8004c34 <_HandleIncomingPacket+0xd8>
      break;
 8004c32:	bf00      	nop
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20013714 	.word	0x20013714

08004c40 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08c      	sub	sp, #48	; 0x30
 8004c44:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004c46:	2301      	movs	r3, #1
 8004c48:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c54:	4b32      	ldr	r3, [pc, #200]	; (8004d20 <_TrySendOverflowPacket+0xe0>)
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c5a:	e00b      	b.n	8004c74 <_TrySendOverflowPacket+0x34>
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c62:	1c59      	adds	r1, r3, #1
 8004c64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	09db      	lsrs	r3, r3, #7
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	2b7f      	cmp	r3, #127	; 0x7f
 8004c78:	d8f0      	bhi.n	8004c5c <_TrySendOverflowPacket+0x1c>
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c8a:	4b26      	ldr	r3, [pc, #152]	; (8004d24 <_TrySendOverflowPacket+0xe4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004c90:	4b23      	ldr	r3, [pc, #140]	; (8004d20 <_TrySendOverflowPacket+0xe0>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	623b      	str	r3, [r7, #32]
 8004ca2:	e00b      	b.n	8004cbc <_TrySendOverflowPacket+0x7c>
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	1c59      	adds	r1, r3, #1
 8004cac:	6279      	str	r1, [r7, #36]	; 0x24
 8004cae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	09db      	lsrs	r3, r3, #7
 8004cba:	623b      	str	r3, [r7, #32]
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8004cc0:	d8f0      	bhi.n	8004ca4 <_TrySendOverflowPacket+0x64>
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	627a      	str	r2, [r7, #36]	; 0x24
 8004cc8:	6a3a      	ldr	r2, [r7, #32]
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004cd2:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <_TrySendOverflowPacket+0xe0>)
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	1d3b      	adds	r3, r7, #4
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f7fb fa7c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004cec:	f7ff fabc 	bl	8004268 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <_TrySendOverflowPacket+0xe0>)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004cfc:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <_TrySendOverflowPacket+0xe0>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <_TrySendOverflowPacket+0xe0>)
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e004      	b.n	8004d14 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <_TrySendOverflowPacket+0xe0>)
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	4a03      	ldr	r2, [pc, #12]	; (8004d20 <_TrySendOverflowPacket+0xe0>)
 8004d12:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004d14:	693b      	ldr	r3, [r7, #16]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3730      	adds	r7, #48	; 0x30
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20013714 	.word	0x20013714
 8004d24:	e0001004 	.word	0xe0001004

08004d28 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08a      	sub	sp, #40	; 0x28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004d34:	4b6d      	ldr	r3, [pc, #436]	; (8004eec <_SendPacket+0x1c4>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d010      	beq.n	8004d5e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004d3c:	4b6b      	ldr	r3, [pc, #428]	; (8004eec <_SendPacket+0x1c4>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80a5 	beq.w	8004e90 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004d46:	4b69      	ldr	r3, [pc, #420]	; (8004eec <_SendPacket+0x1c4>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d109      	bne.n	8004d62 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004d4e:	f7ff ff77 	bl	8004c40 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004d52:	4b66      	ldr	r3, [pc, #408]	; (8004eec <_SendPacket+0x1c4>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	f040 809c 	bne.w	8004e94 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004d5c:	e001      	b.n	8004d62 <_SendPacket+0x3a>
    goto Send;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <_SendPacket+0x3c>
Send:
 8004d62:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b1f      	cmp	r3, #31
 8004d68:	d809      	bhi.n	8004d7e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004d6a:	4b60      	ldr	r3, [pc, #384]	; (8004eec <_SendPacket+0x1c4>)
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f040 808d 	bne.w	8004e98 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b17      	cmp	r3, #23
 8004d82:	d807      	bhi.n	8004d94 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	e03d      	b.n	8004e10 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004da0:	d912      	bls.n	8004dc8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	09da      	lsrs	r2, r3, #7
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	3a01      	subs	r2, #1
 8004dba:	60fa      	str	r2, [r7, #12]
 8004dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	e006      	b.n	8004dd6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8004dda:	d912      	bls.n	8004e02 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	09da      	lsrs	r2, r3, #7
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	3a01      	subs	r2, #1
 8004df4:	60fa      	str	r2, [r7, #12]
 8004df6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e006      	b.n	8004e10 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e10:	4b37      	ldr	r3, [pc, #220]	; (8004ef0 <_SendPacket+0x1c8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e16:	4b35      	ldr	r3, [pc, #212]	; (8004eec <_SendPacket+0x1c4>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	623b      	str	r3, [r7, #32]
 8004e28:	e00b      	b.n	8004e42 <_SendPacket+0x11a>
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	1c59      	adds	r1, r3, #1
 8004e32:	6279      	str	r1, [r7, #36]	; 0x24
 8004e34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	09db      	lsrs	r3, r3, #7
 8004e40:	623b      	str	r3, [r7, #32]
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	2b7f      	cmp	r3, #127	; 0x7f
 8004e46:	d8f0      	bhi.n	8004e2a <_SendPacket+0x102>
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	627a      	str	r2, [r7, #36]	; 0x24
 8004e4e:	6a3a      	ldr	r2, [r7, #32]
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004e58:	4b24      	ldr	r3, [pc, #144]	; (8004eec <_SendPacket+0x1c4>)
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	f7fb f9ba 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004e70:	f7ff f9fa 	bl	8004268 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e7a:	4a1c      	ldr	r2, [pc, #112]	; (8004eec <_SendPacket+0x1c4>)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	60d3      	str	r3, [r2, #12]
 8004e80:	e00b      	b.n	8004e9a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004e82:	4b1a      	ldr	r3, [pc, #104]	; (8004eec <_SendPacket+0x1c4>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	3301      	adds	r3, #1
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <_SendPacket+0x1c4>)
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e004      	b.n	8004e9a <_SendPacket+0x172>
    goto SendDone;
 8004e90:	bf00      	nop
 8004e92:	e002      	b.n	8004e9a <_SendPacket+0x172>
      goto SendDone;
 8004e94:	bf00      	nop
 8004e96:	e000      	b.n	8004e9a <_SendPacket+0x172>
      goto SendDone;
 8004e98:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004e9a:	4b14      	ldr	r3, [pc, #80]	; (8004eec <_SendPacket+0x1c4>)
 8004e9c:	7e1b      	ldrb	r3, [r3, #24]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4a14      	ldr	r2, [pc, #80]	; (8004ef4 <_SendPacket+0x1cc>)
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	440b      	add	r3, r1
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	336c      	adds	r3, #108	; 0x6c
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <_SendPacket+0x1c4>)
 8004eb2:	7e1b      	ldrb	r3, [r3, #24]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	490f      	ldr	r1, [pc, #60]	; (8004ef4 <_SendPacket+0x1cc>)
 8004eb8:	4603      	mov	r3, r0
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	4403      	add	r3, r0
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3370      	adds	r3, #112	; 0x70
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d00b      	beq.n	8004ee2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004eca:	4b08      	ldr	r3, [pc, #32]	; (8004eec <_SendPacket+0x1c4>)
 8004ecc:	789b      	ldrb	r3, [r3, #2]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004ed2:	4b06      	ldr	r3, [pc, #24]	; (8004eec <_SendPacket+0x1c4>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004ed8:	f7ff fe40 	bl	8004b5c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <_SendPacket+0x1c4>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004ee2:	bf00      	nop
 8004ee4:	3728      	adds	r7, #40	; 0x28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20013714 	.word	0x20013714
 8004ef0:	e0001004 	.word	0xe0001004
 8004ef4:	20013894 	.word	0x20013894

08004ef8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d80a      	bhi.n	8004f28 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6051      	str	r1, [r2, #4]
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b80      	cmp	r3, #128	; 0x80
 8004f2e:	d15a      	bne.n	8004fe6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	623b      	str	r3, [r7, #32]
 8004f50:	e00b      	b.n	8004f6a <_StoreChar+0x72>
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	1c59      	adds	r1, r3, #1
 8004f5a:	6279      	str	r1, [r7, #36]	; 0x24
 8004f5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	09db      	lsrs	r3, r3, #7
 8004f68:	623b      	str	r3, [r7, #32]
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f6e:	d8f0      	bhi.n	8004f52 <_StoreChar+0x5a>
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	627a      	str	r2, [r7, #36]	; 0x24
 8004f76:	6a3a      	ldr	r2, [r7, #32]
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	2300      	movs	r3, #0
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	e00b      	b.n	8004fa2 <_StoreChar+0xaa>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	1c59      	adds	r1, r3, #1
 8004f92:	61f9      	str	r1, [r7, #28]
 8004f94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	09db      	lsrs	r3, r3, #7
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa6:	d8f0      	bhi.n	8004f8a <_StoreChar+0x92>
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	61fa      	str	r2, [r7, #28]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	221a      	movs	r2, #26
 8004fbe:	6939      	ldr	r1, [r7, #16]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff feb1 	bl	8004d28 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fdb9 	bl	8004b42 <_PreparePacket>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	611a      	str	r2, [r3, #16]
  }
}
 8004fe6:	bf00      	nop
 8004fe8:	3728      	adds	r7, #40	; 0x28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005002:	2301      	movs	r3, #1
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005006:	2301      	movs	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800500a:	e007      	b.n	800501c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800500c:	6a3a      	ldr	r2, [r7, #32]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	623b      	str	r3, [r7, #32]
    Width++;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3301      	adds	r3, #1
 800501a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800501c:	6a3a      	ldr	r2, [r7, #32]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d2f3      	bcs.n	800500c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	429a      	cmp	r2, r3
 800502a:	d901      	bls.n	8005030 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d11f      	bne.n	800507a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01c      	beq.n	800507a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <_PrintUnsigned+0x66>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d102      	bne.n	8005056 <_PrintUnsigned+0x66>
        c = '0';
 8005050:	2330      	movs	r3, #48	; 0x30
 8005052:	76fb      	strb	r3, [r7, #27]
 8005054:	e001      	b.n	800505a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005056:	2320      	movs	r3, #32
 8005058:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800505a:	e007      	b.n	800506c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	3b01      	subs	r3, #1
 8005060:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005062:	7efb      	ldrb	r3, [r7, #27]
 8005064:	4619      	mov	r1, r3
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff ff46 	bl	8004ef8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <_PrintUnsigned+0x8a>
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	429a      	cmp	r2, r3
 8005078:	d3f0      	bcc.n	800505c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d903      	bls.n	8005088 <_PrintUnsigned+0x98>
      NumDigits--;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	3b01      	subs	r3, #1
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	e009      	b.n	800509c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d200      	bcs.n	800509c <_PrintUnsigned+0xac>
        break;
 800509a:	e005      	b.n	80050a8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	fb02 f303 	mul.w	r3, r2, r3
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80050a6:	e7e8      	b.n	800507a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80050c0:	4a15      	ldr	r2, [pc, #84]	; (8005118 <_PrintUnsigned+0x128>)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	4413      	add	r3, r2
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	4619      	mov	r1, r3
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff ff14 	bl	8004ef8 <_StoreChar>
    Digit /= Base;
 80050d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e3      	bne.n	80050a8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80050e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d011      	beq.n	800510e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00e      	beq.n	800510e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80050f0:	e006      	b.n	8005100 <_PrintUnsigned+0x110>
        FieldWidth--;
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	3b01      	subs	r3, #1
 80050f6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80050f8:	2120      	movs	r1, #32
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7ff fefc 	bl	8004ef8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <_PrintUnsigned+0x11e>
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	429a      	cmp	r2, r3
 800510c:	d3f1      	bcc.n	80050f2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800510e:	bf00      	nop
 8005110:	3728      	adds	r7, #40	; 0x28
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	080072f4 	.word	0x080072f4

0800511c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	bfb8      	it	lt
 8005130:	425b      	neglt	r3, r3
 8005132:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005138:	e007      	b.n	800514a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005142:	613b      	str	r3, [r7, #16]
    Width++;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	3301      	adds	r3, #1
 8005148:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	429a      	cmp	r2, r3
 8005150:	daf3      	bge.n	800513a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	429a      	cmp	r2, r3
 8005158:	d901      	bls.n	800515e <_PrintInt+0x42>
    Width = NumDigits;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <_PrintInt+0x5e>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	db04      	blt.n	8005174 <_PrintInt+0x58>
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <_PrintInt+0x5e>
    FieldWidth--;
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	3b01      	subs	r3, #1
 8005178:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <_PrintInt+0x6e>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <_PrintInt+0x9c>
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d111      	bne.n	80051b8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00e      	beq.n	80051b8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800519a:	e006      	b.n	80051aa <_PrintInt+0x8e>
        FieldWidth--;
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	3b01      	subs	r3, #1
 80051a0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80051a2:	2120      	movs	r1, #32
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f7ff fea7 	bl	8004ef8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <_PrintInt+0x9c>
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d3f1      	bcc.n	800519c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	da07      	bge.n	80051ce <_PrintInt+0xb2>
    v = -v;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	425b      	negs	r3, r3
 80051c2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80051c4:	212d      	movs	r1, #45	; 0x2d
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f7ff fe96 	bl	8004ef8 <_StoreChar>
 80051cc:	e008      	b.n	80051e0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80051d8:	212b      	movs	r1, #43	; 0x2b
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f7ff fe8c 	bl	8004ef8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d019      	beq.n	800521e <_PrintInt+0x102>
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d114      	bne.n	800521e <_PrintInt+0x102>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d111      	bne.n	800521e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00e      	beq.n	800521e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005200:	e006      	b.n	8005210 <_PrintInt+0xf4>
        FieldWidth--;
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	3b01      	subs	r3, #1
 8005206:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005208:	2130      	movs	r1, #48	; 0x30
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f7ff fe74 	bl	8004ef8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <_PrintInt+0x102>
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	429a      	cmp	r2, r3
 800521c:	d3f1      	bcc.n	8005202 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff fedf 	bl	8004ff0 <_PrintUnsigned>
}
 8005232:	bf00      	nop
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b098      	sub	sp, #96	; 0x60
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005248:	f3ef 8311 	mrs	r3, BASEPRI
 800524c:	f04f 0120 	mov.w	r1, #32
 8005250:	f381 8811 	msr	BASEPRI, r1
 8005254:	633b      	str	r3, [r7, #48]	; 0x30
 8005256:	48b7      	ldr	r0, [pc, #732]	; (8005534 <_VPrintTarget+0x2f8>)
 8005258:	f7ff fc73 	bl	8004b42 <_PreparePacket>
 800525c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800525e:	4bb5      	ldr	r3, [pc, #724]	; (8005534 <_VPrintTarget+0x2f8>)
 8005260:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005262:	2300      	movs	r3, #0
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	3301      	adds	r3, #1
 800526e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3301      	adds	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005282:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 8183 	beq.w	8005592 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800528c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005290:	2b25      	cmp	r3, #37	; 0x25
 8005292:	f040 8170 	bne.w	8005576 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005296:	2300      	movs	r3, #0
 8005298:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800529a:	2301      	movs	r3, #1
 800529c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80052a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052aa:	3b23      	subs	r3, #35	; 0x23
 80052ac:	2b0d      	cmp	r3, #13
 80052ae:	d83f      	bhi.n	8005330 <_VPrintTarget+0xf4>
 80052b0:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <_VPrintTarget+0x7c>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	08005321 	.word	0x08005321
 80052bc:	08005331 	.word	0x08005331
 80052c0:	08005331 	.word	0x08005331
 80052c4:	08005331 	.word	0x08005331
 80052c8:	08005331 	.word	0x08005331
 80052cc:	08005331 	.word	0x08005331
 80052d0:	08005331 	.word	0x08005331
 80052d4:	08005331 	.word	0x08005331
 80052d8:	08005311 	.word	0x08005311
 80052dc:	08005331 	.word	0x08005331
 80052e0:	080052f1 	.word	0x080052f1
 80052e4:	08005331 	.word	0x08005331
 80052e8:	08005331 	.word	0x08005331
 80052ec:	08005301 	.word	0x08005301
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80052f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3301      	adds	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e01a      	b.n	8005336 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005302:	f043 0302 	orr.w	r3, r3, #2
 8005306:	64bb      	str	r3, [r7, #72]	; 0x48
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e012      	b.n	8005336 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005312:	f043 0304 	orr.w	r3, r3, #4
 8005316:	64bb      	str	r3, [r7, #72]	; 0x48
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3301      	adds	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e00a      	b.n	8005336 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005322:	f043 0308 	orr.w	r3, r3, #8
 8005326:	64bb      	str	r3, [r7, #72]	; 0x48
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e002      	b.n	8005336 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005330:	2300      	movs	r3, #0
 8005332:	653b      	str	r3, [r7, #80]	; 0x50
 8005334:	bf00      	nop
        }
      } while (v);
 8005336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1b0      	bne.n	800529e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800533c:	2300      	movs	r3, #0
 800533e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800534c:	2b2f      	cmp	r3, #47	; 0x2f
 800534e:	d912      	bls.n	8005376 <_VPrintTarget+0x13a>
 8005350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005354:	2b39      	cmp	r3, #57	; 0x39
 8005356:	d80e      	bhi.n	8005376 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3301      	adds	r3, #1
 800535c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800535e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	461a      	mov	r2, r3
 800536a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800536e:	4413      	add	r3, r2
 8005370:	3b30      	subs	r3, #48	; 0x30
 8005372:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005374:	e7e4      	b.n	8005340 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005376:	2300      	movs	r3, #0
 8005378:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005382:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005386:	2b2e      	cmp	r3, #46	; 0x2e
 8005388:	d11d      	bne.n	80053c6 <_VPrintTarget+0x18a>
        sFormat++;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3301      	adds	r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800539c:	2b2f      	cmp	r3, #47	; 0x2f
 800539e:	d912      	bls.n	80053c6 <_VPrintTarget+0x18a>
 80053a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053a4:	2b39      	cmp	r3, #57	; 0x39
 80053a6:	d80e      	bhi.n	80053c6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80053ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	461a      	mov	r2, r3
 80053ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053be:	4413      	add	r3, r2
 80053c0:	3b30      	subs	r3, #48	; 0x30
 80053c2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80053c4:	e7e4      	b.n	8005390 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80053ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053d2:	2b6c      	cmp	r3, #108	; 0x6c
 80053d4:	d003      	beq.n	80053de <_VPrintTarget+0x1a2>
 80053d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053da:	2b68      	cmp	r3, #104	; 0x68
 80053dc:	d107      	bne.n	80053ee <_VPrintTarget+0x1b2>
          c = *sFormat;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3301      	adds	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80053ec:	e7ef      	b.n	80053ce <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80053ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053f2:	2b25      	cmp	r3, #37	; 0x25
 80053f4:	f000 80b3 	beq.w	800555e <_VPrintTarget+0x322>
 80053f8:	2b25      	cmp	r3, #37	; 0x25
 80053fa:	f2c0 80b7 	blt.w	800556c <_VPrintTarget+0x330>
 80053fe:	2b78      	cmp	r3, #120	; 0x78
 8005400:	f300 80b4 	bgt.w	800556c <_VPrintTarget+0x330>
 8005404:	2b58      	cmp	r3, #88	; 0x58
 8005406:	f2c0 80b1 	blt.w	800556c <_VPrintTarget+0x330>
 800540a:	3b58      	subs	r3, #88	; 0x58
 800540c:	2b20      	cmp	r3, #32
 800540e:	f200 80ad 	bhi.w	800556c <_VPrintTarget+0x330>
 8005412:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <_VPrintTarget+0x1dc>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	0800550f 	.word	0x0800550f
 800541c:	0800556d 	.word	0x0800556d
 8005420:	0800556d 	.word	0x0800556d
 8005424:	0800556d 	.word	0x0800556d
 8005428:	0800556d 	.word	0x0800556d
 800542c:	0800556d 	.word	0x0800556d
 8005430:	0800556d 	.word	0x0800556d
 8005434:	0800556d 	.word	0x0800556d
 8005438:	0800556d 	.word	0x0800556d
 800543c:	0800556d 	.word	0x0800556d
 8005440:	0800556d 	.word	0x0800556d
 8005444:	0800549d 	.word	0x0800549d
 8005448:	080054c3 	.word	0x080054c3
 800544c:	0800556d 	.word	0x0800556d
 8005450:	0800556d 	.word	0x0800556d
 8005454:	0800556d 	.word	0x0800556d
 8005458:	0800556d 	.word	0x0800556d
 800545c:	0800556d 	.word	0x0800556d
 8005460:	0800556d 	.word	0x0800556d
 8005464:	0800556d 	.word	0x0800556d
 8005468:	0800556d 	.word	0x0800556d
 800546c:	0800556d 	.word	0x0800556d
 8005470:	0800556d 	.word	0x0800556d
 8005474:	0800556d 	.word	0x0800556d
 8005478:	08005539 	.word	0x08005539
 800547c:	0800556d 	.word	0x0800556d
 8005480:	0800556d 	.word	0x0800556d
 8005484:	0800556d 	.word	0x0800556d
 8005488:	0800556d 	.word	0x0800556d
 800548c:	080054e9 	.word	0x080054e9
 8005490:	0800556d 	.word	0x0800556d
 8005494:	0800556d 	.word	0x0800556d
 8005498:	0800550f 	.word	0x0800550f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	1d19      	adds	r1, r3, #4
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6011      	str	r1, [r2, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80054aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80054b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80054b4:	f107 0314 	add.w	r3, r7, #20
 80054b8:	4611      	mov	r1, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fd1c 	bl	8004ef8 <_StoreChar>
        break;
 80054c0:	e055      	b.n	800556e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	1d19      	adds	r1, r3, #4
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6011      	str	r1, [r2, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80054d0:	f107 0014 	add.w	r0, r7, #20
 80054d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054de:	220a      	movs	r2, #10
 80054e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054e2:	f7ff fe1b 	bl	800511c <_PrintInt>
        break;
 80054e6:	e042      	b.n	800556e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	1d19      	adds	r1, r3, #4
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6011      	str	r1, [r2, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80054f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054f8:	f107 0014 	add.w	r0, r7, #20
 80054fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005506:	220a      	movs	r2, #10
 8005508:	f7ff fd72 	bl	8004ff0 <_PrintUnsigned>
        break;
 800550c:	e02f      	b.n	800556e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	1d19      	adds	r1, r3, #4
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6011      	str	r1, [r2, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800551c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800551e:	f107 0014 	add.w	r0, r7, #20
 8005522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552c:	2210      	movs	r2, #16
 800552e:	f7ff fd5f 	bl	8004ff0 <_PrintUnsigned>
        break;
 8005532:	e01c      	b.n	800556e <_VPrintTarget+0x332>
 8005534:	20013744 	.word	0x20013744
      case 'p':
        v = va_arg(*pParamList, int);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	1d19      	adds	r1, r3, #4
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6011      	str	r1, [r2, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005546:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005548:	f107 0014 	add.w	r0, r7, #20
 800554c:	2300      	movs	r3, #0
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	2308      	movs	r3, #8
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	2308      	movs	r3, #8
 8005556:	2210      	movs	r2, #16
 8005558:	f7ff fd4a 	bl	8004ff0 <_PrintUnsigned>
        break;
 800555c:	e007      	b.n	800556e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800555e:	f107 0314 	add.w	r3, r7, #20
 8005562:	2125      	movs	r1, #37	; 0x25
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff fcc7 	bl	8004ef8 <_StoreChar>
        break;
 800556a:	e000      	b.n	800556e <_VPrintTarget+0x332>
      default:
        break;
 800556c:	bf00      	nop
      }
      sFormat++;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3301      	adds	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e007      	b.n	8005586 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005576:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800557a:	f107 0314 	add.w	r3, r7, #20
 800557e:	4611      	mov	r1, r2
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fcb9 	bl	8004ef8 <_StoreChar>
    }
  } while (*sFormat);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f47f ae72 	bne.w	8005274 <_VPrintTarget+0x38>
 8005590:	e000      	b.n	8005594 <_VPrintTarget+0x358>
      break;
 8005592:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	d041      	beq.n	800561e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800559a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	643b      	str	r3, [r7, #64]	; 0x40
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055aa:	e00b      	b.n	80055c4 <_VPrintTarget+0x388>
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b2:	1c59      	adds	r1, r3, #1
 80055b4:	6439      	str	r1, [r7, #64]	; 0x40
 80055b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c0:	09db      	lsrs	r3, r3, #7
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c6:	2b7f      	cmp	r3, #127	; 0x7f
 80055c8:	d8f0      	bhi.n	80055ac <_VPrintTarget+0x370>
 80055ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	643a      	str	r2, [r7, #64]	; 0x40
 80055d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80055de:	2300      	movs	r3, #0
 80055e0:	637b      	str	r3, [r7, #52]	; 0x34
 80055e2:	e00b      	b.n	80055fc <_VPrintTarget+0x3c0>
 80055e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	1c59      	adds	r1, r3, #1
 80055ec:	63b9      	str	r1, [r7, #56]	; 0x38
 80055ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f8:	09db      	lsrs	r3, r3, #7
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
 80055fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005600:	d8f0      	bhi.n	80055e4 <_VPrintTarget+0x3a8>
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	63ba      	str	r2, [r7, #56]	; 0x38
 8005608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	69b9      	ldr	r1, [r7, #24]
 8005616:	221a      	movs	r2, #26
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fb85 	bl	8004d28 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005624:	bf00      	nop
 8005626:	3758      	adds	r7, #88	; 0x58
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800563a:	2300      	movs	r3, #0
 800563c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005640:	4917      	ldr	r1, [pc, #92]	; (80056a0 <SEGGER_SYSVIEW_Init+0x74>)
 8005642:	4818      	ldr	r0, [pc, #96]	; (80056a4 <SEGGER_SYSVIEW_Init+0x78>)
 8005644:	f7ff f93c 	bl	80048c0 <SEGGER_RTT_AllocUpBuffer>
 8005648:	4603      	mov	r3, r0
 800564a:	b2da      	uxtb	r2, r3
 800564c:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800564e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005650:	4b15      	ldr	r3, [pc, #84]	; (80056a8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005652:	785a      	ldrb	r2, [r3, #1]
 8005654:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005656:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005658:	4b13      	ldr	r3, [pc, #76]	; (80056a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800565a:	7e1b      	ldrb	r3, [r3, #24]
 800565c:	4618      	mov	r0, r3
 800565e:	2300      	movs	r3, #0
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	2308      	movs	r3, #8
 8005664:	4a11      	ldr	r2, [pc, #68]	; (80056ac <SEGGER_SYSVIEW_Init+0x80>)
 8005666:	490f      	ldr	r1, [pc, #60]	; (80056a4 <SEGGER_SYSVIEW_Init+0x78>)
 8005668:	f7ff f9ae 	bl	80049c8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800566c:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800566e:	2200      	movs	r2, #0
 8005670:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005672:	4b0f      	ldr	r3, [pc, #60]	; (80056b0 <SEGGER_SYSVIEW_Init+0x84>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a0c      	ldr	r2, [pc, #48]	; (80056a8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005678:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800567a:	4a0b      	ldr	r2, [pc, #44]	; (80056a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005680:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005686:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800568c:	4a06      	ldr	r2, [pc, #24]	; (80056a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005694:	2200      	movs	r2, #0
 8005696:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	2001330c 	.word	0x2001330c
 80056a4:	080072bc 	.word	0x080072bc
 80056a8:	20013714 	.word	0x20013714
 80056ac:	2001370c 	.word	0x2001370c
 80056b0:	e0001004 	.word	0xe0001004

080056b4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80056bc:	4a04      	ldr	r2, [pc, #16]	; (80056d0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6113      	str	r3, [r2, #16]
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	20013714 	.word	0x20013714

080056d4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056dc:	f3ef 8311 	mrs	r3, BASEPRI
 80056e0:	f04f 0120 	mov.w	r1, #32
 80056e4:	f381 8811 	msr	BASEPRI, r1
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	4808      	ldr	r0, [pc, #32]	; (800570c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80056ec:	f7ff fa29 	bl	8004b42 <_PreparePacket>
 80056f0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	68b8      	ldr	r0, [r7, #8]
 80056f8:	f7ff fb16 	bl	8004d28 <_SendPacket>
  RECORD_END();
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f383 8811 	msr	BASEPRI, r3
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20013744 	.word	0x20013744

08005710 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800571a:	f3ef 8311 	mrs	r3, BASEPRI
 800571e:	f04f 0120 	mov.w	r1, #32
 8005722:	f381 8811 	msr	BASEPRI, r1
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	4816      	ldr	r0, [pc, #88]	; (8005784 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800572a:	f7ff fa0a 	bl	8004b42 <_PreparePacket>
 800572e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	61fb      	str	r3, [r7, #28]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	e00b      	b.n	8005756 <SEGGER_SYSVIEW_RecordU32+0x46>
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	b2da      	uxtb	r2, r3
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	1c59      	adds	r1, r3, #1
 8005746:	61f9      	str	r1, [r7, #28]
 8005748:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	09db      	lsrs	r3, r3, #7
 8005754:	61bb      	str	r3, [r7, #24]
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b7f      	cmp	r3, #127	; 0x7f
 800575a:	d8f0      	bhi.n	800573e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	61fa      	str	r2, [r7, #28]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	6938      	ldr	r0, [r7, #16]
 8005772:	f7ff fad9 	bl	8004d28 <_SendPacket>
  RECORD_END();
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f383 8811 	msr	BASEPRI, r3
}
 800577c:	bf00      	nop
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20013744 	.word	0x20013744

08005788 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b08c      	sub	sp, #48	; 0x30
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005794:	f3ef 8311 	mrs	r3, BASEPRI
 8005798:	f04f 0120 	mov.w	r1, #32
 800579c:	f381 8811 	msr	BASEPRI, r1
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	4825      	ldr	r0, [pc, #148]	; (8005838 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80057a4:	f7ff f9cd 	bl	8004b42 <_PreparePacket>
 80057a8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057b6:	e00b      	b.n	80057d0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057be:	1c59      	adds	r1, r3, #1
 80057c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	09db      	lsrs	r3, r3, #7
 80057ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	2b7f      	cmp	r3, #127	; 0x7f
 80057d4:	d8f0      	bhi.n	80057b8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	623b      	str	r3, [r7, #32]
 80057ee:	e00b      	b.n	8005808 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	1c59      	adds	r1, r3, #1
 80057f8:	6279      	str	r1, [r7, #36]	; 0x24
 80057fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	09db      	lsrs	r3, r3, #7
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	2b7f      	cmp	r3, #127	; 0x7f
 800580c:	d8f0      	bhi.n	80057f0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	627a      	str	r2, [r7, #36]	; 0x24
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	6979      	ldr	r1, [r7, #20]
 8005822:	69b8      	ldr	r0, [r7, #24]
 8005824:	f7ff fa80 	bl	8004d28 <_SendPacket>
  RECORD_END();
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f383 8811 	msr	BASEPRI, r3
}
 800582e:	bf00      	nop
 8005830:	3730      	adds	r7, #48	; 0x30
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20013744 	.word	0x20013744

0800583c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b090      	sub	sp, #64	; 0x40
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800584a:	f3ef 8311 	mrs	r3, BASEPRI
 800584e:	f04f 0120 	mov.w	r1, #32
 8005852:	f381 8811 	msr	BASEPRI, r1
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	4840      	ldr	r0, [pc, #256]	; (800595c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800585a:	f7ff f972 	bl	8004b42 <_PreparePacket>
 800585e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	63bb      	str	r3, [r7, #56]	; 0x38
 800586c:	e00b      	b.n	8005886 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005870:	b2da      	uxtb	r2, r3
 8005872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005874:	1c59      	adds	r1, r3, #1
 8005876:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005878:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	09db      	lsrs	r3, r3, #7
 8005884:	63bb      	str	r3, [r7, #56]	; 0x38
 8005886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005888:	2b7f      	cmp	r3, #127	; 0x7f
 800588a:	d8f0      	bhi.n	800586e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800588c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	633b      	str	r3, [r7, #48]	; 0x30
 80058a4:	e00b      	b.n	80058be <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ac:	1c59      	adds	r1, r3, #1
 80058ae:	6379      	str	r1, [r7, #52]	; 0x34
 80058b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	09db      	lsrs	r3, r3, #7
 80058bc:	633b      	str	r3, [r7, #48]	; 0x30
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	2b7f      	cmp	r3, #127	; 0x7f
 80058c2:	d8f0      	bhi.n	80058a6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80058c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	637a      	str	r2, [r7, #52]	; 0x34
 80058ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	62bb      	str	r3, [r7, #40]	; 0x28
 80058dc:	e00b      	b.n	80058f6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	1c59      	adds	r1, r3, #1
 80058e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	09db      	lsrs	r3, r3, #7
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	2b7f      	cmp	r3, #127	; 0x7f
 80058fa:	d8f0      	bhi.n	80058de <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80058fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
 8005910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005912:	623b      	str	r3, [r7, #32]
 8005914:	e00b      	b.n	800592e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	b2da      	uxtb	r2, r3
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	1c59      	adds	r1, r3, #1
 800591e:	6279      	str	r1, [r7, #36]	; 0x24
 8005920:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	09db      	lsrs	r3, r3, #7
 800592c:	623b      	str	r3, [r7, #32]
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	2b7f      	cmp	r3, #127	; 0x7f
 8005932:	d8f0      	bhi.n	8005916 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	627a      	str	r2, [r7, #36]	; 0x24
 800593a:	6a3a      	ldr	r2, [r7, #32]
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	6979      	ldr	r1, [r7, #20]
 8005948:	69b8      	ldr	r0, [r7, #24]
 800594a:	f7ff f9ed 	bl	8004d28 <_SendPacket>
  RECORD_END();
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f383 8811 	msr	BASEPRI, r3
}
 8005954:	bf00      	nop
 8005956:	3740      	adds	r7, #64	; 0x40
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20013744 	.word	0x20013744

08005960 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b092      	sub	sp, #72	; 0x48
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800596e:	f3ef 8311 	mrs	r3, BASEPRI
 8005972:	f04f 0120 	mov.w	r1, #32
 8005976:	f381 8811 	msr	BASEPRI, r1
 800597a:	61fb      	str	r3, [r7, #28]
 800597c:	484e      	ldr	r0, [pc, #312]	; (8005ab8 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800597e:	f7ff f8e0 	bl	8004b42 <_PreparePacket>
 8005982:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	647b      	str	r3, [r7, #68]	; 0x44
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	643b      	str	r3, [r7, #64]	; 0x40
 8005990:	e00b      	b.n	80059aa <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8005992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005994:	b2da      	uxtb	r2, r3
 8005996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005998:	1c59      	adds	r1, r3, #1
 800599a:	6479      	str	r1, [r7, #68]	; 0x44
 800599c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a6:	09db      	lsrs	r3, r3, #7
 80059a8:	643b      	str	r3, [r7, #64]	; 0x40
 80059aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ac:	2b7f      	cmp	r3, #127	; 0x7f
 80059ae:	d8f0      	bhi.n	8005992 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 80059b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	647a      	str	r2, [r7, #68]	; 0x44
 80059b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059c8:	e00b      	b.n	80059e2 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d0:	1c59      	adds	r1, r3, #1
 80059d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80059d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	09db      	lsrs	r3, r3, #7
 80059e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	2b7f      	cmp	r3, #127	; 0x7f
 80059e6:	d8f0      	bhi.n	80059ca <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80059e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	637b      	str	r3, [r7, #52]	; 0x34
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005a00:	e00b      	b.n	8005a1a <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a08:	1c59      	adds	r1, r3, #1
 8005a0a:	6379      	str	r1, [r7, #52]	; 0x34
 8005a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	09db      	lsrs	r3, r3, #7
 8005a18:	633b      	str	r3, [r7, #48]	; 0x30
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a1e:	d8f0      	bhi.n	8005a02 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8005a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	637a      	str	r2, [r7, #52]	; 0x34
 8005a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a38:	e00b      	b.n	8005a52 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	1c59      	adds	r1, r3, #1
 8005a42:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	09db      	lsrs	r3, r3, #7
 8005a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	2b7f      	cmp	r3, #127	; 0x7f
 8005a56:	d8f0      	bhi.n	8005a3a <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6e:	623b      	str	r3, [r7, #32]
 8005a70:	e00b      	b.n	8005a8a <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	1c59      	adds	r1, r3, #1
 8005a7a:	6279      	str	r1, [r7, #36]	; 0x24
 8005a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	09db      	lsrs	r3, r3, #7
 8005a88:	623b      	str	r3, [r7, #32]
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a8e:	d8f0      	bhi.n	8005a72 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	627a      	str	r2, [r7, #36]	; 0x24
 8005a96:	6a3a      	ldr	r2, [r7, #32]
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	6979      	ldr	r1, [r7, #20]
 8005aa4:	69b8      	ldr	r0, [r7, #24]
 8005aa6:	f7ff f93f 	bl	8004d28 <_SendPacket>
  RECORD_END();
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	f383 8811 	msr	BASEPRI, r3
}
 8005ab0:	bf00      	nop
 8005ab2:	3748      	adds	r7, #72	; 0x48
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20013744 	.word	0x20013744

08005abc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08c      	sub	sp, #48	; 0x30
 8005ac0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005ac2:	4b59      	ldr	r3, [pc, #356]	; (8005c28 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8005acc:	f04f 0120 	mov.w	r1, #32
 8005ad0:	f381 8811 	msr	BASEPRI, r1
 8005ad4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005ad6:	4b54      	ldr	r3, [pc, #336]	; (8005c28 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	220a      	movs	r2, #10
 8005adc:	4953      	ldr	r1, [pc, #332]	; (8005c2c <SEGGER_SYSVIEW_Start+0x170>)
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fa fb7e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005aea:	f7fe fbbd 	bl	8004268 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005aee:	200a      	movs	r0, #10
 8005af0:	f7ff fdf0 	bl	80056d4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005af4:	f3ef 8311 	mrs	r3, BASEPRI
 8005af8:	f04f 0120 	mov.w	r1, #32
 8005afc:	f381 8811 	msr	BASEPRI, r1
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	484b      	ldr	r0, [pc, #300]	; (8005c30 <SEGGER_SYSVIEW_Start+0x174>)
 8005b04:	f7ff f81d 	bl	8004b42 <_PreparePacket>
 8005b08:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b12:	4b45      	ldr	r3, [pc, #276]	; (8005c28 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b18:	e00b      	b.n	8005b32 <SEGGER_SYSVIEW_Start+0x76>
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	1c59      	adds	r1, r3, #1
 8005b22:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	09db      	lsrs	r3, r3, #7
 8005b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	2b7f      	cmp	r3, #127	; 0x7f
 8005b36:	d8f0      	bhi.n	8005b1a <SEGGER_SYSVIEW_Start+0x5e>
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4c:	4b36      	ldr	r3, [pc, #216]	; (8005c28 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	623b      	str	r3, [r7, #32]
 8005b52:	e00b      	b.n	8005b6c <SEGGER_SYSVIEW_Start+0xb0>
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	1c59      	adds	r1, r3, #1
 8005b5c:	6279      	str	r1, [r7, #36]	; 0x24
 8005b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	09db      	lsrs	r3, r3, #7
 8005b6a:	623b      	str	r3, [r7, #32]
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b70:	d8f0      	bhi.n	8005b54 <SEGGER_SYSVIEW_Start+0x98>
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	627a      	str	r2, [r7, #36]	; 0x24
 8005b78:	6a3a      	ldr	r2, [r7, #32]
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	4b28      	ldr	r3, [pc, #160]	; (8005c28 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	e00b      	b.n	8005ba6 <SEGGER_SYSVIEW_Start+0xea>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	1c59      	adds	r1, r3, #1
 8005b96:	61f9      	str	r1, [r7, #28]
 8005b98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	09db      	lsrs	r3, r3, #7
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8005baa:	d8f0      	bhi.n	8005b8e <SEGGER_SYSVIEW_Start+0xd2>
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	61fa      	str	r2, [r7, #28]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]
 8005bc4:	e00b      	b.n	8005bde <SEGGER_SYSVIEW_Start+0x122>
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	1c59      	adds	r1, r3, #1
 8005bce:	6179      	str	r1, [r7, #20]
 8005bd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	09db      	lsrs	r3, r3, #7
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	2b7f      	cmp	r3, #127	; 0x7f
 8005be2:	d8f0      	bhi.n	8005bc6 <SEGGER_SYSVIEW_Start+0x10a>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	617a      	str	r2, [r7, #20]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005bf4:	2218      	movs	r2, #24
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff f895 	bl	8004d28 <_SendPacket>
      RECORD_END();
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c04:	4b08      	ldr	r3, [pc, #32]	; (8005c28 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005c0c:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005c12:	f000 f9eb 	bl	8005fec <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005c16:	f000 f9b1 	bl	8005f7c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005c1a:	f000 fc83 	bl	8006524 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005c1e:	bf00      	nop
 8005c20:	3730      	adds	r7, #48	; 0x30
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20013714 	.word	0x20013714
 8005c2c:	080072e8 	.word	0x080072e8
 8005c30:	20013744 	.word	0x20013744

08005c34 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c3e:	f04f 0120 	mov.w	r1, #32
 8005c42:	f381 8811 	msr	BASEPRI, r1
 8005c46:	607b      	str	r3, [r7, #4]
 8005c48:	480b      	ldr	r0, [pc, #44]	; (8005c78 <SEGGER_SYSVIEW_Stop+0x44>)
 8005c4a:	f7fe ff7a 	bl	8004b42 <_PreparePacket>
 8005c4e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <SEGGER_SYSVIEW_Stop+0x48>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005c58:	220b      	movs	r2, #11
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6838      	ldr	r0, [r7, #0]
 8005c5e:	f7ff f863 	bl	8004d28 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <SEGGER_SYSVIEW_Stop+0x48>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f383 8811 	msr	BASEPRI, r3
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20013744 	.word	0x20013744
 8005c7c:	20013714 	.word	0x20013714

08005c80 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08c      	sub	sp, #48	; 0x30
 8005c84:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c86:	f3ef 8311 	mrs	r3, BASEPRI
 8005c8a:	f04f 0120 	mov.w	r1, #32
 8005c8e:	f381 8811 	msr	BASEPRI, r1
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	4845      	ldr	r0, [pc, #276]	; (8005dac <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005c96:	f7fe ff54 	bl	8004b42 <_PreparePacket>
 8005c9a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ca4:	4b42      	ldr	r3, [pc, #264]	; (8005db0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005caa:	e00b      	b.n	8005cc4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	1c59      	adds	r1, r3, #1
 8005cb4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	09db      	lsrs	r3, r3, #7
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc8:	d8f0      	bhi.n	8005cac <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cde:	4b34      	ldr	r3, [pc, #208]	; (8005db0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	623b      	str	r3, [r7, #32]
 8005ce4:	e00b      	b.n	8005cfe <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	1c59      	adds	r1, r3, #1
 8005cee:	6279      	str	r1, [r7, #36]	; 0x24
 8005cf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	09db      	lsrs	r3, r3, #7
 8005cfc:	623b      	str	r3, [r7, #32]
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2b7f      	cmp	r3, #127	; 0x7f
 8005d02:	d8f0      	bhi.n	8005ce6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	627a      	str	r2, [r7, #36]	; 0x24
 8005d0a:	6a3a      	ldr	r2, [r7, #32]
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	e00b      	b.n	8005d38 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	1c59      	adds	r1, r3, #1
 8005d28:	61f9      	str	r1, [r7, #28]
 8005d2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	09db      	lsrs	r3, r3, #7
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d3c:	d8f0      	bhi.n	8005d20 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	61fa      	str	r2, [r7, #28]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	2300      	movs	r3, #0
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	e00b      	b.n	8005d70 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	6179      	str	r1, [r7, #20]
 8005d62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	09db      	lsrs	r3, r3, #7
 8005d6e:	613b      	str	r3, [r7, #16]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	2b7f      	cmp	r3, #127	; 0x7f
 8005d74:	d8f0      	bhi.n	8005d58 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	617a      	str	r2, [r7, #20]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d86:	2218      	movs	r2, #24
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	68b8      	ldr	r0, [r7, #8]
 8005d8c:	f7fe ffcc 	bl	8004d28 <_SendPacket>
  RECORD_END();
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d96:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005d9e:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	4798      	blx	r3
  }
}
 8005da4:	bf00      	nop
 8005da6:	3730      	adds	r7, #48	; 0x30
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20013744 	.word	0x20013744
 8005db0:	20013714 	.word	0x20013714

08005db4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b092      	sub	sp, #72	; 0x48
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005dbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc0:	f04f 0120 	mov.w	r1, #32
 8005dc4:	f381 8811 	msr	BASEPRI, r1
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	486a      	ldr	r0, [pc, #424]	; (8005f74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005dcc:	f7fe feb9 	bl	8004b42 <_PreparePacket>
 8005dd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b66      	ldr	r3, [pc, #408]	; (8005f78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	643b      	str	r3, [r7, #64]	; 0x40
 8005de6:	e00b      	b.n	8005e00 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dee:	1c59      	adds	r1, r3, #1
 8005df0:	6479      	str	r1, [r7, #68]	; 0x44
 8005df2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dfc:	09db      	lsrs	r3, r3, #7
 8005dfe:	643b      	str	r3, [r7, #64]	; 0x40
 8005e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e02:	2b7f      	cmp	r3, #127	; 0x7f
 8005e04:	d8f0      	bhi.n	8005de8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	647a      	str	r2, [r7, #68]	; 0x44
 8005e0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e20:	e00b      	b.n	8005e3a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e28:	1c59      	adds	r1, r3, #1
 8005e2a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005e2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	09db      	lsrs	r3, r3, #7
 8005e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e3e:	d8f0      	bhi.n	8005e22 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	4619      	mov	r1, r3
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7fe fe25 	bl	8004aa8 <_EncodeStr>
 8005e5e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005e60:	2209      	movs	r2, #9
 8005e62:	68f9      	ldr	r1, [r7, #12]
 8005e64:	6938      	ldr	r0, [r7, #16]
 8005e66:	f7fe ff5f 	bl	8004d28 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b40      	ldr	r3, [pc, #256]	; (8005f78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e7e:	e00b      	b.n	8005e98 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e86:	1c59      	adds	r1, r3, #1
 8005e88:	6379      	str	r1, [r7, #52]	; 0x34
 8005e8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	09db      	lsrs	r3, r3, #7
 8005e96:	633b      	str	r3, [r7, #48]	; 0x30
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e9c:	d8f0      	bhi.n	8005e80 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	637a      	str	r2, [r7, #52]	; 0x34
 8005ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eb8:	e00b      	b.n	8005ed2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	1c59      	adds	r1, r3, #1
 8005ec2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ec4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	09db      	lsrs	r3, r3, #7
 8005ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ed6:	d8f0      	bhi.n	8005eba <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	623b      	str	r3, [r7, #32]
 8005ef2:	e00b      	b.n	8005f0c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	1c59      	adds	r1, r3, #1
 8005efc:	6279      	str	r1, [r7, #36]	; 0x24
 8005efe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	09db      	lsrs	r3, r3, #7
 8005f0a:	623b      	str	r3, [r7, #32]
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f10:	d8f0      	bhi.n	8005ef4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	627a      	str	r2, [r7, #36]	; 0x24
 8005f18:	6a3a      	ldr	r2, [r7, #32]
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	61fb      	str	r3, [r7, #28]
 8005f26:	2300      	movs	r3, #0
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	e00b      	b.n	8005f44 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	1c59      	adds	r1, r3, #1
 8005f34:	61f9      	str	r1, [r7, #28]
 8005f36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	09db      	lsrs	r3, r3, #7
 8005f42:	61bb      	str	r3, [r7, #24]
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	2b7f      	cmp	r3, #127	; 0x7f
 8005f48:	d8f0      	bhi.n	8005f2c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	61fa      	str	r2, [r7, #28]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005f5a:	2215      	movs	r2, #21
 8005f5c:	68f9      	ldr	r1, [r7, #12]
 8005f5e:	6938      	ldr	r0, [r7, #16]
 8005f60:	f7fe fee2 	bl	8004d28 <_SendPacket>
  RECORD_END();
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f383 8811 	msr	BASEPRI, r3
}
 8005f6a:	bf00      	nop
 8005f6c:	3748      	adds	r7, #72	; 0x48
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20013744 	.word	0x20013744
 8005f78:	20013714 	.word	0x20013714

08005f7c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005f80:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d008      	beq.n	8005f9a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005f92:	4b03      	ldr	r3, [pc, #12]	; (8005fa0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4798      	blx	r3
  }
}
 8005f9a:	bf00      	nop
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20013714 	.word	0x20013714

08005fa4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fac:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb0:	f04f 0120 	mov.w	r1, #32
 8005fb4:	f381 8811 	msr	BASEPRI, r1
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	480b      	ldr	r0, [pc, #44]	; (8005fe8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005fbc:	f7fe fdc1 	bl	8004b42 <_PreparePacket>
 8005fc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fc2:	2280      	movs	r2, #128	; 0x80
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	6938      	ldr	r0, [r7, #16]
 8005fc8:	f7fe fd6e 	bl	8004aa8 <_EncodeStr>
 8005fcc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005fce:	220e      	movs	r2, #14
 8005fd0:	68f9      	ldr	r1, [r7, #12]
 8005fd2:	6938      	ldr	r0, [r7, #16]
 8005fd4:	f7fe fea8 	bl	8004d28 <_SendPacket>
  RECORD_END();
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f383 8811 	msr	BASEPRI, r3
}
 8005fde:	bf00      	nop
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20013744 	.word	0x20013744

08005fec <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005fec:	b590      	push	{r4, r7, lr}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005ff2:	4b15      	ldr	r3, [pc, #84]	; (8006048 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01a      	beq.n	8006030 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005ffa:	4b13      	ldr	r3, [pc, #76]	; (8006048 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d015      	beq.n	8006030 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006004:	4b10      	ldr	r3, [pc, #64]	; (8006048 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4798      	blx	r3
 800600c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006010:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006012:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	000a      	movs	r2, r1
 8006020:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006022:	4613      	mov	r3, r2
 8006024:	461a      	mov	r2, r3
 8006026:	4621      	mov	r1, r4
 8006028:	200d      	movs	r0, #13
 800602a:	f7ff fbad 	bl	8005788 <SEGGER_SYSVIEW_RecordU32x2>
 800602e:	e006      	b.n	800603e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006030:	4b06      	ldr	r3, [pc, #24]	; (800604c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4619      	mov	r1, r3
 8006036:	200c      	movs	r0, #12
 8006038:	f7ff fb6a 	bl	8005710 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	bd90      	pop	{r4, r7, pc}
 8006046:	bf00      	nop
 8006048:	20013714 	.word	0x20013714
 800604c:	e0001004 	.word	0xe0001004

08006050 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006056:	f3ef 8311 	mrs	r3, BASEPRI
 800605a:	f04f 0120 	mov.w	r1, #32
 800605e:	f381 8811 	msr	BASEPRI, r1
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	4819      	ldr	r0, [pc, #100]	; (80060cc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006066:	f7fe fd6c 	bl	8004b42 <_PreparePacket>
 800606a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006070:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006078:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	613b      	str	r3, [r7, #16]
 8006082:	e00b      	b.n	800609c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	b2da      	uxtb	r2, r3
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	1c59      	adds	r1, r3, #1
 800608c:	6179      	str	r1, [r7, #20]
 800608e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	09db      	lsrs	r3, r3, #7
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	2b7f      	cmp	r3, #127	; 0x7f
 80060a0:	d8f0      	bhi.n	8006084 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	617a      	str	r2, [r7, #20]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80060b2:	2202      	movs	r2, #2
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	68b8      	ldr	r0, [r7, #8]
 80060b8:	f7fe fe36 	bl	8004d28 <_SendPacket>
  RECORD_END();
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f383 8811 	msr	BASEPRI, r3
}
 80060c2:	bf00      	nop
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20013744 	.word	0x20013744
 80060d0:	e000ed04 	.word	0xe000ed04

080060d4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060da:	f3ef 8311 	mrs	r3, BASEPRI
 80060de:	f04f 0120 	mov.w	r1, #32
 80060e2:	f381 8811 	msr	BASEPRI, r1
 80060e6:	607b      	str	r3, [r7, #4]
 80060e8:	4807      	ldr	r0, [pc, #28]	; (8006108 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80060ea:	f7fe fd2a 	bl	8004b42 <_PreparePacket>
 80060ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80060f0:	2203      	movs	r2, #3
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6838      	ldr	r0, [r7, #0]
 80060f6:	f7fe fe17 	bl	8004d28 <_SendPacket>
  RECORD_END();
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f383 8811 	msr	BASEPRI, r3
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20013744 	.word	0x20013744

0800610c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006112:	f3ef 8311 	mrs	r3, BASEPRI
 8006116:	f04f 0120 	mov.w	r1, #32
 800611a:	f381 8811 	msr	BASEPRI, r1
 800611e:	607b      	str	r3, [r7, #4]
 8006120:	4807      	ldr	r0, [pc, #28]	; (8006140 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006122:	f7fe fd0e 	bl	8004b42 <_PreparePacket>
 8006126:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006128:	2212      	movs	r2, #18
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6838      	ldr	r0, [r7, #0]
 800612e:	f7fe fdfb 	bl	8004d28 <_SendPacket>
  RECORD_END();
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f383 8811 	msr	BASEPRI, r3
}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20013744 	.word	0x20013744

08006144 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800614a:	f3ef 8311 	mrs	r3, BASEPRI
 800614e:	f04f 0120 	mov.w	r1, #32
 8006152:	f381 8811 	msr	BASEPRI, r1
 8006156:	607b      	str	r3, [r7, #4]
 8006158:	4807      	ldr	r0, [pc, #28]	; (8006178 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800615a:	f7fe fcf2 	bl	8004b42 <_PreparePacket>
 800615e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006160:	2211      	movs	r2, #17
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6838      	ldr	r0, [r7, #0]
 8006166:	f7fe fddf 	bl	8004d28 <_SendPacket>
  RECORD_END();
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f383 8811 	msr	BASEPRI, r3
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	20013744 	.word	0x20013744

0800617c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006184:	f3ef 8311 	mrs	r3, BASEPRI
 8006188:	f04f 0120 	mov.w	r1, #32
 800618c:	f381 8811 	msr	BASEPRI, r1
 8006190:	617b      	str	r3, [r7, #20]
 8006192:	4819      	ldr	r0, [pc, #100]	; (80061f8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006194:	f7fe fcd5 	bl	8004b42 <_PreparePacket>
 8006198:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800619e:	4b17      	ldr	r3, [pc, #92]	; (80061fc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	61fb      	str	r3, [r7, #28]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	61bb      	str	r3, [r7, #24]
 80061b0:	e00b      	b.n	80061ca <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	1c59      	adds	r1, r3, #1
 80061ba:	61f9      	str	r1, [r7, #28]
 80061bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	09db      	lsrs	r3, r3, #7
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b7f      	cmp	r3, #127	; 0x7f
 80061ce:	d8f0      	bhi.n	80061b2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	61fa      	str	r2, [r7, #28]
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80061e0:	2208      	movs	r2, #8
 80061e2:	68f9      	ldr	r1, [r7, #12]
 80061e4:	6938      	ldr	r0, [r7, #16]
 80061e6:	f7fe fd9f 	bl	8004d28 <_SendPacket>
  RECORD_END();
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f383 8811 	msr	BASEPRI, r3
}
 80061f0:	bf00      	nop
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20013744 	.word	0x20013744
 80061fc:	20013714 	.word	0x20013714

08006200 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b088      	sub	sp, #32
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006208:	f3ef 8311 	mrs	r3, BASEPRI
 800620c:	f04f 0120 	mov.w	r1, #32
 8006210:	f381 8811 	msr	BASEPRI, r1
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	4819      	ldr	r0, [pc, #100]	; (800627c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006218:	f7fe fc93 	bl	8004b42 <_PreparePacket>
 800621c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006222:	4b17      	ldr	r3, [pc, #92]	; (8006280 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	e00b      	b.n	800624e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	b2da      	uxtb	r2, r3
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	1c59      	adds	r1, r3, #1
 800623e:	61f9      	str	r1, [r7, #28]
 8006240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	09db      	lsrs	r3, r3, #7
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b7f      	cmp	r3, #127	; 0x7f
 8006252:	d8f0      	bhi.n	8006236 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	61fa      	str	r2, [r7, #28]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006264:	2204      	movs	r2, #4
 8006266:	68f9      	ldr	r1, [r7, #12]
 8006268:	6938      	ldr	r0, [r7, #16]
 800626a:	f7fe fd5d 	bl	8004d28 <_SendPacket>
  RECORD_END();
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f383 8811 	msr	BASEPRI, r3
}
 8006274:	bf00      	nop
 8006276:	3720      	adds	r7, #32
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20013744 	.word	0x20013744
 8006280:	20013714 	.word	0x20013714

08006284 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800628c:	f3ef 8311 	mrs	r3, BASEPRI
 8006290:	f04f 0120 	mov.w	r1, #32
 8006294:	f381 8811 	msr	BASEPRI, r1
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	4819      	ldr	r0, [pc, #100]	; (8006300 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800629c:	f7fe fc51 	bl	8004b42 <_PreparePacket>
 80062a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062a6:	4b17      	ldr	r3, [pc, #92]	; (8006304 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	61bb      	str	r3, [r7, #24]
 80062b8:	e00b      	b.n	80062d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	1c59      	adds	r1, r3, #1
 80062c2:	61f9      	str	r1, [r7, #28]
 80062c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	09db      	lsrs	r3, r3, #7
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b7f      	cmp	r3, #127	; 0x7f
 80062d6:	d8f0      	bhi.n	80062ba <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	61fa      	str	r2, [r7, #28]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80062e8:	2206      	movs	r2, #6
 80062ea:	68f9      	ldr	r1, [r7, #12]
 80062ec:	6938      	ldr	r0, [r7, #16]
 80062ee:	f7fe fd1b 	bl	8004d28 <_SendPacket>
  RECORD_END();
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f383 8811 	msr	BASEPRI, r3
}
 80062f8:	bf00      	nop
 80062fa:	3720      	adds	r7, #32
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20013744 	.word	0x20013744
 8006304:	20013714 	.word	0x20013714

08006308 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006308:	b580      	push	{r7, lr}
 800630a:	b08a      	sub	sp, #40	; 0x28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006312:	f3ef 8311 	mrs	r3, BASEPRI
 8006316:	f04f 0120 	mov.w	r1, #32
 800631a:	f381 8811 	msr	BASEPRI, r1
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	4827      	ldr	r0, [pc, #156]	; (80063c0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006322:	f7fe fc0e 	bl	8004b42 <_PreparePacket>
 8006326:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800632c:	4b25      	ldr	r3, [pc, #148]	; (80063c4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	623b      	str	r3, [r7, #32]
 800633e:	e00b      	b.n	8006358 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	b2da      	uxtb	r2, r3
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	1c59      	adds	r1, r3, #1
 8006348:	6279      	str	r1, [r7, #36]	; 0x24
 800634a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	09db      	lsrs	r3, r3, #7
 8006356:	623b      	str	r3, [r7, #32]
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	2b7f      	cmp	r3, #127	; 0x7f
 800635c:	d8f0      	bhi.n	8006340 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	627a      	str	r2, [r7, #36]	; 0x24
 8006364:	6a3a      	ldr	r2, [r7, #32]
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	61bb      	str	r3, [r7, #24]
 8006376:	e00b      	b.n	8006390 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	b2da      	uxtb	r2, r3
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	1c59      	adds	r1, r3, #1
 8006380:	61f9      	str	r1, [r7, #28]
 8006382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	09db      	lsrs	r3, r3, #7
 800638e:	61bb      	str	r3, [r7, #24]
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	2b7f      	cmp	r3, #127	; 0x7f
 8006394:	d8f0      	bhi.n	8006378 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	61fa      	str	r2, [r7, #28]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80063a6:	2207      	movs	r2, #7
 80063a8:	68f9      	ldr	r1, [r7, #12]
 80063aa:	6938      	ldr	r0, [r7, #16]
 80063ac:	f7fe fcbc 	bl	8004d28 <_SendPacket>
  RECORD_END();
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f383 8811 	msr	BASEPRI, r3
}
 80063b6:	bf00      	nop
 80063b8:	3728      	adds	r7, #40	; 0x28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20013744 	.word	0x20013744
 80063c4:	20013714 	.word	0x20013714

080063c8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80063d0:	4b04      	ldr	r3, [pc, #16]	; (80063e4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	1ad3      	subs	r3, r2, r3
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	20013714 	.word	0x20013714

080063e8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08c      	sub	sp, #48	; 0x30
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80063f2:	4b3b      	ldr	r3, [pc, #236]	; (80064e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d06d      	beq.n	80064d6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80063fa:	4b39      	ldr	r3, [pc, #228]	; (80064e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006400:	2300      	movs	r3, #0
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28
 8006404:	e008      	b.n	8006418 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	3301      	adds	r3, #1
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
 8006418:	79fb      	ldrb	r3, [r7, #7]
 800641a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641c:	429a      	cmp	r2, r3
 800641e:	d3f2      	bcc.n	8006406 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006420:	e000      	b.n	8006424 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006422:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d055      	beq.n	80064d6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800642a:	f3ef 8311 	mrs	r3, BASEPRI
 800642e:	f04f 0120 	mov.w	r1, #32
 8006432:	f381 8811 	msr	BASEPRI, r1
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	482a      	ldr	r0, [pc, #168]	; (80064e4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800643a:	f7fe fb82 	bl	8004b42 <_PreparePacket>
 800643e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	623b      	str	r3, [r7, #32]
 800644c:	e00b      	b.n	8006466 <SEGGER_SYSVIEW_SendModule+0x7e>
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	1c59      	adds	r1, r3, #1
 8006456:	6279      	str	r1, [r7, #36]	; 0x24
 8006458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	09db      	lsrs	r3, r3, #7
 8006464:	623b      	str	r3, [r7, #32]
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	2b7f      	cmp	r3, #127	; 0x7f
 800646a:	d8f0      	bhi.n	800644e <SEGGER_SYSVIEW_SendModule+0x66>
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	627a      	str	r2, [r7, #36]	; 0x24
 8006472:	6a3a      	ldr	r2, [r7, #32]
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	e00b      	b.n	80064a0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	1c59      	adds	r1, r3, #1
 8006490:	61f9      	str	r1, [r7, #28]
 8006492:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	09db      	lsrs	r3, r3, #7
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b7f      	cmp	r3, #127	; 0x7f
 80064a4:	d8f0      	bhi.n	8006488 <SEGGER_SYSVIEW_SendModule+0xa0>
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	61fa      	str	r2, [r7, #28]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2280      	movs	r2, #128	; 0x80
 80064bc:	4619      	mov	r1, r3
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7fe faf2 	bl	8004aa8 <_EncodeStr>
 80064c4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80064c6:	2216      	movs	r2, #22
 80064c8:	68f9      	ldr	r1, [r7, #12]
 80064ca:	6938      	ldr	r0, [r7, #16]
 80064cc:	f7fe fc2c 	bl	8004d28 <_SendPacket>
      RECORD_END();
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80064d6:	bf00      	nop
 80064d8:	3730      	adds	r7, #48	; 0x30
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	2001373c 	.word	0x2001373c
 80064e4:	20013744 	.word	0x20013744

080064e8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80064ee:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00f      	beq.n	8006516 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80064f6:	4b0a      	ldr	r3, [pc, #40]	; (8006520 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f2      	bne.n	80064fc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	2001373c 	.word	0x2001373c

08006524 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800652a:	f3ef 8311 	mrs	r3, BASEPRI
 800652e:	f04f 0120 	mov.w	r1, #32
 8006532:	f381 8811 	msr	BASEPRI, r1
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	4817      	ldr	r0, [pc, #92]	; (8006598 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800653a:	f7fe fb02 	bl	8004b42 <_PreparePacket>
 800653e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	4b14      	ldr	r3, [pc, #80]	; (800659c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	e00b      	b.n	8006568 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	b2da      	uxtb	r2, r3
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	1c59      	adds	r1, r3, #1
 8006558:	6179      	str	r1, [r7, #20]
 800655a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	09db      	lsrs	r3, r3, #7
 8006566:	613b      	str	r3, [r7, #16]
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b7f      	cmp	r3, #127	; 0x7f
 800656c:	d8f0      	bhi.n	8006550 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	617a      	str	r2, [r7, #20]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800657e:	221b      	movs	r2, #27
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	68b8      	ldr	r0, [r7, #8]
 8006584:	f7fe fbd0 	bl	8004d28 <_SendPacket>
  RECORD_END();
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f383 8811 	msr	BASEPRI, r3
}
 800658e:	bf00      	nop
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20013744 	.word	0x20013744
 800659c:	20013740 	.word	0x20013740

080065a0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80065a0:	b40f      	push	{r0, r1, r2, r3}
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80065a8:	f107 0314 	add.w	r3, r7, #20
 80065ac:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80065ae:	1d3b      	adds	r3, r7, #4
 80065b0:	461a      	mov	r2, r3
 80065b2:	2100      	movs	r1, #0
 80065b4:	6938      	ldr	r0, [r7, #16]
 80065b6:	f7fe fe41 	bl	800523c <_VPrintTarget>
  va_end(ParamList);
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065c4:	b004      	add	sp, #16
 80065c6:	4770      	bx	lr

080065c8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	; 0x28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065d0:	f3ef 8311 	mrs	r3, BASEPRI
 80065d4:	f04f 0120 	mov.w	r1, #32
 80065d8:	f381 8811 	msr	BASEPRI, r1
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	4827      	ldr	r0, [pc, #156]	; (800667c <SEGGER_SYSVIEW_Warn+0xb4>)
 80065e0:	f7fe faaf 	bl	8004b42 <_PreparePacket>
 80065e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065e6:	2280      	movs	r2, #128	; 0x80
 80065e8:	6879      	ldr	r1, [r7, #4]
 80065ea:	6938      	ldr	r0, [r7, #16]
 80065ec:	f7fe fa5c 	bl	8004aa8 <_EncodeStr>
 80065f0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
 80065f6:	2301      	movs	r3, #1
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	e00b      	b.n	8006614 <SEGGER_SYSVIEW_Warn+0x4c>
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	1c59      	adds	r1, r3, #1
 8006604:	6279      	str	r1, [r7, #36]	; 0x24
 8006606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	09db      	lsrs	r3, r3, #7
 8006612:	623b      	str	r3, [r7, #32]
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	2b7f      	cmp	r3, #127	; 0x7f
 8006618:	d8f0      	bhi.n	80065fc <SEGGER_SYSVIEW_Warn+0x34>
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	627a      	str	r2, [r7, #36]	; 0x24
 8006620:	6a3a      	ldr	r2, [r7, #32]
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	61fb      	str	r3, [r7, #28]
 800662e:	2300      	movs	r3, #0
 8006630:	61bb      	str	r3, [r7, #24]
 8006632:	e00b      	b.n	800664c <SEGGER_SYSVIEW_Warn+0x84>
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	1c59      	adds	r1, r3, #1
 800663c:	61f9      	str	r1, [r7, #28]
 800663e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	09db      	lsrs	r3, r3, #7
 800664a:	61bb      	str	r3, [r7, #24]
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b7f      	cmp	r3, #127	; 0x7f
 8006650:	d8f0      	bhi.n	8006634 <SEGGER_SYSVIEW_Warn+0x6c>
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	61fa      	str	r2, [r7, #28]
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006662:	221a      	movs	r2, #26
 8006664:	68f9      	ldr	r1, [r7, #12]
 8006666:	6938      	ldr	r0, [r7, #16]
 8006668:	f7fe fb5e 	bl	8004d28 <_SendPacket>
  RECORD_END();
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f383 8811 	msr	BASEPRI, r3
}
 8006672:	bf00      	nop
 8006674:	3728      	adds	r7, #40	; 0x28
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20013744 	.word	0x20013744

08006680 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006684:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006686:	7e1b      	ldrb	r3, [r3, #24]
 8006688:	4619      	mov	r1, r3
 800668a:	4a13      	ldr	r2, [pc, #76]	; (80066d8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800668c:	460b      	mov	r3, r1
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	440b      	add	r3, r1
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	4413      	add	r3, r2
 8006696:	336c      	adds	r3, #108	; 0x6c
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b0e      	ldr	r3, [pc, #56]	; (80066d4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800669c:	7e1b      	ldrb	r3, [r3, #24]
 800669e:	4618      	mov	r0, r3
 80066a0:	490d      	ldr	r1, [pc, #52]	; (80066d8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80066a2:	4603      	mov	r3, r0
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	4403      	add	r3, r0
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	440b      	add	r3, r1
 80066ac:	3370      	adds	r3, #112	; 0x70
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d00b      	beq.n	80066cc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80066b4:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80066b6:	789b      	ldrb	r3, [r3, #2]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d107      	bne.n	80066cc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80066bc:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80066be:	2201      	movs	r2, #1
 80066c0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80066c2:	f7fe fa4b 	bl	8004b5c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80066c6:	4b03      	ldr	r3, [pc, #12]	; (80066d4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80066cc:	4b01      	ldr	r3, [pc, #4]	; (80066d4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20013714 	.word	0x20013714
 80066d8:	20013894 	.word	0x20013894

080066dc <keypad_read>:

char keypad_map[] = { '1', '2', '3', 'A', '4', '5', '6', 'B', '7', '8', '9',
		'C', '*', '0', '#', 'D' };
uint16_t row_pin[] = { ROW_0_Pin, ROW_1_Pin, ROW_2_Pin, ROW_3_Pin };
uint16_t col_pin[] = { COL_0_Pin, COL_1_Pin, COL_2_Pin, COL_3_Pin };
char keypad_read(void) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
	HAL_Delay(150);
 80066e2:	2096      	movs	r0, #150	; 0x96
 80066e4:	f7fa fc46 	bl	8000f74 <HAL_Delay>
	for (int i = 0; i < 4; ++i) {
 80066e8:	2300      	movs	r3, #0
 80066ea:	607b      	str	r3, [r7, #4]
 80066ec:	e038      	b.n	8006760 <keypad_read+0x84>
		for (int j = 0; j < 4; ++j) {
 80066ee:	2300      	movs	r3, #0
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	e02f      	b.n	8006754 <keypad_read+0x78>
			HAL_GPIO_WritePin(GPIOD, row_pin[i], GPIO_PIN_SET);
 80066f4:	4a1e      	ldr	r2, [pc, #120]	; (8006770 <keypad_read+0x94>)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066fc:	2201      	movs	r2, #1
 80066fe:	4619      	mov	r1, r3
 8006700:	481c      	ldr	r0, [pc, #112]	; (8006774 <keypad_read+0x98>)
 8006702:	f7fa fed9 	bl	80014b8 <HAL_GPIO_WritePin>
			if (HAL_GPIO_ReadPin(GPIOD, col_pin[j]) == 1) {
 8006706:	4a1c      	ldr	r2, [pc, #112]	; (8006778 <keypad_read+0x9c>)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800670e:	4619      	mov	r1, r3
 8006710:	4818      	ldr	r0, [pc, #96]	; (8006774 <keypad_read+0x98>)
 8006712:	f7fa feb9 	bl	8001488 <HAL_GPIO_ReadPin>
 8006716:	4603      	mov	r3, r0
 8006718:	2b01      	cmp	r3, #1
 800671a:	d10f      	bne.n	800673c <keypad_read+0x60>
				HAL_GPIO_WritePin(GPIOD, row_pin[i], GPIO_PIN_RESET);
 800671c:	4a14      	ldr	r2, [pc, #80]	; (8006770 <keypad_read+0x94>)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006724:	2200      	movs	r2, #0
 8006726:	4619      	mov	r1, r3
 8006728:	4812      	ldr	r0, [pc, #72]	; (8006774 <keypad_read+0x98>)
 800672a:	f7fa fec5 	bl	80014b8 <HAL_GPIO_WritePin>
				return keypad_map[4 * i + j];
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	009a      	lsls	r2, r3, #2
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	4413      	add	r3, r2
 8006736:	4a11      	ldr	r2, [pc, #68]	; (800677c <keypad_read+0xa0>)
 8006738:	5cd3      	ldrb	r3, [r2, r3]
 800673a:	e015      	b.n	8006768 <keypad_read+0x8c>
			}
			HAL_GPIO_WritePin(GPIOD, row_pin[i], GPIO_PIN_RESET);
 800673c:	4a0c      	ldr	r2, [pc, #48]	; (8006770 <keypad_read+0x94>)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006744:	2200      	movs	r2, #0
 8006746:	4619      	mov	r1, r3
 8006748:	480a      	ldr	r0, [pc, #40]	; (8006774 <keypad_read+0x98>)
 800674a:	f7fa feb5 	bl	80014b8 <HAL_GPIO_WritePin>
		for (int j = 0; j < 4; ++j) {
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b03      	cmp	r3, #3
 8006758:	ddcc      	ble.n	80066f4 <keypad_read+0x18>
	for (int i = 0; i < 4; ++i) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3301      	adds	r3, #1
 800675e:	607b      	str	r3, [r7, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b03      	cmp	r3, #3
 8006764:	ddc3      	ble.n	80066ee <keypad_read+0x12>
		}
	}
	return 'x';
 8006766:	2378      	movs	r3, #120	; 0x78
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	2000002c 	.word	0x2000002c
 8006774:	40020c00 	.word	0x40020c00
 8006778:	20000034 	.word	0x20000034
 800677c:	2000001c 	.word	0x2000001c

08006780 <__errno>:
 8006780:	4b01      	ldr	r3, [pc, #4]	; (8006788 <__errno+0x8>)
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	2000003c 	.word	0x2000003c

0800678c <__libc_init_array>:
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	4d0d      	ldr	r5, [pc, #52]	; (80067c4 <__libc_init_array+0x38>)
 8006790:	4c0d      	ldr	r4, [pc, #52]	; (80067c8 <__libc_init_array+0x3c>)
 8006792:	1b64      	subs	r4, r4, r5
 8006794:	10a4      	asrs	r4, r4, #2
 8006796:	2600      	movs	r6, #0
 8006798:	42a6      	cmp	r6, r4
 800679a:	d109      	bne.n	80067b0 <__libc_init_array+0x24>
 800679c:	4d0b      	ldr	r5, [pc, #44]	; (80067cc <__libc_init_array+0x40>)
 800679e:	4c0c      	ldr	r4, [pc, #48]	; (80067d0 <__libc_init_array+0x44>)
 80067a0:	f000 fc70 	bl	8007084 <_init>
 80067a4:	1b64      	subs	r4, r4, r5
 80067a6:	10a4      	asrs	r4, r4, #2
 80067a8:	2600      	movs	r6, #0
 80067aa:	42a6      	cmp	r6, r4
 80067ac:	d105      	bne.n	80067ba <__libc_init_array+0x2e>
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b4:	4798      	blx	r3
 80067b6:	3601      	adds	r6, #1
 80067b8:	e7ee      	b.n	8006798 <__libc_init_array+0xc>
 80067ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80067be:	4798      	blx	r3
 80067c0:	3601      	adds	r6, #1
 80067c2:	e7f2      	b.n	80067aa <__libc_init_array+0x1e>
 80067c4:	08007340 	.word	0x08007340
 80067c8:	08007340 	.word	0x08007340
 80067cc:	08007340 	.word	0x08007340
 80067d0:	08007344 	.word	0x08007344

080067d4 <memcmp>:
 80067d4:	b530      	push	{r4, r5, lr}
 80067d6:	3901      	subs	r1, #1
 80067d8:	2400      	movs	r4, #0
 80067da:	42a2      	cmp	r2, r4
 80067dc:	d101      	bne.n	80067e2 <memcmp+0xe>
 80067de:	2000      	movs	r0, #0
 80067e0:	e005      	b.n	80067ee <memcmp+0x1a>
 80067e2:	5d03      	ldrb	r3, [r0, r4]
 80067e4:	3401      	adds	r4, #1
 80067e6:	5d0d      	ldrb	r5, [r1, r4]
 80067e8:	42ab      	cmp	r3, r5
 80067ea:	d0f6      	beq.n	80067da <memcmp+0x6>
 80067ec:	1b58      	subs	r0, r3, r5
 80067ee:	bd30      	pop	{r4, r5, pc}

080067f0 <memcpy>:
 80067f0:	440a      	add	r2, r1
 80067f2:	4291      	cmp	r1, r2
 80067f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80067f8:	d100      	bne.n	80067fc <memcpy+0xc>
 80067fa:	4770      	bx	lr
 80067fc:	b510      	push	{r4, lr}
 80067fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006806:	4291      	cmp	r1, r2
 8006808:	d1f9      	bne.n	80067fe <memcpy+0xe>
 800680a:	bd10      	pop	{r4, pc}

0800680c <memset>:
 800680c:	4402      	add	r2, r0
 800680e:	4603      	mov	r3, r0
 8006810:	4293      	cmp	r3, r2
 8006812:	d100      	bne.n	8006816 <memset+0xa>
 8006814:	4770      	bx	lr
 8006816:	f803 1b01 	strb.w	r1, [r3], #1
 800681a:	e7f9      	b.n	8006810 <memset+0x4>

0800681c <sniprintf>:
 800681c:	b40c      	push	{r2, r3}
 800681e:	b530      	push	{r4, r5, lr}
 8006820:	4b17      	ldr	r3, [pc, #92]	; (8006880 <sniprintf+0x64>)
 8006822:	1e0c      	subs	r4, r1, #0
 8006824:	681d      	ldr	r5, [r3, #0]
 8006826:	b09d      	sub	sp, #116	; 0x74
 8006828:	da08      	bge.n	800683c <sniprintf+0x20>
 800682a:	238b      	movs	r3, #139	; 0x8b
 800682c:	602b      	str	r3, [r5, #0]
 800682e:	f04f 30ff 	mov.w	r0, #4294967295
 8006832:	b01d      	add	sp, #116	; 0x74
 8006834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006838:	b002      	add	sp, #8
 800683a:	4770      	bx	lr
 800683c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006840:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006844:	bf14      	ite	ne
 8006846:	f104 33ff 	addne.w	r3, r4, #4294967295
 800684a:	4623      	moveq	r3, r4
 800684c:	9304      	str	r3, [sp, #16]
 800684e:	9307      	str	r3, [sp, #28]
 8006850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006854:	9002      	str	r0, [sp, #8]
 8006856:	9006      	str	r0, [sp, #24]
 8006858:	f8ad 3016 	strh.w	r3, [sp, #22]
 800685c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800685e:	ab21      	add	r3, sp, #132	; 0x84
 8006860:	a902      	add	r1, sp, #8
 8006862:	4628      	mov	r0, r5
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	f000 f869 	bl	800693c <_svfiprintf_r>
 800686a:	1c43      	adds	r3, r0, #1
 800686c:	bfbc      	itt	lt
 800686e:	238b      	movlt	r3, #139	; 0x8b
 8006870:	602b      	strlt	r3, [r5, #0]
 8006872:	2c00      	cmp	r4, #0
 8006874:	d0dd      	beq.n	8006832 <sniprintf+0x16>
 8006876:	9b02      	ldr	r3, [sp, #8]
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	e7d9      	b.n	8006832 <sniprintf+0x16>
 800687e:	bf00      	nop
 8006880:	2000003c 	.word	0x2000003c

08006884 <__ssputs_r>:
 8006884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006888:	688e      	ldr	r6, [r1, #8]
 800688a:	429e      	cmp	r6, r3
 800688c:	4682      	mov	sl, r0
 800688e:	460c      	mov	r4, r1
 8006890:	4690      	mov	r8, r2
 8006892:	461f      	mov	r7, r3
 8006894:	d838      	bhi.n	8006908 <__ssputs_r+0x84>
 8006896:	898a      	ldrh	r2, [r1, #12]
 8006898:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800689c:	d032      	beq.n	8006904 <__ssputs_r+0x80>
 800689e:	6825      	ldr	r5, [r4, #0]
 80068a0:	6909      	ldr	r1, [r1, #16]
 80068a2:	eba5 0901 	sub.w	r9, r5, r1
 80068a6:	6965      	ldr	r5, [r4, #20]
 80068a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068b0:	3301      	adds	r3, #1
 80068b2:	444b      	add	r3, r9
 80068b4:	106d      	asrs	r5, r5, #1
 80068b6:	429d      	cmp	r5, r3
 80068b8:	bf38      	it	cc
 80068ba:	461d      	movcc	r5, r3
 80068bc:	0553      	lsls	r3, r2, #21
 80068be:	d531      	bpl.n	8006924 <__ssputs_r+0xa0>
 80068c0:	4629      	mov	r1, r5
 80068c2:	f000 fb39 	bl	8006f38 <_malloc_r>
 80068c6:	4606      	mov	r6, r0
 80068c8:	b950      	cbnz	r0, 80068e0 <__ssputs_r+0x5c>
 80068ca:	230c      	movs	r3, #12
 80068cc:	f8ca 3000 	str.w	r3, [sl]
 80068d0:	89a3      	ldrh	r3, [r4, #12]
 80068d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d6:	81a3      	strh	r3, [r4, #12]
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295
 80068dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e0:	6921      	ldr	r1, [r4, #16]
 80068e2:	464a      	mov	r2, r9
 80068e4:	f7ff ff84 	bl	80067f0 <memcpy>
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f2:	81a3      	strh	r3, [r4, #12]
 80068f4:	6126      	str	r6, [r4, #16]
 80068f6:	6165      	str	r5, [r4, #20]
 80068f8:	444e      	add	r6, r9
 80068fa:	eba5 0509 	sub.w	r5, r5, r9
 80068fe:	6026      	str	r6, [r4, #0]
 8006900:	60a5      	str	r5, [r4, #8]
 8006902:	463e      	mov	r6, r7
 8006904:	42be      	cmp	r6, r7
 8006906:	d900      	bls.n	800690a <__ssputs_r+0x86>
 8006908:	463e      	mov	r6, r7
 800690a:	4632      	mov	r2, r6
 800690c:	6820      	ldr	r0, [r4, #0]
 800690e:	4641      	mov	r1, r8
 8006910:	f000 faa8 	bl	8006e64 <memmove>
 8006914:	68a3      	ldr	r3, [r4, #8]
 8006916:	6822      	ldr	r2, [r4, #0]
 8006918:	1b9b      	subs	r3, r3, r6
 800691a:	4432      	add	r2, r6
 800691c:	60a3      	str	r3, [r4, #8]
 800691e:	6022      	str	r2, [r4, #0]
 8006920:	2000      	movs	r0, #0
 8006922:	e7db      	b.n	80068dc <__ssputs_r+0x58>
 8006924:	462a      	mov	r2, r5
 8006926:	f000 fb61 	bl	8006fec <_realloc_r>
 800692a:	4606      	mov	r6, r0
 800692c:	2800      	cmp	r0, #0
 800692e:	d1e1      	bne.n	80068f4 <__ssputs_r+0x70>
 8006930:	6921      	ldr	r1, [r4, #16]
 8006932:	4650      	mov	r0, sl
 8006934:	f000 fab0 	bl	8006e98 <_free_r>
 8006938:	e7c7      	b.n	80068ca <__ssputs_r+0x46>
	...

0800693c <_svfiprintf_r>:
 800693c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006940:	4698      	mov	r8, r3
 8006942:	898b      	ldrh	r3, [r1, #12]
 8006944:	061b      	lsls	r3, r3, #24
 8006946:	b09d      	sub	sp, #116	; 0x74
 8006948:	4607      	mov	r7, r0
 800694a:	460d      	mov	r5, r1
 800694c:	4614      	mov	r4, r2
 800694e:	d50e      	bpl.n	800696e <_svfiprintf_r+0x32>
 8006950:	690b      	ldr	r3, [r1, #16]
 8006952:	b963      	cbnz	r3, 800696e <_svfiprintf_r+0x32>
 8006954:	2140      	movs	r1, #64	; 0x40
 8006956:	f000 faef 	bl	8006f38 <_malloc_r>
 800695a:	6028      	str	r0, [r5, #0]
 800695c:	6128      	str	r0, [r5, #16]
 800695e:	b920      	cbnz	r0, 800696a <_svfiprintf_r+0x2e>
 8006960:	230c      	movs	r3, #12
 8006962:	603b      	str	r3, [r7, #0]
 8006964:	f04f 30ff 	mov.w	r0, #4294967295
 8006968:	e0d1      	b.n	8006b0e <_svfiprintf_r+0x1d2>
 800696a:	2340      	movs	r3, #64	; 0x40
 800696c:	616b      	str	r3, [r5, #20]
 800696e:	2300      	movs	r3, #0
 8006970:	9309      	str	r3, [sp, #36]	; 0x24
 8006972:	2320      	movs	r3, #32
 8006974:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006978:	f8cd 800c 	str.w	r8, [sp, #12]
 800697c:	2330      	movs	r3, #48	; 0x30
 800697e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b28 <_svfiprintf_r+0x1ec>
 8006982:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006986:	f04f 0901 	mov.w	r9, #1
 800698a:	4623      	mov	r3, r4
 800698c:	469a      	mov	sl, r3
 800698e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006992:	b10a      	cbz	r2, 8006998 <_svfiprintf_r+0x5c>
 8006994:	2a25      	cmp	r2, #37	; 0x25
 8006996:	d1f9      	bne.n	800698c <_svfiprintf_r+0x50>
 8006998:	ebba 0b04 	subs.w	fp, sl, r4
 800699c:	d00b      	beq.n	80069b6 <_svfiprintf_r+0x7a>
 800699e:	465b      	mov	r3, fp
 80069a0:	4622      	mov	r2, r4
 80069a2:	4629      	mov	r1, r5
 80069a4:	4638      	mov	r0, r7
 80069a6:	f7ff ff6d 	bl	8006884 <__ssputs_r>
 80069aa:	3001      	adds	r0, #1
 80069ac:	f000 80aa 	beq.w	8006b04 <_svfiprintf_r+0x1c8>
 80069b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b2:	445a      	add	r2, fp
 80069b4:	9209      	str	r2, [sp, #36]	; 0x24
 80069b6:	f89a 3000 	ldrb.w	r3, [sl]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80a2 	beq.w	8006b04 <_svfiprintf_r+0x1c8>
 80069c0:	2300      	movs	r3, #0
 80069c2:	f04f 32ff 	mov.w	r2, #4294967295
 80069c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069ca:	f10a 0a01 	add.w	sl, sl, #1
 80069ce:	9304      	str	r3, [sp, #16]
 80069d0:	9307      	str	r3, [sp, #28]
 80069d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069d6:	931a      	str	r3, [sp, #104]	; 0x68
 80069d8:	4654      	mov	r4, sl
 80069da:	2205      	movs	r2, #5
 80069dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e0:	4851      	ldr	r0, [pc, #324]	; (8006b28 <_svfiprintf_r+0x1ec>)
 80069e2:	f7f9 fc4d 	bl	8000280 <memchr>
 80069e6:	9a04      	ldr	r2, [sp, #16]
 80069e8:	b9d8      	cbnz	r0, 8006a22 <_svfiprintf_r+0xe6>
 80069ea:	06d0      	lsls	r0, r2, #27
 80069ec:	bf44      	itt	mi
 80069ee:	2320      	movmi	r3, #32
 80069f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069f4:	0711      	lsls	r1, r2, #28
 80069f6:	bf44      	itt	mi
 80069f8:	232b      	movmi	r3, #43	; 0x2b
 80069fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006a02:	2b2a      	cmp	r3, #42	; 0x2a
 8006a04:	d015      	beq.n	8006a32 <_svfiprintf_r+0xf6>
 8006a06:	9a07      	ldr	r2, [sp, #28]
 8006a08:	4654      	mov	r4, sl
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	f04f 0c0a 	mov.w	ip, #10
 8006a10:	4621      	mov	r1, r4
 8006a12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a16:	3b30      	subs	r3, #48	; 0x30
 8006a18:	2b09      	cmp	r3, #9
 8006a1a:	d94e      	bls.n	8006aba <_svfiprintf_r+0x17e>
 8006a1c:	b1b0      	cbz	r0, 8006a4c <_svfiprintf_r+0x110>
 8006a1e:	9207      	str	r2, [sp, #28]
 8006a20:	e014      	b.n	8006a4c <_svfiprintf_r+0x110>
 8006a22:	eba0 0308 	sub.w	r3, r0, r8
 8006a26:	fa09 f303 	lsl.w	r3, r9, r3
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	9304      	str	r3, [sp, #16]
 8006a2e:	46a2      	mov	sl, r4
 8006a30:	e7d2      	b.n	80069d8 <_svfiprintf_r+0x9c>
 8006a32:	9b03      	ldr	r3, [sp, #12]
 8006a34:	1d19      	adds	r1, r3, #4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	9103      	str	r1, [sp, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bfbb      	ittet	lt
 8006a3e:	425b      	neglt	r3, r3
 8006a40:	f042 0202 	orrlt.w	r2, r2, #2
 8006a44:	9307      	strge	r3, [sp, #28]
 8006a46:	9307      	strlt	r3, [sp, #28]
 8006a48:	bfb8      	it	lt
 8006a4a:	9204      	strlt	r2, [sp, #16]
 8006a4c:	7823      	ldrb	r3, [r4, #0]
 8006a4e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a50:	d10c      	bne.n	8006a6c <_svfiprintf_r+0x130>
 8006a52:	7863      	ldrb	r3, [r4, #1]
 8006a54:	2b2a      	cmp	r3, #42	; 0x2a
 8006a56:	d135      	bne.n	8006ac4 <_svfiprintf_r+0x188>
 8006a58:	9b03      	ldr	r3, [sp, #12]
 8006a5a:	1d1a      	adds	r2, r3, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	9203      	str	r2, [sp, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bfb8      	it	lt
 8006a64:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a68:	3402      	adds	r4, #2
 8006a6a:	9305      	str	r3, [sp, #20]
 8006a6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b38 <_svfiprintf_r+0x1fc>
 8006a70:	7821      	ldrb	r1, [r4, #0]
 8006a72:	2203      	movs	r2, #3
 8006a74:	4650      	mov	r0, sl
 8006a76:	f7f9 fc03 	bl	8000280 <memchr>
 8006a7a:	b140      	cbz	r0, 8006a8e <_svfiprintf_r+0x152>
 8006a7c:	2340      	movs	r3, #64	; 0x40
 8006a7e:	eba0 000a 	sub.w	r0, r0, sl
 8006a82:	fa03 f000 	lsl.w	r0, r3, r0
 8006a86:	9b04      	ldr	r3, [sp, #16]
 8006a88:	4303      	orrs	r3, r0
 8006a8a:	3401      	adds	r4, #1
 8006a8c:	9304      	str	r3, [sp, #16]
 8006a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a92:	4826      	ldr	r0, [pc, #152]	; (8006b2c <_svfiprintf_r+0x1f0>)
 8006a94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a98:	2206      	movs	r2, #6
 8006a9a:	f7f9 fbf1 	bl	8000280 <memchr>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d038      	beq.n	8006b14 <_svfiprintf_r+0x1d8>
 8006aa2:	4b23      	ldr	r3, [pc, #140]	; (8006b30 <_svfiprintf_r+0x1f4>)
 8006aa4:	bb1b      	cbnz	r3, 8006aee <_svfiprintf_r+0x1b2>
 8006aa6:	9b03      	ldr	r3, [sp, #12]
 8006aa8:	3307      	adds	r3, #7
 8006aaa:	f023 0307 	bic.w	r3, r3, #7
 8006aae:	3308      	adds	r3, #8
 8006ab0:	9303      	str	r3, [sp, #12]
 8006ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab4:	4433      	add	r3, r6
 8006ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab8:	e767      	b.n	800698a <_svfiprintf_r+0x4e>
 8006aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8006abe:	460c      	mov	r4, r1
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	e7a5      	b.n	8006a10 <_svfiprintf_r+0xd4>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	3401      	adds	r4, #1
 8006ac8:	9305      	str	r3, [sp, #20]
 8006aca:	4619      	mov	r1, r3
 8006acc:	f04f 0c0a 	mov.w	ip, #10
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ad6:	3a30      	subs	r2, #48	; 0x30
 8006ad8:	2a09      	cmp	r2, #9
 8006ada:	d903      	bls.n	8006ae4 <_svfiprintf_r+0x1a8>
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0c5      	beq.n	8006a6c <_svfiprintf_r+0x130>
 8006ae0:	9105      	str	r1, [sp, #20]
 8006ae2:	e7c3      	b.n	8006a6c <_svfiprintf_r+0x130>
 8006ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ae8:	4604      	mov	r4, r0
 8006aea:	2301      	movs	r3, #1
 8006aec:	e7f0      	b.n	8006ad0 <_svfiprintf_r+0x194>
 8006aee:	ab03      	add	r3, sp, #12
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	462a      	mov	r2, r5
 8006af4:	4b0f      	ldr	r3, [pc, #60]	; (8006b34 <_svfiprintf_r+0x1f8>)
 8006af6:	a904      	add	r1, sp, #16
 8006af8:	4638      	mov	r0, r7
 8006afa:	f3af 8000 	nop.w
 8006afe:	1c42      	adds	r2, r0, #1
 8006b00:	4606      	mov	r6, r0
 8006b02:	d1d6      	bne.n	8006ab2 <_svfiprintf_r+0x176>
 8006b04:	89ab      	ldrh	r3, [r5, #12]
 8006b06:	065b      	lsls	r3, r3, #25
 8006b08:	f53f af2c 	bmi.w	8006964 <_svfiprintf_r+0x28>
 8006b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b0e:	b01d      	add	sp, #116	; 0x74
 8006b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b14:	ab03      	add	r3, sp, #12
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	462a      	mov	r2, r5
 8006b1a:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <_svfiprintf_r+0x1f8>)
 8006b1c:	a904      	add	r1, sp, #16
 8006b1e:	4638      	mov	r0, r7
 8006b20:	f000 f87a 	bl	8006c18 <_printf_i>
 8006b24:	e7eb      	b.n	8006afe <_svfiprintf_r+0x1c2>
 8006b26:	bf00      	nop
 8006b28:	08007304 	.word	0x08007304
 8006b2c:	0800730e 	.word	0x0800730e
 8006b30:	00000000 	.word	0x00000000
 8006b34:	08006885 	.word	0x08006885
 8006b38:	0800730a 	.word	0x0800730a

08006b3c <_printf_common>:
 8006b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b40:	4616      	mov	r6, r2
 8006b42:	4699      	mov	r9, r3
 8006b44:	688a      	ldr	r2, [r1, #8]
 8006b46:	690b      	ldr	r3, [r1, #16]
 8006b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	bfb8      	it	lt
 8006b50:	4613      	movlt	r3, r2
 8006b52:	6033      	str	r3, [r6, #0]
 8006b54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b58:	4607      	mov	r7, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	b10a      	cbz	r2, 8006b62 <_printf_common+0x26>
 8006b5e:	3301      	adds	r3, #1
 8006b60:	6033      	str	r3, [r6, #0]
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	0699      	lsls	r1, r3, #26
 8006b66:	bf42      	ittt	mi
 8006b68:	6833      	ldrmi	r3, [r6, #0]
 8006b6a:	3302      	addmi	r3, #2
 8006b6c:	6033      	strmi	r3, [r6, #0]
 8006b6e:	6825      	ldr	r5, [r4, #0]
 8006b70:	f015 0506 	ands.w	r5, r5, #6
 8006b74:	d106      	bne.n	8006b84 <_printf_common+0x48>
 8006b76:	f104 0a19 	add.w	sl, r4, #25
 8006b7a:	68e3      	ldr	r3, [r4, #12]
 8006b7c:	6832      	ldr	r2, [r6, #0]
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	42ab      	cmp	r3, r5
 8006b82:	dc26      	bgt.n	8006bd2 <_printf_common+0x96>
 8006b84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b88:	1e13      	subs	r3, r2, #0
 8006b8a:	6822      	ldr	r2, [r4, #0]
 8006b8c:	bf18      	it	ne
 8006b8e:	2301      	movne	r3, #1
 8006b90:	0692      	lsls	r2, r2, #26
 8006b92:	d42b      	bmi.n	8006bec <_printf_common+0xb0>
 8006b94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b98:	4649      	mov	r1, r9
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	47c0      	blx	r8
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d01e      	beq.n	8006be0 <_printf_common+0xa4>
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	68e5      	ldr	r5, [r4, #12]
 8006ba6:	6832      	ldr	r2, [r6, #0]
 8006ba8:	f003 0306 	and.w	r3, r3, #6
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	bf08      	it	eq
 8006bb0:	1aad      	subeq	r5, r5, r2
 8006bb2:	68a3      	ldr	r3, [r4, #8]
 8006bb4:	6922      	ldr	r2, [r4, #16]
 8006bb6:	bf0c      	ite	eq
 8006bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bbc:	2500      	movne	r5, #0
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	bfc4      	itt	gt
 8006bc2:	1a9b      	subgt	r3, r3, r2
 8006bc4:	18ed      	addgt	r5, r5, r3
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	341a      	adds	r4, #26
 8006bca:	42b5      	cmp	r5, r6
 8006bcc:	d11a      	bne.n	8006c04 <_printf_common+0xc8>
 8006bce:	2000      	movs	r0, #0
 8006bd0:	e008      	b.n	8006be4 <_printf_common+0xa8>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4652      	mov	r2, sl
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	4638      	mov	r0, r7
 8006bda:	47c0      	blx	r8
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d103      	bne.n	8006be8 <_printf_common+0xac>
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be8:	3501      	adds	r5, #1
 8006bea:	e7c6      	b.n	8006b7a <_printf_common+0x3e>
 8006bec:	18e1      	adds	r1, r4, r3
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	2030      	movs	r0, #48	; 0x30
 8006bf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bf6:	4422      	add	r2, r4
 8006bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c00:	3302      	adds	r3, #2
 8006c02:	e7c7      	b.n	8006b94 <_printf_common+0x58>
 8006c04:	2301      	movs	r3, #1
 8006c06:	4622      	mov	r2, r4
 8006c08:	4649      	mov	r1, r9
 8006c0a:	4638      	mov	r0, r7
 8006c0c:	47c0      	blx	r8
 8006c0e:	3001      	adds	r0, #1
 8006c10:	d0e6      	beq.n	8006be0 <_printf_common+0xa4>
 8006c12:	3601      	adds	r6, #1
 8006c14:	e7d9      	b.n	8006bca <_printf_common+0x8e>
	...

08006c18 <_printf_i>:
 8006c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	4691      	mov	r9, r2
 8006c20:	7e27      	ldrb	r7, [r4, #24]
 8006c22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c24:	2f78      	cmp	r7, #120	; 0x78
 8006c26:	4680      	mov	r8, r0
 8006c28:	469a      	mov	sl, r3
 8006c2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c2e:	d807      	bhi.n	8006c40 <_printf_i+0x28>
 8006c30:	2f62      	cmp	r7, #98	; 0x62
 8006c32:	d80a      	bhi.n	8006c4a <_printf_i+0x32>
 8006c34:	2f00      	cmp	r7, #0
 8006c36:	f000 80d8 	beq.w	8006dea <_printf_i+0x1d2>
 8006c3a:	2f58      	cmp	r7, #88	; 0x58
 8006c3c:	f000 80a3 	beq.w	8006d86 <_printf_i+0x16e>
 8006c40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c48:	e03a      	b.n	8006cc0 <_printf_i+0xa8>
 8006c4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c4e:	2b15      	cmp	r3, #21
 8006c50:	d8f6      	bhi.n	8006c40 <_printf_i+0x28>
 8006c52:	a001      	add	r0, pc, #4	; (adr r0, 8006c58 <_printf_i+0x40>)
 8006c54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c58:	08006cb1 	.word	0x08006cb1
 8006c5c:	08006cc5 	.word	0x08006cc5
 8006c60:	08006c41 	.word	0x08006c41
 8006c64:	08006c41 	.word	0x08006c41
 8006c68:	08006c41 	.word	0x08006c41
 8006c6c:	08006c41 	.word	0x08006c41
 8006c70:	08006cc5 	.word	0x08006cc5
 8006c74:	08006c41 	.word	0x08006c41
 8006c78:	08006c41 	.word	0x08006c41
 8006c7c:	08006c41 	.word	0x08006c41
 8006c80:	08006c41 	.word	0x08006c41
 8006c84:	08006dd1 	.word	0x08006dd1
 8006c88:	08006cf5 	.word	0x08006cf5
 8006c8c:	08006db3 	.word	0x08006db3
 8006c90:	08006c41 	.word	0x08006c41
 8006c94:	08006c41 	.word	0x08006c41
 8006c98:	08006df3 	.word	0x08006df3
 8006c9c:	08006c41 	.word	0x08006c41
 8006ca0:	08006cf5 	.word	0x08006cf5
 8006ca4:	08006c41 	.word	0x08006c41
 8006ca8:	08006c41 	.word	0x08006c41
 8006cac:	08006dbb 	.word	0x08006dbb
 8006cb0:	680b      	ldr	r3, [r1, #0]
 8006cb2:	1d1a      	adds	r2, r3, #4
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	600a      	str	r2, [r1, #0]
 8006cb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0a3      	b.n	8006e0c <_printf_i+0x1f4>
 8006cc4:	6825      	ldr	r5, [r4, #0]
 8006cc6:	6808      	ldr	r0, [r1, #0]
 8006cc8:	062e      	lsls	r6, r5, #24
 8006cca:	f100 0304 	add.w	r3, r0, #4
 8006cce:	d50a      	bpl.n	8006ce6 <_printf_i+0xce>
 8006cd0:	6805      	ldr	r5, [r0, #0]
 8006cd2:	600b      	str	r3, [r1, #0]
 8006cd4:	2d00      	cmp	r5, #0
 8006cd6:	da03      	bge.n	8006ce0 <_printf_i+0xc8>
 8006cd8:	232d      	movs	r3, #45	; 0x2d
 8006cda:	426d      	negs	r5, r5
 8006cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce0:	485e      	ldr	r0, [pc, #376]	; (8006e5c <_printf_i+0x244>)
 8006ce2:	230a      	movs	r3, #10
 8006ce4:	e019      	b.n	8006d1a <_printf_i+0x102>
 8006ce6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006cea:	6805      	ldr	r5, [r0, #0]
 8006cec:	600b      	str	r3, [r1, #0]
 8006cee:	bf18      	it	ne
 8006cf0:	b22d      	sxthne	r5, r5
 8006cf2:	e7ef      	b.n	8006cd4 <_printf_i+0xbc>
 8006cf4:	680b      	ldr	r3, [r1, #0]
 8006cf6:	6825      	ldr	r5, [r4, #0]
 8006cf8:	1d18      	adds	r0, r3, #4
 8006cfa:	6008      	str	r0, [r1, #0]
 8006cfc:	0628      	lsls	r0, r5, #24
 8006cfe:	d501      	bpl.n	8006d04 <_printf_i+0xec>
 8006d00:	681d      	ldr	r5, [r3, #0]
 8006d02:	e002      	b.n	8006d0a <_printf_i+0xf2>
 8006d04:	0669      	lsls	r1, r5, #25
 8006d06:	d5fb      	bpl.n	8006d00 <_printf_i+0xe8>
 8006d08:	881d      	ldrh	r5, [r3, #0]
 8006d0a:	4854      	ldr	r0, [pc, #336]	; (8006e5c <_printf_i+0x244>)
 8006d0c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d0e:	bf0c      	ite	eq
 8006d10:	2308      	moveq	r3, #8
 8006d12:	230a      	movne	r3, #10
 8006d14:	2100      	movs	r1, #0
 8006d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d1a:	6866      	ldr	r6, [r4, #4]
 8006d1c:	60a6      	str	r6, [r4, #8]
 8006d1e:	2e00      	cmp	r6, #0
 8006d20:	bfa2      	ittt	ge
 8006d22:	6821      	ldrge	r1, [r4, #0]
 8006d24:	f021 0104 	bicge.w	r1, r1, #4
 8006d28:	6021      	strge	r1, [r4, #0]
 8006d2a:	b90d      	cbnz	r5, 8006d30 <_printf_i+0x118>
 8006d2c:	2e00      	cmp	r6, #0
 8006d2e:	d04d      	beq.n	8006dcc <_printf_i+0x1b4>
 8006d30:	4616      	mov	r6, r2
 8006d32:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d36:	fb03 5711 	mls	r7, r3, r1, r5
 8006d3a:	5dc7      	ldrb	r7, [r0, r7]
 8006d3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d40:	462f      	mov	r7, r5
 8006d42:	42bb      	cmp	r3, r7
 8006d44:	460d      	mov	r5, r1
 8006d46:	d9f4      	bls.n	8006d32 <_printf_i+0x11a>
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d10b      	bne.n	8006d64 <_printf_i+0x14c>
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	07df      	lsls	r7, r3, #31
 8006d50:	d508      	bpl.n	8006d64 <_printf_i+0x14c>
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	6861      	ldr	r1, [r4, #4]
 8006d56:	4299      	cmp	r1, r3
 8006d58:	bfde      	ittt	le
 8006d5a:	2330      	movle	r3, #48	; 0x30
 8006d5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d64:	1b92      	subs	r2, r2, r6
 8006d66:	6122      	str	r2, [r4, #16]
 8006d68:	f8cd a000 	str.w	sl, [sp]
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	aa03      	add	r2, sp, #12
 8006d70:	4621      	mov	r1, r4
 8006d72:	4640      	mov	r0, r8
 8006d74:	f7ff fee2 	bl	8006b3c <_printf_common>
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d14c      	bne.n	8006e16 <_printf_i+0x1fe>
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d80:	b004      	add	sp, #16
 8006d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d86:	4835      	ldr	r0, [pc, #212]	; (8006e5c <_printf_i+0x244>)
 8006d88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	680e      	ldr	r6, [r1, #0]
 8006d90:	061f      	lsls	r7, r3, #24
 8006d92:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d96:	600e      	str	r6, [r1, #0]
 8006d98:	d514      	bpl.n	8006dc4 <_printf_i+0x1ac>
 8006d9a:	07d9      	lsls	r1, r3, #31
 8006d9c:	bf44      	itt	mi
 8006d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8006da2:	6023      	strmi	r3, [r4, #0]
 8006da4:	b91d      	cbnz	r5, 8006dae <_printf_i+0x196>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	f023 0320 	bic.w	r3, r3, #32
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	2310      	movs	r3, #16
 8006db0:	e7b0      	b.n	8006d14 <_printf_i+0xfc>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	f043 0320 	orr.w	r3, r3, #32
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	2378      	movs	r3, #120	; 0x78
 8006dbc:	4828      	ldr	r0, [pc, #160]	; (8006e60 <_printf_i+0x248>)
 8006dbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dc2:	e7e3      	b.n	8006d8c <_printf_i+0x174>
 8006dc4:	065e      	lsls	r6, r3, #25
 8006dc6:	bf48      	it	mi
 8006dc8:	b2ad      	uxthmi	r5, r5
 8006dca:	e7e6      	b.n	8006d9a <_printf_i+0x182>
 8006dcc:	4616      	mov	r6, r2
 8006dce:	e7bb      	b.n	8006d48 <_printf_i+0x130>
 8006dd0:	680b      	ldr	r3, [r1, #0]
 8006dd2:	6826      	ldr	r6, [r4, #0]
 8006dd4:	6960      	ldr	r0, [r4, #20]
 8006dd6:	1d1d      	adds	r5, r3, #4
 8006dd8:	600d      	str	r5, [r1, #0]
 8006dda:	0635      	lsls	r5, r6, #24
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	d501      	bpl.n	8006de4 <_printf_i+0x1cc>
 8006de0:	6018      	str	r0, [r3, #0]
 8006de2:	e002      	b.n	8006dea <_printf_i+0x1d2>
 8006de4:	0671      	lsls	r1, r6, #25
 8006de6:	d5fb      	bpl.n	8006de0 <_printf_i+0x1c8>
 8006de8:	8018      	strh	r0, [r3, #0]
 8006dea:	2300      	movs	r3, #0
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	4616      	mov	r6, r2
 8006df0:	e7ba      	b.n	8006d68 <_printf_i+0x150>
 8006df2:	680b      	ldr	r3, [r1, #0]
 8006df4:	1d1a      	adds	r2, r3, #4
 8006df6:	600a      	str	r2, [r1, #0]
 8006df8:	681e      	ldr	r6, [r3, #0]
 8006dfa:	6862      	ldr	r2, [r4, #4]
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f7f9 fa3e 	bl	8000280 <memchr>
 8006e04:	b108      	cbz	r0, 8006e0a <_printf_i+0x1f2>
 8006e06:	1b80      	subs	r0, r0, r6
 8006e08:	6060      	str	r0, [r4, #4]
 8006e0a:	6863      	ldr	r3, [r4, #4]
 8006e0c:	6123      	str	r3, [r4, #16]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e14:	e7a8      	b.n	8006d68 <_printf_i+0x150>
 8006e16:	6923      	ldr	r3, [r4, #16]
 8006e18:	4632      	mov	r2, r6
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	47d0      	blx	sl
 8006e20:	3001      	adds	r0, #1
 8006e22:	d0ab      	beq.n	8006d7c <_printf_i+0x164>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	079b      	lsls	r3, r3, #30
 8006e28:	d413      	bmi.n	8006e52 <_printf_i+0x23a>
 8006e2a:	68e0      	ldr	r0, [r4, #12]
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	4298      	cmp	r0, r3
 8006e30:	bfb8      	it	lt
 8006e32:	4618      	movlt	r0, r3
 8006e34:	e7a4      	b.n	8006d80 <_printf_i+0x168>
 8006e36:	2301      	movs	r3, #1
 8006e38:	4632      	mov	r2, r6
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	47d0      	blx	sl
 8006e40:	3001      	adds	r0, #1
 8006e42:	d09b      	beq.n	8006d7c <_printf_i+0x164>
 8006e44:	3501      	adds	r5, #1
 8006e46:	68e3      	ldr	r3, [r4, #12]
 8006e48:	9903      	ldr	r1, [sp, #12]
 8006e4a:	1a5b      	subs	r3, r3, r1
 8006e4c:	42ab      	cmp	r3, r5
 8006e4e:	dcf2      	bgt.n	8006e36 <_printf_i+0x21e>
 8006e50:	e7eb      	b.n	8006e2a <_printf_i+0x212>
 8006e52:	2500      	movs	r5, #0
 8006e54:	f104 0619 	add.w	r6, r4, #25
 8006e58:	e7f5      	b.n	8006e46 <_printf_i+0x22e>
 8006e5a:	bf00      	nop
 8006e5c:	08007315 	.word	0x08007315
 8006e60:	08007326 	.word	0x08007326

08006e64 <memmove>:
 8006e64:	4288      	cmp	r0, r1
 8006e66:	b510      	push	{r4, lr}
 8006e68:	eb01 0402 	add.w	r4, r1, r2
 8006e6c:	d902      	bls.n	8006e74 <memmove+0x10>
 8006e6e:	4284      	cmp	r4, r0
 8006e70:	4623      	mov	r3, r4
 8006e72:	d807      	bhi.n	8006e84 <memmove+0x20>
 8006e74:	1e43      	subs	r3, r0, #1
 8006e76:	42a1      	cmp	r1, r4
 8006e78:	d008      	beq.n	8006e8c <memmove+0x28>
 8006e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e82:	e7f8      	b.n	8006e76 <memmove+0x12>
 8006e84:	4402      	add	r2, r0
 8006e86:	4601      	mov	r1, r0
 8006e88:	428a      	cmp	r2, r1
 8006e8a:	d100      	bne.n	8006e8e <memmove+0x2a>
 8006e8c:	bd10      	pop	{r4, pc}
 8006e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e96:	e7f7      	b.n	8006e88 <memmove+0x24>

08006e98 <_free_r>:
 8006e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e9a:	2900      	cmp	r1, #0
 8006e9c:	d048      	beq.n	8006f30 <_free_r+0x98>
 8006e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ea2:	9001      	str	r0, [sp, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f1a1 0404 	sub.w	r4, r1, #4
 8006eaa:	bfb8      	it	lt
 8006eac:	18e4      	addlt	r4, r4, r3
 8006eae:	f000 f8d3 	bl	8007058 <__malloc_lock>
 8006eb2:	4a20      	ldr	r2, [pc, #128]	; (8006f34 <_free_r+0x9c>)
 8006eb4:	9801      	ldr	r0, [sp, #4]
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	4615      	mov	r5, r2
 8006eba:	b933      	cbnz	r3, 8006eca <_free_r+0x32>
 8006ebc:	6063      	str	r3, [r4, #4]
 8006ebe:	6014      	str	r4, [r2, #0]
 8006ec0:	b003      	add	sp, #12
 8006ec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ec6:	f000 b8cd 	b.w	8007064 <__malloc_unlock>
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	d90b      	bls.n	8006ee6 <_free_r+0x4e>
 8006ece:	6821      	ldr	r1, [r4, #0]
 8006ed0:	1862      	adds	r2, r4, r1
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	bf04      	itt	eq
 8006ed6:	681a      	ldreq	r2, [r3, #0]
 8006ed8:	685b      	ldreq	r3, [r3, #4]
 8006eda:	6063      	str	r3, [r4, #4]
 8006edc:	bf04      	itt	eq
 8006ede:	1852      	addeq	r2, r2, r1
 8006ee0:	6022      	streq	r2, [r4, #0]
 8006ee2:	602c      	str	r4, [r5, #0]
 8006ee4:	e7ec      	b.n	8006ec0 <_free_r+0x28>
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	b10b      	cbz	r3, 8006ef0 <_free_r+0x58>
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	d9fa      	bls.n	8006ee6 <_free_r+0x4e>
 8006ef0:	6811      	ldr	r1, [r2, #0]
 8006ef2:	1855      	adds	r5, r2, r1
 8006ef4:	42a5      	cmp	r5, r4
 8006ef6:	d10b      	bne.n	8006f10 <_free_r+0x78>
 8006ef8:	6824      	ldr	r4, [r4, #0]
 8006efa:	4421      	add	r1, r4
 8006efc:	1854      	adds	r4, r2, r1
 8006efe:	42a3      	cmp	r3, r4
 8006f00:	6011      	str	r1, [r2, #0]
 8006f02:	d1dd      	bne.n	8006ec0 <_free_r+0x28>
 8006f04:	681c      	ldr	r4, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	6053      	str	r3, [r2, #4]
 8006f0a:	4421      	add	r1, r4
 8006f0c:	6011      	str	r1, [r2, #0]
 8006f0e:	e7d7      	b.n	8006ec0 <_free_r+0x28>
 8006f10:	d902      	bls.n	8006f18 <_free_r+0x80>
 8006f12:	230c      	movs	r3, #12
 8006f14:	6003      	str	r3, [r0, #0]
 8006f16:	e7d3      	b.n	8006ec0 <_free_r+0x28>
 8006f18:	6825      	ldr	r5, [r4, #0]
 8006f1a:	1961      	adds	r1, r4, r5
 8006f1c:	428b      	cmp	r3, r1
 8006f1e:	bf04      	itt	eq
 8006f20:	6819      	ldreq	r1, [r3, #0]
 8006f22:	685b      	ldreq	r3, [r3, #4]
 8006f24:	6063      	str	r3, [r4, #4]
 8006f26:	bf04      	itt	eq
 8006f28:	1949      	addeq	r1, r1, r5
 8006f2a:	6021      	streq	r1, [r4, #0]
 8006f2c:	6054      	str	r4, [r2, #4]
 8006f2e:	e7c7      	b.n	8006ec0 <_free_r+0x28>
 8006f30:	b003      	add	sp, #12
 8006f32:	bd30      	pop	{r4, r5, pc}
 8006f34:	20013828 	.word	0x20013828

08006f38 <_malloc_r>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	1ccd      	adds	r5, r1, #3
 8006f3c:	f025 0503 	bic.w	r5, r5, #3
 8006f40:	3508      	adds	r5, #8
 8006f42:	2d0c      	cmp	r5, #12
 8006f44:	bf38      	it	cc
 8006f46:	250c      	movcc	r5, #12
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	db01      	blt.n	8006f52 <_malloc_r+0x1a>
 8006f4e:	42a9      	cmp	r1, r5
 8006f50:	d903      	bls.n	8006f5a <_malloc_r+0x22>
 8006f52:	230c      	movs	r3, #12
 8006f54:	6033      	str	r3, [r6, #0]
 8006f56:	2000      	movs	r0, #0
 8006f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f5a:	f000 f87d 	bl	8007058 <__malloc_lock>
 8006f5e:	4921      	ldr	r1, [pc, #132]	; (8006fe4 <_malloc_r+0xac>)
 8006f60:	680a      	ldr	r2, [r1, #0]
 8006f62:	4614      	mov	r4, r2
 8006f64:	b99c      	cbnz	r4, 8006f8e <_malloc_r+0x56>
 8006f66:	4f20      	ldr	r7, [pc, #128]	; (8006fe8 <_malloc_r+0xb0>)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	b923      	cbnz	r3, 8006f76 <_malloc_r+0x3e>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f000 f862 	bl	8007038 <_sbrk_r>
 8006f74:	6038      	str	r0, [r7, #0]
 8006f76:	4629      	mov	r1, r5
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f000 f85d 	bl	8007038 <_sbrk_r>
 8006f7e:	1c43      	adds	r3, r0, #1
 8006f80:	d123      	bne.n	8006fca <_malloc_r+0x92>
 8006f82:	230c      	movs	r3, #12
 8006f84:	6033      	str	r3, [r6, #0]
 8006f86:	4630      	mov	r0, r6
 8006f88:	f000 f86c 	bl	8007064 <__malloc_unlock>
 8006f8c:	e7e3      	b.n	8006f56 <_malloc_r+0x1e>
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	1b5b      	subs	r3, r3, r5
 8006f92:	d417      	bmi.n	8006fc4 <_malloc_r+0x8c>
 8006f94:	2b0b      	cmp	r3, #11
 8006f96:	d903      	bls.n	8006fa0 <_malloc_r+0x68>
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	441c      	add	r4, r3
 8006f9c:	6025      	str	r5, [r4, #0]
 8006f9e:	e004      	b.n	8006faa <_malloc_r+0x72>
 8006fa0:	6863      	ldr	r3, [r4, #4]
 8006fa2:	42a2      	cmp	r2, r4
 8006fa4:	bf0c      	ite	eq
 8006fa6:	600b      	streq	r3, [r1, #0]
 8006fa8:	6053      	strne	r3, [r2, #4]
 8006faa:	4630      	mov	r0, r6
 8006fac:	f000 f85a 	bl	8007064 <__malloc_unlock>
 8006fb0:	f104 000b 	add.w	r0, r4, #11
 8006fb4:	1d23      	adds	r3, r4, #4
 8006fb6:	f020 0007 	bic.w	r0, r0, #7
 8006fba:	1ac2      	subs	r2, r0, r3
 8006fbc:	d0cc      	beq.n	8006f58 <_malloc_r+0x20>
 8006fbe:	1a1b      	subs	r3, r3, r0
 8006fc0:	50a3      	str	r3, [r4, r2]
 8006fc2:	e7c9      	b.n	8006f58 <_malloc_r+0x20>
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	6864      	ldr	r4, [r4, #4]
 8006fc8:	e7cc      	b.n	8006f64 <_malloc_r+0x2c>
 8006fca:	1cc4      	adds	r4, r0, #3
 8006fcc:	f024 0403 	bic.w	r4, r4, #3
 8006fd0:	42a0      	cmp	r0, r4
 8006fd2:	d0e3      	beq.n	8006f9c <_malloc_r+0x64>
 8006fd4:	1a21      	subs	r1, r4, r0
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f000 f82e 	bl	8007038 <_sbrk_r>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d1dd      	bne.n	8006f9c <_malloc_r+0x64>
 8006fe0:	e7cf      	b.n	8006f82 <_malloc_r+0x4a>
 8006fe2:	bf00      	nop
 8006fe4:	20013828 	.word	0x20013828
 8006fe8:	2001382c 	.word	0x2001382c

08006fec <_realloc_r>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	4607      	mov	r7, r0
 8006ff0:	4614      	mov	r4, r2
 8006ff2:	460e      	mov	r6, r1
 8006ff4:	b921      	cbnz	r1, 8007000 <_realloc_r+0x14>
 8006ff6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	f7ff bf9c 	b.w	8006f38 <_malloc_r>
 8007000:	b922      	cbnz	r2, 800700c <_realloc_r+0x20>
 8007002:	f7ff ff49 	bl	8006e98 <_free_r>
 8007006:	4625      	mov	r5, r4
 8007008:	4628      	mov	r0, r5
 800700a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800700c:	f000 f830 	bl	8007070 <_malloc_usable_size_r>
 8007010:	42a0      	cmp	r0, r4
 8007012:	d20f      	bcs.n	8007034 <_realloc_r+0x48>
 8007014:	4621      	mov	r1, r4
 8007016:	4638      	mov	r0, r7
 8007018:	f7ff ff8e 	bl	8006f38 <_malloc_r>
 800701c:	4605      	mov	r5, r0
 800701e:	2800      	cmp	r0, #0
 8007020:	d0f2      	beq.n	8007008 <_realloc_r+0x1c>
 8007022:	4631      	mov	r1, r6
 8007024:	4622      	mov	r2, r4
 8007026:	f7ff fbe3 	bl	80067f0 <memcpy>
 800702a:	4631      	mov	r1, r6
 800702c:	4638      	mov	r0, r7
 800702e:	f7ff ff33 	bl	8006e98 <_free_r>
 8007032:	e7e9      	b.n	8007008 <_realloc_r+0x1c>
 8007034:	4635      	mov	r5, r6
 8007036:	e7e7      	b.n	8007008 <_realloc_r+0x1c>

08007038 <_sbrk_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d06      	ldr	r5, [pc, #24]	; (8007054 <_sbrk_r+0x1c>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	f7f9 fee2 	bl	8000e0c <_sbrk>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_sbrk_r+0x1a>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_sbrk_r+0x1a>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	2001393c 	.word	0x2001393c

08007058 <__malloc_lock>:
 8007058:	4801      	ldr	r0, [pc, #4]	; (8007060 <__malloc_lock+0x8>)
 800705a:	f000 b811 	b.w	8007080 <__retarget_lock_acquire_recursive>
 800705e:	bf00      	nop
 8007060:	20013944 	.word	0x20013944

08007064 <__malloc_unlock>:
 8007064:	4801      	ldr	r0, [pc, #4]	; (800706c <__malloc_unlock+0x8>)
 8007066:	f000 b80c 	b.w	8007082 <__retarget_lock_release_recursive>
 800706a:	bf00      	nop
 800706c:	20013944 	.word	0x20013944

08007070 <_malloc_usable_size_r>:
 8007070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007074:	1f18      	subs	r0, r3, #4
 8007076:	2b00      	cmp	r3, #0
 8007078:	bfbc      	itt	lt
 800707a:	580b      	ldrlt	r3, [r1, r0]
 800707c:	18c0      	addlt	r0, r0, r3
 800707e:	4770      	bx	lr

08007080 <__retarget_lock_acquire_recursive>:
 8007080:	4770      	bx	lr

08007082 <__retarget_lock_release_recursive>:
 8007082:	4770      	bx	lr

08007084 <_init>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	bf00      	nop
 8007088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708a:	bc08      	pop	{r3}
 800708c:	469e      	mov	lr, r3
 800708e:	4770      	bx	lr

08007090 <_fini>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	bf00      	nop
 8007094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007096:	bc08      	pop	{r3}
 8007098:	469e      	mov	lr, r3
 800709a:	4770      	bx	lr
